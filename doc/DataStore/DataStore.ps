%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 28 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Helvetica-Bold FMFONTDEFINE
3 0 /Helvetica FMFONTDEFINE
4 0 /Times-Italic FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 1 /Symbol FMFONTDEFINE
7 0 /Courier-Bold FMFONTDEFINE
8 0 /Courier-Oblique FMFONTDEFINE
9 0 /Bookman-Demi FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 756 558 756 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 72 558 72 2 L
0.5 H
2 Z
N
0 30 Q
-0.31 (The Zebra Data Store) 207 664 S
207 587.98 558 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
207 587.98 558 618 R
7 X
0 0 0 1 0 0 0 K
V
207 596.98 513 596.98 2 L
V
0.5 H
2 Z
0 X
N
0 0 612 792 C
0 30 Q
0 X
0 0 0 1 0 0 0 K
-0.31 (Interf) 207 628 S
-0.31 (ace Manual) 271.47 628 S
1 18 Q
(Gary Granger) 207 529.98 T
(J) 207 509.98 T
(onathan Corbet) 215.73 509.98 T
2 10 Q
(National Center f) 207 119.31 T
(or Atmospheric Resear) 286.81 119.31 T
(c) 396.64 119.31 T
(h) 402.1 119.31 T
(Resear) 207 107.31 T
(c) 240.15 107.31 T
(h Data Pr) 245.61 107.31 T
(ogram) 289.31 107.31 T
(Zeb V) 207 95.31 T
(er) 233.73 95.31 T
(sion 4.2 \321 Jan) 243.03 95.31 T
(uar) 312.96 95.31 T
(y 1996) 328.62 95.31 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(Cop) 72 679.98 T
(yright \050C\051 1987-1993 by UCAR) 91.88 679.98 T
(Uni) 72 666.98 T
(v) 89.7 666.98 T
(ersity Corporation for Atmospheric) 95.52 666.98 T
(Research All rights reserv) 72 653.98 T
(ed) 196.79 653.98 T
(No part of this w) 72 627.98 T
(ork co) 153.2 627.98 T
(v) 183.35 627.98 T
(ered by the cop) 189.17 627.98 T
(yrights) 262.69 627.98 T
-0.38 (herein may be reproduced or used in an) 72 614.98 P
-0.38 (y form or) 258.8 614.98 P
(by an) 72 601.98 T
(y means \321 graphic, electronic, or) 98.15 601.98 T
(mechanical, including photocop) 72 588.98 T
(ying, recording,) 225.53 588.98 T
(taping, or information storage and retrie) 72 575.98 T
(v) 263.66 575.98 T
(al) 269.36 575.98 T
(systems \321 without permission of the cop) 72 562.98 T
(yright) 271.21 562.98 T
(o) 72 549.98 T
(wner) 77.7 549.98 T
(.) 101.03 549.98 T
(This softw) 72 523.98 T
(are and an) 122.88 523.98 T
(y accompan) 172.01 523.98 T
(ying written) 229.48 523.98 T
(materials are pro) 72 510.98 T
(vided \322as is\323 without w) 152.46 510.98 T
(arranty) 265 510.98 T
(of an) 72 497.98 T
(y kind. UCAR e) 96.14 497.98 T
(xpressly disclaims all) 173.96 497.98 T
-0.52 (w) 72 484.98 P
-0.52 (arranties of an) 80.54 484.98 P
-0.52 (y kind, either e) 147.97 484.98 P
-0.52 (xpress or implied,) 218.22 484.98 P
(including b) 72 471.98 T
(ut not limited to the implied) 126.1 471.98 T
(w) 72 458.98 T
(arranties of merchantibility and \336tness for a) 80.54 458.98 T
(particular purpose. UCAR does not indemnify) 72 445.98 T
(an) 72 432.98 T
(y infringement of cop) 83.15 432.98 T
(yright, patent, or) 187.34 432.98 T
(trademark through use or modi\336cation of this) 72 419.98 T
(softw) 72 406.98 T
(are. UCAR does not pro) 98.54 406.98 T
(vide maintenance) 214.68 406.98 T
(or updates for its softw) 72 393.98 T
(are.) 182.53 393.98 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(\245 CHAPTER 1 \245) 72 678.65 T
(Introduction to) 207 678.65 T
(the Zebra) 207 662.65 T
(DataStore) 207 646.65 T
(9) 276.99 646.65 T
0 10 Q
(The DataStore) 207 627.32 T
(Daemon) 207 615.32 T
(10) 250.88 615.32 T
(Platforms) 207 597.32 T
(11) 255.89 597.32 T
3 8 Q
(Platf) 207 584.65 T
(or) 222.77 584.65 T
(m Identi\336ers) 230.08 584.65 T
(12) 281.65 584.65 T
0 10 Q
(The Fields T) 207 569.32 T
(able) 257.31 569.32 T
(13) 283.97 569.32 T
3 8 Q
(Declar) 207 556.65 T
(ing Fields) 230.23 556.65 T
(13) 272.46 556.65 T
(Searching f) 207 546.65 T
(or Fields) 247.22 546.65 T
(14) 285.9 546.65 T
(Retr) 207 536.65 T
(ie) 222.23 536.65 T
(ving Field) 228.22 536.65 T
(Inf) 207 528.65 T
(or) 215.66 528.65 T
(mation) 222.97 528.65 T
(15) 254.98 528.65 T
(Rules of Thumb) 207 518.65 T
(15) 271.46 518.65 T
0 10 Q
(Basic T) 207 503.32 T
(ypes) 237.03 503.32 T
(16) 265.36 503.32 T
3 8 Q
(Locations) 207 490.65 T
(17) 249.24 490.65 T
(Altitudes) 207 480.65 T
(17) 245.68 480.65 T
(Scales and Offsets) 207 470.65 T
(18) 282.14 470.65 T
(Regular Gr) 207 460.65 T
(ids) 246.24 460.65 T
(18) 264.46 460.65 T
(Data Organizations) 207 450.65 T
(18) 283.47 450.65 T
0 10 Q
(Using the DataStore) 207 435.32 T
(Interf) 207 423.32 T
(ace) 229.11 423.32 T
(19) 252.43 423.32 T
3 8 Q
(The DataStore Header) 207 410.65 T
(File) 207 402.65 T
(19) 227.89 402.65 T
(Initialization) 207 392.65 T
(19) 256.79 392.65 T
(Compiling and Linking) 207 382.65 T
(21) 293.7 382.65 T
0 10 Q
(Ov) 207 367.32 T
(ervie) 219.07 367.32 T
(w of the Data-) 238.81 367.32 T
(Store Interf) 207 355.32 T
(ace) 252.72 355.32 T
(22) 276.04 355.32 T
0 14 Q
(\245 CHAPTER 2 \245) 72 318.65 T
(DataChunks) 207 318.65 T
(23) 290.22 318.65 T
0 10 Q
(On the Nature of Data) 207 299.32 T
(Chunks) 207 287.32 T
(23) 247.56 287.32 T
(The Object-oriented) 207 269.32 T
(Approach) 207 257.32 T
(24) 256.43 257.32 T
3 8 Q
(Objects) 207 244.65 T
(24) 242.12 244.65 T
(Classes) 207 234.65 T
(24) 243.45 234.65 T
(Wh) 207 224.65 T
(y Data Chunks?) 218.76 224.65 T
(25) 283.67 224.65 T
(DataChunk Classes) 207 214.65 T
(25) 285.69 214.65 T
(Implementation Notes) 207 204.65 T
(27) 292.81 204.65 T
0 10 Q
(General DataChunk) 207 189.32 T
(Routines) 207 177.32 T
(28) 252.56 177.32 T
3 8 Q
(Creating Data Chunks) 207 164.65 T
(28) 293.7 164.65 T
(Destro) 207 154.65 T
(ying Data) 230.32 154.65 T
(Chunks) 207 146.65 T
(29) 242.12 146.65 T
(Deb) 207 136.65 T
(ugging Data) 221.51 136.65 T
(Chunks) 207 128.65 T
(29) 242.12 128.65 T
(Class Inf) 207 118.65 T
(or) 237.88 118.65 T
(mation) 245.19 118.65 T
(29) 277.2 118.65 T
0 10 Q
(The Ra) 207 103.32 T
(w DataChunk) 236.01 103.32 T
(Class) 459 681.32 T
(30) 490.67 681.32 T
3 8 Q
(Pub) 459 668.65 T
(lic Access) 473.07 668.65 T
(30) 516.63 668.65 T
(Pr) 459 658.65 T
(iv) 467.12 658.65 T
(ate Access) 472.7 658.65 T
(30) 519.82 658.65 T
0 10 Q
(The T) 459 643.32 T
(ransparent Data-) 482.81 643.32 T
(Chunk Class) 459 631.32 T
(31) 519.84 631.32 T
3 8 Q
-0.11 (Samples in the T) 459 618.65 P
-0.11 (r) 517.73 618.65 P
-0.11 (ansparent) 520.31 618.65 P
(Class) 459 610.65 T
(31) 487 610.65 T
(Sample Times) 459 600.65 T
(33) 518.12 600.65 T
(Sample Locations) 459 590.65 T
(34) 530.58 590.65 T
(Sample Altitude Units) 459 580.65 T
(35) 543.47 580.65 T
(Samples F) 459 570.65 T
(rom Multiple) 496.87 570.65 T
(Platf) 459 562.65 T
(or) 474.77 562.65 T
(ms) 482.08 562.65 T
(36) 500.74 562.65 T
0 14 Q
(\245 CHAPTER 3 \245) 324 528.65 T
(The Location) 459 528.65 T
-1.83 (Classes: Location) 459 512.65 P
(and) 459 496.65 T
(Boundary) 459 480.65 T
(39) 528.22 480.65 T
0 10 Q
(The Boundary Data-) 459 461.32 T
(Chunk Class) 459 449.32 T
(39) 519.84 449.32 T
(The Location Data-) 459 431.32 T
(Chunk Class) 459 419.32 T
(40) 519.84 419.32 T
0 14 Q
(\245 CHAPTER 4 \245) 324 382.65 T
(The Simple Me-) 459 382.65 T
(teorological) 459 366.65 T
(Classes: MetDa-) 459 350.65 T
(ta and) 459 334.65 T
(Scalar) 459 318.65 T
(41) 507.99 318.65 T
0 10 Q
(The Meteorological) 459 299.32 T
(DataChunk Class) 459 287.32 T
(41) 538.72 287.32 T
3 8 Q
(Meteorological Data) 459 274.65 T
(Setup) 459 266.65 T
(42) 487.9 266.65 T
(Stor) 459 256.65 T
(ing and Retr) 473.79 256.65 T
(ie) 517.49 256.65 T
(ving) 523.47 256.65 T
(Data) 459 248.65 T
(43) 483.9 248.65 T
(Bad Data Flags) 459 238.65 T
(44) 522.14 238.65 T
0 10 Q
(The Scalar DataChunk) 459 223.32 T
(Class) 459 211.32 T
(45) 490.67 211.32 T
0 14 Q
(\245 CHAPTER 5 \245) 324 174.65 T
(The Grid Class-) 459 174.65 T
(es: RGrid, IR-) 459 158.65 T
(Grid, and) 459 142.65 T
(Image) 459 126.65 T
(49) 507.99 126.65 T
0 10 Q
(The Irre) 459 107.32 T
(gular Grid Data-) 491.33 107.32 T
(Chunk Class) 459 95.32 T
(49) 519.84 95.32 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 8 Q
0 X
0 0 0 1 0 0 0 K
(Initialization of Irregular) 189 682.65 T
(Gr) 189 674.65 T
(id Data) 198.01 674.65 T
(50) 231.35 674.65 T
(Stor) 189 664.65 T
(ing and Retr) 203.79 664.65 T
(ie) 247.49 664.65 T
(ving Ir-) 253.47 664.65 T
(regular Gr) 189 656.65 T
(id Data) 225.13 656.65 T
(51) 258.47 656.65 T
0 10 Q
(The Re) 189 641.32 T
(gular Grid Data-) 218.01 641.32 T
(Chunk Class) 189 629.32 T
(51) 249.84 629.32 T
(The Image DataChunk) 189 611.32 T
(Class) 189 599.32 T
(53) 220.67 599.32 T
3 8 Q
(Setting Up) 189 586.65 T
(53) 234.35 586.65 T
(Stor) 189 576.65 T
(ing) 203.79 576.65 T
(53) 222.46 576.65 T
(Retr) 189 566.65 T
(ie) 204.23 566.65 T
(ving) 210.22 566.65 T
(54) 232.89 566.65 T
0 14 Q
(\245 CHAPTER 6 \245) 54 532.65 T
(The N-space) 189 532.65 T
(Class) 189 516.65 T
(55) 233.34 516.65 T
3 8 Q
(Changes in Zebr) 189 502.65 T
(a 4.1) 248.06 502.65 T
(56) 273.85 502.65 T
(Changes in Zebr) 189 492.65 T
(a 4.0) 248.06 492.65 T
(56) 273.85 492.65 T
0 10 Q
(General Ov) 189 477.32 T
(ervie) 235.22 477.32 T
(w) 254.96 477.32 T
(57) 272.18 477.32 T
3 8 Q
(Dimensions) 189 464.65 T
(57) 238.78 464.65 T
(Coordinate V) 189 454.65 T
(ar) 235.13 454.65 T
(iab) 242.36 454.65 T
(les) 252.87 454.65 T
(57) 271.1 454.65 T
(Static Fields) 189 444.65 T
(58) 240.57 444.65 T
0 10 Q
(The N-space) 189 429.32 T
(Interf) 189 417.32 T
(ace) 211.11 417.32 T
(59) 234.43 417.32 T
3 8 Q
(Guidelines) 189 404.65 T
(59) 234.79 404.65 T
(Header File) 189 394.65 T
(Declar) 189 386.65 T
(ations) 212.03 386.65 T
(61) 241.38 386.65 T
(De\336nition) 189 376.65 T
(61) 230.34 376.65 T
(Rede\336nition) 189 366.65 T
(64) 239.24 366.65 T
(Inquir) 189 356.65 T
(y) 209.25 356.65 T
(65) 221.25 356.65 T
(Adding Data) 189 346.65 T
(68) 241.02 346.65 T
(Extr) 189 336.65 T
(acting Data) 203.14 336.65 T
(69) 251.61 336.65 T
0 10 Q
(Storage in netCDF) 189 321.32 T
(Files) 189 309.32 T
(70) 218.45 309.32 T
(Examples) 189 291.32 T
(71) 238.44 291.32 T
3 8 Q
(A Dynamic Field Ov) 189 278.65 T
(er a) 259.48 278.65 T
(Single Dimension) 189 270.65 T
(71) 259.24 270.65 T
(De\336ning a Coordinate) 189 260.65 T
(V) 189 252.65 T
(ar) 193.78 252.65 T
(iab) 201.01 252.65 T
(le) 211.52 252.65 T
(72) 225.74 252.65 T
(De\336ning a Static Field) 189 242.65 T
(75) 274.81 242.65 T
(Mixing Static and Sampled) 189 232.65 T
(Data) 189 224.65 T
(76) 213.9 224.65 T
(De\336ning Dimensions Ex-) 189 214.65 T
(plicitly) 189 206.65 T
(, and Adding) 209.98 206.65 T
(Data) 189 198.65 T
(77) 213.9 198.65 T
-0.14 (Zero-Dimensional Data) 189 188.65 P
-0.14 (79) 279.1 188.65 P
(Going f) 189 178.65 T
(or Comple) 214.55 178.65 T
(xity) 251.21 178.65 T
(80) 271.21 178.65 T
0 10 Q
(Internals and) 189 163.32 T
(Implementation) 189 151.32 T
(84) 262.33 151.32 T
(Comments) 189 133.32 T
(85) 242.34 133.32 T
3 8 Q
(Hyperslabs) 189 120.65 T
(85) 237.01 120.65 T
(Static Data Which Change) 189 110.65 T
(Betw) 189 102.65 T
(een Files) 206.7 102.65 T
(85) 247.16 102.65 T
0 10 Q
(Quick Reference) 441 681.32 T
(85) 518.47 681.32 T
0 14 Q
(\245 CHAPTER 7 \245) 306 644.65 T
(DataChunk) 441 644.65 T
(Elements) 441 628.65 T
(87) 507.11 628.65 T
0 10 Q
(The Basics) 441 609.32 T
(87) 495.16 609.32 T
3 8 Q
(The Fundamental) 441 596.65 T
(T) 441 588.65 T
(ypes) 444.93 588.65 T
(87) 469.82 588.65 T
0 10 Q
(Element Utilities) 441 573.32 T
(89) 519.06 573.32 T
3 8 Q
(Macros) 441 560.65 T
(89) 475.22 560.65 T
0 10 Q
(DataChunk Field) 441 545.32 T
(T) 441 533.32 T
(ypes) 446.31 533.32 T
(90) 474.64 533.32 T
3 8 Q
(Setting Field T) 441 520.65 T
(ypes) 491.62 520.65 T
(90) 516.51 520.65 T
(Inquir) 441 510.65 T
(ing About Field) 461.13 510.65 T
(T) 441 502.65 T
(ypes) 444.93 502.65 T
(92) 469.82 502.65 T
(Stor) 441 492.65 T
(ing T) 455.79 492.65 T
(yped Field) 472.62 492.65 T
(Data) 441 484.65 T
(92) 465.9 484.65 T
(Special N-Space) 441 474.65 T
(Consider) 441 466.65 T
(ations) 472.93 466.65 T
(92) 502.27 466.65 T
0 10 Q
(Example: Creating an) 441 451.32 T
(NSpace Chunk with) 441 439.32 T
(Multiple Field) 441 427.32 T
(T) 441 415.32 T
(ypes) 446.31 415.32 T
(93) 474.64 415.32 T
3 8 Q
(Some Code) 441 402.65 T
(93) 491.24 402.65 T
(Some Output) 441 392.65 T
(95) 496.14 392.65 T
(Some Comments) 441 382.65 T
(96) 510.79 382.65 T
0 14 Q
(\245 CHAPTER 8 \245) 306 348.65 T
(DataChunk) 441 348.65 T
(Attrib) 441 332.65 T
(utes) 474.17 332.65 T
(99) 510.72 332.65 T
0 10 Q
(In W) 441 313.32 T
(ith the Ne) 460.87 313.32 T
(w) 500.06 313.32 T
(99) 517.28 313.32 T
(Ov) 441 295.32 T
(ervie) 453.07 295.32 T
(w) 472.81 295.32 T
(100) 490.03 295.32 T
3 8 Q
(K) 441 282.65 T
(e) 446.02 282.65 T
(ys and V) 450.3 282.65 T
(alues) 480.87 282.65 T
(100) 507.99 282.65 T
(Method Names) 441 272.65 T
(101) 503.24 272.65 T
(Gener) 441 262.65 T
(al Notes about the) 463.15 262.65 T
(Interf) 441 254.65 T
(ace) 458.99 254.65 T
(102) 479.89 254.65 T
0 10 Q
(Global Attrib) 441 239.32 T
(utes) 494.41 239.32 T
(102) 520.52 239.32 T
3 8 Q
(Setting and Getting) 441 226.65 T
(102) 517.49 226.65 T
(Counting) 441 216.65 T
(104) 481.02 216.65 T
(Remo) 441 206.65 T
(ving) 462.22 206.65 T
(104) 484.89 206.65 T
(Processing b) 441 196.65 T
(y K) 487.08 196.65 T
(e) 498.32 196.65 T
(y) 502.61 196.65 T
(105) 514.61 196.65 T
0 10 Q
(Sample Attrib) 441 181.32 T
(utes) 497.19 181.32 T
(107) 523.3 181.32 T
3 8 Q
(Setting and Getting) 441 168.65 T
(108) 517.49 168.65 T
(Counting) 441 158.65 T
(109) 481.02 158.65 T
(Remo) 441 148.65 T
(ving) 462.22 148.65 T
(109) 484.89 148.65 T
(Processing By K) 441 138.65 T
(e) 499.37 138.65 T
(y) 503.66 138.65 T
(110) 515.66 138.65 T
0 10 Q
(Field Attrib) 441 123.32 T
(utes) 487.75 123.32 T
(111) 513.86 123.32 T
3 8 Q
(Setting and Getting) 441 110.65 T
(112) 517.49 110.65 T
(Counting) 441 100.65 T
(114) 481.02 100.65 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 8 Q
0 X
0 0 0 1 0 0 0 K
(Remo) 207 682.65 T
(ving) 228.22 682.65 T
(114) 250.89 682.65 T
(Processing b) 207 672.65 T
(y K) 253.08 672.65 T
(e) 264.32 672.65 T
(y) 268.61 672.65 T
(114) 280.61 672.65 T
0 10 Q
(Examples) 207 657.32 T
(115) 256.44 657.32 T
(In the W) 207 639.32 T
(orks) 241.19 639.32 T
(119) 268.41 639.32 T
0 14 Q
(\245 CHAPTER 9 \245) 72 602.65 T
(The DataStore) 207 602.65 T
(Interf) 207 586.65 T
(ace) 237.95 586.65 T
(121) 270.6 586.65 T
0 10 Q
(Platform Queries) 207 567.32 T
(121) 285.6 567.32 T
3 8 Q
(Simple Inf) 207 554.65 T
(or) 242.33 554.65 T
(mation) 249.64 554.65 T
(122) 281.65 554.65 T
(Platf) 207 544.65 T
(or) 222.77 544.65 T
(m Attr) 230.08 544.65 T
(ib) 251.54 544.65 T
(utes) 257.6 544.65 T
(122) 280.72 544.65 T
(Platf) 207 534.65 T
(or) 222.77 534.65 T
(m Searches) 230.08 534.65 T
(123) 280.76 534.65 T
0 10 Q
(Querying A) 207 519.32 T
(v) 253.75 519.32 T
(ailable) 258.5 519.32 T
(Data) 207 507.32 T
(124) 235.88 507.32 T
3 8 Q
(A) 207 494.65 T
(v) 212.02 494.65 T
(ailab) 215.82 494.65 T
(le Times) 232.55 494.65 T
(125) 270.78 494.65 T
(A) 207 484.65 T
(v) 212.02 484.65 T
(ailab) 215.82 484.65 T
(le F) 232.55 484.65 T
(orecasts) 245.65 484.65 T
(126) 283.88 484.65 T
(A) 207 474.65 T
(v) 212.02 474.65 T
(ailab) 215.82 474.65 T
(le Altitudes) 232.55 474.65 T
(127) 279.68 474.65 T
(A) 207 464.65 T
(v) 212.02 464.65 T
(ailab) 215.82 464.65 T
(le Fields) 232.55 464.65 T
(128) 270.34 464.65 T
0 10 Q
(DataStore Details) 207 449.32 T
(129) 287.82 449.32 T
3 8 Q
(The Detail Str) 207 436.65 T
(ucture) 256.02 436.65 T
(129) 286.26 436.65 T
(Recogniz) 207 426.65 T
(ed Details) 240.22 426.65 T
(130) 283.79 426.65 T
(Example) 207 416.65 T
(132) 246.12 416.65 T
0 10 Q
(Fetching Data) 207 401.32 T
(133) 273.38 401.32 T
(Application) 207 383.32 T
(Noti\336cations) 207 371.32 T
(134) 268.67 371.32 T
(Storing Data) 207 353.32 T
(135) 267.83 353.32 T
3 8 Q
(Sample b) 207 340.65 T
(y Sample) 240.63 340.65 T
(135) 281.98 340.65 T
(Bloc) 207 330.65 T
(ks) 222.4 330.65 T
(136) 238.4 330.65 T
0 10 Q
(Deleting Data) 207 315.32 T
(137) 272.82 315.32 T
0 14 Q
(\245 CHAPTER 10 \245) 72 278.65 T
(Data File) 207 278.65 T
(Access) 207 262.65 T
(139) 260.65 262.65 T
0 10 Q
(Field Attrib) 207 243.32 T
(utes and) 253.75 243.32 T
(Data Files) 207 231.32 T
(139) 257.83 231.32 T
3 8 Q
(Bad V) 207 218.65 T
(alues) 228.23 218.65 T
(139) 255.35 218.65 T
(Fields T) 207 208.65 T
(ab) 234.49 208.65 T
(le) 243.22 208.65 T
(Attr) 207 200.65 T
(ib) 219.57 200.65 T
(utes) 225.63 200.65 T
(140) 248.75 200.65 T
0 14 Q
(\245 CHAPTER 11 \245) 72 166.65 T
(The Ingest) 207 166.65 T
(Routines) 207 150.65 T
(141) 270.78 150.65 T
0 10 Q
(Using the) 207 131.32 T
(Interf) 207 119.32 T
(ace) 229.11 119.32 T
(141) 252.43 119.32 T
3 8 Q
(P) 207 106.65 T
(arsing Options) 212.02 106.65 T
(142) 271.59 106.65 T
(Initializing the) 207 96.65 T
(Interf) 459 682.65 T
(ace) 476.99 682.65 T
(144) 497.89 682.65 T
(Logging Messages) 459 672.65 T
(144) 534.14 672.65 T
(DataStore Interf) 459 662.65 T
(ace) 515.23 662.65 T
(145) 536.13 662.65 T
0 10 Q
(The Ingest) 459 647.32 T
(Interf) 459 635.32 T
(ace) 481.11 635.32 T
(145) 504.43 635.32 T
3 8 Q
(De) 459 622.65 T
(v) 468.98 622.65 T
(elopment Log) 472.78 622.65 T
(Messages) 459 614.65 T
(145) 503.46 614.65 T
(Pub) 459 604.65 T
(lic V) 473.07 604.65 T
(ar) 487.62 604.65 T
(iab) 494.86 604.65 T
(les) 505.37 604.65 T
(145) 523.59 604.65 T
(Pub) 459 594.65 T
(lic Macros) 473.07 594.65 T
(146) 517.07 594.65 T
0 10 Q
(Example) 459 579.32 T
(147) 504.55 579.32 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (7) 552.44 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 24 Q
-0.48 (Pref) 126 677 S
-0.48 (ace) 163.82 677 S
0 12 Q
1.63 (This manual co) 126 424 P
1.63 (v) 203.08 424 P
1.63 (ers the application interf) 208.9 424 P
1.63 (ace to the Zebra DataStore library) 330.66 424 P
1.63 (,) 501 424 P
2.23 (v) 126 410 P
2.23 (ersion 4.2. Much ef) 131.82 410 P
2.23 (fort has been e) 231.85 410 P
2.23 (xpended trying to mak) 308.66 410 P
2.23 (e this document) 423.55 410 P
2.75 (accurate, correct, and complete. Ho) 126 396 P
2.75 (we) 306.98 396 P
2.75 (v) 320.68 396 P
2.75 (er) 326.5 396 P
2.75 (, as nothing can e) 335.34 396 P
2.75 (v) 429.71 396 P
2.75 (er be perfect,) 435.53 396 P
0.6 (please report whate) 126 382 P
0.6 (v) 220.19 382 P
0.6 (er imperfections you disco) 226.01 382 P
0.6 (v) 355.27 382 P
0.6 (er to) 361.09 382 P
4 F
0.6 (gr) 386.94 382 P
0.6 (ang) 397.43 382 P
0.6 (er@ncar) 415.31 382 P
0.6 (.ucar) 457.01 382 P
0.6 (.edu) 480.67 382 P
0 F
0.6 (.) 501 382 P
2.48 (Also, please contact me at that same address if you need clari\336cations or) 126 368 P
1.1 (details on an) 126 354 P
1.1 (ything in this manual. Man) 188.69 354 P
1.1 (y e) 322.6 354 P
1.1 (xamples ha) 337.85 354 P
1.1 (v) 393.04 354 P
1.1 (e been added, b) 398.86 354 P
1.1 (ut we) 476.57 354 P
(welcome suggestions for additional e) 126 340 T
(xamples.) 304.46 340 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(8) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (9) 552.44 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 1 \245) 126 677 S
0 24 Q
-0.48 (Introduction to the Zebra) 252 677 S
-0.48 (DataStore) 252 647 S
0 12 Q
0.3 (The term \324DataStore\325 refers to se) 126 424 P
0.3 (v) 285.48 424 P
0.3 (eral parts of the whole Zebra system, all the) 291.3 424 P
0.98 (parts which manage, track, and manipulate data, both between processes and) 126 410 P
0.03 (within an indi) 126 396 P
0.03 (vidual process. At the heart of the DataStore lies a Zebra process) 192.43 396 P
0.91 (called the DataStore) 126 382 P
4 F
0.91 (daemon) 229.03 382 P
0 F
0.91 (. The daemon essentially manages data \336les and) 267.02 382 P
1.91 (pro) 126 368 P
1.91 (vides information about the a) 141.82 368 P
1.91 (v) 289.87 368 P
1.91 (ailability and location of data. Other pro-) 295.57 368 P
4.28 (cesses, called DataStore) 126 354 P
4 F
4.28 (clients) 257.48 354 P
0 F
4.28 (, e) 288.81 354 P
4.28 (xchange information with the daemon) 304.24 354 P
-0.16 (through the DataStore) 126 340 P
4 F
-0.16 (application interface) 234.49 340 P
0 F
-0.16 (. The application interf) 334.66 340 P
-0.16 (ace pro) 444.03 340 P
-0.16 (vides) 478.67 340 P
-0.24 (con) 126 326 P
-0.24 (v) 142.85 326 P
-0.24 (enient routines which tak) 148.67 326 P
-0.24 (e care of the details of e) 268.82 326 P
-0.24 (xchanging messages with) 381.83 326 P
-0.02 (the daemon through the Zebra message manager) 126 312 P
-0.02 (. [See the) 357.82 312 P
4 F
-0.02 (Zebr) 405.74 312 P
-0.02 (a Libr) 428.23 312 P
-0.02 (ary Inter-) 457.7 312 P
1.5 (face Manual) 126 298 P
0 F
1.5 (.] This manual describes the application interf) 187.83 298 P
1.5 (ace for DataStore) 417.03 298 P
0.91 (clients. Other manuals, such as the) 126 284 P
4 F
0.91 (Zebr) 300.74 284 P
0.91 (a Advanced User\325) 323.23 284 P
0.91 (s Manual) 411.2 284 P
0 F
0.91 (, describe) 457.11 284 P
0.27 (the details of operating the DataStore daemon itself. Ho) 126 270 P
0.27 (we) 395.5 270 P
0.27 (v) 409.19 270 P
0.27 (er) 415.01 270 P
0.27 (, the \336rst section) 423.85 270 P
-0.05 (of this chapter does contain a brief introduction to the daemon to assist the dis-) 126 256 P
1.98 (cussion of the application interf) 126 242 P
1.98 (ace. The follo) 285.77 242 P
1.98 (wing sections introduce some) 355.74 242 P
0.23 (basic data types and structures which the interf) 126 228 P
0.23 (ace uses to reference DataStore) 352.47 228 P
2.35 (objects and information. Lastly) 126 214 P
2.35 (, the end of the chapter describes the basic) 282.26 214 P
(requirements for initializing and using the interf) 126 200 T
(ace.) 356.52 200 T
4.72 (The follo) 126 174 P
4.72 (wing chapters co) 174.75 174 P
4.72 (v) 265.33 174 P
4.72 (er v) 271.15 174 P
4.72 (arious areas of the DataStore interf) 293.9 174 P
4.72 (ace.) 485.02 174 P
2.11 (Chapter) 126 160 P
2.11 (2 introduces DataChunks, which applications use to e) 166.99 160 P
2.11 (xchange data) 438.91 160 P
0.96 (with the DataStore application interf) 126 146 P
0.96 (ace. Chapter) 305.04 146 P
0.96 (9 details the interf) 368.98 146 P
0.96 (ace func-) 458.73 146 P
0.03 (tions for actually storing and reading DataChunks to and from data \336les. Other) 126 132 P
-0.23 (chapters co) 126 118 P
-0.23 (v) 179.9 118 P
-0.23 (er the DataStore\325) 185.72 118 P
-0.23 (s data \336le access \050DF) 266.56 118 P
-0.23 (A\051 module, DataChunk opti-) 366.71 118 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Intr) 108 736.18 T
(oduction to the Zebra DataStore) 122.32 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(10) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.46 (mization issues, the ingest module utilities, and some notes on internal imple-) 108 678.02 P
(mentations.) 108 664.02 T
-0.2 (The DataStore application interf) 108 638.02 P
-0.2 (ace resides in the Zebra DataStore library) 262.25 638.02 P
-0.2 (, usu-) 459.54 638.02 P
1.77 (ally named) 108 624.02 P
5 F
4.24 (libZebDS.a.) 167.53 624.02 P
0 F
1.77 ( Man) 246.73 624.02 P
1.77 (y of the functions in the DataStore library) 273.31 624.02 P
0.08 (rely on the Zebra library) 108 610.02 P
0.08 (,) 224.84 610.02 P
5 F
0.19 (libZeb.a) 230.92 610.02 P
0 F
0.08 (. An) 288.52 610.02 P
0.08 (y application which references Data-) 309.08 610.02 P
0.5 (Store interf) 108 596.02 P
0.5 (ace functions must link with both) 162.71 596.02 P
5 F
1.21 (libZebDS.a) 329.06 596.02 P
0 F
0.5 ( and) 401.06 596.02 P
5 F
1.21 (libZeb.a) 425.4 596.02 P
0 F
0.5 (,) 483 596.02 P
0.71 (in that order) 108 582.02 P
0.71 (. Most of the information in this manual requires f) 167.41 582.02 P
0.71 (amiliarity with) 414.29 582.02 P
0.52 (the time and e) 108 568.02 P
0.52 (v) 176.92 568.02 P
0.52 (ent-logging interf) 182.74 568.02 P
0.52 (aces in the Zebra library) 267.47 568.02 P
0.52 (, as well as the basic) 385.41 568.02 P
2.73 (grid, scale, and altitude types. Much of the necessary information can be) 108 554.02 P
1.62 (inferred from this manual, b) 108 540.02 P
1.62 (ut the curious or v) 249.23 540.02 P
1.62 (ery thorough can consult the) 342.86 540.02 P
4 F
(Zebr) 108 526.02 T
(a Libr) 130.49 526.02 T
(ary) 159.98 526.02 T
0 F
( manual.) 175.98 526.02 T
54 483.02 540 485.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 483.02 540 485.02 R
7 X
0 0 0 1 0 0 0 K
V
54 484.02 99 484.02 2 L
0.5 H
2 Z
0 X
N
108 484.02 540 484.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(1.1) 82.32 489.02 T
(The DataStore Daemon) 108 489.02 T
0 F
1.4 (This section gi) 108 465.02 P
1.4 (v) 181.16 465.02 P
1.4 (es a quick o) 186.98 465.02 P
1.4 (v) 247.98 465.02 P
1.4 (ervie) 253.8 465.02 P
1.4 (w of the daemon and ho) 277.49 465.02 P
1.4 (w it operates. An) 399.82 465.02 P
-0.09 (a) 108 451.02 P
-0.09 (w) 113.15 451.02 P
-0.09 (areness of ho) 121.69 451.02 P
-0.09 (w the daemon functions will promote a better understanding of) 184.52 451.02 P
(the application interf) 108 437.02 T
(ace.) 207.86 437.02 T
-0.29 (Essentially) 108 411.02 P
-0.29 (, the DataStore daemon k) 159.89 411.02 P
-0.29 (eeps track of data. The data are cate) 280.27 411.02 P
-0.29 (gorized) 450.01 411.02 P
-0.27 (by) 108 397.02 P
4 F
-0.27 (platform) 122.73 397.02 P
0 F
-0.27 (, usually on the basis of the ph) 164.07 397.02 P
-0.27 (ysical instrument or observ) 308.08 397.02 P
-0.27 (ation plat-) 437.28 397.02 P
-0.18 (form which mak) 108 383.02 P
-0.18 (es the measurements or deri) 186.84 383.02 P
-0.18 (v) 319.79 383.02 P
-0.18 (es the data. Each platform dataset) 325.61 383.02 P
2.04 (comprises data \336les separated according to the times of the data contained) 108 369.02 P
-0.27 (within the \336les. W) 108 355.02 P
-0.27 (ithin a platform dataset, each data \336le co) 195.38 355.02 P
-0.27 (v) 387.95 355.02 P
-0.27 (ers a period of time) 393.77 355.02 P
0.07 (which does not intersect the periods co) 108 341.02 P
0.07 (v) 294.86 341.02 P
0.07 (ered by an) 300.68 341.02 P
0.07 (y of the other data \336les. The) 350.62 341.02 P
0.15 (impetus of this is that a coordinate in time maps to a speci\336c data \336le. In other) 108 327.02 P
(w) 108 313.02 T
(ords, the mapping) 116.54 313.02 T
(is a function.) 108 261.02 T
0.55 (The data \336le itself is simply a collection of) 108 235.02 P
4 F
0.55 (samples) 321.29 235.02 P
0 F
0.55 (, where a sample refers to) 359.95 235.02 P
0.86 (the data v) 108 221.02 P
0.86 (alues collected at a single time. A sample contains data for each of) 156.08 221.02 P
0.14 (se) 108 207.02 P
0.14 (v) 117.7 207.02 P
0.14 (eral named) 123.52 207.02 P
4 F
0.14 (\336elds) 179.78 207.02 P
0 F
0.14 (. The daemon k) 205.12 207.02 P
0.14 (eeps track of all of the platforms, all of the) 280.08 207.02 P
-0.04 (data \336les in each platform, the time period co) 108 193.02 P
-0.04 (v) 325.15 193.02 P
-0.04 (ered by the data in each \336le, and) 330.97 193.02 P
1.51 (the or) 108 179.02 P
1.51 (g) 136.96 179.02 P
1.51 (anization of each platform\325) 142.9 179.02 P
1.51 (s data. The data or) 277.07 179.02 P
1.51 (g) 371.22 179.02 P
1.51 (anization refers to the) 377.16 179.02 P
0.1 (shape and type of the data, such as scalar \050time series\051, gridded, or image data.) 108 165.02 P
0.46 (The daemon mak) 108 151.02 P
0.46 (es all of this information a) 192.12 151.02 P
0.46 (v) 320.52 151.02 P
0.46 (ailable to its clients, and it medi-) 326.22 151.02 P
0.13 (ates the access, control, and changes of both this information and the data \336les) 108 137.02 P
(themselv) 108 123.02 T
(es.) 151.15 123.02 T
108 282.52 234.54 295.52 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
0 X
0 0 0 1 0 0 0 K
(p) 115.08 287.02 T
(l) 120.67 287.02 T
(a) 124.04 287.02 T
(t) 129.63 287.02 T
(f) 133 287.02 T
(o) 136.37 287.02 T
(r) 141.96 287.02 T
(m) 146.44 287.02 T
(t) 158.66 287.02 T
(i) 162.03 287.02 T
(m) 165.4 287.02 T
(e) 173.21 287.02 T
6 F
(,) 153.66 287.02 T
(\050) 110.29 287.02 T
(\051) 178.36 287.02 T
4 F
(d) 196.56 287.02 T
(a) 202.15 287.02 T
(t) 207.74 287.02 T
(a) 211.1 287.02 T
(f) 216.7 287.02 T
(i) 220.07 287.02 T
(l) 223.43 287.02 T
(e) 226.8 287.02 T
6 F
(\336) 184.19 287.02 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Platf) 126 736.18 T
(orms) 145.32 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (11) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.4 (In the current design and implementation of the Zebra DataStore, \336elds and) 126 678.02 P
0.29 (platforms are completely independent. In other w) 126 664.02 P
0.29 (ords, a \336eld is not associated) 364.57 664.02 P
0.94 (with a particular platform, nor is a platform required to pro) 126 650.02 P
0.94 (vide or prohibit a) 418.18 650.02 P
0.57 (particular \336eld. The \322data space\323 is meant to ha) 126 636.02 P
0.57 (v) 358.6 636.02 P
0.57 (e three dimensions for locat-) 364.42 636.02 P
0.28 (ing data: platform, \336eld, and time. A coordinate triplet of platform name, \336eld) 126 622.02 P
0.4 (name, and time uniquely maps an) 126 608.02 P
0.4 (y location in the data space. The question of) 289.15 608.02 P
0.07 (whether a \336eld should be platform-dependent or platform-independent is ar) 126 594.02 P
0.07 (gu-) 488 594.02 P
(able either w) 126 580.02 T
(ay) 187.86 580.02 T
(. The Zebra design tak) 198.41 580.02 T
(es the platform-independent approach.) 305.93 580.02 T
1.76 (An important distinction must be made about ho) 126 554.02 P
1.76 (w the daemon controls the) 370.33 554.02 P
1.59 (\337o) 126 540.02 P
1.59 (w of data. The daemon and its clients do not actually e) 138.37 540.02 P
1.59 (xchange an) 417.69 540.02 P
1.59 (y data) 473.41 540.02 P
3.84 (through the application interf) 126 526.02 P
3.84 (ace or through interprocess communication.) 277.7 526.02 P
0.38 ([There are other a) 126 512.02 P
0.38 (v) 212.53 512.02 P
0.38 (enues for that, such as the) 218.35 512.02 P
5 F
0.92 (NetXfr) 347.61 512.02 P
0 F
0.38 ( client, discussed in the) 390.81 512.02 P
4 F
1.08 (Guide to Realtime Zebr) 126 498.02 P
1.08 (a.) 242.05 498.02 P
0 F
1.08 (] Instead, an application recei) 251.05 498.02 P
1.08 (v) 396.7 498.02 P
1.08 (es information about) 402.52 498.02 P
0.22 (the) 126 484.02 P
4 F
0.22 (location) 143.88 484.02 P
0 F
0.22 ( of the data \336le for a particular period of time, then the application) 183.22 484.02 P
1.7 (itself writes or reads the data \336le. All of this happens within the DataStore) 126 470.02 P
-0.27 (application interf) 126 456.02 P
-0.27 (ace, without an) 207.93 456.02 P
-0.27 (y special consideration on the part of the appli-) 280.2 456.02 P
1.72 (cation. The interf) 126 442.02 P
1.72 (ace encapsulates the handling of the data according to the) 212.29 442.02 P
(platform\325) 126 428.02 T
(s \336le type and data structure.) 170.66 428.02 T
72 385.02 558 387.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 385.02 558 387.02 R
7 X
0 0 0 1 0 0 0 K
V
72 386.02 117 386.02 2 L
0.5 H
2 Z
0 X
N
126 386.02 558 386.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(1.2) 100.32 391.02 T
(Platf) 126 391.02 T
(orms) 151.76 391.02 T
0 F
0.02 (Platforms ha) 126 367.02 P
0.02 (v) 186.77 367.02 P
0.02 (e names, such as \322mesonet\323 or \322n312d\323. These names are con) 192.59 367.02 P
0.02 (v) 488.86 367.02 P
0.02 (e-) 494.68 367.02 P
0.6 (nient for homo sapiens using Zebra, b) 126 353.02 P
0.6 (ut the) 311 353.02 P
0.6 (y are unwieldy internally) 338.42 353.02 P
0.6 (. Instead,) 459.74 353.02 P
2.73 (the application interf) 126 339.02 P
2.73 (ace and the daemon reference platforms internally as) 231.32 339.02 P
0.19 (objects of type) 126 325.02 P
5 F
0.46 (PlatformId) 200.23 325.02 P
0 F
0.19 (. The data store pro) 272.23 325.02 P
0.19 (vides routines for translating) 365.78 325.02 P
0.99 (literal names to) 126 311.02 P
5 F
2.38 (PlatformId) 205.96 311.02 P
0 F
0.99 (\325) 277.96 311.02 P
0.99 (s and vice v) 281.3 311.02 P
0.99 (ersa. Only the DataStore daemon) 341.08 311.02 P
1.05 (k) 126 297.02 P
1.05 (eeps track of platform names and identi\336ers. The daemon con\336guration \336le) 131.88 297.02 P
0.33 (\050usually called) 126 283.02 P
5 F
0.78 (ds.config) 199.97 283.02 P
0 F
0.33 (\051 de\336nes each of the platforms which the daemon) 264.77 283.02 P
1.41 (will maintain and service. A platform de\336nition speci\336es information which) 126 269.02 P
1.26 (the daemon must kno) 126 255.02 P
1.26 (w and must pro) 232.48 255.02 P
1.26 (vide to DataStore clients. F) 310.41 255.02 P
1.26 (or e) 446.27 255.02 P
1.26 (xample,) 465.67 255.02 P
(here is a simple platform de\336nition belo) 126 241.02 T
(w) 317.69 241.02 T
(.) 325.57 241.02 T
5 9 Q
(!) 144 218.02 T
(! GMS satellite data) 144 207.02 T
(!) 144 196.02 T
(class Satellite) 144 185.02 T
(organization) 172.8 174.02 T
(image) 259.2 174.02 T
(filetype) 172.8 163.02 T
(raster) 259.2 163.02 T
(maxsamples) 172.8 152.02 T
(50) 259.2 152.02 T
(endclass) 144 141.02 T
(instance Satellite gms) 144 119.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Intr) 108 736.18 T
(oduction to the Zebra DataStore) 122.32 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(12) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
2.48 (The) 108 678.02 P
5 F
5.96 (image) 132.15 678.02 P
0 F
2.48 ( or) 168.15 678.02 P
2.48 (g) 183.41 678.02 P
2.48 (anization indicates the structure of the data which will be) 189.35 678.02 P
0.36 (stored in the platform\325) 108 664.02 P
0.36 (s data \336les. In this case the data will be structured as an) 216.07 664.02 P
1.43 (image, a tw) 108 650.02 P
1.43 (o-dimensional array of bytes at a particular location in time and) 166.4 650.02 P
4.27 (space, with optional scaling and of) 108 636.02 P
4.27 (fset information. The) 295.68 636.02 P
5 F
10.24 (filetype) 413.13 636.02 P
0 F
4.27 ( is) 470.73 636.02 P
5 F
0.32 (raster) 108 622.02 P
0 F
0.14 (, a \336le format for raster data designed for Zebra. At the v) 150.72 622.02 P
0.14 (ery least, the) 424.75 622.02 P
1.15 (DataStore application interf) 108 608.02 P
1.15 (ace must kno) 243.49 608.02 P
1.15 (w what type of data \336le it will read) 308.82 608.02 P
1.92 (and write and the or) 108 594.02 P
1.92 (g) 211.45 594.02 P
1.92 (anization of the data stored within the \336le. Some \336le) 217.39 594.02 P
1.67 (types, such as) 108 580.02 P
5 F
4 (netCDF) 182.33 580.02 P
0 F
1.67 ( and the Zebra nati) 225.53 580.02 P
1.67 (v) 321.88 580.02 P
1.67 (e format \050ZNF\051, can be used to) 327.7 580.02 P
0.55 (store se) 108 566.02 P
0.55 (v) 144.57 566.02 P
0.55 (eral dif) 150.39 566.02 P
0.55 (ferent or) 184.96 566.02 P
0.55 (g) 226.27 566.02 P
0.55 (anizations \050thought not necessarily in the same \336le\051.) 232.21 566.02 P
2.06 (Platform information such as the \336le type and or) 108 552.02 P
2.06 (g) 356.91 552.02 P
2.06 (anization are not needed) 362.85 552.02 P
2.38 (directly by the application. The DataStore library acquires the information) 108 538.02 P
-0.12 (from the DataStore daemon through the message interf) 108 524.02 P
-0.12 (ace, unbekno) 370.67 524.02 P
-0.12 (wnst to the) 433.57 524.02 P
0.22 (application. F) 108 510.02 P
0.22 (or more information about the daemon con\336guration \336le, see the) 174.04 510.02 P
4 F
(Zebr) 108 496.02 T
(a Advanced User\325) 130.49 496.02 T
(s Manual) 216.65 496.02 T
0 F
(.) 261.65 496.02 T
2 F
(1.2.1) 72.31 464.02 T
(Platf) 108 464.02 T
(orm Identi\336er) 133.76 464.02 T
(s) 210.26 464.02 T
0 F
0.82 (The daemon assigns each platform de\336ned in the con\336guration \336le an identi-) 108 446.02 P
4.21 (\336er) 108 432.02 P
4.21 (.) 123.34 432.02 P
4.21 (Ev) 143.64 432.02 P
4.21 (ery platform, as well as e) 156.8 432.02 P
4.21 (v) 298.19 432.02 P
4.21 (ery subplatform, recei) 304.01 432.02 P
4.21 (v) 417.77 432.02 P
4.21 (es a unique) 423.59 432.02 P
5 F
1.37 (PlatformId) 108 418.02 P
0 F
0.57 (. The daemon and its clients will refer to platforms e) 180 418.02 P
0.57 (xclusi) 437.15 418.02 P
0.57 (v) 465.52 418.02 P
0.57 (ely) 471.34 418.02 P
2.96 (by their) 108 404.02 P
5 F
7.11 (PlatformId) 153.92 404.02 P
0 F
2.96 (. Platform identi\336ers are not necessarily consistent) 225.92 404.02 P
0.63 (between runs of the DataStore daemon, so a client must \336nd the ID of a plat-) 108 390.02 P
(form from its name using) 108 376.02 T
5 F
(ds_LookupPlatform\050\051) 232.99 376.02 T
0 F
(.) 369.79 376.02 T
7 10 Q
(PlatformId) 126 357.35 T
(ds_LookupPlatform\050name\051) 126 345.35 T
(char *name;) 126 333.35 T
0 12 Q
(F) 108 308.02 T
(or e) 114.49 308.02 T
(xample,) 132.64 308.02 T
5 9 Q
(PlatformId pid;) 126 285.02 T
(pid = ds_LookupPlatform\050\322gms\323\051;) 126 263.02 T
0 12 Q
0.77 (The) 108 238.02 P
5 F
1.85 (ds_LookupPlatform\050\051) 130.43 238.02 P
0 F
0.77 ( function queries the DataStore for the ID of) 267.23 238.02 P
0.28 (the platform named \322gms\323, then returns the ID gi) 108 224.02 P
0.28 (v) 346.21 224.02 P
0.28 (en by the DataStore\325) 352.03 224.02 P
0.28 (s reply) 451.17 224.02 P
0.28 (.) 483 224.02 P
0.36 (If the platform name could not be found, the function returns the special sym-) 108 210.02 P
(bol) 108 196.02 T
5 F
(BadPlatform) 126.34 196.02 T
0 F
(.) 205.54 196.02 T
5 9 Q
(if \050pid == BadPlatform\051) 126 173.02 T
({) 126 162.02 T
(msg_ELog \050EF_PROBLEM, \322Platform \324%s\325 is unkown.\323, \322gms\323\051;) 154.8 151.02 T
(exit \0501\051;) 154.8 140.02 T
(}) 126 129.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Fields T) 126 736.18 T
(ab) 177.79 736.18 T
(le) 188.21 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (13) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.46 (The function) 126 678.02 P
5 F
3.5 (ds_PlatformName\050\051) 193.57 678.02 P
0 F
1.46 ( returns the name of a platform gi) 315.97 678.02 P
1.46 (v) 486.85 678.02 P
1.46 (en) 492.67 678.02 P
2.49 (it\325) 126 664.02 P
2.49 (s identi\336er) 136.01 664.02 P
2.49 (. The memory occupied by the returned string belongs to the) 188.84 664.02 P
(library and should not be freed or modi\336ed by the application.) 126 650.02 T
7 10 Q
(char *) 144 631.35 T
(ds_PlatformName\050id\051) 144 619.35 T
(PlatformId id;) 144 607.35 T
0 12 Q
(If) 126 582.02 T
7 F
(id) 136.99 582.02 T
0 F
( is in) 151.39 582.02 T
(v) 174.25 582.02 T
(alid, the function returns the string \322\050BadPlatformID\051\323.) 179.95 582.02 T
0.81 (A client may also wish to kno) 126 556.02 P
0.81 (w ho) 273.91 556.02 P
0.81 (w man) 298.09 556.02 P
0.81 (y platforms ha) 331.05 556.02 P
0.81 (v) 401.77 556.02 P
0.81 (e been de\336ned. The) 407.58 556.02 P
(function) 126 542.02 T
5 F
(ds_GetNPlat\050\051) 169 542.02 T
0 F
( returns this number) 262.6 542.02 T
(.) 358.26 542.02 T
7 10 Q
(int ds_GetNPlat\050void\051;) 144 523.35 T
0 12 Q
0.36 (The latest v) 126 498.02 P
0.36 (ersions of the DataStore daemon support dynamic platform de\336ni-) 182.52 498.02 P
0.85 (tion, meaning the number of platforms may change o) 126 484.02 P
0.85 (v) 387.61 484.02 P
0.85 (er the life of the Data-) 393.43 484.02 P
(Store daemon or e) 126 470.02 T
(v) 213.35 470.02 T
(en o) 219.17 470.02 T
(v) 239.32 470.02 T
(er the life of the client.) 245.14 470.02 T
72 427.02 558 429.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 427.02 558 429.02 R
7 X
0 0 0 1 0 0 0 K
V
72 428.02 117 428.02 2 L
0.5 H
2 Z
0 X
N
126 428.02 558 428.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(1.3) 100.32 433.02 T
(The Fields T) 126 433.02 T
(ab) 195.06 433.02 T
(le) 208.94 433.02 T
0 F
1.77 (A DataStore client needs to be able to remember and distinguish all of the) 126 409.02 P
0.51 (\336elds it uses. By design, the interf) 126 395.02 P
0.51 (ace tries to enforce some consistenc) 292.3 395.02 P
0.51 (y in the) 466.97 395.02 P
0.81 (names of the \336elds. Fields must be de\336ned and added to the) 126 381.02 P
4 F
0.81 (\336elds table) 425.38 381.02 P
0 F
0.81 (. The) 478.53 381.02 P
0.41 (DataStore interf) 126 367.02 P
0.41 (ace includes an interf) 203.27 367.02 P
0.41 (ace to the \336elds table, allo) 306.69 367.02 P
0.41 (wing a \336eld to) 433.76 367.02 P
0.5 (be assigned a name, units, and a description. Similarly to platforms, \336elds are) 126 353.02 P
1.08 (kno) 126 339.02 P
1.08 (wn to users by name b) 143.7 339.02 P
1.08 (ut are referenced internally through the) 256.51 339.02 P
5 F
2.59 (FieldId) 453.6 339.02 P
0 F
(type.) 126 325.02 T
(The \336elds table must be initialized by calling) 126 299.02 T
5 F
(F_Init\050\051) 345.32 299.02 T
0 F
(.) 402.92 299.02 T
7 10 Q
(void F_Init \050void\051;) 144 280.35 T
0 12 Q
0.48 (Most applications will ne) 126 255.02 P
0.48 (v) 248.82 255.02 P
0.48 (er need to call this function directly) 254.63 255.02 P
0.48 (. The DataStore) 427.39 255.02 P
-0.13 (interf) 126 241.02 P
-0.13 (ace initialization function,) 151.87 241.02 P
5 F
-0.31 (ds_Initialize\050\051) 280.13 241.02 P
0 F
-0.13 (, calls) 388.13 241.02 P
5 F
-0.31 (F_Init\050\051) 418.87 241.02 P
0 F
-0.13 ( auto-) 476.47 241.02 P
(matically) 126 227.02 T
(.) 169.88 227.02 T
2 F
(1.3.1) 90.31 195.02 T
(Dec) 126 195.02 T
(laring Fields) 147.77 195.02 T
0 F
(The basic function for declaring a \336eld is) 126 177.02 T
5 F
(F_DeclareField\050\051) 326.63 177.02 T
0 F
(.) 441.83 177.02 T
7 10 Q
(FieldId) 144 158.35 T
(F_DeclareField \050name, desc, units\051) 144 146.35 T
(char *name, *desc, *units;) 144 134.35 T
0 12 Q
1.44 (The name of the \336eld being declared is in) 126 109.02 P
7 F
3.45 (name) 341.24 109.02 P
0 F
1.44 (. The parameter) 370.04 109.02 P
7 F
3.45 (desc) 452.99 109.02 P
0 F
1.44 ( is a) 481.79 109.02 P
0.31 (terse description of the \336eld, and) 126 95.02 P
7 F
0.75 (units) 288.18 95.02 P
0 F
0.31 ( is a string describing the units of the) 324.18 95.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Intr) 108 736.18 T
(oduction to the Zebra DataStore) 122.32 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(14) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
3.26 (\336eld\325) 108 678.02 P
3.26 (s data v) 132.67 678.02 P
3.26 (alues. [See the note about the syntax of the units string in) 175.54 678.02 P
2.86 (Section) 108 664.02 P
2.86 (1.3.4.] The description and the units strings are copied internally;) 147 664.02 P
5 F
3.76 (F_DeclareField\050\051) 108 650.02 P
0 F
1.57 ( only copies as much of the strings as will \336t in the) 223.2 650.02 P
0.32 (\336eld\325) 108 636.02 P
0.32 (s table entry) 132.67 636.02 P
0.32 (. The description should usually be about 40 to 60 characters) 191.19 636.02 P
0.01 (long and the units no more than about 15 characters. If a \336eld has already been) 108 622.02 P
1.07 (declared as) 108 608.02 P
7 F
2.56 (name) 166.77 608.02 P
0 F
1.07 (, the) 195.57 608.02 P
5 F
2.56 (FieldId) 221.36 608.02 P
0 F
1.07 ( of the e) 271.76 608.02 P
1.07 (xisting declaration will be returned) 313.77 608.02 P
(and the) 108 594.02 T
7 F
(desc) 145.99 594.02 T
0 F
( and) 174.79 594.02 T
7 F
(units) 198.12 594.02 T
0 F
( parameters will be ignored.) 234.12 594.02 T
0.4 (The \336elds interf) 108 568.02 P
0.4 (ace enforces a limit on the number of \336elds which an applica-) 185.34 568.02 P
0.43 (tion can declare. The limit is usually on the order of 500 \336elds, so an applica-) 108 554.02 P
10.22 (tion will rarely reach capacity) 108 540.02 P
10.22 (. When it does reach capacity) 291.39 540.02 P
10.22 (,) 483 540.02 P
5 F
(F_DeclareField\050\051) 108 526.02 T
0 F
( logs a w) 223.2 526.02 T
(arning message.) 266.08 526.02 T
(Fields can also be gi) 108 500.02 T
(v) 205.69 500.02 T
(en aliases.) 211.51 500.02 T
7 10 Q
(FieldId) 126 481.35 T
(F_Alias \050name, alias\051) 126 469.35 T
(char *name, *alias;) 126 457.35 T
0 12 Q
0.71 (After calling) 108 432.02 P
5 F
1.71 (F_Alias\050\051) 173.41 432.02 P
0 F
0.71 (, the name) 238.21 432.02 P
7 F
1.71 (alias) 293 432.02 P
0 F
0.71 ( is equi) 329 432.02 P
0.71 (v) 364.79 432.02 P
0.71 (alent to the \336eld named) 370.49 432.02 P
7 F
1.62 (name) 108 418.02 P
0 F
0.68 (. Ev) 136.8 418.02 P
0.68 (ery search for a \336eld with name) 156.63 418.02 P
7 F
1.62 (alias) 316.31 418.02 P
0 F
0.68 ( will return the \336eld named) 352.31 418.02 P
7 F
11.28 (name) 108 404.02 P
0 F
4.7 (. The) 136.8 404.02 P
7 F
11.28 (name) 173.86 404.02 P
0 F
4.7 ( parameter itself can be an alias.) 202.66 404.02 P
5 F
11.28 (F_Alias\050\051) 392.84 404.02 P
0 F
4.7 ( uses) 457.64 404.02 P
5 F
-0.09 (F_Declared\050\051) 108 390.02 P
0 F
-0.04 ( to \336nd the \336eld named) 194.4 390.02 P
7 F
-0.09 (name) 308.16 390.02 P
0 F
-0.04 (, so if the \336eld cannot be found) 336.96 390.02 P
1.8 (then) 108 376.02 P
5 F
4.31 (F_Alias\050\051) 133.46 376.02 P
0 F
1.8 ( does not create an) 198.26 376.02 P
1.8 (y alias and instead returns the symbol) 294.57 376.02 P
5 F
5.59 (BadField) 108 362.02 P
0 F
2.33 (. Aliases can be useful when inte) 165.6 362.02 P
2.33 (grating data from a ne) 337.03 362.02 P
2.33 (w data) 452.02 362.02 P
(source which has dif) 108 348.02 T
(ferent names for the same data \336elds.) 206.68 348.02 T
2 F
(1.3.2) 72.31 316.02 T
(Sear) 108 316.02 T
(c) 133.78 316.02 T
(hing f) 140.33 316.02 T
(or Fields) 172.75 316.02 T
0 F
(T) 108 298.02 T
(w) 114.37 298.02 T
(o functions return a) 122.92 298.02 T
5 F
(FieldId) 219.56 298.02 T
0 F
( when passed a \336eld name.) 269.96 298.02 T
7 10 Q
(FieldId) 126 279.35 T
(F_Lookup \050name\051) 126 267.35 T
(char *name;) 126 255.35 T
(FieldId) 126 231.35 T
(F_Declared \050name\051) 126 219.35 T
(char *name;) 126 207.35 T
0 12 Q
1.25 (The) 108 182.02 P
7 F
2.99 (name) 130.9 182.02 P
0 F
1.25 ( parameter is the name of a \336eld \050or an alias\051 to \336nd in the \336elds) 159.71 182.02 P
1.06 (table. If the \336eld is found, both functions return the \336eld\325) 108 168.02 P
1.06 (s) 391.93 168.02 P
5 F
2.55 (FieldId) 400.66 168.02 P
0 F
1.06 (.) 451.06 168.02 P
1 F
1.06 (Ho) 458.12 168.02 P
1.06 (w-) 473.34 168.02 P
5.12 (e) 108 154.02 P
5.12 (v) 113.15 154.02 P
5.12 (er) 119.03 154.02 P
0 F
5.12 (, if the \336eld is not found, the tw) 129.2 154.02 P
5.12 (o functions beha) 321.41 154.02 P
5.12 (v) 410.74 154.02 P
5.12 (e) 416.56 154.02 P
1 F
5.12 (differ) 430.01 154.02 P
5.12 (ently) 458.45 154.02 P
0 F
5.12 (.) 483 154.02 P
5 F
1.89 (F_Lookup\050\051) 108 140.02 P
0 F
0.79 ( will declare a \336eld called) 180 140.02 P
7 F
1.89 (name) 311.37 140.02 P
0 F
0.79 ( and supply def) 340.17 140.02 P
0.79 (ault v) 416.07 140.02 P
0.79 (alues for) 443.56 140.02 P
1.29 (the description and the units. The def) 108 126.02 P
1.29 (ault description will be the \336eld name,) 293.93 126.02 P
0.54 (and the units will be declared as \322unkno) 108 112.02 P
0.54 (wn\323. This beha) 303.77 112.02 P
0.54 (vior of) 377.59 112.02 P
5 F
1.29 (F_Lookup\050\051) 414 112.02 P
0 F
3.04 (allo) 108 98.02 P
3.04 (ws \322quick-and-dirty\323 \336eld handling when the application just needs a) 125.7 98.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Fields T) 126 736.18 T
(ab) 177.79 736.18 T
(le) 188.21 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (15) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 12 Q
0.56 (FieldId) 126 678.02 P
0 F
0.23 ( for reference and does not care to properly declare the \336eld. Use of) 176.4 678.02 P
5 F
(F_Lookup\050\051) 126 664.02 T
0 F
( this w) 198 664.02 T
(ay should be limited to special circumstances.) 229.88 664.02 T
2.47 (Alternati) 126 638.02 P
2.47 (v) 168.36 638.02 P
2.47 (ely) 174.18 638.02 P
2.47 (,) 188.06 638.02 P
5 F
5.93 (F_Declared\050\051) 196.53 638.02 P
0 F
2.47 ( will return the special symbol) 282.93 638.02 P
5 F
5.93 (BadField) 446.4 638.02 P
0 F
0.4 (when the \336eld) 126 624.02 P
7 F
0.97 (name) 198.2 624.02 P
0 F
0.4 ( cannot be found, otherwise it returns the) 227 624.02 P
5 F
0.97 (FieldId) 429.87 624.02 P
0 F
0.4 (. See) 480.27 624.02 P
(the e) 126 610.02 T
(xample in Section) 148.81 610.02 T
(1.3.4.) 238.48 610.02 T
2 F
(1.3.3) 90.31 578.02 T
(Retrie) 126 578.02 T
(ving Field Inf) 159.83 578.02 T
(ormation) 233.6 578.02 T
0 F
0.37 (The \336elds interf) 126 560.02 P
0.37 (ace pro) 203.27 560.02 P
0.37 (vides three functions for retrie) 238.43 560.02 P
0.37 (ving the indi) 384.89 560.02 P
0.37 (vidual char-) 445.99 560.02 P
(acteristics of a \336eld.) 126 546.02 T
7 10 Q
(char *) 144 527.35 T
(F_GetName \050id\051) 144 515.35 T
(FieldId id;) 144 503.35 T
(char *) 144 479.35 T
(F_GetDesc \050id\051) 144 467.35 T
(FieldId id;) 144 455.35 T
(char *) 144 431.35 T
(F_GetUnits \050id\051) 144 419.35 T
(FieldId id;) 144 407.35 T
0 12 Q
0.62 (Each function requires a) 126 382.02 P
5 F
1.5 (FieldId) 248.46 382.02 P
0 F
0.62 ( as the only ar) 298.86 382.02 P
0.62 (gument,) 368.47 382.02 P
7 F
1.5 (id) 411.09 382.02 P
0 F
0.62 (, and each func-) 425.49 382.02 P
0.19 (tion returns the requested information as a string. The string occupies memory) 126 368.02 P
0.16 (which belongs to the interf) 126 354.02 P
0.16 (ace and should not be freed or modi\336ed. If) 255.18 354.02 P
7 F
0.39 (id) 463.94 354.02 P
0 F
0.16 ( is an) 478.34 354.02 P
(in) 126 340.02 T
(v) 134.86 340.02 T
(alid) 140.56 340.02 T
5 F
(FieldId) 161.56 340.02 T
0 F
(, the functions return) 211.96 340.02 T
5 F
(NULL) 314.94 340.02 T
0 F
(.) 343.74 340.02 T
2 F
(1.3.4) 90.31 308.02 T
(Rules of Thumb) 126 308.02 T
0 F
0.08 (Here are some \322rules of thumb\323 which might be helpful in declaring and using) 126 290.02 P
0.94 (Zebra \336elds. First, a \336eld\325) 126 276.02 P
0.94 (s declared characteristics should be limited to plat-) 253.77 276.02 P
1.53 (form-independent information. If data ha) 126 262.02 P
1.53 (v) 328.84 262.02 P
1.53 (e dif) 334.66 262.02 P
1.53 (ferent units for dif) 357.55 262.02 P
1.53 (ferent plat-) 449.49 262.02 P
1 (forms, then by Zebra\325) 126 248.02 P
1 (s present notion each platform is using a dif) 232.99 248.02 P
1 (ferent \336eld) 450.68 248.02 P
6.72 (and thus should use a unique \336eld name. Whene) 126 234.02 P
6.72 (v) 411.09 234.02 P
6.72 (er possible, use) 416.91 234.02 P
5 F
2.45 (F_DeclareField\050\051) 126 220.02 P
0 F
1.02 ( to fully and unambiguously specify each \336eld which) 241.2 220.02 P
2.64 (will be used by an application; do not allo) 126 206.02 P
2.64 (w) 348.12 206.02 P
5 F
6.33 (F_Lookup\050\051) 362.42 206.02 P
0 F
2.64 ( to supply an) 434.42 206.02 P
9.93 (ambiguous declaration. First look for the \336eld by name with) 126 192.02 P
5 F
(F_Declared\050\051) 126 178.02 T
0 F
(, and then declare the \336eld if it has not already been de\336ned.) 212.4 178.02 T
5 9 Q
(FieldId fid;) 144 155.02 T
(if \050\050fid = F_Declared \050\322tdry\323\051\051 == BadField\051) 144 133.02 T
(fid = F_DeclareField \050\322tdry\323, \322ambient temperature\323, \322deg C\323\051;) 172.8 122.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Intr) 108 736.18 T
(oduction to the Zebra DataStore) 122.32 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(16) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.81 (The abo) 108 678.02 P
0.81 (v) 147.62 678.02 P
0.81 (e piece of code is equi) 153.44 678.02 P
0.81 (v) 264.18 678.02 P
0.81 (alent to just calling) 269.88 678.02 P
5 F
1.95 (F_DeclareField\050\051) 367.8 678.02 P
0 F
0.81 (,) 483 678.02 P
-0.1 (e) 108 664.02 P
-0.1 (xcept that in the code belo) 113.15 664.02 P
-0.1 (w it is less clear that the \322ambient temperature\323 and) 238.65 664.02 P
(\322de) 108 650.02 T
(g C\323 strings will be ignored if the \336eld \322tdry\323 already e) 124.48 650.02 T
(xists.) 389.26 650.02 T
5 9 Q
(FieldId fid;) 126 627.02 T
(fid = F_DeclareField \050\322tdry\323, \322ambient temperature\323, \322deg C\323\051;) 126 605.02 T
0 12 Q
1.03 (A \336eld declaration cannot be changed. Attempts to declare a \336eld which has) 108 580.02 P
0.3 (already been de\336ned will be silently ignored \050b) 108 566.02 P
0.3 (ut) 336.18 566.02 P
5 F
0.73 (F_DeclareField\050\051) 348.82 566.02 P
0 F
0.3 ( will) 464.02 566.02 P
0.33 (still return the original \336eld\325) 108 552.02 P
0.33 (s) 244.65 552.02 P
5 F
0.79 (FieldId) 252.65 552.02 P
0 F
0.33 (\051. This is Zebra\325) 303.05 552.02 P
0.33 (s attempt at enforcing) 380.7 552.02 P
0.34 (a single, consistent declaration of a \336eld throughout an entire application. It is) 108 538.02 P
0.93 (the) 108 524.02 P
4 F
0.93 (application\325) 126.59 524.02 P
0.93 (s) 184.78 524.02 P
0 F
0.93 ( responsibility to ensure that its) 189.45 524.02 P
4 F
0.93 (use) 348.36 524.02 P
0 F
0.93 ( of the \336eld is consistent) 364.36 524.02 P
(with the declaration.) 108 510.02 T
-0.19 (Note that the \336elds table is not actually administered by the DataStore daemon.) 108 484.02 P
0.71 (Therefore it is entirely possible \050though not desirable\051 for tw) 108 470.02 P
0.71 (o applications to) 405.24 470.02 P
2.13 (declare the same \336eld name inconsistently) 108 456.02 P
2.13 (. The \336elds interf) 320.83 456.02 P
2.13 (ace attempts to) 409.75 456.02 P
-0.18 (enforce consistenc) 108 442.02 P
-0.18 (y within an application, while de) 196.61 442.02 P
-0.18 (v) 352.75 442.02 P
-0.18 (elopers ensure consistenc) 358.57 442.02 P
-0.18 (y) 480 442.02 P
(among all of the applications and platforms.) 108 428.02 T
-0.11 (Ob) 108 402.02 P
-0.11 (viously) 122.48 402.02 P
-0.11 (, the \336elds table does not ha) 157.04 402.02 P
-0.11 (v) 289.78 402.02 P
-0.11 (e a complete or thorough understanding) 295.6 402.02 P
0.32 (of \336elds. In particular) 108 388.02 P
0.32 (, it lacks the notions of \336eld deri) 212.45 388.02 P
0.32 (v) 369.69 388.02 P
0.32 (ation and units con) 375.39 388.02 P
0.32 (v) 466.86 388.02 P
0.32 (er-) 472.68 388.02 P
1.22 (sion. These enhancements are on the dra) 108 374.02 P
1.22 (wing board. In the future, the \336elds) 309.4 374.02 P
1.76 (table will lik) 108 360.02 P
1.76 (ely incorporate better units handling through Unidata\325) 172.06 360.02 P
1.76 (s) 441.24 360.02 P
4 F
1.76 (udunits) 450.66 360.02 P
0 F
2.1 (package or something similar) 108 346.02 P
2.1 (.) 255.29 346.02 P
0 9.6 Q
1.68 (1) 258.29 350.82 P
0 12 Q
2.1 ( Meanwhile, applications may bene\336t in the) 263.09 346.02 P
(long run by declaring \336eld units which are compatible with the) 108 332.02 T
4 F
(udunits) 412.97 332.02 T
0 F
( syntax.) 448.31 332.02 T
54 289.02 540 291.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 289.02 540 291.02 R
7 X
0 0 0 1 0 0 0 K
V
54 290.02 99 290.02 2 L
0.5 H
2 Z
0 X
N
108 290.02 540 290.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(1.4) 82.32 295.02 T
(Basic T) 108 295.02 T
(ypes) 149.96 295.02 T
0 F
1.54 (The DataStore interf) 108 271.02 P
1.54 (ace utilizes a number of simple b) 209.6 271.02 P
1.54 (ut con) 377.24 271.02 P
1.54 (v) 407.96 271.02 P
1.54 (enient v) 413.78 271.02 P
1.54 (ariable) 453.35 271.02 P
0.11 (types and structures. These types and structures e) 108 257.02 P
0.11 (xist to f) 345.21 257.02 P
0.11 (acilitate the e) 381.99 257.02 P
0.11 (xchange) 446.02 257.02 P
-0.25 (of information and data between client and daemon. Some of the types are only) 108 243.02 P
1.62 (useful when referenced in a lar) 108 229.02 P
1.62 (ger conte) 264.16 229.02 P
1.62 (xt of information. Other types with) 309.91 229.02 P
1.27 (more limited rele) 108 215.02 P
1.27 (v) 192.9 215.02 P
1.27 (ance or v) 198.6 215.02 P
1.27 (ery speci\336c uses are described with the interf) 244.95 215.02 P
1.27 (ace) 470.02 215.02 P
(functions which use them.) 108 201.02 T
0.84 (The DataStore interf) 108 175.02 P
0.84 (ace mak) 208.2 175.02 P
0.84 (es e) 248.57 175.02 P
0.84 (xtensi) 267.55 175.02 P
0.84 (v) 295.92 175.02 P
0.84 (e use of the) 301.74 175.02 P
5 F
2.02 (ZebTime) 363.08 175.02 P
0 F
0.84 ( type, which is) 413.48 175.02 P
0.24 (part of the Zebra library interf) 108 161.02 P
0.24 (ace and hence not described here. See the) 253.35 161.02 P
4 F
0.24 (Zebr) 457.51 161.02 P
0.24 (a) 480 161.02 P
(Libr) 108 147.02 T
(ary Interface Manual) 128.5 147.02 T
0 F
( for information on using) 231.14 147.02 T
5 F
(ZebTime) 354.8 147.02 T
0 F
(.) 405.2 147.02 T
54 110.98 540 140.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 118.98 252 118.98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  Unidata, Uni) 108 104.98 T
(v) 165.52 104.98 T
(ersity Corporation of Atmospheric Research. udunits is a) 169.88 104.98 T
(v) 374.68 104.98 T
(ailable via anon) 378.95 104.98 T
(ymous ftp to) 435.81 104.98 T
(ftp.) 108 94.98 T
(unidata.) 120.25 94.98 T
(ucar) 148.99 94.98 T
(.) 163.99 94.98 T
(edu.) 166.24 94.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Basic T) 126 736.18 T
(ypes) 157.47 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (17) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.36 (The) 126 678.02 P
5 F
0.87 (Location) 148.02 678.02 P
0 F
0.36 (,) 205.62 678.02 P
5 F
0.87 (RGrid) 211.98 678.02 P
0 F
0.36 (, and) 247.98 678.02 P
5 F
0.87 (ScaleInfo) 275.04 678.02 P
0 F
0.36 ( types are also actually part of the) 339.84 678.02 P
1.02 (Zebra library) 126 664.02 P
1.02 (, b) 189.21 664.02 P
1.02 (ut summaries of these types are included here for the sak) 201.99 664.02 P
1.02 (e of) 484.66 664.02 P
0.44 (easy reference. More details on these types can be found in the) 126 650.02 P
4 F
0.44 (Zebr) 435.58 650.02 P
0.44 (a Libr) 458.06 650.02 P
0.44 (ary) 488 650.02 P
(Interface Manual) 126 636.02 T
0 F
(.) 209.65 636.02 T
2 F
(1.4.1) 90.31 604.02 T
(Locations) 126 604.02 T
0 F
0.87 (Geographic locations are represented internally by the) 126 586.02 P
5 F
2.08 (Location) 395.01 586.02 P
0 F
0.87 ( data type,) 452.61 586.02 P
(de\336ned in the library header \336le) 126 572.02 T
5 F
(defs.h) 282.64 572.02 T
0 F
(:) 325.84 572.02 T
5 9 Q
(typedef struct s_Location {) 144 549.02 T
(float) 172.8 538.02 T
(l_lat;) 230.4 538.02 T
(float) 172.8 527.02 T
(l_lon;) 230.4 527.02 T
(float) 172.8 516.02 T
(l_alt;) 230.4 516.02 T
(} Location;) 144 505.02 T
0 12 Q
0.56 (Longitudes are proper longitudes\321ne) 126 480.02 P
0.56 (g) 309.8 480.02 P
0.56 (ati) 315.74 480.02 P
0.56 (v) 327.44 480.02 P
0.56 (e for the western hemisphere. Lon-) 333.26 480.02 P
0.55 (gitudes should f) 126 466.02 P
0.55 (all into the range [-180.0, 180.0]. Latitudes are positi) 203.65 466.02 P
0.55 (v) 461.75 466.02 P
0.55 (e in the) 467.57 466.02 P
0.66 (northern hemisphere and ne) 126 452.02 P
0.66 (g) 261.42 452.02 P
0.66 (ati) 267.36 452.02 P
0.66 (v) 279.06 452.02 P
0.66 (e in the southern hemisphere, f) 284.88 452.02 P
0.66 (alling into the) 436.02 452.02 P
(range [-90.0, 90.0].) 126 438.02 T
2 F
(1.4.2) 90.31 406.02 T
(Altitudes) 126 406.02 T
0 F
0.67 (The altitude of a location, when v) 126 388.02 P
0.67 (alid or rele) 291.37 388.02 P
0.67 (v) 344.4 388.02 P
0.67 (ant, def) 350.1 388.02 P
0.67 (aults to units of kilome-) 386.64 388.02 P
0.46 (ters abo) 126 374.02 P
0.46 (v) 163.93 374.02 P
0.46 (e mean sea le) 169.75 374.02 P
0.46 (v) 235.13 374.02 P
0.46 (el \050\322km abo) 240.96 374.02 P
0.46 (v) 298.34 374.02 P
0.46 (e MSL\323\051. When the altitude of a location) 304.16 374.02 P
6.79 (is signi\336cant, the) 126 360.02 P
5 F
16.29 (Location) 231.04 360.02 P
0 F
6.79 ( structure is often associated with an) 288.64 360.02 P
5 F
(AltUnitType) 126 346.02 T
0 F
(, also de\336ned in the library header \336le) 205.2 346.02 T
5 F
(defs.h) 390.17 346.02 T
0 F
(.) 433.37 346.02 T
5 9 Q
(typedef enum) 144 328.02 T
({) 144 317.02 T
(AU_kmMSL,) 172.8 306.02 T
(/* km MSL */) 230.4 306.02 T
(AU_mMSL,) 172.8 295.02 T
(/* m MSL */) 230.4 295.02 T
(AU_kmAGL,) 172.8 284.02 T
(/* km AGL */) 230.4 284.02 T
(AU_mAGL,) 172.8 273.02 T
(/* m AGL */) 230.4 273.02 T
(AU_mb,) 172.8 262.02 T
(/* mb \050pressure altitude\051 */) 230.4 262.02 T
(AU_sigma,) 172.8 251.02 T
(/* sigma level \050unitless\051 */) 230.4 251.02 T
(AU_level) 172.8 240.02 T
(/* unknown, unitless level */) 230.4 240.02 T
(} AltUnitType;) 144 229.02 T
0 12 Q
0.85 (The prototypes for the altitude functions are listed belo) 126 204.02 P
0.85 (w for reference. F) 396.49 204.02 P
0.85 (or a) 484.82 204.02 P
0.37 (complete e) 126 190.02 P
0.37 (xplanation of altitude units and the interf) 178.51 190.02 P
0.37 (ace, see the) 376.58 190.02 P
4 F
0.37 (Zebr) 435.65 190.02 P
0.37 (a Libr) 458.14 190.02 P
0.37 (ary) 488 190.02 P
(Interface Manual) 126 176.02 T
0 F
(.) 209.65 176.02 T
5 9 Q
(const char *au_UnitsName \050AltUnitType atype\051;) 144 158.02 T
(const char *au_LongUnitsName \050AltUnitType atype\051;) 144 147.02 T
(const char *au_PrintFormat \050AltUnitType atype\051;) 144 136.02 T
(const char *au_AltLabel \050double alt, AltUnitType atype\051;) 144 125.02 T
(const char *au_LongAltLabel \050double alt, AltUnitType atype\051;) 144 114.02 T
(bool au_ConvertName \050char *name, AltUnitType *atype\051;) 144 103.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Intr) 108 736.18 T
(oduction to the Zebra DataStore) 122.32 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(18) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(1.4.3) 72.31 678.02 T
(Scales and Offsets) 108 678.02 T
0 F
(The) 108 660.02 T
5 F
(ScaleInfo) 129.66 660.02 T
0 F
( structure can be used to store scaling information.) 194.46 660.02 T
5 9 Q
(typedef struct s_ScaleInfo {) 126 637.02 T
(float) 154.8 626.02 T
(s_Scale;) 183.6 626.02 T
(float) 154.8 615.02 T
(s_Offset;) 183.6 615.02 T
(} ScaleInfo;) 126 604.02 T
0 12 Q
(An array of \337oat data w) 108 579.02 T
(ould be con) 222.18 579.02 T
(v) 277.69 579.02 T
(erted to bytes as follo) 283.51 579.02 T
(ws.) 386.53 579.02 T
5 9 Q
(for \050i = 0; i < ARRAY_SIZE; ++i\051) 126 556.02 T
(bytes[i] = \050floats[i] - Scale.s_Offset\051 / Scale.s_Scale;) 154.8 545.02 T
0 12 Q
(The byte data could be con) 108 520.02 T
(v) 237.16 520.02 T
(erted back to \337oating point v) 242.98 520.02 T
(alues with this loop.) 381 520.02 T
5 9 Q
(for \050i = 0; i < ARRAY_SIZE; ++i\051) 126 497.02 T
(floats[i] = \050\050float\051bytes[i]\051 * Scale.s_Scale + Scale.s_Offset;) 154.8 486.02 T
0 12 Q
(See the library manual for more details.) 108 461.02 T
2 F
(1.4.4) 72.31 429.02 T
(Regular Grids) 108 429.02 T
0 F
0.28 (The) 108 411.02 P
5 F
0.66 (RGrid) 129.94 411.02 P
0 F
0.28 ( structure describes re) 165.94 411.02 P
0.28 (gular grids of one, tw) 271.55 411.02 P
0.28 (o, or three dimensions.) 375.52 411.02 P
0.62 (The number of dimensions being used in the grid must be noted in a separate) 108 397.02 P
(v) 108 383.02 T
(ariable. The) 113.7 383.02 T
5 F
(RGrid) 174.01 383.02 T
0 F
( type is de\336ned in) 210.01 383.02 T
5 F
(defs.h) 298.34 383.02 T
0 F
( as follo) 341.54 383.02 T
(ws:) 379.91 383.02 T
5 9 Q
(typedef struct s_RGrid {) 126 360.02 T
(float) 154.8 349.02 T
(rg_Xspacing;) 183.6 349.02 T
(float) 154.8 338.02 T
(rg_Yspacing;) 183.6 338.02 T
(float) 154.8 327.02 T
(rg_Zspacing;) 183.6 327.02 T
(int) 154.8 316.02 T
(rg_nX, rg_nY, rg_nZ;) 183.6 316.02 T
(} RGrid;) 126 305.02 T
2 12 Q
(1.4.5) 72.31 274.02 T
(Data Or) 108 274.02 T
(ganizations) 151.16 274.02 T
0 F
2.06 (The DataStore and its clients must dif) 108 256.02 P
2.06 (ferentiate between man) 301.35 256.02 P
2.06 (y \322shapes\323 or) 417.24 256.02 P
-0.19 (or) 108 242.02 P
-0.19 (g) 117.78 242.02 P
-0.19 (anizations of data. The enumerated type) 123.72 242.02 P
5 F
-0.46 (DataOrganization) 317.52 242.02 P
0 F
-0.19 (, de\336ned in) 432.72 242.02 P
5 F
(DataStore.h) 108 228.02 T
0 F
(, refers to these or) 187.2 228.02 T
(g) 273.29 228.02 T
(anizations.) 279.23 228.02 T
5 9 Q
(typedef enum {) 126 205.02 T
(OrgUnknown) 154.8 194.02 T
(= 0,) 241.2 194.02 T
(Org2dGrid) 154.8 183.02 T
(= 1,) 241.2 183.02 T
(OrgIRGrid) 154.8 172.02 T
(= 2,) 241.2 172.02 T
(OrgScalar) 154.8 161.02 T
(= 3,) 241.2 161.02 T
(OrgImage) 154.8 150.02 T
(= 4,) 241.2 150.02 T
(OrgOutline) 154.8 139.02 T
(= 5,) 241.2 139.02 T
(Org3dGrid) 154.8 128.02 T
(= 6,) 241.2 128.02 T
(OrgCmpImage) 154.8 117.02 T
(= 7,) 241.2 117.02 T
(Org1dGrid) 154.8 106.02 T
(= 8,) 241.2 106.02 T
(OrgTransparent) 154.8 95.02 T
(= 9,) 241.2 95.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Using the DataStore Interface) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (19) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(OrgFixedScalar) 172.8 680.02 T
(= 10,) 259.2 680.02 T
(OrgNSpace) 172.8 669.02 T
(= 11,) 259.2 669.02 T
(} DataOrganization;) 144 658.02 T
0 12 Q
0.32 (Most applications will not need to use the) 126 633.02 P
5 F
0.76 (DataOrganization) 331.85 633.02 P
0 F
0.32 ( type. Data-) 447.05 633.02 P
0.33 (Store applications usually deal e) 126 619.02 P
0.33 (xclusi) 282.46 619.02 P
0.33 (v) 310.83 619.02 P
0.33 (ely with DataChunks, whose or) 316.65 619.02 P
0.33 (g) 468.74 619.02 P
0.33 (aniza-) 474.68 619.02 P
9.65 (tion is inherent to their class. The library interf) 126 605.02 P
9.65 (ace uses the) 427.39 605.02 P
5 F
2.85 (DataOrganization) 126 591.02 P
0 F
1.19 ( internally to write DataChunks according to \336le for-) 241.2 591.02 P
(mat. Chapter) 126 577.02 T
(2 describes DataChunks in detail.) 190.99 577.02 T
72 534.02 558 536.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 534.02 558 536.02 R
7 X
0 0 0 1 0 0 0 K
V
72 535.02 117 535.02 2 L
0.5 H
2 Z
0 X
N
126 535.02 558 535.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(1.5) 100.32 540.02 T
(Using the DataStore Interface) 126 540.02 T
0 F
0.11 (This section contains the minimal steps required to use the DataStore interf) 126 516.02 P
0.11 (ace) 488.02 516.02 P
(in an application.) 126 502.02 T
2 F
(1.5.1) 90.31 470.02 T
(The DataStore Header File) 126 470.02 T
0 F
1.47 (Applications which require the DataStore interf) 126 452.02 P
1.47 (ace should include the Data-) 361.5 452.02 P
(Store header \336le as sho) 126 438.02 T
(wn belo) 237.01 438.02 T
(w) 275.04 438.02 T
(.) 282.92 438.02 T
5 9 Q
(#include <DataStore.h>) 144 415.02 T
0 12 Q
0.93 (The) 126 390.02 P
5 F
2.23 (DataStore.h) 148.59 390.02 P
0 F
0.93 ( header \336le de\336nes se) 227.79 390.02 P
0.93 (v) 334.51 390.02 P
0.93 (eral types, structures, and macros) 340.33 390.02 P
1.17 (used by the interf) 126 376.02 P
1.17 (ace. In addition, it includes prototypes for all of the public) 213.03 376.02 P
0.43 (interf) 126 362.02 P
0.43 (ace functions. Since the DataStore library requires the Zebra library) 151.87 362.02 P
0.43 (, and) 480.24 362.02 P
0.88 (most DataStore clients will use man) 126 348.02 P
0.88 (y of the Zebra library routines, the client) 303.21 348.02 P
(source \336le should usually include all of these \336les, in this order:) 126 334.02 T
5 9 Q
(#include <defs.h>) 144 311.02 T
(#include <ui.h>) 144 300.02 T
(#include <message.h>) 144 289.02 T
(#include <timer.h>) 144 278.02 T
(#include <DataStore.h>) 144 267.02 T
0 12 Q
2.05 (P) 126 242.02 P
2.05 (ast v) 132.49 242.02 P
2.05 (ersions of Zebra required source \336les to include the) 156.7 242.02 P
5 F
4.93 (DataChunk.h) 424.8 242.02 P
0 F
1.38 (header \336le. This \336le has been incorporated into) 126 228.02 P
5 F
3.3 (DataStore.h) 365.97 228.02 P
0 F
1.38 ( and is no) 445.17 228.02 P
1.38 (w) 495.34 228.02 P
1.17 (obsolete. Source \336les which still include) 126 214.02 P
5 F
2.8 (DataChunk.h) 330 214.02 P
0 F
1.17 ( should remo) 409.2 214.02 P
1.17 (v) 474.02 214.02 P
1.17 (e the) 479.84 214.02 P
(include directi) 126 200.02 T
(v) 194.69 200.02 T
(e for) 200.51 200.02 T
5 F
(DataChunk.h) 225.83 200.02 T
0 F
(.) 305.03 200.02 T
2 F
(1.5.2) 90.31 168.02 T
(Initialization) 126 168.02 T
0 F
-0.2 (An) 126 150.02 P
-0.2 (y program which uses the data store must \336rst initialize the interf) 140.48 150.02 P
-0.2 (ace and the) 450.43 150.02 P
(connection to the DataStore daemon.) 126 136.02 T
7 10 Q
(int) 144 117.35 T
(ds_Initialize \050void\051;) 144 105.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Intr) 108 736.18 T
(oduction to the Zebra DataStore) 122.32 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(20) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.58 (The) 108 678.02 P
5 F
1.38 (ds_Initialize\050\051) 130.24 678.02 P
0 F
0.58 ( function assumes that the user interf) 238.24 678.02 P
0.58 (ace \050UI\051 sym-) 418.21 678.02 P
1.91 (bol table module has been initialized and that) 108 664.02 P
5 F
4.59 (msg_connect\050\051) 343.93 664.02 P
0 F
1.91 ( has been) 437.53 664.02 P
-0.21 (called. The UI symbol table can be initialized through a call to) 108 650.02 P
5 F
-0.51 (ui_init\050\051) 408.42 650.02 P
0 F
-0.21 ( or) 473.21 650.02 P
5 F
0.25 (usy_init\050\051) 108 636.02 P
0 F
0.1 (. The function) 180 636.02 P
5 F
0.25 (ds_Initialize\050\051) 250.96 636.02 P
0 F
0.1 ( returns non-zero \050true\051 on) 358.96 636.02 P
(success and zero \050f) 108 622.02 T
(alse\051 on f) 198.84 622.02 T
(ailure.) 243.37 622.02 T
(A typical DataStore client might be) 108 596.02 T
(gin with the follo) 278.14 596.02 T
(wing code.) 360.84 596.02 T
5 9 Q
(main \050argc, argv\051) 126 573.02 T
(int argc;) 126 562.02 T
(char **argv;) 126 551.02 T
({) 126 540.02 T
(/*) 126 529.02 T
( * Connect to the message handler) 126 518.02 T
( */) 126 507.02 T
(msg_connect \050msg_handler, Ourname\051;) 154.8 496.02 T
(msg_DeathHandler \050ShutDown\051;) 154.8 485.02 T
(msg_SetQueryHandler \050AnswerQuery\051;) 154.8 474.02 T
(/*) 126 463.02 T
( * Hand off information to the UI, and initialize things.) 126 452.02 T
( */) 126 441.02 T
(fixdir \050\322LOAD_FILE\323, GetLibDir \050\051, \322loadfile.lf\323, loadfile\051;) 154.8 430.02 T
(ui_init \050loadfile, FALSE, TRUE\051;) 154.8 419.02 T
(ui_setup \050\322ourname\323, &argc, argv, \050char *\051 Resources\051;) 154.8 408.02 T
(/*) 126 397.02 T
( * Initialize the data store.) 126 386.02 T
( */) 126 375.02 T
(if \050! ds_Initialize \050\051\051) 154.8 364.02 T
({) 154.8 353.02 T
(msg_ELog \050EF_EMERGENCY, \322Data store initialize failed\323\051;) 183.6 342.02 T
(exit \0501\051;) 183.6 331.02 T
(}) 154.8 320.02 T
(/* ... */) 154.8 309.02 T
0 12 Q
1.11 (Simpler clients which do not need the UI command interpreter or a load \336le) 108 284.02 P
(can initialize the symbol table module directly with) 108 270.02 T
5 F
(usy_init\050\051) 357.98 270.02 T
0 F
(.) 429.98 270.02 T
5 9 Q
(main \050argc, argv\051) 126 247.02 T
(int argc;) 126 236.02 T
(char **argv;) 126 225.02 T
({) 126 214.02 T
(msg_connect \050msg_handler, Ourname\051;) 154.8 203.02 T
(usy_init \050\051;) 154.8 192.02 T
(if \050! ds_Initialize \050\051\051) 154.8 181.02 T
({) 154.8 170.02 T
(msg_ELog \050EF_EMERGENCY, \322Data store initialize failed\323\051;) 183.6 159.02 T
(exit \0501\051;) 183.6 148.02 T
(}) 154.8 137.02 T
(/* ... */) 154.8 126.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Using the DataStore Interface) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (21) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(1.5.3) 90.31 678.02 T
(Compiling and Linking) 126 678.02 T
0 F
0.26 (The Zebra de) 126 660.02 P
0.26 (v) 190.2 660.02 P
0.26 (elopment en) 196.02 660.02 P
0.26 (vironment uses Imak) 254.8 660.02 P
0.26 (e) 355.86 660.02 P
0 9.6 Q
0.21 (1) 361.19 664.82 P
0 12 Q
0.26 ( to con\336gure and b) 365.99 660.02 P
0.26 (uild all of) 456.8 660.02 P
-0.27 (the Mak) 126 646.02 P
-0.27 (e\336les in the directory hierarch) 165.27 646.02 P
-0.27 (y) 308.1 646.02 P
-0.27 (. The easiest w) 313.32 646.02 P
-0.27 (ay to write and compile a) 383.7 646.02 P
-0.12 (ne) 126 632.02 P
-0.12 (w DataStore client is to \336rst cop) 137.03 632.02 P
-0.12 (y the Imak) 290.84 632.02 P
-0.12 (e\336le for an e) 341.81 632.02 P
-0.12 (xisting DataStore cli-) 401.58 632.02 P
0.02 (ent into the ne) 126 618.02 P
0.02 (w client\325) 194.09 618.02 P
0.02 (s source directory) 235.77 618.02 P
0.02 (. Then edit the ne) 320.33 618.02 P
0.02 (w Imak) 403.76 618.02 P
0.02 (e\336le. Usually) 439.98 618.02 P
1.67 (it should be suf) 126 604.02 P
1.67 (\336cient to change the name of the e) 204.38 604.02 P
1.67 (x) 380.87 604.02 P
1.67 (ecutable and the source) 386.69 604.02 P
2.26 (\336les. From the source directory) 126 590.02 P
2.26 (, use the follo) 284.55 590.02 P
2.26 (wing command to generate a) 356.34 590.02 P
(Mak) 126 576.02 T
(e\336le from the Imak) 147.88 576.02 T
(e\336le.) 240.07 576.02 T
5 F
(% zmkmf) 230.4 550.02 T
8 F
(zeb_topdir) 288 550.02 T
(curdir) 367.2 550.02 T
0.29 (zeb_topdir) 126 524.02 P
0 F
0.12 ( is the path, either relati) 198 524.02 P
0.12 (v) 311.63 524.02 P
0.12 (e or absolute, to the top-le) 317.45 524.02 P
0.12 (v) 443.07 524.02 P
0.12 (el directory) 448.89 524.02 P
2.02 (of the Zebra distrib) 126 510.02 P
2.02 (ution. Lik) 224.12 510.02 P
2.02 (e) 273.36 510.02 P
2.02 (wise,) 278.39 510.02 P
8 F
4.84 (curdir) 308.4 510.02 P
0 F
2.02 ( is the path) 351.6 510.02 P
4 F
2.02 (fr) 415 510.02 P
2.02 (om) 422.46 510.02 P
0 F
2.02 ( the top-le) 437.12 510.02 P
2.02 (v) 489.52 510.02 P
2.02 (el) 495.34 510.02 P
-0.13 (directory back to the source directory) 126 496.02 P
-0.13 (. The) 304.2 496.02 P
8 F
-0.31 (curdir) 331.6 496.02 P
0 F
-0.13 ( path can also be either rel-) 374.8 496.02 P
-0.06 (ati) 126 482.02 P
-0.06 (v) 137.7 482.02 P
-0.06 (e or absolute. The) 143.52 482.02 P
5 F
-0.15 (zmkmf) 232.25 482.02 P
0 F
-0.06 ( script is found in the Zebra binary directory; this) 268.25 482.02 P
(directory should be on your path.) 126 468.02 T
4.99 (F) 126 442.02 P
4.99 (or e) 132.49 442.02 P
4.99 (xample, to generate a Mak) 155.62 442.02 P
4.99 (e\336le for a ne) 303.08 442.02 P
4.99 (w ingest module called) 378.05 442.02 P
5 F
2.68 (count_prairie_dogs) 126 428.02 P
0 F
1.12 (, the Imak) 255.6 428.02 P
1.12 (e\336le might look lik) 306.04 428.02 P
1.12 (e the follo) 400.95 428.02 P
1.12 (wing. This) 451.55 428.02 P
(one w) 126 414.02 T
(as edited from a cop) 154.87 414.02 T
(y of the) 252.06 414.02 T
5 F
(class_ingest) 291.72 414.02 T
0 F
( Imak) 378.12 414.02 T
(e\336le.) 405.66 414.02 T
5 9 Q
(MFVERSION=\323$Id: Imakefile,v 1.7 1994/01/21 11:48:55 granger Exp $\323) 144 391.02 T
(LIBS = $\050LIBSUDS\051 $\050LIBZEBDS\051 $\050LIBZEB\051 $\050LIBRDSSGRAPH\051 \134) 144 369.02 T
(        $\050LIBRDSS\051 $\050LIBNETCDF\051 $\050XLIBS\051) 144 358.02 T
(LINTOPTS = -nuvxz) 144 336.02 T
(SRCS = count_prairie_dogs.c) 144 314.02 T
(OBJS = count_prairie_dogs.o) 144 303.02 T
(DISTFILES = count_prairie_dogs.c Imakefile) 144 281.02 T
(NormalProgramTarget\050count_prairie_dogs, $\050OBJS\051, $\050DEPLIBS\051, $\050LIBS\051,) 144 259.02 T
(                $\050SYSLIBS\051\051) 144 248.02 T
(DependTarget\050\051) 144 226.02 T
(LintTarget\050\051) 144 215.02 T
(DistfilesTarget\050$\050DISTFILES\051\051) 144 193.02 T
72 120.98 558 150.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 128.98 270 128.98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  Imak) 126 114.98 T
(e w) 155.65 114.98 T
(as originally written by T) 168.31 114.98 T
(odd Brunhof) 259.08 114.98 T
(f, T) 304.61 114.98 T
(ektronix, Inc., while a guest engineer at Project Athena, MIT) 316.97 114.98 T
(, and) 535.51 114.98 T
-0.25 (further de) 126 104.98 P
-0.25 (v) 160.76 104.98 P
-0.25 (eloped by Jim Fulton of the X Consortium. Imak) 165.12 104.98 P
-0.25 (e is cop) 338.76 104.98 P
-0.25 (yrighted by MIT) 365.65 104.98 P
-0.25 (, b) 424.48 104.98 P
-0.25 (ut permission has been granted for) 433.04 104.98 P
(an) 126 94.98 T
(y use and distrib) 134.36 94.98 T
(ution, as long as the cop) 193.43 94.98 T
(yright message is included.) 280.33 94.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Intr) 108 736.18 T
(oduction to the Zebra DataStore) 122.32 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(22) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.04 (If the source directory for) 108 678.02 P
5 F
2.51 (count_prairie_dogs) 239.51 678.02 P
0 F
1.04 ( is) 369.11 678.02 P
5 F
2.51 (/zeb/local/cpd) 385.2 678.02 P
0 F
1.54 (and the top directory of the Zebra installation is) 108 664.02 P
5 F
3.7 (/zebra) 353.51 664.02 P
0 F
1.54 (, then running the) 396.71 664.02 P
5 F
(zmkmf) 108 650.02 T
0 F
( command) 144 650.02 T
5 F
(% zmkmf /zebra /zebra/local/cpd) 212.4 624.02 T
0 F
0.56 (from the source directory w) 108 598.02 P
0.56 (ould create a Mak) 243.44 598.02 P
0.56 (e\336le in that directory) 331.32 598.02 P
0.56 (. The com-) 432.55 598.02 P
(mands) 108 584.02 T
5 F
(% zmkmf /zebra \324pwd\324) 212.4 558.02 T
0 F
(and) 108 532.02 T
5 F
(% zmkmf ../.. local/cpd) 212.4 506.02 T
0 F
0.11 (w) 108 480.02 P
0.11 (ould also w) 116.54 480.02 P
0.11 (ork. More information on writing ingest modules can be found in) 171.97 480.02 P
(Chapter) 108 466.02 T
(11.) 148.99 466.02 T
54 423.02 540 425.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 423.02 540 425.02 R
7 X
0 0 0 1 0 0 0 K
V
54 424.02 99 424.02 2 L
0.5 H
2 Z
0 X
N
108 424.02 540 424.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(1.6) 82.32 429.02 T
(Over) 108 429.02 T
(vie) 135.47 429.02 T
(w of the DataStore Interface) 151.97 429.02 T
0 F
0.63 (The DataStore application interf) 108 405.02 P
0.63 (ace pro) 264.74 405.02 P
0.63 (vides w) 300.17 405.02 P
0.63 (ays to describe, store, retrie) 337.67 405.02 P
0.63 (v) 471.85 405.02 P
0.63 (e,) 477.67 405.02 P
1.5 (and delete data, as well as inquire about a) 108 391.02 P
1.5 (v) 319.39 391.02 P
1.5 (ailable data and the attrib) 325.09 391.02 P
1.5 (utes of) 452.17 391.02 P
2 (those data. The interf) 108 377.02 P
2 (ace can be loosely di) 215.86 377.02 P
2 (vided into those cate) 323.53 377.02 P
2 (gories: data) 428.34 377.02 P
2.23 (description, data storage and retrie) 108 363.02 P
2.23 (v) 282.26 363.02 P
2.23 (al, and data inquiries. The ne) 287.96 363.02 P
2.23 (xt se) 437.92 363.02 P
2.23 (v) 462.19 363.02 P
2.23 (eral) 468.01 363.02 P
0.22 (chapters deal with each of these cate) 108 349.02 P
0.22 (gories in detail. The responsibility of data) 284.39 349.02 P
0.81 (description essentially lies in the realm of the data chunk, which is described) 108 335.02 P
1.33 (ne) 108 321.02 P
1.33 (xt. Later chapters e) 119.15 321.02 P
1.33 (xplain ho) 214.93 321.02 P
1.33 (w to associate attrib) 260.95 321.02 P
1.33 (ute information with data) 360.36 321.02 P
0.36 (chunks, ho) 108 307.02 P
0.36 (w to store a data chunk to a \336le, and ho) 160.06 307.02 P
0.36 (w to retrie) 351.69 307.02 P
0.36 (v) 401.44 307.02 P
0.36 (e data from \336les) 407.26 307.02 P
-0.14 (as a data chunk. Chapter) 108 293.02 P
-0.14 (9 lays out the application interf) 228.08 293.02 P
-0.14 (ace to the data storage,) 376.92 293.02 P
0.64 (retrie) 108 279.02 P
0.64 (v) 133.02 279.02 P
0.64 (al, searching, and deletion capabilities of the datastore protocol. Lastly) 138.72 279.02 P
0.64 (,) 483 279.02 P
1.62 (there are also a fe) 108 265.02 P
1.62 (w chapters which mention ef) 198.83 265.02 P
1.62 (\336cienc) 343.66 265.02 P
1.62 (y issues and consider-) 375.48 265.02 P
(ations re) 108 251.02 T
(g) 148.81 251.02 T
(arding internal implementations and the data \336le format dri) 154.75 251.02 T
(v) 438.42 251.02 T
(ers.) 444.24 251.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (23) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 2 \245) 126 677 S
0 24 Q
-0.48 (DataChunks) 252 677 S
0 12 Q
1.19 (The Zebra DataStore must handle data from man) 126 424 P
1.19 (y dif) 369.09 424 P
1.19 (ferent platforms which) 392.31 424 P
0.75 (use se) 126 410 P
0.75 (v) 155.44 410 P
0.75 (eral dif) 161.26 410 P
0.75 (ferent forms of data. F) 196.03 410 P
0.75 (or e) 306.48 410 P
0.75 (xample, satellite and radar platforms) 325.37 410 P
0.12 (collect data as images. Models generate three-dimensional grids. Mesonets are) 126 396 P
1.17 (assemblies of man) 126 382 P
1.17 (y observ) 216.81 382 P
1.17 (ation stations reporting time-series data from se) 258.67 382 P
1.17 (v-) 494 382 P
1.52 (eral instruments. Some platforms, such as pro\336lers, ha) 126 368 P
1.52 (v) 397.04 368 P
1.52 (e \336x) 402.86 368 P
1.52 (ed locations b) 425.2 368 P
1.52 (ut) 494.66 368 P
1.78 (scan a se) 126 354 P
1.78 (gment of ph) 172.04 354 P
1.78 (ysical space virtually simultaneously) 233.54 354 P
1.78 (. Other platforms,) 415.11 354 P
-0.23 (such as balloon soundings, are mobile and report data for a single \337ight o) 126 340 P
-0.23 (v) 474.76 340 P
-0.23 (er an) 480.58 340 P
0.09 (e) 126 326 P
0.09 (xtended period of time. The DataStore and its clients must store, retrie) 131.15 326 P
0.09 (v) 469.44 326 P
0.09 (e, and) 475.26 326 P
-0.01 (manipulate all of these forms of data. If each of these forms of data were gi) 126 312 P
-0.01 (v) 486.85 312 P
-0.01 (en) 492.67 312 P
0.16 (their o) 126 298 P
0.16 (wn type and their o) 156.86 298 P
0.16 (wn set of interf) 249.85 298 P
0.16 (ace functions, the DataStore interf) 323.2 298 P
0.16 (ace) 488.02 298 P
0.05 (w) 126 284 P
0.05 (ould be complicated and dif) 134.54 284 P
0.05 (\336cult to e) 268.42 284 P
0.05 (xtend to ne) 313.67 284 P
0.05 (w forms of data. Instead, the) 366.79 284 P
0.92 (DataStore library relies on a more \324uni\336ed\325 data model. Enter the Zebra data) 126 270 P
(chunk.) 126 256 T
0.04 (This chapter introduces the notion of data chunks and discusses the fundamen-) 126 230 P
0.69 (tal parts of the datachunk interf) 126 216 P
0.69 (ace. Subsequent chapters document the use of) 279.61 216 P
(datachunks for each of the speci\336c forms of data.) 126 202 T
72 159 558 161 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 159 558 161 R
7 X
0 0 0 1 0 0 0 K
V
72 160 117 160 2 L
0.5 H
2 Z
0 X
N
126 160 558 160 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(2.1) 100.32 165 T
(On the Nature of Data Chunks) 126 165 T
0 F
1.01 (Data chunks are the DataStore\325) 126 141 P
1.01 (s internal \050in-memory\051 representation for data) 279.33 141 P
1.78 (of all shapes and sizes. Basically) 126 127 P
1.78 (, a data chunk is a simple structure which) 291.44 127 P
-0.27 (includes an opaque block of bytes \050a \322chunk\323 of data) 126 113 P
0 9.6 Q
-0.22 (1) 377.85 117.8 P
0 12 Q
-0.27 (\051. The kick) 382.65 113 P
-0.27 (er is that e) 434.31 113 P
-0.27 (v) 482.86 113 P
-0.27 (ery) 488.68 113 P
0.26 (data chunk belongs to a) 126 99 P
4 F
0.26 (class) 243.63 99 P
0 F
0.26 (. The data chunk class attaches a particular inter-) 267.63 99 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 23
%%Page: "24" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunks) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(24) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
-0.12 (pretation to the data chunk\325) 108 678.02 P
-0.12 (s block of bytes and de\336nes the methods and opera-) 238.82 678.02 P
0.25 (tions appropriate for data chunks of that class. Datachunk classes are arranged) 108 664.02 P
1.52 (in a hierarch) 108 650.02 P
1.52 (y\321classes lo) 170.95 650.02 P
1.52 (wer in the hierarch) 235.82 650.02 P
1.52 (y) 330.61 650.02 P
4 F
1.52 (inherit) 341.12 650.02 P
0 F
1.52 ( functionality from the) 373.13 650.02 P
0.19 (higher classes. F) 108 636.02 P
0.19 (or e) 187.86 636.02 P
0.19 (xample, the image class de\336nes the methods for operating) 206.19 636.02 P
1.06 (on image data. Ho) 108 622.02 P
1.06 (we) 198.85 622.02 P
1.06 (v) 212.55 622.02 P
1.06 (er) 218.37 622.02 P
1.06 (, the image class inherits most of its implementation) 227.21 622.02 P
0.82 (and higher) 108 608.02 P
0.82 (-le) 159.56 608.02 P
0.82 (v) 171.92 608.02 P
0.82 (el functionality from the re) 177.74 608.02 P
0.82 (gular grid class, since images are in) 310.14 608.02 P
(f) 108 594.02 T
(act a class \050i.e., a type\051 of re) 111.88 594.02 T
(gular grid.) 246.31 594.02 T
54 551.02 540 553.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 551.02 540 553.02 R
7 X
0 0 0 1 0 0 0 K
V
54 552.02 99 552.02 2 L
0.5 H
2 Z
0 X
N
108 552.02 540 552.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(2.2) 82.32 557.02 T
(The Object-oriented Appr) 108 557.02 T
(oac) 252.44 557.02 T
(h) 273 557.02 T
0 F
1.21 (Essentially) 108 533.02 P
1.21 (, data chunks are b) 159.89 533.02 P
1.21 (uilt around an object-oriented approach to data) 254.13 533.02 P
-0.03 (or) 108 519.02 P
-0.03 (g) 117.78 519.02 P
-0.03 (anization. The unique characteristics of a particular or) 123.72 519.02 P
-0.03 (g) 382.53 519.02 P
-0.03 (anization of data are) 388.47 519.02 P
0.91 (contained in the methods and implementation of a speci\336c class. The current) 108 505.02 P
0.02 (data chunk implementation is not truly object-oriented, e) 108 491.02 P
0.02 (v) 380.47 491.02 P
0.02 (en though the design) 386.29 491.02 P
-0.12 (bears man) 108 477.02 P
-0.12 (y of its in\337uences. There is no dynamic binding nor an) 156.68 477.02 P
-0.12 (y virtual func-) 417.59 477.02 P
-0.17 (tions, and consequently no real polymorphism. Ho) 108 463.02 P
-0.17 (we) 349.33 463.02 P
-0.17 (v) 363.02 463.02 P
-0.17 (er) 368.84 463.02 P
-0.17 (, an introduction to the) 377.69 463.02 P
0.86 (concepts on which the data chunk design is based will aid the e) 108 449.02 P
0.86 (xplanation of) 421.48 449.02 P
1.74 (the interf) 108 435.02 P
1.74 (ace as a whole. This section simply outlines a fe) 153.28 435.02 P
1.74 (w object-oriented) 399.95 435.02 P
(concepts and ho) 108 421.02 T
(w the) 185.02 421.02 T
(y relate to the data chunk design.) 211.16 421.02 T
2 F
(2.2.1) 72.31 389.02 T
(Objects) 108 389.02 T
0 F
-0.17 (Objects possess state and a set of operations for changing that state or perform-) 108 371.02 P
-0.3 (ing actions. The operations are part of a strictly de\336ned public interf) 108 357.02 P
-0.3 (ace, b) 431.86 357.02 P
-0.3 (ut the) 459.3 357.02 P
1.03 (implementation of the operations and the state information is strictly pri) 108 343.02 P
1.03 (v) 463.31 343.02 P
1.03 (ate.) 469.01 343.02 P
0.7 (An object) 108 329.02 P
4 F
0.7 (encapsulates) 159.4 329.02 P
0 F
0.7 ( its state information and its implementation, allo) 221.39 329.02 P
0.7 (wing) 462 329.02 P
0.71 (the pri) 108 315.02 P
0.71 (v) 139.4 315.02 P
0.71 (ate implementation to change without af) 145.1 315.02 P
0.71 (fecting the public interf) 341.99 315.02 P
0.71 (ace to) 456.97 315.02 P
1.28 (the object. In practice, this means one DataChunk class may change the use) 108 301.02 P
0.63 (and interpretation of its opaque storage space in the DataChunk structure, b) 108 287.02 P
0.63 (ut) 476.66 287.02 P
1.02 (the change will not adv) 108 273.02 P
1.02 (ersely af) 223.88 273.02 P
1.02 (fect its application interf) 265.58 273.02 P
1.02 (ace nor an) 386.16 273.02 P
1.02 (y applica-) 437.33 273.02 P
2.32 (tions which use that class. The perv) 108 259.02 P
2.32 (asi) 292.56 259.02 P
2.32 (v) 305.6 259.02 P
2.32 (e optimization enhancements men-) 311.42 259.02 P
1.53 (tioned in a later chapter all took place internally without an) 108 245.02 P
1.53 (y impact on the) 407.08 245.02 P
(e) 108 231.02 T
(xternal interf) 113.15 231.02 T
(ace.) 175.34 231.02 T
2 F
(2.2.2) 72.31 199.02 T
(Classes) 108 199.02 T
0 F
1.27 (A class is essentially an object type, in the programming sense of the w) 108 181.02 P
1.27 (ord.) 467 181.02 P
1.27 (Just as a type is a set whose members are le) 108 167.02 P
1.27 (g) 329.77 167.02 P
1.27 (al v) 335.71 167.02 P
1.27 (alues for a v) 354.34 167.02 P
1.27 (ariable of that) 416.82 167.02 P
0.43 (type, a class names a set to which particular objects belong. All objects of the) 108 153.02 P
1.48 (same class share the same public interf) 108 139.02 P
1.48 (ace, b) 303.37 139.02 P
1.48 (ut each object controls its o) 332.59 139.02 P
1.48 (wn) 471.33 139.02 P
54 100.98 540 130.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108.98 252 108.98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  A data chunk on steroids is called a \322data hunk\323, while a holy data chunk is a \322data monk\323, and so on...) 108 94.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 24
%%Page: "25" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Object-oriented Appr) 126 736.18 T
(oac) 234.33 736.18 T
(h) 249.75 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (25) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.64 (state. In other w) 126 678.02 P
0.64 (ords, the class de\336nes the object interf) 205.12 678.02 P
0.64 (ace and the set of state) 392.49 678.02 P
(v) 126 664.02 T
(ariables which an object of that type contains.) 131.7 664.02 T
-0.02 (One class can be deri) 126 638.02 P
-0.02 (v) 227.59 638.02 P
-0.02 (ed from an e) 233.41 638.02 P
-0.02 (xisting class by inheriting some or all of the) 293.49 638.02 P
1.34 (characteristics of the e) 126 624.02 P
1.34 (xisting class, such as interf) 237.45 624.02 P
1.34 (ace functions or state v) 371.66 624.02 P
1.34 (ari-) 487.34 624.02 P
0.42 (ables. The deri) 126 610.02 P
0.42 (v) 197.52 610.02 P
0.42 (ed class is a) 203.34 610.02 P
4 F
0.42 (subclass) 265.02 610.02 P
0 F
0.42 ( of the original class. F) 305.69 610.02 P
0.42 (or e) 417.61 610.02 P
0.42 (xample, a Car) 436.17 610.02 P
0.19 (class might deri) 126 596.02 P
0.19 (v) 202.09 596.02 P
0.19 (e some of its functionality from the V) 207.91 596.02 P
0.19 (ehicle class, since a Car) 388.92 596.02 P
0.19 (has state v) 126 582.02 P
0.19 (ariables and functions which are common to all v) 176.08 582.02 P
0.19 (ehicles. Car w) 414.08 582.02 P
0.19 (ould) 482.66 582.02 P
1.63 (be a subclass of V) 126 568.02 P
1.63 (ehicle. A) 218.49 568.02 P
4 F
1.63 (super) 268.06 568.02 P
1.63 (class) 294.28 568.02 P
0 F
1.63 ( is the opposite of subclass; a class\325) 318.28 568.02 P
1.63 (s) 499.33 568.02 P
(superclass is the class from which it w) 126 554.02 T
(as deri) 310.19 554.02 T
(v) 341.54 554.02 T
(ed.) 347.36 554.02 T
0.21 (An object\325) 126 528.02 P
0.21 (s operations are often referred to as methods. A) 176.54 528.02 P
4 F
0.21 (method) 409.05 528.02 P
0 F
0.21 ( is an opera-) 444.38 528.02 P
2.71 (tion or interf) 126 514.02 P
2.71 (ace function, usually public, de\336ned for a particular class of) 191.97 514.02 P
0.89 (objects. Relati) 126 500.02 P
0.89 (v) 195.25 500.02 P
0.89 (e to data chunks, a data chunk method usually just refers to a) 201.07 500.02 P
(function implemented for a particular data chunk class.) 126 486.02 T
2 F
(2.2.3) 90.31 454.02 T
(Wh) 126 454.02 T
(y Data Chunks?) 144.42 454.02 T
0 F
-0.12 (The data chunk design permits a v) 126 436.02 P
-0.12 (ariety of forms of data to be stored internally) 289.64 436.02 P
0.26 (in one block of memory while allo) 126 422.02 P
0.26 (wing the data to be interpreted according to) 293.23 422.02 P
1.48 (its class. An) 126 408.02 P
1.48 (y data chunk is easily manipulable depending upon the le) 187.1 408.02 P
1.48 (v) 475.05 408.02 P
1.48 (el of) 480.86 408.02 P
0.8 (interpretation needed for the manipulation. F) 126 394.02 P
0.8 (or e) 345.11 394.02 P
0.8 (xample, a data chunk can be) 364.05 394.02 P
0.2 (serialized and transferred o) 126 380.02 P
0.2 (v) 256.7 380.02 P
0.2 (er a netw) 262.52 380.02 P
0.2 (ork without an) 306.78 380.02 P
0.2 (y need to kno) 376.99 380.02 P
0.2 (w what form) 442.28 380.02 P
1.4 (of data the data chunk\325) 126 366.02 P
1.4 (s block of bytes contains. An) 240.92 366.02 P
1.4 (y present or future data) 387.08 366.02 P
1.68 (chunk class will inherit this functionality of the ra) 126 352.02 P
1.68 (w class. The four) 378.57 352.02 P
1.68 (-dimen-) 466.01 352.02 P
-0.29 (sional super) 126 338.02 P
-0.29 (-collider gluon residual radiation data chunk class w) 183.13 338.02 P
-0.29 (ould be \324serial-) 431.93 338.02 P
6.47 (izable\325 for netw) 126 324.02 P
6.47 (ork transfer without an) 214.79 324.02 P
6.47 (y e) 343.65 324.02 P
6.47 (xtra w) 364.27 324.02 P
6.47 (ork in that class\325) 400.94 324.02 P
6.47 (s) 499.33 324.02 P
2.66 (implementation. A common operation among similar data or) 126 310.02 P
2.66 (g) 435.73 310.02 P
2.66 (anizations is) 441.67 310.02 P
1 (implemented within a class which interprets the data only as much as neces-) 126 296.02 P
1.79 (sary to perform the operation. As an e) 126 282.02 P
1.79 (xample, the T) 320.3 282.02 P
1.79 (ransparent class imple-) 389.78 282.02 P
2.87 (ments the notion of samples. A collection of data samples can be sorted) 126 268.02 P
1.16 (chronologically by a T) 126 254.02 P
1.16 (ransparent class method without kno) 238.04 254.02 P
1.16 (wing whether the) 418.36 254.02 P
-0.14 (samples contain images, mesonets, pro\336les, or simple scalars. Further dif) 126 240.02 P
-0.14 (feren-) 475.36 240.02 P
0.27 (tiation between data or) 126 226.02 P
0.27 (g) 236.23 226.02 P
0.27 (anizations is imposed by deeper subclasses. Each sub-) 242.17 226.02 P
3.59 (class b) 126 212.02 P
3.59 (uilds on the capability implemented in its parent classes, thereby) 161.68 212.02 P
(a) 126 198.02 T
(v) 131.09 198.02 T
(oiding redundant coding among similar data or) 136.85 198.02 T
(g) 361.94 198.02 T
(anizations.) 367.88 198.02 T
2 F
(2.2.4) 90.31 166.02 T
(DataChunk Classes) 126 166.02 T
0 F
0.87 (Data chunk classes are arranged in a hierarch) 126 148.02 P
0.87 (y) 348.91 148.02 P
0.87 (. The) 354.13 148.02 P
4 F
0.87 (r) 383.52 148.02 P
0.87 (aw) 388 148.02 P
0 F
0.87 ( class sits in the sole) 402.01 148.02 P
-0.06 (slot at the top of the hierarch) 126 134.02 P
-0.06 (y) 263.55 134.02 P
-0.06 (. It does not attach an) 268.77 134.02 P
-0.06 (y interpretation to the block) 370.93 134.02 P
0.23 (of bytes. As f) 126 120.02 P
0.23 (ar as the ra) 191.24 120.02 P
0.23 (w class is concerned, a data chunk is an opaque block) 244.06 120.02 P
0.86 (of bytes and only that. The methods of the ra) 126 106.02 P
0.86 (w class are limited to treating a) 348.86 106.02 P
-0.06 (data chunk as a block of bytes. Other classes are deri) 126 92.02 P
-0.06 (v) 378.7 92.02 P
-0.06 (ed from the functionality) 384.52 92.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 25
%%Page: "26" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunks) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(26) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.15 (af) 108 678.02 P
1.15 (forded by the ra) 117.02 678.02 P
1.15 (w class. Those classes which branch directly from the ra) 196.59 678.02 P
1.15 (w) 477.34 678.02 P
0.42 (class are called) 108 664.02 P
4 F
0.42 (subclasses) 184.89 664.02 P
0 F
0.42 ( of the ra) 235.55 664.02 P
0.42 (w class. More classes are deri) 279.61 664.02 P
0.42 (v) 424.02 664.02 P
0.42 (ed from the) 429.84 664.02 P
0.25 (subclasses of the ra) 108 650.02 P
0.25 (w class. Each successi) 201.54 650.02 P
0.25 (v) 309.29 650.02 P
0.25 (e le) 315.11 650.02 P
0.25 (v) 332.05 650.02 P
0.25 (el of subclass in the class hier-) 337.87 650.02 P
0.81 (arch) 108 636.02 P
0.81 (y adds more detail to the interpretation of the data chunk based upon the) 128.59 636.02 P
0.17 (functionality of the classes higher up the hierarch) 108 622.02 P
0.17 (y) 346.11 622.02 P
0.17 (. The deeper the class in the) 351.33 622.02 P
1.39 (hierarch) 108 608.02 P
1.39 (y) 147.25 608.02 P
1.39 (, the higher the le) 152.47 608.02 P
1.39 (v) 241.38 608.02 P
1.39 (el of abstraction attached to the data in the data) 247.2 608.02 P
0.2 (chunk. The class of image data is a subclass of gridded data, since an image is) 108 594.02 P
1.76 (a more limited interpretation\321another abstraction be) 108 580.02 P
1.76 (yond re) 372.25 580.02 P
1.76 (gular grids. An) 410.15 580.02 P
2.02 (image is more than a tw) 108 566.02 P
2.02 (o-dimensional array of v) 232.97 566.02 P
2.02 (alues; an image is a tw) 357.04 566.02 P
2.02 (o-) 476 566.02 P
(dimensional array of bytes ordinarily displayed as a raster image.) 108 552.02 T
54 521.02 540 534.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
153 528.02 540 528.02 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 528.02 144 528.02 2 L
0 Z
N
0 0 612 792 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE  1) 54 515.02 T
3 9 Q
(The DataChunk class hier) 189 515.02 T
(arch) 292.45 515.02 T
(y) 309.68 515.02 T
54 87.98 540 686.02 C
57.8 118 536.2 512.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
57.8 134.02 534.8 512.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
57.8 134.02 534.8 512.02 R
7 X
0 0 0 1 0 0 0 K
V
J
66.8 332.02 183.8 332.02 183.8 152.02 66.8 152.02 4 Y
V
J
66.8 332.02 183.8 332.02 183.8 152.02 66.8 152.02 4 Y
J
66.8 328.52 66.8 332.02 70.3 332.02 3 L
1 H
2 Z
0 X
N
[7.333 7.333] 7.333 I
70.3 332.02 180.29 332.02 2 L
N
J
180.29 332.02 183.8 332.02 183.8 328.52 3 L
N
[6.92 6.92] 6.92 I
183.8 328.52 183.8 155.52 2 L
N
J
183.8 155.52 183.8 152.02 180.3 152.02 3 L
N
[7.333 7.333] 7.333 I
180.3 152.02 70.3 152.02 2 L
N
J
70.3 152.02 66.8 152.02 66.8 155.52 3 L
N
[6.92 6.92] 6.92 I
66.8 155.52 66.8 328.51 2 L
N
J
327.8 332.02 525.8 332.02 525.8 152.02 327.8 152.02 4 Y
7 X
V
J
327.8 332.02 525.8 332.02 525.8 152.02 327.8 152.02 4 Y
J
327.8 328.52 327.8 332.02 331.3 332.02 3 L
0 X
N
[7.074 7.074] 7.074 I
331.3 332.02 522.29 332.02 2 L
N
J
522.29 332.02 525.8 332.02 525.8 328.52 3 L
N
[6.92 6.92] 6.92 I
525.8 328.52 525.8 155.52 2 L
N
J
525.8 155.52 525.8 152.02 522.3 152.02 3 L
N
[7.074 7.074] 7.074 I
522.3 152.02 331.3 152.02 2 L
N
J
331.3 152.02 327.8 152.02 327.8 155.52 3 L
N
[6.92 6.92] 6.92 I
327.8 155.52 327.8 328.51 2 L
N
J
192.8 332.02 318.8 332.02 318.8 152.02 192.8 152.02 4 Y
7 X
V
J
192.8 332.02 318.8 332.02 318.8 152.02 192.8 152.02 4 Y
J
192.8 328.52 192.8 332.02 196.3 332.02 3 L
0 X
N
[7 7] 7 I
196.3 332.02 315.3 332.02 2 L
N
J
315.3 332.02 318.8 332.02 318.8 328.52 3 L
N
[6.92 6.92] 6.92 I
318.8 328.52 318.8 155.52 2 L
N
J
318.8 155.52 318.8 152.02 315.3 152.02 3 L
N
[7 7] 7 I
315.3 152.02 196.3 152.02 2 L
N
J
196.3 152.02 192.8 152.02 192.8 155.52 3 L
N
[6.92 6.92] 6.92 I
192.8 155.52 192.8 328.51 2 L
N
J
66.8 386.02 525.8 386.02 525.8 341.02 66.8 341.02 4 Y
7 X
V
J
66.8 386.02 525.8 386.02 525.8 341.02 66.8 341.02 4 Y
J
66.8 382.52 66.8 386.02 70.3 386.02 3 L
0 X
N
[6.954 6.954] 6.954 I
70.3 386.02 522.29 386.02 2 L
N
J
522.29 386.02 525.8 386.02 525.8 382.52 3 L
N
[7.6 7.6] 7.6 I
525.8 382.52 525.8 344.52 2 L
N
J
525.8 344.52 525.8 341.02 522.3 341.02 3 L
N
[6.954 6.954] 6.954 I
522.3 341.02 70.3 341.02 2 L
N
J
70.3 341.02 66.8 341.02 66.8 344.52 3 L
N
[7.6 7.6] 7.6 I
66.8 344.52 66.8 382.52 2 L
N
J
66.8 503.02 525.8 503.02 525.8 395.02 66.8 395.02 4 Y
7 X
V
J
66.8 503.02 525.8 503.02 525.8 395.02 66.8 395.02 4 Y
J
66.8 499.52 66.8 503.02 70.3 503.02 3 L
0 X
N
[6.954 6.954] 6.954 I
70.3 503.02 522.29 503.02 2 L
N
J
522.29 503.02 525.8 503.02 525.8 499.52 3 L
N
[6.733 6.733] 6.733 I
525.8 499.52 525.8 398.52 2 L
N
J
525.8 398.52 525.8 395.02 522.3 395.02 3 L
N
[6.954 6.954] 6.954 I
522.3 395.02 70.3 395.02 2 L
N
J
70.3 395.02 66.8 395.02 66.8 398.52 3 L
N
[6.733 6.733] 6.733 I
66.8 398.52 66.8 499.51 2 L
N
J
9 24 Q
(Raw) 274.88 467.59 T
(T) 229.23 413.62 T
(ranspar) 246.68 413.62 T
(ent) 340.52 413.62 T
(MetData) 201.8 310.1 T
(Location) 92.84 355.1 T
(Boundary) 327.8 355.1 T
(NSpace) 83.72 241.33 T
(Scalar) 206.24 241.33 T
(RGrid) 345.32 238.1 T
(IRGrid) 434.72 238.1 T
(Image) 342.44 166.1 T
90 450 1.5 1.5 270 300.8 451.2 GG
300.8 449.7 304.6 449.7 300.8 436.46 297 449.7 4 Y
3 H
0 Z
N
300.8 449.7 304.6 449.7 300.8 436.46 297 449.7 4 Y
V
300.8 462.5 300.8 451.2 2 L
2 Z
N
90 450 1.5 1.5 233.13 258.91 348.16 GG
258.01 346.96 261.05 344.69 250.06 336.37 254.97 349.24 4 Y
0 Z
N
258.01 346.96 261.05 344.69 250.06 336.37 254.97 349.24 4 Y
V
300.8 404.02 258.91 348.17 2 L
2 Z
N
90 450 1.5 1.5 323.13 365.65 389.13 GG
366.85 388.23 369.13 391.27 377.44 380.28 364.57 385.19 4 Y
0 Z
N
366.85 388.23 369.13 391.27 377.44 380.28 364.57 385.19 4 Y
V
345.8 404.02 365.65 389.13 2 L
2 Z
N
90 450 1.5 1.5 194.04 167.38 381.91 GG
165.92 381.55 166.85 377.86 153.07 378.33 165 385.23 4 Y
0 Z
N
165.92 381.55 166.85 377.86 153.07 378.33 165 385.23 4 Y
V
255.8 404.02 167.38 381.91 2 L
2 Z
N
90 450 1.5 1.5 194.04 149.38 269.4 GG
147.92 269.04 148.85 265.35 135.07 265.82 147 272.72 4 Y
0 Z
N
147.92 269.04 148.85 265.35 135.07 265.82 147 272.72 4 Y
V
255.8 296.02 149.38 269.4 2 L
2 Z
N
90 450 1.5 1.5 254.06 252.34 283.91 GG
251.93 282.47 255.58 281.43 248.29 269.74 248.28 283.51 4 Y
0 Z
N
251.93 282.47 255.58 281.43 248.29 269.74 248.28 283.51 4 Y
V
255.8 296.02 252.34 283.91 2 L
2 Z
N
90 450 1.5 1.5 343.73 344.42 270.16 GG
345.86 269.74 346.92 273.38 358.57 266.03 344.8 266.09 4 Y
0 Z
N
345.86 269.74 346.92 273.38 358.57 266.03 344.8 266.09 4 Y
V
255.8 296.02 344.42 270.16 2 L
2 Z
N
90 450 1.5 1.5 352.03 460.81 267.3 GG
462.29 267.09 462.82 270.86 475.41 265.26 461.77 263.33 4 Y
0 Z
N
462.29 267.09 462.82 270.86 475.41 265.26 461.77 263.33 4 Y
V
255.8 296.02 460.81 267.3 2 L
2 Z
N
90 450 1.5 1.5 270 363.8 203.69 GG
363.8 202.19 367.6 202.19 363.8 188.95 360 202.19 4 Y
0 Z
N
363.8 202.19 367.6 202.19 363.8 188.95 360 202.19 4 Y
V
363.8 228.5 363.8 203.69 2 L
2 Z
N
453.8 467.02 516.8 485.02 R
7 X
V
0 12 Q
0 X
(Chapter) 461 477.02 T
(2) 501.99 477.02 T
111.8 161.02 174.8 179.02 R
7 X
V
0 X
(Chapter) 119 171.02 T
(6) 159.99 171.02 T
453.8 161.02 516.8 179.02 R
7 X
V
0 X
(Chapter) 461 171.02 T
(5) 501.99 171.02 T
453.8 359.02 516.8 377.02 R
7 X
V
0 X
(Chapter) 461 369.02 T
(3) 501.99 369.02 T
246.8 161.02 309.8 179.02 R
7 X
V
0 X
(Chapter) 254 171.02 T
(4) 294.99 171.02 T
57.8 118 536.2 512.02 C
54 87.98 540 686.02 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 26
%%Page: "27" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Object-oriented Appr) 126 736.18 T
(oac) 234.33 736.18 T
(h) 249.75 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (27) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
-0.05 (The class hierarch) 126 678.02 P
-0.05 (y as it e) 213.14 678.02 P
-0.05 (xists no) 249.8 678.02 P
-0.05 (w is intended to support a series of data or) 286.45 678.02 P
-0.05 (g) 488.74 678.02 P
-0.05 (a-) 494.68 678.02 P
1.21 (nizations; this hierarch) 126 664.02 P
1.21 (y may be seen as a whole in the diagram in Figure) 237.69 664.02 P
1.21 (1.) 495 664.02 P
6.88 (The DataStore interf) 126 650.02 P
6.88 (ace enumerates each of these classes with the) 238.27 650.02 P
5 F
2.23 (DataClass) 126 636.02 P
0 F
0.93 ( type. The classes in Figure) 190.8 636.02 P
0.93 (1 correspond to the symbols belo) 329.77 636.02 P
0.93 (w) 493.12 636.02 P
0.93 (,) 501 636.02 P
(which are all de\336ned in) 126 622.02 T
5 F
(DataStore.h) 241.64 622.02 T
0 F
(.) 320.84 622.02 T
5 F
(DCC_Raw) 230.4 596.02 T
(DCC_Transparent) 230.4 582.02 T
(DCC_Location) 230.4 568.02 T
(DCC_MetData) 230.4 554.02 T
(DCC_Boundary) 230.4 540.02 T
(DCC_NSpace) 230.4 526.02 T
(DCC_Scalar) 230.4 512.02 T
(DCC_RGrid) 230.4 498.02 T
(DCC_IRGrid) 230.4 484.02 T
(DCC_Image) 230.4 470.02 T
0 F
0.38 (In addition, there is a symbol) 126 444.02 P
5 F
0.91 (DCC_None) 271.26 444.02 P
0 F
0.38 (, which represents the indeterminate) 328.86 444.02 P
(or unspeci\336ed class.) 126 430.02 T
0.38 (Notice that the Ra) 126 404.02 P
0.38 (w and T) 213.94 404.02 P
0.38 (ransparent classes are ancestors of e) 253.6 404.02 P
0.38 (v) 428.11 404.02 P
0.38 (ery other class) 433.93 404.02 P
1.72 (in the hierarch) 126 390.02 P
1.72 (y) 198.69 390.02 P
1.72 (. These tw) 203.91 390.02 P
1.72 (o classes form the basic foundation for all of the) 256.89 390.02 P
1.64 (other data chunk classes. The rest of this chapter is dedicated to describing) 126 376.02 P
0.82 (only these tw) 126 362.02 P
0.82 (o classes, while the follo) 191.52 362.02 P
0.82 (wing chapters will co) 312.82 362.02 P
0.82 (v) 418.08 362.02 P
0.82 (er the other data) 423.9 362.02 P
(chunk classes.) 126 348.02 T
2 F
(2.2.5) 90.31 316.02 T
(Implementation Notes) 126 316.02 T
0 F
-0.26 (The original implementation of the data chunk class hierarch) 126 298.02 P
-0.26 (y attempted to fol-) 415.79 298.02 P
0.35 (lo) 126 284.02 P
0.35 (w the rigors of te) 135.04 284.02 P
0.35 (xtbook programming, taking the notion of encapsulation to) 218.24 284.02 P
0.18 (its fullest e) 126 270.02 P
0.18 (xtent. The bene\336ts of easily maintainable and modi\336able code ha) 178.85 270.02 P
0.18 (v) 492.85 270.02 P
0.18 (e) 498.67 270.02 P
0.17 (justi\336ed the approach. Each data chunk class and method kno) 126 256.02 P
0.17 (ws as little about) 422.5 256.02 P
0.44 (the underlying implementations of other classes and methods as possible. The) 126 242.02 P
0.39 (dra) 126 228.02 P
0.39 (wback has been that as a result, there w) 141.14 228.02 P
0.39 (as a certain amount of cop) 333.79 228.02 P
0.39 (ying and) 461.94 228.02 P
-0.17 (shuf) 126 214.02 P
-0.17 (\337ing of data internally which is, strictly speaking, unnecessary) 146.36 214.02 P
-0.17 (. Experience) 444.19 214.02 P
0.19 (has since re) 126 200.02 P
0.19 (v) 182.05 200.02 P
0.19 (ealed the bottlenecks and shortcomings of the original implemen-) 187.87 200.02 P
1.09 (tation. The current v) 126 186.02 P
1.09 (ersion is a much-re\336ned and more ef) 227.07 186.02 P
1.09 (\336cient implementa-) 409.25 186.02 P
(tion, though there will al) 126 172.02 T
(w) 244.21 172.02 T
(ays be room for impro) 252.76 172.02 T
(v) 359.89 172.02 T
(ement.) 365.71 172.02 T
-0.16 (Also, the current design of the data chunk class hierarch) 126 146.02 P
-0.16 (y still lea) 393.75 146.02 P
-0.16 (v) 437.18 146.02 P
-0.16 (es some data) 443.01 146.02 P
1.03 (modeling and handling needs un-met. The data chunk model is by no means) 126 132.02 P
2.2 (complete or uni) 126 118.02 P
2.2 (v) 205.43 118.02 P
2.2 (ersal; it focuses almost e) 211.26 118.02 P
2.2 (xclusi) 337.88 118.02 P
2.2 (v) 366.25 118.02 P
2.2 (ely on the meteorological,) 372.07 118.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 27
%%Page: "28" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunks) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(28) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.4 (oceanographic, and other geoph) 108 678.02 P
0.4 (ysical data sets handled by the Zebra softw) 262.41 678.02 P
0.4 (are) 471.35 678.02 P
(system.) 108 664.02 T
54 621.02 540 623.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 621.02 540 623.02 R
7 X
0 0 0 1 0 0 0 K
V
54 622.02 99 622.02 2 L
0.5 H
2 Z
0 X
N
108 622.02 540 622.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(2.3) 82.32 627.02 T
(General DataChunk Routines) 108 627.02 T
0 F
0.4 (First, there are a fe) 108 603.02 P
0.4 (w data chunk routines which do not apply to an) 199.59 603.02 P
0.4 (y particular) 430.62 603.02 P
2.65 (class. All data chunks, re) 108 589.02 P
2.65 (g) 238.39 589.02 P
2.65 (ardless of class, can be created, destro) 244.33 589.02 P
2.65 (yed, and) 442.7 589.02 P
(dumped.) 108 575.02 T
0.65 (Man) 108 549.02 P
0.65 (y data chunk methods and structures refer to the) 129.82 549.02 P
5 F
1.57 (DataPtr) 369.3 549.02 P
0 F
0.65 ( type, de\336ned) 419.7 549.02 P
(in) 108 535.02 T
5 F
(DataStore.h) 120.34 535.02 T
0 F
( as a pointer to v) 199.54 535.02 T
(oid.) 278.95 535.02 T
5 9 Q
(typedef void *DataPtr;) 126 512.02 T
0 12 Q
(In f) 108 487.02 T
(act, the interf) 124.87 487.02 T
(ace uses the types) 188.4 487.02 T
5 F
(DataPtr) 277.04 487.02 T
0 F
( and) 327.44 487.02 T
5 F
(void) 350.77 487.02 T
(*) 386.77 487.02 T
0 F
( interchangeably) 393.97 487.02 T
(.) 472.84 487.02 T
0.59 (The) 108 461.02 P
5 F
1.41 (DataChunk) 130.25 461.02 P
0 F
0.59 ( structure is also de\336ned in) 195.05 461.02 P
5 F
1.41 (DataStore.h) 330.57 461.02 P
0 F
0.59 (, and e) 409.77 461.02 P
0.59 (xcept for) 442.43 461.02 P
0.4 (some well-de\336ned e) 108 447.02 P
0.4 (xceptions it should not be publicly accessed. Applications) 205.26 447.02 P
-0.04 (will al) 108 433.02 P
-0.04 (w) 138.18 433.02 P
-0.04 (ays refer to a data chunk through a pointer to a) 146.72 433.02 P
5 F
-0.09 (DataChunk) 373.25 433.02 P
0 F
-0.04 ( structure.) 438.05 433.02 P
2 F
(2.3.1) 72.31 401.02 T
(Creating Data Chunks) 108 401.02 T
0 F
(Data chunks are al) 108 383.02 T
(w) 196.85 383.02 T
(ays created with) 205.39 383.02 T
5 F
(dc_CreateDC\050\051) 286.37 383.02 T
0 F
(.) 379.97 383.02 T
7 10 Q
(DataChunk *) 126 364.35 T
(dc_CreateDC \050class\051) 126 352.35 T
(DataClass class;) 126 340.35 T
0 12 Q
1.72 (Where) 108 315.02 P
7 F
4.12 (class) 144.7 315.02 P
0 F
1.72 ( is the class of the desired data chunk. The return v) 180.7 315.02 P
1.72 (alue is a) 443.24 315.02 P
1.06 (pointer to a ne) 108 301.02 P
1.06 (w) 179.87 301.02 P
1.06 (, empty data chunk of the gi) 187.75 301.02 P
1.06 (v) 328.12 301.02 P
1.06 (en class. Do not try to free the) 333.95 301.02 P
0.81 (memory referenced by this pointer\321the memory occupied by the data chunk) 108 287.02 P
(must be released with the) 108 273.02 T
5 F
(dc_DestroyDC\050\051) 232.98 273.02 T
0 F
( function described belo) 333.78 273.02 T
(w) 449.12 273.02 T
(.) 457.01 273.02 T
2.58 (Usually an application needs to associate a platform with this data chunk) 108 247.02 P
(through the only publicly-accessible member of the) 108 233.02 T
5 F
(DataChunk) 358.3 233.02 T
0 F
( structure:) 423.1 233.02 T
5 9 Q
(dc = dc_CreateDC \050DCC_Raw\051;) 126 210.02 T
(dc->dc_Platform = platform_id;) 126 199.02 T
0 12 Q
0.81 (None of the other members of the) 108 174.02 P
5 F
1.95 (DataChunk) 278.65 174.02 P
0 F
0.81 ( structure should be accessed) 343.45 174.02 P
(by the application.) 108 160.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 28
%%Page: "29" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(General DataChunk Routines) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (29) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(2.3.2) 90.31 678.02 T
(Destr) 126 678.02 T
(o) 156.43 678.02 T
(ying Data Chunks) 163.52 678.02 T
0 F
(T) 126 660.02 T
(o delete an e) 132.37 660.02 T
(xisting data chunk, call) 192.5 660.02 T
5 F
(dc_DestroyDC\050\051) 306.83 660.02 T
0 F
( as follo) 407.63 660.02 T
(ws:) 445.99 660.02 T
7 10 Q
(void) 144 641.35 T
(dc_DestroyDC \050dc\051) 144 629.35 T
(DataChunk *dc;) 144 617.35 T
0 12 Q
0.54 (This function frees the) 126 592.02 P
5 F
1.29 (DataChunk) 239.45 592.02 P
0 F
0.54 ( structure and an) 304.25 592.02 P
0.54 (y memory that w) 385.33 592.02 P
0.54 (as allo-) 468.47 592.02 P
0.48 (cated for data and for auxiliary information. Be careful not to reference infor-) 126 578.02 P
2.56 (mation from the data chunk after the data chunk has been destro) 126 564.02 P
2.56 (yed. F) 461.62 564.02 P
2.56 (or) 494 564.02 P
1.27 (e) 126 550.02 P
1.27 (xample, the array of \336eld ID\325) 131.15 550.02 P
1.27 (s returned by one data chunk function resides) 277.48 550.02 P
2.01 (within the data chunk\325) 126 536.02 P
2.01 (s memory) 239.01 536.02 P
2.01 (. Destro) 287.9 536.02 P
2.01 (ying the data chunk in) 327.77 536.02 P
2.01 (v) 441.97 536.02 P
2.01 (alidates the) 447.67 536.02 P
(pointer to that array of \336eld ID\325) 126 522.02 T
(s.) 277.31 522.02 T
2 F
(2.3.3) 90.31 490.02 T
(Deb) 126 490.02 T
(ug) 148.43 490.02 T
(ging Data Chunks) 162.97 490.02 T
0 F
0.87 (A debug method e) 126 472.02 P
0.87 (xists which prints information about an) 216.74 472.02 P
0.87 (y data chunk to the) 409.22 472.02 P
(terminal.) 126 458.02 T
7 10 Q
(void) 144 439.35 T
(dc_DumpDC \050dc\051) 144 427.35 T
(DataChunk *dc;) 144 415.35 T
0 12 Q
1.72 (Ev) 126 390.02 P
1.72 (ery class implements its o) 139.15 390.02 P
1.72 (wn dump method which prints the information) 269.71 390.02 P
4.61 (being maintained and interpreted in the data chunk by the class. The) 126 376.02 P
5 F
1.77 (dc_DumpDC\050\051) 126 362.02 P
0 F
0.74 ( function calls the dump method of each of the classes in the) 205.2 362.02 P
7 F
3.75 (dc) 126 348.02 P
0 F
1.56 ( data chunk\325) 140.4 348.02 P
1.56 (s class hierarch) 202.18 348.02 P
1.56 (y) 278.56 348.02 P
1.56 (, in order from the deepest class le) 283.78 348.02 P
1.56 (v) 459.05 348.02 P
1.56 (el up to) 464.87 348.02 P
1.7 (Ra) 126 334.02 P
1.7 (w) 139.15 334.02 P
1.7 (. The follo) 147.04 334.02 P
1.7 (wing code prints the contents\321as interpreted by each of the) 200.46 334.02 P
(Image superclasses\321of an empty Image data chunk.) 126 320.02 T
5 9 Q
(DataChunk *dc;) 144 297.02 T
(dc = dc_CreateDC \050DCC_Image\051;) 144 275.02 T
(dc_DumpDC \050dc\051;) 144 264.02 T
(dc_DestroyDC \050dc\051;) 144 253.02 T
2 12 Q
(2.3.4) 90.31 222.02 T
(Class Inf) 126 222.02 T
(ormation) 175.78 222.02 T
0 F
(At the v) 126 204.02 T
(ery least it is nice to be able to inquire as to the class of a data chunk.) 164.48 204.02 T
7 10 Q
(DataClass) 144 185.35 T
(dc_Class \050dc\051) 144 173.35 T
(DataChunk *dc;) 144 161.35 T
0 12 Q
(It is also often necessary to test whether one class is a subclass of another) 126 136.02 T
(.) 477.94 136.02 T
7 10 Q
(bool) 144 117.35 T
(dc_IsSubClassOf \050class, superclass\051) 144 105.35 T
(DataClass class, superclass;) 144 93.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 29
%%Page: "30" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunks) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(30) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
-0.3 (This function returns non-zero if) 108 678.02 P
7 F
-0.71 (superclass) 266.15 678.02 P
0 F
-0.3 ( is an ancestor of) 338.15 678.02 P
7 F
-0.71 (class) 420.97 678.02 P
0 F
-0.3 (. Note) 456.97 678.02 P
(that a class quali\336es as a subclass of itself, so this e) 108 664.02 T
(xpression is al) 353.8 664.02 T
(w) 422.34 664.02 T
(ays true:) 430.88 664.02 T
5 9 Q
(dc_IsSubClassOf \050class, class\051) 126 641.02 T
0 12 Q
2.66 (The) 108 616.02 P
5 F
6.38 (dc_SuperClass) 132.32 616.02 P
0 F
2.66 ( function returns the superclass of the gi) 225.92 616.02 P
2.66 (v) 436.54 616.02 P
2.66 (en Data-) 442.36 616.02 P
(Chunk class.) 108 602.02 T
7 10 Q
(DataClass) 126 583.35 T
(dc_SuperClass \050class\051) 126 571.35 T
(DataClass class;) 126 559.35 T
0 12 Q
0.37 (All classes are subclasses of the top-le) 108 534.02 P
0.37 (v) 293.85 534.02 P
0.37 (el the Ra) 299.67 534.02 P
0.37 (w class, and the superclass of) 342.88 534.02 P
(Ra) 108 520.02 T
(w is) 121.15 520.02 T
5 F
(DCC_None) 143.82 520.02 T
0 F
(.) 201.42 520.02 T
54 477.02 540 479.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 477.02 540 479.02 R
7 X
0 0 0 1 0 0 0 K
V
54 478.02 99 478.02 2 L
0.5 H
2 Z
0 X
N
108 478.02 540 478.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(2.4) 82.32 483.02 T
(The Ra) 108 483.02 T
(w DataChunk Class) 147.83 483.02 T
0 F
0.57 (At the root of the data chunk class hierarch) 108 459.02 P
0.57 (y is the ra) 319.12 459.02 P
0.57 (w class, designated with) 367.64 459.02 P
0.79 (the class identi\336er) 108 445.02 P
5 F
1.9 (DCC_Raw) 200.69 445.02 P
0 9.6 Q
0.63 (1) 251.09 449.82 P
0 12 Q
0.79 (. The only vie) 255.89 445.02 P
0.79 (w of the data chunk supported at) 324.62 445.02 P
1.38 (this le) 108 431.02 P
1.38 (v) 138.09 431.02 P
1.38 (el is that of a single chunk of memory) 143.91 431.02 P
1.38 (, with no interpretation placed) 336.16 431.02 P
0.4 (upon it. This le) 108 417.02 P
0.4 (v) 181.57 417.02 P
0.4 (el is not v) 187.39 417.02 P
0.4 (ery useful to applications directly) 235.41 417.02 P
0.4 (, b) 396.87 417.02 P
0.4 (ut pro) 409.03 417.02 P
0.4 (vides se) 437.58 417.02 P
0.4 (v-) 476 417.02 P
0.49 (eral utilities used by its subclasses. The Ra) 108 403.02 P
0.49 (w class also implements the global) 316.56 403.02 P
(attrib) 108 389.02 T
(ute mechanism, described in Chapter) 133.09 389.02 T
(8.) 313.73 389.02 T
2 F
(2.4.1) 72.31 357.02 T
(Pub) 108 357.02 T
(lic Access) 130.55 357.02 T
0 F
0.73 (Since the ra) 108 339.02 P
0.73 (w class does not introduce an) 165.92 339.02 P
0.73 (y kind of interpretation or or) 310.35 339.02 P
0.73 (g) 450.74 339.02 P
0.73 (aniza-) 456.68 339.02 P
1.09 (tion of the data, there are no ra) 108 325.02 P
1.09 (w methods meant for use by general applica-) 262.75 325.02 P
(tions.) 108 311.02 T
0.04 (The) 108 285.02 P
5 F
0.1 (DataChunk) 129.7 285.02 P
0 F
0.04 ( member) 194.5 285.02 P
5 F
0.1 (dc_Platform) 239.91 285.02 P
0 F
0.04 (, mentioned in Section) 319.11 285.02 P
0.04 (2.3.1, is the) 430.24 285.02 P
1.76 (only public access point on the ra) 108 271.02 P
1.76 (w le) 279.04 271.02 P
1.76 (v) 300.83 271.02 P
1.76 (el intended for general applications.) 306.65 271.02 P
2.88 (This member should be set to an appropriate) 108 257.02 P
5 F
6.92 (PlatformId) 347.7 257.02 P
0 F
2.88 ( for the data) 419.7 257.02 P
-0.09 (chunk, and it can also be read to determine a data chunk\325) 108 243.02 P
-0.09 (s assigned platform, if) 379.61 243.02 P
(an) 108 229.02 T
(y) 119.15 229.02 T
(.) 124.37 229.02 T
2 F
(2.4.2) 72.31 197.02 T
(Priv) 108 197.02 T
(ate Access) 130.44 197.02 T
0 F
1.02 (The subclasses of the ra) 108 179.02 P
1.02 (w class and special data store applications may need) 226.54 179.02 P
1.3 (access to the lo) 108 165.02 P
1.3 (w-le) 184.59 165.02 P
1.3 (v) 205.62 165.02 P
1.3 (el implementation of the data chunk. The) 211.44 165.02 P
5 F
3.13 (DataChunk) 421.2 165.02 P
0 F
(can be accessed at this le) 108 151.02 T
(v) 227.33 151.02 T
(el through tw) 233.15 151.02 T
(o additional structure members:) 297.02 151.02 T
54 100.98 540 130.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108.98 252 108.98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  Dante had his \322great chain of being\323\321we ha) 108 94.98 T
(v) 280.77 94.98 T
(e the \322great chunk of being\323.) 285.14 94.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 30
%%Page: "31" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The T) 126 736.18 T
(ransparent DataChunk Class) 149.28 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (31) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(int dc_DataLen;) 144 680.02 T
(DataPtr dc_Data;) 144 669.02 T
0 12 Q
0.26 (The) 126 644.02 P
5 F
0.62 (dc_DataLen) 147.92 644.02 P
0 F
0.26 ( member is the length of the data stored in this data chunk,) 219.92 644.02 P
0.84 (in bytes, while) 126 630.02 P
5 F
2.02 (dc_Data) 201.85 630.02 P
0 F
0.84 ( is a pointer to the data itself. It is possible that the) 252.25 630.02 P
0.77 (structure of this data may become more comple) 126 616.02 P
0.77 (x in the future, so application) 359.5 616.02 P
0.49 (de) 126 602.02 P
0.49 (v) 137.03 602.02 P
0.49 (elopers should be careful about writing code that is dependent on this par-) 142.85 602.02 P
(ticular or) 126 588.02 T
(g) 169.44 588.02 T
(anization.) 175.38 588.02 T
0.9 (There is a signi\336cant distinction between pri) 126 562.02 P
0.9 (v) 344.41 562.02 P
0.9 (ate, internal access for subclass) 350.11 562.02 P
0.97 (implementations and public access for applications. DataStore client applica-) 126 548.02 P
-0.27 (tions need not and should not w) 126 534.02 P
-0.27 (orry about lo) 276.95 534.02 P
-0.27 (w-le) 338.11 534.02 P
-0.27 (v) 359.13 534.02 P
-0.27 (el access. Some v) 364.95 534.02 P
-0.27 (ery special-) 448.62 534.02 P
3.84 (ized applications may need to perform operations at the ra) 126 520.02 P
3.84 (w le) 439.32 520.02 P
3.84 (v) 463.19 520.02 P
3.84 (el. F) 469.01 520.02 P
3.84 (or) 494 520.02 P
0.08 (e) 126 506.02 P
0.08 (xample, the) 131.15 506.02 P
5 F
0.19 (NetXfr) 190.3 506.02 P
0 F
0.08 ( client accesses data chunks at the ra) 233.5 506.02 P
0.08 (w le) 408.84 506.02 P
0.08 (v) 428.95 506.02 P
0.08 (el to send data) 434.77 506.02 P
2.19 (as a stream of bytes across a netw) 126 492.02 P
2.19 (ork. Ho) 303.49 492.02 P
2.19 (we) 342.04 492.02 P
2.19 (v) 355.73 492.02 P
2.19 (er) 361.55 492.02 P
2.19 (, this manual does not yet) 370.39 492.02 P
(include the kind of information necessary to write this kind of application.) 126 478.02 T
72 435.02 558 437.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 435.02 558 437.02 R
7 X
0 0 0 1 0 0 0 K
V
72 436.02 117 436.02 2 L
0.5 H
2 Z
0 X
N
126 436.02 558 436.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(2.5) 100.32 441.02 T
(The T) 126 441.02 T
(ransparent DataChunk Class) 157.04 441.02 T
0 F
1.06 (The transparent class \050subclassed from) 126 417.02 P
5 F
2.55 (DCC_Raw) 320.27 417.02 P
0 F
1.06 (\051 implements a vie) 370.67 417.02 P
1.06 (w of the) 462.55 417.02 P
1.12 (data chunk as a series of samples, each of which has an associated time and) 126 403.02 P
0.76 (block of data. Optionally) 126 389.02 P
0.76 (, a sample can also include a location and a subplat-) 247.48 389.02 P
0.16 (form. The data itself remains un-interpreted by the) 126 375.02 P
5 F
0.37 (DCC_Transparent) 372.85 375.02 P
0 F
0.16 ( data) 480.85 375.02 P
(class, hence its name.) 126 361.02 T
0.1 (Fe) 126 335.02 P
0.1 (w applications will actually create a transparent data chunk. Ho) 137.7 335.02 P
0.1 (we) 442.88 335.02 P
0.1 (v) 456.57 335.02 P
0.1 (er) 462.39 335.02 P
0.1 (, virtu-) 471.24 335.02 P
1.56 (ally e) 126 321.02 P
1.56 (v) 153.59 321.02 P
1.56 (ery application will ha) 159.41 321.02 P
1.56 (v) 271.5 321.02 P
1.56 (e need of the transparent methods, since the) 277.32 321.02 P
1.56 (y) 498 321.02 P
0.16 (access fundamental information such as sample times and locations. Lik) 126 307.02 P
0.16 (e) 473.98 307.02 P
0.16 (wise,) 479 307.02 P
0.84 (the characteristics of the transparent class in\337uence the operation of all of its) 126 293.02 P
1.98 (subclasses. F) 126 279.02 P
1.98 (or e) 190.46 279.02 P
1.98 (xample, since the transparent class does not concern itself) 210.58 279.02 P
0.87 (with the chronological order of its samples, none of its subclasses care about) 126 265.02 P
(chronological order either) 126 251.02 T
(.) 249.97 251.02 T
0.91 (All of the functions e) 126 225.02 P
0.91 (xplained here, as methods of the transparent class, only) 231.44 225.02 P
1.16 (w) 126 211.02 P
1.16 (ork on data chunks which are subclasses of transparent. This is rather aca-) 134.54 211.02 P
(demic, since only the ra) 126 197.02 T
(w class is not a transparent subclass.) 240.13 197.02 T
2 F
(2.5.1) 90.31 165.02 T
(Samples in the T) 126 165.02 T
(ransparent Class) 220.4 165.02 T
0 F
0.08 (The transparent data class primarily pro) 126 147.02 P
0.08 (vides the abstraction of data as a series) 317.17 147.02 P
-0.22 (of samples. These samples need not ha) 126 133.02 P
-0.22 (v) 310.72 133.02 P
-0.22 (e uniform length, and the) 316.54 133.02 P
-0.22 (y may contain) 436.45 133.02 P
(an) 126 119.02 T
(y sort of data of interest to the application.) 137.15 119.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 31
%%Page: "32" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunks) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(32) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(T) 108 678.02 T
(o add a ne) 114.37 678.02 T
(w sample to a data chunk, use) 163.06 678.02 T
5 F
(dc_AddSample\050\051) 309.7 678.02 T
0 F
( as follo) 410.5 678.02 T
(ws:) 448.86 678.02 T
7 10 Q
(void) 126 659.35 T
(dc_AddSample \050dc, when, data, len\051) 126 647.35 T
(DataChunk *dc;) 126 635.35 T
(ZebTime *when;) 126 623.35 T
(DataPtr data;) 126 611.35 T
(int len;) 126 599.35 T
0 12 Q
-0.1 (Where) 108 574.02 P
7 F
-0.25 (dc) 142.88 574.02 P
0 F
-0.1 ( is a data chunk subclassed from) 157.27 574.02 P
5 F
-0.25 (DCC_Transparent) 314.85 574.02 P
0 F
-0.1 (,) 422.85 574.02 P
7 F
-0.25 (when) 428.74 574.02 P
0 F
-0.1 ( is the) 457.54 574.02 P
0.66 (time associated with this sample,) 108 560.02 P
7 F
1.59 (data) 272.65 560.02 P
0 F
0.66 ( is the actual sample data, and) 301.45 560.02 P
7 F
1.59 (len) 452.73 560.02 P
0 F
0.66 ( is) 474.33 560.02 P
0.37 (the length of this sample in bytes. On return, the sample will ha) 108 546.02 P
0.37 (v) 416.81 546.02 P
0.37 (e been added) 422.63 546.02 P
2.27 (to the end of the gi) 108 532.02 P
2.27 (v) 209.37 532.02 P
2.27 (en data chunk. The transparent class inde) 215.19 532.02 P
2.27 (x) 426.25 532.02 P
2.27 (es samples) 432.07 532.02 P
1.19 (be) 108 518.02 P
1.19 (ginning at zero, so the \336rst sample in the data chunk becomes inde) 119.15 518.02 P
1.19 (x zero.) 452.16 518.02 P
1.04 (The ne) 108 504.02 P
1.04 (xt sample will automatically ha) 141.85 504.02 P
1.04 (v) 296.45 504.02 P
1.04 (e inde) 302.27 504.02 P
1.04 (x one. Each addition of sample) 332.13 504.02 P
(assigns the ne) 108 490.02 T
(xt a) 174.48 490.02 T
(v) 191.9 490.02 T
(ailable inde) 197.6 490.02 T
(x to that sample.) 253.08 490.02 T
0.35 (The function) 108 464.02 P
5 F
0.85 (dc_AddSample\050\051) 173.36 464.02 P
0 F
0.35 ( creates a ne) 274.16 464.02 P
0.35 (w sample with the minimum of) 333.89 464.02 P
1.29 (information necessary to describe a sample. Ev) 108 450.02 P
1.29 (ery sample must possess at a) 341.87 450.02 P
1.12 (minimum a time and a block of data. Be) 108 436.02 P
1.12 (yond that, the transparent class also) 309.76 436.02 P
0.67 (allo) 108 422.02 P
0.67 (ws a sample to possess a location and a platform identi\336er) 125.7 422.02 P
0.67 (. Locations and) 411.01 422.02 P
0.11 (platforms are described in the sections belo) 108 408.02 P
0.11 (w) 316.34 408.02 P
0.11 (. Dif) 324.23 408.02 P
0.11 (ferent subclasses of transpar-) 346.04 408.02 P
0.22 (ent manipulate this auxiliary information dif) 108 394.02 P
0.22 (ferently to implement their partic-) 321.8 394.02 P
(ular data abstractions.) 108 380.02 T
-0.06 (The transparent class does not put man) 108 354.02 P
-0.06 (y restrictions on the samples it contains.) 294.07 354.02 P
1.14 (Samples do not need to be in chronological order) 108 340.02 P
1.14 (, and in f) 352.61 340.02 P
1.14 (act man) 398.58 340.02 P
1.14 (y samples) 437.2 340.02 P
0.17 (can e) 108 326.02 P
0.17 (xist with identical times. The length of a sample may be as small as zero,) 132.98 326.02 P
-0.05 (or it may be as high as 65,535 bytes. Ho) 108 312.02 P
-0.05 (we) 300.27 312.02 P
-0.05 (v) 313.97 312.02 P
-0.05 (er) 319.79 312.02 P
-0.05 (, there is currently an upper limit) 328.63 312.02 P
-0.05 (on the number of samples: 65,535 \050yeah, the size of an unsigned short\051. Unfor-) 108 298.02 P
2.07 (tunately) 108 284.02 P
2.07 (, the transparent class does not check for breaches of this limit, so) 145.88 284.02 P
(applications should be careful not to go o) 108 270.02 T
(v) 306.13 270.02 T
(erboard when adding samples.) 311.95 270.02 T
1.25 (If it becomes necessary to change the size of a sample in a data chunk, you) 108 244.02 P
(may use) 108 230.02 T
5 F
(dc_AdjustSample\050\051) 150.66 230.02 T
0 F
(.) 273.06 230.02 T
7 10 Q
(void) 126 211.35 T
(dc_AdjustSample \050dc, sample, newsize\051) 126 199.35 T
(DataChunk *dc;) 126 187.35 T
(int sample, newsize;) 126 175.35 T
0 12 Q
1.13 (Where) 108 150.02 P
7 F
2.72 (dc) 144.11 150.02 P
0 F
1.13 ( is a data chunk subclassed from) 158.51 150.02 P
5 F
2.72 (DCC_Transparent) 324.74 150.02 P
0 F
1.13 (, sample is) 432.74 150.02 P
0.34 (the inde) 108 136.02 P
0.34 (x of the sample to be modi\336ed \050starting with zero\051, and) 146.49 136.02 P
7 F
0.83 (newsize) 417.59 136.02 P
0 F
0.34 ( the) 467.99 136.02 P
0.51 (ne) 108 122.02 P
0.51 (w size of this sample. On return, the sample will ha) 119.03 122.02 P
0.51 (v) 370.52 122.02 P
0.51 (e the requested size. If) 376.33 122.02 P
0.34 (the ne) 108 108.02 P
0.34 (w size is smaller than the e) 137.03 108.02 P
0.34 (xisting sample size, the ne) 268.19 108.02 P
0.34 (w size is noted b) 395.56 108.02 P
0.34 (ut) 476.66 108.02 P
0.7 (no memory is release or shuf) 108 94.02 P
0.7 (\337ed. Otherwise, this call is almost guaranteed to) 250.15 94.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 32
%%Page: "33" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The T) 126 736.18 T
(ransparent DataChunk Class) 149.28 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (33) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.05 (mo) 126 678.02 P
0.05 (v) 141.16 678.02 P
0.05 (e and cop) 146.98 678.02 P
0.05 (y data to mak) 192.94 678.02 P
0.05 (e room for a lar) 257.96 678.02 P
0.05 (ger sample. Consequently) 332.58 678.02 P
0.05 (, it should) 456.22 678.02 P
(be a) 126 664.02 T
(v) 145.42 664.02 T
(oided whene) 151.18 664.02 T
(v) 211.86 664.02 T
(er possible.) 217.68 664.02 T
(T) 126 638.02 T
(o locate an e) 132.37 638.02 T
(xisting sample in a data chunk, use) 192.5 638.02 T
5 F
(dc_GetSample\050\051) 363.16 638.02 T
0 F
(.) 463.96 638.02 T
7 10 Q
(DataPtr) 144 619.35 T
(dc_GetSample \050dc, sample, len\051) 144 607.35 T
(DataChunk *dc;) 144 595.35 T
(int sample, *len;) 144 583.35 T
0 12 Q
0.72 (Where) 126 558.02 P
7 F
1.73 (dc) 161.7 558.02 P
0 F
0.72 ( is a data chunk subclassed from) 176.1 558.02 P
5 F
1.73 (DCC_Transparent) 339.43 558.02 P
0 F
0.72 (, and) 447.43 558.02 P
7 F
1.73 (sam-) 475.2 558.02 P
0.02 (ple) 126 544.02 P
0 F
0.01 ( is the inde) 147.6 544.02 P
0.01 (x of the desired sample \050starting with zero\051. If the gi) 199.78 544.02 P
0.01 (v) 449.85 544.02 P
0.01 (en sample) 455.67 544.02 P
0.96 (e) 126 530.02 P
0.96 (xists, the return v) 131.15 530.02 P
0.96 (alue will be the be) 217.06 530.02 P
0.96 (ginning of the sample data, and) 308.7 530.02 P
7 F
2.3 (len) 468.11 530.02 P
0 F
0.96 (, if) 489.71 530.02 P
3.37 (non-) 126 516.02 P
5 F
8.08 (NULL) 148 516.02 P
0 F
3.37 (, will be set to the length of this sample. Otherwise) 176.8 516.02 P
5 F
8.08 (NULL) 460.83 516.02 P
0 F
3.37 ( is) 489.63 516.02 P
(returned.) 126 502.02 T
6.82 (T) 126 476.02 P
6.82 (o \336nd out ho) 132.37 476.02 P
6.82 (w man) 213.53 476.02 P
6.82 (y samples are stored in a data chunk, call) 252.5 476.02 P
5 F
(dc_GetNSample\050\051) 126 462.02 T
0 F
(, sho) 234 462.02 T
(wn belo) 256.37 462.02 T
(w:) 294.4 462.02 T
7 10 Q
(int) 144 443.35 T
(dc_GetNSample \050dc\051) 144 431.35 T
(DataChunk *dc;) 144 419.35 T
0 12 Q
(Where) 126 394.02 T
7 F
(dc) 160.98 394.02 T
0 F
( is the a data chunk subclassed from) 175.38 394.02 T
5 F
(DCC_Transparent) 351.35 394.02 T
0 F
(.) 459.35 394.02 T
2 F
(2.5.2) 90.31 362.02 T
(Sample Times) 126 362.02 T
0 F
(T) 126 344.02 T
(o get the time associated with a gi) 132.37 344.02 T
(v) 295.06 344.02 T
(en sample, use) 300.88 344.02 T
5 F
(dc_GetTime\050\051) 374.2 344.02 T
0 F
(.) 460.6 344.02 T
7 10 Q
(void) 144 325.35 T
(dc_GetTime \050dc, sample, when\051) 144 313.35 T
(DataChunk *dc;) 144 301.35 T
(int sample;) 144 289.35 T
(ZebTime *when;) 144 277.35 T
0 12 Q
(T) 126 252.02 T
(o modify the time associated with an) 132.37 252.02 T
4 F
(e) 312.02 252.02 T
(xisting) 317.11 252.02 T
0 F
( sample, use) 349.12 252.02 T
5 F
(dc_SetTime\050\051) 411.11 252.02 T
0 F
(:) 497.51 252.02 T
7 10 Q
(void dc_SetTime \050dc, sample, when\051) 144 233.35 T
(DataChunk *dc;) 144 221.35 T
(int sample;) 144 209.35 T
(ZebTime *when;) 144 197.35 T
0 12 Q
8.93 (The sample indices can be sorted in chronological order using) 126 172.02 P
5 F
(dc_SortSamples\050\051) 126 158.02 T
0 F
(.) 241.2 158.02 T
7 10 Q
(void) 144 139.35 T
(dc_SortSamples \050dc\051) 144 127.35 T
(DataChunk *dc;) 144 115.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 33
%%Page: "34" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunks) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(34) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
-0.1 (The samples in the data chunk) 108 678.02 P
7 F
-0.25 (dc) 256.02 678.02 P
0 F
-0.1 ( will be sorted chronologically) 270.42 678.02 P
-0.1 (. This function) 415.88 678.02 P
0.43 (does not actually mo) 108 664.02 P
0.43 (v) 208.76 664.02 P
0.43 (e an) 214.59 664.02 P
0.43 (y data around; it only sorts the samples which point) 234.49 664.02 P
0.47 (to the data. Consequently) 108 650.02 P
0.47 (, there is not too much o) 230.64 650.02 P
0.47 (v) 349.64 650.02 P
0.47 (erhead in calling this func-) 355.46 650.02 P
0.58 (tion. Upon completion, the earliest sample will ha) 108 636.02 P
0.58 (v) 351.48 636.02 P
0.58 (e inde) 357.3 636.02 P
0.58 (x zero, and the most) 386.69 636.02 P
(recent \050latest\051 sample will be at the end, with the highest inde) 108 622.02 T
(x.) 402.44 622.02 T
0.67 (Often, applications use this function to sort samples which ha) 108 596.02 P
0.67 (v) 409.09 596.02 P
0.67 (e been mer) 414.91 596.02 P
0.67 (ged) 468.67 596.02 P
0.34 (and added from other data chunks. Data chunks can be stored more ef) 108 582.02 P
0.34 (\336ciently) 446.66 582.02 P
(in most of the data \336le formats if the samples are in chronological order) 108 568.02 T
(.) 451.62 568.02 T
2 F
(2.5.3) 72.31 536.02 T
(Sample Locations) 108 536.02 T
0 F
0.6 (The transparent data class can associate a location with each sample in a data) 108 518.02 P
0.44 (chunk. The locations may either be static, meaning that e) 108 504.02 P
0.44 (v) 385.24 504.02 P
0.44 (ery sample shares a) 391.06 504.02 P
0.95 (single location; or the locations are mobile, in which case the location v) 108 490.02 P
0.95 (aries) 463.34 490.02 P
(from one sample to the ne) 108 476.02 T
(xt.) 232.8 476.02 T
(T) 108 450.02 T
(o set a static location in a data chunk, use) 114.37 450.02 T
5 F
(dc_SetStaticLoc\050\051) 316.01 450.02 T
0 F
(.) 438.41 450.02 T
7 10 Q
(void dc_SetStaticLoc \050dc, loc\051) 126 431.35 T
(DataChunk *dc;) 126 419.35 T
(Location *loc;) 126 407.35 T
0 12 Q
0.72 (Where) 108 382.02 P
7 F
1.74 (dc) 143.7 382.02 P
0 F
0.72 ( is the usual transparent data chunk, and) 158.1 382.02 P
7 F
1.74 (loc) 358.85 382.02 P
0 F
0.72 ( is the location which) 380.45 382.02 P
(applies to all data within the data chunk.) 108 368.02 T
0.36 (Mobile locations must be set for e) 108 342.02 P
0.36 (v) 273.16 342.02 P
0.36 (ery sample. T) 278.98 342.02 P
0.36 (o do so, call) 344.38 342.02 P
5 F
0.85 (dc_SetLoc\050\051) 406.8 342.02 P
0 F
(as follo) 108 328.02 T
(ws:) 143.36 328.02 T
7 10 Q
(void dc_SetLoc \050dc, sample, loc\051) 126 309.35 T
(DataChunk *dc;) 126 297.35 T
(int sample;) 126 285.35 T
(Location *loc;) 126 273.35 T
0 12 Q
-0.15 (Where) 108 248.02 P
7 F
-0.37 (sample) 142.83 248.02 P
0 F
-0.15 ( is the inde) 186.03 248.02 P
-0.15 (x of the sample to be modi\336ed \050it must already e) 237.72 248.02 P
-0.15 (xist) 468.66 248.02 P
(in the data chunk\051, and) 108 234.02 T
7 F
(loc) 220.64 234.02 T
0 F
( is the location to be associated with this sample.) 242.24 234.02 T
-0.03 (When possible, it is more ef) 108 208.02 P
-0.03 (\336cient to set locations for multiple samples using a) 242.22 208.02 P
(single call to) 108 194.02 T
5 F
(dc_SetMLoc\050\051) 172.33 194.02 T
0 F
(.) 258.73 194.02 T
7 10 Q
(void) 126 175.35 T
(dc_SetMLoc \050dc, begin, nsamp, loc\051) 126 163.35 T
(DataChunk *dc;) 126 151.35 T
(int begin;) 126 139.35 T
(int nsamp;) 126 127.35 T
(Location *loc;) 126 115.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 34
%%Page: "35" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The T) 126 736.18 T
(ransparent DataChunk Class) 149.28 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (35) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.18 (The locations stored in the array) 126 678.02 P
7 F
0.43 (loc) 285.03 678.02 P
0 F
0.18 ( are copied into the samples be) 306.63 678.02 P
0.18 (ginning at) 455.49 678.02 P
-0.29 (inde) 126 664.02 P
-0.29 (x) 146.48 664.02 P
7 F
-0.7 (begin) 155.19 664.02 P
0 F
-0.29 (, where) 191.19 664.02 P
7 F
-0.7 (nsamp) 228.92 664.02 P
0 F
-0.29 ( is the number of samples to set and the number of) 264.92 664.02 P
(locations which will be read from the) 126 650.02 T
7 F
(loc) 308.3 650.02 T
0 F
( array) 329.9 650.02 T
(.) 356.77 650.02 T
(Use) 126 624.02 T
5 F
(dc_GetLoc\050\051) 147.66 624.02 T
0 F
( to obtain a location for a sample in a data chunk:) 226.86 624.02 T
7 10 Q
(void dc_GetLoc \050dc, sample, loc\051) 144 605.35 T
(DataChunk *dc;) 144 593.35 T
(int sample;) 144 581.35 T
(Location *loc;) 144 569.35 T
0 12 Q
0.14 (This routine will return in) 126 544.02 P
7 F
0.34 (loc) 253.7 544.02 P
0 F
0.14 ( the location for the gi) 275.3 544.02 P
0.14 (v) 382.03 544.02 P
0.14 (en sample, re) 387.85 544.02 P
0.14 (g) 451.6 544.02 P
0.14 (ardless of) 457.54 544.02 P
(whether the data chunk is using static or mobile locations.) 126 530.02 T
2 F
(2.5.4) 90.31 498.02 T
(Sample Altitude Units) 126 498.02 T
0 F
0.31 (The) 126 480.02 P
5 F
0.75 (Location) 147.97 480.02 P
0 F
0.31 ( structures associated with a transparent data chunk originally) 205.57 480.02 P
0.22 (implied altitude coordinates in kilometers abo) 126 466.02 P
0.22 (v) 347.23 466.02 P
0.22 (e mean sea le) 353.05 466.02 P
0.22 (v) 417.71 466.02 P
0.22 (el \050) 423.53 466.02 P
5 F
0.52 (AU_kmMSL) 439.4 466.02 P
0 F
0.22 (\051.) 497 466.02 P
0.43 (Ho) 126 452.02 P
0.43 (we) 140.36 452.02 P
0.43 (v) 154.06 452.02 P
0.43 (er) 159.88 452.02 P
0.43 (, the altitude units interf) 168.72 452.02 P
0.43 (ace supplied by the Zebra library no) 285.31 452.02 P
0.43 (w allo) 460.88 452.02 P
0.43 (ws) 490.67 452.02 P
14.67 (dif) 126 438.02 P
14.67 (ferent altitude units to be assigned to locations. The) 139.03 438.02 P
5 F
4.97 (dc_SetLocAltUnits\050\051) 126 424.02 P
0 F
2.07 ( function sets the altitude units of a transparent) 262.8 424.02 P
1.6 (data chunk, allo) 126 410.02 P
1.6 (wing altitude coordinates to be interpreted using the correct) 205.23 410.02 P
(units.) 126 396.02 T
7 10 Q
(void) 144 377.35 T
(dc_SetLocAltUnits \050dc, units\051) 144 365.35 T
(DataChunk *dc;) 144 353.35 T
(AltUnitType units;) 144 341.35 T
0 12 Q
8.66 (As usual,) 126 316.02 P
7 F
20.79 (dc) 190.99 316.02 P
0 F
8.66 ( is a data chunk which must be a subclass of) 205.39 316.02 P
5 F
27.09 (DCC_Transparent) 126 302.02 P
0 F
11.29 (. The) 234 302.02 P
7 F
27.09 (units) 284.23 302.02 P
0 F
11.29 ( parameter is the enumerated) 320.23 302.02 P
5 F
0.6 (AltUnitType) 126 288.02 P
0 F
0.25 ( to be associated with the data chunk\325) 205.2 288.02 P
0.25 (s locations. This manual) 386.59 288.02 P
1.79 (contains a brief o) 126 274.02 P
1.79 (v) 214.16 274.02 P
1.79 (ervie) 219.98 274.02 P
1.79 (w of altitude units in Section) 243.67 274.02 P
1.79 (1.4.2,  \322) 393.94 274.02 P
1.79 (Altitudes\323, on) 434.88 274.02 P
2.43 (page) 126 260.02 P
2.43 (17. The complete altitude units interf) 151.66 260.02 P
2.43 (ace is documented in the) 341.69 260.02 P
4 F
2.43 (Zebr) 475.51 260.02 P
2.43 (a) 498 260.02 P
(Libr) 126 246.02 T
(ary Interface Manual) 146.5 246.02 T
0 F
(.) 249.14 246.02 T
-0.26 (Consider the case of creating a data chunk to hold a balloon sounding. The data) 126 220.02 P
0.43 (chunk will actually be a proper subclass) 126 206.02 P
0 9.6 Q
0.34 (1) 320.54 210.82 P
0 12 Q
0.43 ( of transparent, b) 325.34 206.02 P
0.43 (ut the locations will) 407.71 206.02 P
0.09 (be stored at the transparent le) 126 192.02 P
0.09 (v) 267.09 192.02 P
0.09 (el. The sounding is mobile, so a location will be) 272.91 192.02 P
0.14 (set for each sample. If the locations are being stored as pressure altitudes, then) 126 178.02 P
(the altitude units should be set to) 126 164.02 T
5 F
(AU_mb) 287 164.02 T
0 F
(.) 322.52 164.02 T
5 9 Q
(DataChunk *dc;) 144 141.02 T
72 100.98 558 130.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 108.98 270 108.98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  T) 126 94.98 T
(ak) 142.03 94.98 T
(en from set theory) 150.43 94.98 T
(, class A is a proper subclass of class B if) 215.59 94.98 T
(f A is a subclass of B and A <> B.) 364.09 94.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 35
%%Page: "36" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunks) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(36) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(Location locns[ NUM_LOCATIONS ];) 126 680.02 T
(...) 126 669.02 T
(dc_SetLocAltUnits \050dc, AU_mb\051;) 126 658.02 T
(for \050i = 0; i < dc_GetNSample \050dc\051; ++i\051) 126 647.02 T
(dc_SetLoc \050dc, i, locns+i\051;) 154.8 636.02 T
0 12 Q
1.27 (Note that the location units do not af) 108 611.02 P
1.27 (fect the w) 292.26 611.02 P
1.27 (ay locations are stored in the) 342 611.02 P
1.84 (data chunk. The location coordinates are not con) 108 597.02 P
1.84 (v) 353.69 597.02 P
1.84 (erted or translated in an) 359.51 597.02 P
1.84 (y) 480 597.02 P
-0.06 (w) 108 583.02 P
-0.06 (ay) 116.54 583.02 P
-0.06 (. Consequently) 127.09 583.02 P
-0.06 (, the altitude units setting can be changed at an) 198.25 583.02 P
-0.06 (y time during) 421.46 583.02 P
(the life of a data chunk.) 108 569.02 T
1.46 (Other parts of an application will need to inquire about the altitude units to) 108 543.02 P
3.78 (properly interpret the altitude coordinates of the locations. The function) 108 529.02 P
5 F
(dc_GetLocAltUnits\050\051) 108 515.02 T
0 F
( performs this inquiry) 244.8 515.02 T
(.) 348.35 515.02 T
7 10 Q
(AltUnitType) 126 496.35 T
(dc_GetLocAltUnits \050dc\051) 126 484.35 T
(DataChunk *dc;) 126 472.35 T
0 12 Q
-0.12 (This function returns the current altitude units for the data chunk) 108 447.02 P
7 F
-0.29 (dc) 420.31 447.02 P
0 F
-0.12 ( as an enu-) 434.71 447.02 P
3.46 (merated) 108 433.02 P
5 F
8.32 (AltUnitType) 153.12 433.02 P
0 F
3.46 (. Thus, gi) 232.32 433.02 P
3.46 (v) 284.28 433.02 P
3.46 (en the e) 290.1 433.02 P
3.46 (xample abo) 334.17 433.02 P
3.46 (v) 393.11 433.02 P
3.46 (e, the e) 398.93 433.02 P
3.46 (xpression) 440 433.02 P
(belo) 108 419.02 T
(w e) 128.36 419.02 T
(v) 145.06 419.02 T
(aluates to true.) 150.76 419.02 T
5 9 Q
(dc_GeLocAltUnits \050dc\051 == AU_mb) 126 396.02 T
2 12 Q
(2.5.5) 72.31 365.02 T
(Samples Fr) 108 365.02 T
(om Multiple Platf) 172.45 365.02 T
(orms) 268.22 365.02 T
0 F
0.81 (On occasion, it is desirable to include data from se) 108 347.02 P
0.81 (v) 357.62 347.02 P
0.81 (eral platforms in a single) 363.44 347.02 P
-0.28 (data chunk. The transparent data class supports this mode by allo) 108 333.02 P
-0.28 (wing the asso-) 417.23 333.02 P
(ciation of a platform identi\336er \050type) 108 319.02 T
5 F
(PlatformId) 283.31 319.02 T
0 F
(\051 with e) 355.31 319.02 T
(v) 391.67 319.02 T
(ery sample.) 397.49 319.02 T
(Use) 108 293.02 T
5 F
(dc_SetPlat\050\051) 129.66 293.02 T
0 F
( to set the platform for a data chunk sample:) 216.06 293.02 T
7 10 Q
(void dc_SetPlat \050dc, sample, platform\051) 126 274.35 T
(DataChunk *dc;) 126 262.35 T
(int sample;) 126 250.35 T
(PlatformId platform;) 126 238.35 T
0 12 Q
4.94 (Where) 108 213.02 P
7 F
11.85 (sample) 147.92 213.02 P
0 F
4.94 ( is an e) 191.12 213.02 P
4.94 (xisting sample in) 239.42 213.02 P
7 F
11.85 (dc) 339.24 213.02 P
0 F
4.94 (, and) 353.64 213.02 P
7 F
11.85 (platform) 389.85 213.02 P
0 F
4.94 ( is the) 447.45 213.02 P
5 F
(PlatformId) 108 199.02 T
0 F
( of the platform for this sample.) 180 199.02 T
0.06 (T) 108 173.02 P
0.06 (o retrie) 114.37 173.02 P
0.06 (v) 148.45 173.02 P
0.06 (e the platform associated with a gi) 154.27 173.02 P
0.06 (v) 318.95 173.02 P
0.06 (en sample, call) 324.77 173.02 P
5 F
0.14 (dc_GetPlat\050\051) 399.6 173.02 P
0 F
(as follo) 108 159.02 T
(ws:) 143.36 159.02 T
7 10 Q
(PlatformId dc_GetPlat \050dc, sample\051) 126 140.35 T
(DataChunk *dc;) 126 128.35 T
(int sample;) 126 116.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 36
%%Page: "37" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The T) 126 736.18 T
(ransparent DataChunk Class) 149.28 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (37) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.6 (The return v) 126 678.02 P
0.6 (alue will be the platform associated with the gi) 186.21 678.02 P
0.6 (v) 415.33 678.02 P
0.6 (en sample in) 421.15 678.02 P
7 F
1.43 (dc) 486.6 678.02 P
0 F
0.6 (,) 501 678.02 P
0.53 (or) 126 664.02 P
5 F
1.27 (BadPlatform) 139.52 664.02 P
0 F
0.53 ( if) 218.72 664.02 P
7 F
1.27 (sample) 233.11 664.02 P
0 F
0.53 ( does not e) 276.31 664.02 P
0.53 (xist. If no platform has been e) 329.38 664.02 P
0.53 (xplic-) 476 664.02 P
3.32 (itly set for a sample, the sample\325) 126 650.02 P
3.32 (s platform def) 301.56 650.02 P
3.32 (aults to the v) 375.39 650.02 P
3.32 (alue of the) 446.71 650.02 P
5 F
(dc_Platform) 126 636.02 T
0 F
( \336eld of the data chunk structure.) 205.2 636.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 37
%%Page: "38" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunks) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(38) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 38
%%Page: "39" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (39) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 3 \245) 126 677 S
0 24 Q
-0.48 (The Location Classes:) 252 677 S
-0.48 (Location and Boundary) 252 647 S
72 418 558 420 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 418 558 420 R
7 X
0 0 0 1 0 0 0 K
V
72 419 117 419 2 L
0.5 H
2 Z
0 X
N
126 419 558 419 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(3.1) 100.32 424 T
(The Boundar) 126 424 T
(y DataChunk Class) 200.12 424 T
0 F
4.68 (The boundary data class \050class identi\336er) 126 400 P
5 F
11.23 (DCC_Boundary) 350.03 400 P
0 F
4.68 (, subclass of) 435.65 400 P
5 F
5.9 (DCC_Transparent) 126 386 P
0 F
2.46 (\051 is oriented to) 234 386 P
2.46 (w) 310.74 386 P
2.46 (ard the representation of data in the) 319.28 386 P
1.61 (form of outlines or boundaries\321essentially a series of locations in ph) 126 372 P
1.61 (ysical) 476 372 P
0.61 (space. It is a relati) 126 358 P
0.61 (v) 215.11 358 P
0.61 (ely simple class, with just a couple of methods for storing) 220.93 358 P
(boundaries into data chunks and getting them back out ag) 126 344 T
(ain.) 402.24 344 T
(T) 126 318 T
(o store a boundary into a data chunk, use) 132.37 318 T
5 F
(dc_BndAdd\050\051) 331.67 318 T
0 F
( as follo) 410.87 318 T
(ws:) 449.23 318 T
7 10 Q
(void) 144 299.33 T
(dc_BndAdd \050dc, when, platform, points, npoint\051) 144 287.33 T
(DataChunk *dc;) 144 275.33 T
(ZebTime *when;) 144 263.33 T
(PlatformId platform;) 144 251.33 T
(Location *points;) 144 239.33 T
(int npoint;) 144 227.33 T
0 12 Q
0.92 (Where) 126 202 P
7 F
2.19 (dc) 161.9 202 P
0 F
0.92 ( is a data chunk which is a subclass of) 176.29 202 P
5 F
2.19 (DCC_Boundary) 370.75 202 P
0 F
0.92 (,) 456.37 202 P
7 F
2.19 (when) 463.28 202 P
0 F
0.92 ( is) 492.08 202 P
0.96 (the time associated with this boundary) 126 188 P
0.96 (,) 314.35 188 P
7 F
2.31 (platform) 321.31 188 P
0 F
0.96 ( is the ID of the platform) 378.91 188 P
0.76 (associated with this boundary\321this should generally be the same as the plat-) 126 174 P
2.27 (form which appears in the) 126 160 P
5 F
5.45 (dc_Platform) 265.65 160 P
0 F
2.27 ( \336eld,) 344.86 160 P
7 F
5.45 (points) 379.73 160 P
0 F
2.27 ( is the series of) 422.93 160 P
0.54 (points which mak) 126 146 P
0.54 (es up the boundary) 212.3 146 P
0.54 (, and) 304.13 146 P
7 F
1.3 (npoint) 331.54 146 P
0 F
0.54 ( is the number of points in) 374.74 146 P
(the boundary) 126 132 T
(.) 188.21 132 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 39
%%Page: "40" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Location Classes: Location and Boundar) 108 736.18 T
(y) 301.63 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(40) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(T) 108 678.02 T
(o retrie) 114.37 678.02 T
(v) 148.39 678.02 T
(e a boundary from a data chunk, use the) 154.21 678.02 T
5 F
(dc_BndGet\050\051) 348.83 678.02 T
0 F
( function:) 428.03 678.02 T
7 10 Q
(Location *) 126 659.35 T
(dc_BndGet \050dc, sample, npoint\051) 126 647.35 T
(DataChunk *dc;) 126 635.35 T
(int sample, *npoint;) 126 623.35 T
0 12 Q
0.44 (The return v) 108 598.02 P
0.44 (alue is a pointer to the series of points corresponding to the gi) 167.9 598.02 P
0.44 (v) 468.85 598.02 P
0.44 (en) 474.67 598.02 P
7 F
(sample) 108 584.02 T
0 F
( inde) 151.2 584.02 T
(x in) 174.68 584.02 T
7 F
(dc) 196.02 584.02 T
0 F
(; the number of points will be stored into) 210.42 584.02 T
7 F
(npoint) 409.42 584.02 T
0 F
(.) 452.62 584.02 T
54 541.02 540 543.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 541.02 540 543.02 R
7 X
0 0 0 1 0 0 0 K
V
54 542.02 99 542.02 2 L
0.5 H
2 Z
0 X
N
108 542.02 540 542.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(3.2) 82.32 547.02 T
(The Location DataChunk Class) 108 547.02 T
0 F
1.32 (The location class \050identi\336er) 108 523.02 P
5 F
3.16 (DCC_Location) 253.24 523.02 P
0 F
1.32 (\051 is a v) 339.64 523.02 P
1.32 (ery simple subclass of) 375.73 523.02 P
5 F
6.05 (DCC_Transparent) 108 509.02 P
0 F
2.52 (, useful when the only desired information is a time) 216 509.02 P
0.04 (series of locations. This class may be used, for e) 108 495.02 P
0.04 (xample, to represent a track of) 339.83 495.02 P
(a mo) 108 481.02 T
(ving observ) 131.48 481.02 T
(ation platform for which no other data is desired or a) 187.51 481.02 T
(v) 440.56 481.02 T
(ailable.) 446.26 481.02 T
0.59 (About the only thing that can be done with this class is to store or fetch loca-) 108 455.02 P
(tions. Use) 108 441.02 T
5 F
(dc_LocAdd\050\051) 159 441.02 T
0 F
( to add a location to a data chunk:) 238.2 441.02 T
7 10 Q
(void) 126 422.35 T
(dc_LocAdd \050dc, when, loc\051) 126 410.35 T
(DataChunk *dc;) 126 398.35 T
(ZebTime *when;) 126 386.35 T
(Location *loc;) 126 374.35 T
0 12 Q
0.86 (Where) 108 349.02 P
7 F
2.05 (dc) 143.84 349.02 P
0 F
0.86 ( is a data chunk which is a subclass of) 158.24 349.02 P
5 F
2.05 (DCC_Location) 352.09 349.02 P
0 F
0.86 (,) 438.49 349.02 P
7 F
2.05 (when) 445.34 349.02 P
0 F
0.86 ( is) 474.14 349.02 P
(the time associated with this location, and) 108 335.02 T
7 F
(loc) 311.99 335.02 T
0 F
( is the location itself.) 333.59 335.02 T
(T) 108 309.02 T
(o retrie) 114.37 309.02 T
(v) 148.39 309.02 T
(e a location from a data chunk, use) 154.21 309.02 T
5 F
(dc_LocGet\050\051) 324.5 309.02 T
0 F
(.) 403.7 309.02 T
7 10 Q
(int dc_LocGet \050dc, sample, when, loc\051) 126 290.35 T
(DataChunk *dc;) 126 278.35 T
(int sample;) 126 266.35 T
(ZebTime *when;) 126 254.35 T
(Location *loc;) 126 242.35 T
0 12 Q
0.46 (Where) 108 217.02 P
7 F
1.11 (dc) 143.44 217.02 P
0 F
0.46 ( is the data chunk, and) 157.84 217.02 P
7 F
1.11 (sample) 270.93 217.02 P
0 F
0.46 ( is the sample of interest. The loca-) 314.13 217.02 P
(tion and its associated time will be returned in) 108 203.02 T
7 F
(loc) 332.32 203.02 T
0 F
( and) 353.92 203.02 T
7 F
(when) 377.24 203.02 T
0 F
(, respecti) 406.04 203.02 T
(v) 449.06 203.02 T
(ely) 454.88 203.02 T
(.) 468.77 203.02 T
0.82 (Since location data chunks are subclasses of) 108 177.02 P
5 F
1.97 (DCC_Transparent) 328.7 177.02 P
0 F
0.82 (, you may) 436.7 177.02 P
1.38 (also use) 108 163.02 P
5 F
3.3 (dc_GetLoc\050\051) 152.08 163.02 P
0 F
1.38 ( and) 231.28 163.02 P
5 F
3.3 (dc_GetTime\050\051) 257.36 163.02 P
0 F
1.38 ( to get the location and time) 343.76 163.02 P
(information independently) 108 149.02 T
(.) 234.88 149.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 40
%%Page: "41" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (41) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 4 \245) 126 677 S
0 24 Q
-1.83 -0.48 (The Simple Meteorological) 252 677 B
-0.48 (Classes: MetData and) 252 647 S
-0.48 (Scalar) 252 617 S
0 12 Q
1.48 (The) 126 424 P
5 F
3.54 (DCC_MetData) 149.14 424 P
0 F
1.48 ( class, a subclass of) 228.34 424 P
5 F
3.54 (DCC_Transparent) 332.36 424 P
0 F
1.48 (, is the w) 440.36 424 P
1.48 (ork) 488 424 P
1.78 (horse of the data chunk class hierarch) 126 410 P
1.78 (y) 317.23 410 P
1.78 (. The MetData class implements the) 322.45 410 P
-0.29 (\336eld abstraction, so that a sample is not just a block of data b) 126 396 P
-0.29 (ut also a collection) 414.56 396 P
2.49 (of data for a kno) 126 382 P
2.49 (wn set of \336elds. From this functionality the Scalar class) 214.96 382 P
-0.02 (\050) 126 368 P
5 F
-0.04 (DCC_Scalar) 130 368 P
0 F
-0.02 (\051 deri) 202 368 P
-0.02 (v) 227.34 368 P
-0.02 (es its implementation of simple scalar \336elds in time, i.e.,) 233.15 368 P
2.2 (time series data. The Scalar class is perhaps the most frequently used and) 126 354 P
0.6 (widely applicable data chunk class. If MetData does most of the w) 126 340 P
0.6 (ork behind) 451.74 340 P
(the scenes, then Scalar is the actor which appears most on stage.) 126 326 T
72 283 558 285 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 283 558 285 R
7 X
0 0 0 1 0 0 0 K
V
72 284 117 284 2 L
0.5 H
2 Z
0 X
N
126 284 558 284 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(4.1) 100.32 289 T
(The Meteor) 126 289 T
(ological DataChunk Class) 189.77 289 T
0 F
14.97 (The meteorological data class \050) 126 265 P
5 F
35.94 (DCC_MetData) 335.86 265 P
0 F
14.97 (, subclass of) 415.06 265 P
5 F
2.85 (DCC_Transparent) 126 251 P
0 F
1.19 (\051 is intended to be a parent class for the classes which) 234 251 P
0.47 (represent real w) 126 237 P
0.47 (orld observ) 203.45 237 P
0.47 (ations. It introduces the concepts of data) 257.95 237 P
4 F
0.47 (\336elds) 457.87 237 P
0 F
0.47 ( and) 483.2 237 P
0.5 (data) 126 223 P
4 F
0.5 (elements) 149.49 223 P
0 F
0.5 (. A MetData sample contains data for a set of \336elds, where each) 191.48 223 P
0.51 (\336eld is a collection of data v) 126 209 P
0.51 (alues. If the \336eld is a simple scalar) 264.74 209 P
0.51 (, then the \336eld) 433.81 209 P
0.73 (contains e) 126 195 P
0.73 (xactly one data v) 174.87 195 P
0.73 (alue. If the \336eld is a grid, then the number of data) 258.39 195 P
0.46 (v) 126 181 P
0.46 (alues stored in an) 131.7 181 P
0.46 (y particular sample depends upon the geometry of the grid.) 216.56 181 P
-0.28 (Each indi) 126 167 P
-0.28 (vidual data v) 171.08 167 P
-0.28 (alue in a collection is kno) 232.2 167 P
-0.28 (wn as an) 353.46 167 P
4 F
-0.28 (element) 397.6 167 P
0 F
-0.28 (. The MetData) 434.92 167 P
0.05 (class does not actually concern itself with the or) 126 153 P
0.05 (g) 356.83 153 P
0.05 (anization of the elements in a) 362.77 153 P
-0.09 (\336eld. It only tak) 126 139 P
-0.09 (es care of the space requirements for some speci\336ed number of) 202.29 139 P
-0.1 (elements. The MetData subclasses tak) 126 125 P
-0.1 (e care of imposing an order and interpre-) 308.44 125 P
(tation on the collection of elements in a \336eld.) 126 111 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 41
%%Page: "42" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Simple Meteor) 108 736.18 T
(ological Classes: MetData and Scalar) 187.84 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(42) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.99 (F) 108 678.02 P
1.99 (or reasons of pre) 114.49 678.02 P
1.99 (v) 200.46 678.02 P
1.99 (alence, precedence, and con) 206.16 678.02 P
1.99 (v) 345.91 678.02 P
1.99 (enience, MetData elements) 351.73 678.02 P
0.67 (def) 108 664.02 P
0.67 (ault to the \337oating point type. So f) 123.2 664.02 P
0.67 (ar) 292.47 664.02 P
0.67 (, Zebra applications use \337oating point) 301.32 664.02 P
0.77 (data e) 108 650.02 P
0.77 (xclusi) 136.91 650.02 P
0.77 (v) 165.27 650.02 P
0.77 (ely) 171.1 650.02 P
0.77 (. Ho) 184.98 650.02 P
0.77 (we) 206.11 650.02 P
0.77 (v) 219.8 650.02 P
0.77 (er) 225.62 650.02 P
0.77 (, MetData \336elds can be de\336ned to hold elements of) 234.47 650.02 P
0.4 (an) 108 636.02 P
0.4 (y type. The MetData interf) 119.15 636.02 P
0.4 (ace for handling non-\337oat \336eld types depends on) 248.92 636.02 P
0.64 (data elements, which are co) 108 622.02 P
0.64 (v) 243.32 622.02 P
0.64 (ered in Chapter) 249.14 622.02 P
0.64 (7. Consequently) 327.4 622.02 P
0.64 (, the e) 405.25 622.02 P
0.64 (xplanation) 435.34 622.02 P
0.63 (of the MetData \336eld types interf) 108 608.02 P
0.63 (ace must w) 265.35 608.02 P
0.63 (ait until Section) 320.48 608.02 P
0.63 (7.3,  \322DataChunk) 400.75 608.02 P
1.07 (Field T) 108 594.02 P
1.07 (ypes\323, on page) 143.12 594.02 P
1.07 (90. This chapter mak) 219.24 594.02 P
1.07 (es no assumptions \050nor needs to\051) 323.65 594.02 P
(about the type of the \336elds being stored in the data chunk.) 108 580.02 T
2 F
(4.1.1) 72.31 548.02 T
(Meteor) 108 548.02 T
(ological Data Setup) 147.1 548.02 T
0 F
1.44 (Unlik) 108 530.02 P
1.44 (e its superclasses, the) 135.22 530.02 P
5 F
3.46 (DCC_MetData) 246.63 530.02 P
0 F
1.44 ( class requires a setup operation) 325.83 530.02 P
-0.25 (before an) 108 516.02 P
-0.25 (y data may be stored. This setup informs the class which \336elds will be) 152.55 516.02 P
0.99 (stored into the data chunk, and whether the) 108 502.02 P
0.99 (y will all be of uniform length or) 321.4 502.02 P
0.88 (not. Uniform length \336elds are not required, b) 108 488.02 P
0.88 (ut if the data happens to be that) 329.54 488.02 P
(w) 108 474.02 T
(ay) 116.54 474.02 T
(, a more ef) 127.09 474.02 T
(\336cient implementation results from declaring it.) 178.1 474.02 T
13.08 (T) 108 448.02 P
13.08 (o initialize a data chunk with uniform-length \336elds, call) 114.37 448.02 P
5 F
(dc_SetupUniformFields\050\051) 108 434.02 T
0 F
( as follo) 273.6 434.02 T
(ws:) 311.96 434.02 T
7 10 Q
(void) 126 415.35 T
(dc_SetupUniformFields \050dc, nsamples, nfield, fields, size\051) 126 403.35 T
(DataChunk *dc;) 126 391.35 T
(int nsamples, nfield, size;) 126 379.35 T
(FieldId *fields;) 126 367.35 T
0 12 Q
-0.14 (Where) 108 342.02 P
7 F
-0.34 (dc) 142.84 342.02 P
0 F
-0.14 ( is a data chunk and a subclass of) 157.24 342.02 P
5 F
-0.34 (DCC_MetData) 318.29 342.02 P
0 F
-0.14 (,) 397.49 342.02 P
7 F
-0.34 (nsamples) 403.35 342.02 P
0 F
-0.14 ( is an) 460.95 342.02 P
0.46 (indication of ho) 108 328.02 P
0.46 (w man) 184.61 328.02 P
0.46 (y samples will be stored in this data chunk,) 217.22 328.02 P
7 F
1.1 (nfield) 431.34 328.02 P
0 F
0.46 ( is) 474.54 328.02 P
0.14 (the number of \336elds to be stored,) 108 314.02 P
7 F
0.33 (fields) 270.27 314.02 P
0 F
0.14 ( is an array of) 313.47 314.02 P
5 F
0.33 (FieldID) 383.13 314.02 P
0 F
0.14 (\325) 433.53 314.02 P
0.14 (s identify-) 436.87 314.02 P
0.82 (ing the \336elds to be stored, and) 108 300.02 P
7 F
1.96 (size) 261.05 300.02 P
0 F
0.82 ( is the size of the data, in bytes, for one) 289.85 300.02 P
-0.2 (sample and one \336eld. The v) 108 286.02 P
-0.2 (alue of) 239.37 286.02 P
7 F
-0.47 (nsamples) 274.96 286.02 P
0 F
-0.2 ( is used to pre-allocate space for) 332.56 286.02 P
0.41 (multiple samples, and is not a binding commitment on the part of the applica-) 108 272.02 P
(tion.) 108 258.02 T
0.6 (In the more general case, where \336elds may v) 108 232.02 P
0.6 (ary in length between each other) 326.73 232.02 P
4.97 (or from sample to sample, the data chunk should be initialized with) 108 218.02 P
5 F
(dc_SetupFields\050\051) 108 204.02 T
0 F
( as follo) 223.2 204.02 T
(ws:) 261.56 204.02 T
7 10 Q
(void) 126 185.35 T
(dc_SetupFields \050dc, nfield, fields\051) 126 173.35 T
(DataChunk *dc;) 126 161.35 T
(int nfield;) 126 149.35 T
(FieldId fields;) 126 137.35 T
0 12 Q
(Where the ar) 108 112.02 T
(guments are as described abo) 169.75 112.02 T
(v) 310.2 112.02 T
(e.) 316.02 112.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 42
%%Page: "43" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Meteor) 126 736.18 T
(ological DataChunk Class) 173.83 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (43) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
3.62 (The \336elds in the data chunk must be de\336ned in a single call to either) 126 678.02 P
5 F
1.54 (dc_SetupUniformFields\050\051) 126 664.02 P
0 F
0.64 ( or) 291.6 664.02 P
5 F
1.54 (dc_SetupFields\050\051) 308.88 664.02 P
0 F
0.64 (. Once the \336elds) 424.08 664.02 P
0.83 (ha) 126 650.02 P
0.83 (v) 137.09 650.02 P
0.83 (e been de\336ned, the \336elds cannot be re-de\336ned. In other w) 142.91 650.02 P
0.83 (ords, successi) 426.34 650.02 P
0.83 (v) 492.85 650.02 P
0.83 (e) 498.67 650.02 P
-0.18 (calls to either of the tw) 126 636.02 P
-0.18 (o abo) 235.28 636.02 P
-0.18 (v) 261.24 636.02 P
-0.18 (e functions will f) 267.06 636.02 P
-0.18 (ail with w) 348.05 636.02 P
-0.18 (arning messages to the) 395.57 636.02 P
0.05 (e) 126 622.02 P
0.05 (v) 131.03 622.02 P
0.05 (ent logger) 136.85 622.02 P
0.05 (. Internally) 184.56 622.02 P
0.05 (, the MetData class copies the) 236.49 622.02 P
5 F
0.13 (FieldID) 383.11 622.02 P
0 F
0.05 (\325) 433.51 622.02 P
0.05 (s into the data) 436.85 622.02 P
(chunk, so the) 126 608.02 T
7 F
(fields) 192.66 608.02 T
0 F
( array need not be v) 235.86 608.02 T
(alid past the function call.) 330.53 608.02 T
0.76 (T) 126 582.02 P
0.76 (o \336nd out ho) 132.37 582.02 P
0.76 (w man) 195.35 582.02 P
0.76 (y \336elds a data chunk contains, use) 228.26 582.02 P
5 F
1.82 (dc_GetNField\050\051) 400.2 582.02 P
0 F
0.76 (.) 501 582.02 P
(This function returns the number of \336elds de\336ned in the data chunk) 126 568.02 T
7 F
(dc) 452.63 568.02 T
0 F
(.) 467.03 568.02 T
7 10 Q
(int) 144 549.35 T
(dc_GetNField \050dc\051) 144 537.35 T
(DataChunk *dc;) 144 525.35 T
0 12 Q
0.23 (T) 126 500.02 P
0.23 (o get the list of \336elds stored in a data chunk, use) 132.37 500.02 P
5 F
0.55 (dc_GetFields\050\051) 369.42 500.02 P
0 F
0.23 ( as fol-) 470.22 500.02 P
(lo) 126 486.02 T
(ws:) 135.04 486.02 T
7 10 Q
(FieldId *) 144 467.35 T
(dc_GetFields \050dc, nfield\051) 144 455.35 T
(DataChunk *dc;) 144 443.35 T
(int *nfield;) 144 431.35 T
0 12 Q
0.38 (The return v) 126 406.02 P
0.38 (alue is a pointer to an array of) 185.77 406.02 P
5 F
0.9 (FieldID) 335.4 406.02 P
0 F
0.38 (\325) 385.8 406.02 P
0.38 (s for the \336elds stored in) 389.13 406.02 P
0.48 (the data chunk. This array actually belongs to the data chunk, so it should not) 126 392.02 P
1.98 (be modi\336ed or freed, and it is only v) 126 378.02 P
1.98 (alid for the life of the data chunk. If) 316.53 378.02 P
7 F
-0.4 (nfield) 126 364.02 P
0 F
-0.17 ( is non-) 169.2 364.02 P
5 F
-0.4 (NULL) 204.87 364.02 P
0 F
-0.17 (, it is set to the number of \336elds. If the data chunk has no) 233.67 364.02 P
(\336elds,) 126 350.02 T
5 F
(dc_GetFields\050\051) 158 350.02 T
0 F
( returns) 258.8 350.02 T
5 F
(NULL) 298.13 350.02 T
0 F
( and sets) 326.93 350.02 T
7 F
(nfield) 371.26 350.02 T
0 F
( to zero.) 414.46 350.02 T
2 F
(4.1.2) 90.31 318.02 T
(Storing and Retrie) 126 318.02 T
(ving Data) 229.84 318.02 T
0 F
-0.06 (Data is stored into a data chunk subclassed from) 126 300.02 P
5 F
-0.15 (DCC_MetData) 360.39 300.02 P
0 F
-0.06 ( one \336eld at a) 439.6 300.02 P
2.44 (time, though multiple samples can be stored simultaneously) 126 286.02 P
2.44 (. The interf) 429.61 286.02 P
2.44 (ace) 488.02 286.02 P
(de\336nes the method) 126 272.02 T
5 F
(dc_AddMData\050\051) 219.66 272.02 T
0 F
( for storing data.) 313.26 272.02 T
7 10 Q
(void) 144 253.35 T
(dc_AddMData \050dc, when, field, size, sample, nsample, data\051) 144 241.35 T
(DataChunk *dc;) 144 229.35 T
(ZebTime *when;) 144 217.35 T
(FieldId field;) 144 205.35 T
(int size, sample, nsample;) 144 193.35 T
(DataPtr data;) 144 181.35 T
0 12 Q
0.49 (Where) 126 156.02 P
7 F
1.16 (dc) 161.46 156.02 P
0 F
0.49 ( is a data chunk subclassed from) 175.87 156.02 P
5 F
1.16 (DCC_MetData) 337.57 156.02 P
0 F
0.49 (,) 416.77 156.02 P
7 F
1.16 (when) 423.25 156.02 P
0 F
0.49 ( is a list of) 452.05 156.02 P
0.6 (times, one per sample,) 126 142.02 P
7 F
1.43 (field) 239.04 142.02 P
0 F
0.6 ( is the ID of the \336eld to be stored,) 275.04 142.02 P
7 F
1.43 (size) 445.34 142.02 P
0 F
0.6 ( is the) 474.14 142.02 P
-0.1 (size of each sample to be stored \050if the samples are not all the same size, multi-) 126 128.02 P
1.07 (ple calls are required\051,) 126 114.02 P
7 F
2.58 (sample) 240.59 114.02 P
0 F
1.07 ( is the inde) 283.79 114.02 P
1.07 (x of the \336rst sample to be stored,) 339.16 114.02 P
7 F
1.95 (nsample) 126 100.02 P
0 F
0.81 ( is the number of samples to be stored, and) 176.4 100.02 P
7 F
1.95 (data) 392.82 100.02 P
0 F
0.81 ( is the data to be) 421.62 100.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 43
%%Page: "44" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Simple Meteor) 108 736.18 T
(ological Classes: MetData and Scalar) 187.84 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(44) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.79 (stored for each sample. If this data chunk w) 108 678.02 P
0.79 (as initialized with uniform \336elds,) 323.83 678.02 P
1.81 (the) 108 664.02 P
7 F
4.35 (size) 127.48 664.02 P
0 F
1.81 ( parameter must match the speci\336ed uniform size. The data array) 156.28 664.02 P
2.38 (must contain \336eld data for each sample being stored, in order from inde) 108 650.02 P
2.38 (x) 480 650.02 P
7 F
0.22 (sample) 108 636.02 P
0 F
0.09 ( to inde) 151.2 636.02 P
0.09 (x) 187.21 636.02 P
7 F
0.22 (sample) 196.3 636.02 P
5 F
0.22 (+) 239.5 636.02 P
7 F
0.22 (nsample) 246.7 636.02 P
5 F
0.22 (-) 297.1 636.02 P
0.22 (1) 304.3 636.02 P
0 F
0.09 (. If) 311.5 636.02 P
7 F
0.22 (size) 328.67 636.02 P
0 F
0.09 ( is 20 bytes and) 357.47 636.02 P
7 F
0.22 (nsample) 435.6 636.02 P
0 F
-0.22 (is 10, then) 108 622.02 P
7 F
-0.51 (data) 160.02 622.02 P
0 F
-0.22 ( should point to 200 bytes of data. The data are copied into the) 188.82 622.02 P
0.16 (data chunk for each sample, so the memory pointed to by) 108 608.02 P
7 F
0.39 (data) 387.73 608.02 P
0 F
0.16 ( does not need) 416.53 608.02 P
1.31 (to be v) 108 594.02 P
1.31 (alid past the function call. Calls to) 142.98 594.02 P
5 F
3.14 (dc_AddMData\050\051) 319.48 594.02 P
0 F
1.31 ( will o) 413.08 594.02 P
1.31 (v) 446.2 594.02 P
1.31 (erwrite) 452.02 594.02 P
0.12 (data and times where necessary) 108 580.02 P
0.12 (, so the last write for a gi) 258.98 580.02 P
0.12 (v) 378.84 580.02 P
0.12 (en sample will deter-) 384.66 580.02 P
-0.04 (mine that sample\325) 108 566.02 P
-0.04 (s time, and the last write for a gi) 193.26 566.02 P
-0.04 (v) 347.66 566.02 P
-0.04 (en sample/\336eld pair will set) 353.48 566.02 P
(the v) 108 552.02 T
(alue for that pair) 131.36 552.02 T
(.) 210.35 552.02 T
(T) 108 526.02 T
(o retrie) 114.37 526.02 T
(v) 148.39 526.02 T
(e data from a data chunk, use) 154.21 526.02 T
5 F
(dc_GetMData\050\051) 297.5 526.02 T
0 F
(.) 391.1 526.02 T
7 10 Q
(DataPtr) 126 507.35 T
(dc_GetMData \050dc, sample, field, len\051) 126 495.35 T
(DataChunk *dc;) 126 483.35 T
(int sample, *len;) 126 471.35 T
(FieldId field;) 126 459.35 T
0 12 Q
0.37 (Where) 108 434.02 P
7 F
0.88 (dc) 143.35 434.02 P
0 F
0.37 ( is the data chunk,) 157.74 434.02 P
7 F
0.88 (sample) 249.56 434.02 P
0 F
0.37 ( is the sample of interest, and) 292.76 434.02 P
7 F
0.88 (field) 438.63 434.02 P
0 F
0.37 ( is) 474.63 434.02 P
-0.01 (the \336eld of interest. If the sample and \336eld e) 108 420.02 P
-0.01 (xist in the data chunk, the function) 319.72 420.02 P
1.53 (returns a pointer to the block of data for that sample and \336eld; otherwise it) 108 406.02 P
0.24 (returns) 108 392.02 P
5 F
0.58 (NULL) 144.57 392.02 P
0 F
0.24 (. The returned pointer points to memory inside the data chunk; it) 173.37 392.02 P
-0.19 (should not be freed, and the memory is only v) 108 378.02 P
-0.19 (alid for the life of the data chunk.) 326.67 378.02 P
(If) 108 364.02 T
7 F
(len) 118.99 364.02 T
0 F
( is non-) 140.59 364.02 T
5 F
(NULL) 176.59 364.02 T
0 F
(, it is set to the length of the data.) 205.39 364.02 T
2 F
(4.1.3) 72.31 332.02 T
(Bad Data Fla) 108 332.02 T
(gs) 180.56 332.02 T
0 F
0.62 (The) 108 314.02 P
5 F
1.49 (DCC_MetData) 130.28 314.02 P
0 F
0.62 ( class does some simple accounting of bad data \337ags. At) 209.48 314.02 P
1.37 (the moment, there is no distinction between \324missing\325 data v) 108 300.02 P
1.37 (alues and \324bad\325) 409.96 300.02 P
1.29 (data v) 108 286.02 P
1.29 (alues. Both are labelled as \324bad\325 by the MetData class. T) 137.98 286.02 P
1.29 (o store a bad) 421.16 286.02 P
0.27 (v) 108 272.02 P
0.27 (alue \337ag into a data chunk, use) 113.7 272.02 P
5 F
0.65 (dc_SetBadval\050\051) 266.89 272.02 P
0 F
0.27 ( after the data chunk has) 367.69 272.02 P
(been initialized.) 108 258.02 T
7 10 Q
(void) 126 239.35 T
(dc_SetBadval \050dc, flag\051) 126 227.35 T
(DataChunk *dc;) 126 215.35 T
(float flag;) 126 203.35 T
0 12 Q
0.61 (Where) 108 178.02 P
7 F
1.47 (dc) 143.59 178.02 P
0 F
0.61 ( is the data chunk, and) 157.99 178.02 P
7 F
1.47 (flag) 271.99 178.02 P
0 F
0.61 ( is the bad v) 300.8 178.02 P
0.61 (alue \337ag to be used. Note) 360.95 178.02 P
0.99 (that) 108 164.02 P
5 F
2.36 (dc_SetBadval\050\051) 129.99 164.02 P
0 F
0.99 ( only sets a \337oating point bad v) 230.79 164.02 P
0.99 (alue, which will not) 387.72 164.02 P
0.76 (correspond to non-\337oat \336eld types. This is an artif) 108 150.02 P
0.76 (act of the original \337oating-) 354.3 150.02 P
1.96 (point-only implementation. Ev) 108 136.02 P
1.96 (entually) 259.4 136.02 P
1.96 (, the MetData class will support both) 297.29 136.02 P
(bad and missing v) 108 122.02 T
(alue \337ags, for multiple types, on a per) 194.7 122.02 T
(-\336eld basis.) 376.1 122.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 44
%%Page: "45" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Scalar DataChunk Class) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (45) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
-0.01 (The) 126 678.02 P
5 F
-0.02 (dc_SetBadval\050\051) 147.65 678.02 P
0 F
-0.01 ( routine sets the) 248.45 678.02 P
4 F
-0.01 (bad_value_\337a) 327.08 678.02 P
-0.01 (g) 394.95 678.02 P
0 F
-0.01 ( global attrib) 400.95 678.02 P
-0.01 (ute. \050See) 462.02 678.02 P
-0.06 (Chapter) 126 664.02 P
-0.06 (8.\051 If a bad v) 166.99 664.02 P
-0.06 (alue \337ag is not e) 228.08 664.02 P
-0.06 (xplicitly set in a data chunk, it def) 306.31 664.02 P
-0.06 (aults to) 469.06 664.02 P
0.19 (the v) 126 650.02 P
0.19 (alue -) 149.56 650.02 P
0.19 (99999.9. This def) 176.74 650.02 P
0.19 (ault can be changed with the compile-time con\336g-) 261.67 650.02 P
(uration parameters.) 126 636.02 T
(T) 126 610.02 T
(o retrie) 132.37 610.02 T
(v) 166.39 610.02 T
(e the \337oating point bad v) 172.21 610.02 T
(alue \337ag, call) 291.58 610.02 T
5 F
(dc_GetBadval\050\051) 358.9 610.02 T
0 F
(.) 459.7 610.02 T
7 10 Q
(float) 144 591.35 T
(dc_GetBadval \050dc\051) 144 579.35 T
(DataChunk *dc;) 144 567.35 T
0 12 Q
0.02 (The return v) 126 542.02 P
0.02 (alue will be the bad data \337ag used in this data chunk. The function) 185.06 542.02 P
1.03 (\336rst checks for a \322bad_v) 126 528.02 P
1.03 (alue_\337ag\323 global attrib) 247.14 528.02 P
1.03 (ute, and f) 359.62 528.02 P
1.03 (ailing that it returns) 406.56 528.02 P
-0.28 (the most recent v) 126 514.02 P
-0.28 (alue assigned to the data chunk. If no \336elds ha) 207.19 514.02 P
-0.28 (v) 426.42 514.02 P
-0.28 (e been de\336ned,) 432.24 514.02 P
(it returns the def) 126 500.02 T
(ault bad v) 204.86 500.02 T
(alue \337ag mentioned abo) 251.89 500.02 T
(v) 366.7 500.02 T
(e.) 372.52 500.02 T
72 457.02 558 459.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 457.02 558 459.02 R
7 X
0 0 0 1 0 0 0 K
V
72 458.02 117 458.02 2 L
0.5 H
2 Z
0 X
N
126 458.02 558 458.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(4.2) 100.32 463.02 T
(The Scalar DataChunk Class) 126 463.02 T
0 F
0.93 (The scalar data class \050) 126 439.02 P
5 F
2.23 (DCC_Scalar) 235.67 439.02 P
0 F
0.93 (\051 presents a vie) 307.67 439.02 P
0.93 (w of the data chunk as a) 382.47 439.02 P
0.35 (time series of single, scalar data v) 126 425.02 P
0.35 (alues. T) 290.12 425.02 P
0.35 (echnically speaking, the Scalar class) 327.63 425.02 P
-0.03 (e) 126 411.02 P
-0.03 (xtends the \336eld abstraction of its parent class, MetData, to be a collection of a) 131.15 411.02 P
1.68 (single data element. Just as for MetData, the def) 126 397.02 P
1.68 (ault Scalar element type is) 370.62 397.02 P
0.1 (\337oating point. The Scalar interpretation of the MetData \336eld abstraction yields) 126 383.02 P
(the) 126 369.02 T
5 F
(OrgScalar) 143.66 369.02 T
0 F
( data object or) 208.46 369.02 T
(g) 276.56 369.02 T
(anization.) 282.5 369.02 T
14.75 (Before data may be stored into a scalar data chunk,) 126 343.02 P
5 F
0.07 (dc_SetScalarFields\050\051) 126 329.02 P
0 F
0.03 ( must be called to initialize the list of \336elds to be) 270 329.02 P
(stored.) 126 315.02 T
7 10 Q
(void) 144 296.35 T
(dc_SetScalarFields \050dc, nfield, fields\051) 144 284.35 T
(DataChunk *dc;) 144 272.35 T
(int nfield;) 144 260.35 T
(FieldId *fields;) 144 248.35 T
0 12 Q
1.9 (Where) 126 223.02 P
7 F
4.57 (dc) 162.88 223.02 P
0 F
1.9 ( is a data chunk subclassed from) 177.28 223.02 P
5 F
4.57 (DCC_Scalar) 348.9 223.02 P
0 F
1.9 (,) 420.42 223.02 P
7 F
4.57 (nfield) 428.33 223.02 P
0 F
1.9 ( is the) 471.53 223.02 P
2.19 (number of \336elds to be stored in this data chunk, and) 126 209.02 P
7 F
5.25 (fields) 402.04 209.02 P
0 F
2.19 ( is a list of) 445.24 209.02 P
5 F
(FieldID) 126 195.02 T
0 F
(\325) 176.4 195.02 T
(s for those \336elds.) 179.74 195.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 45
%%Page: "46" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Simple Meteor) 108 736.18 T
(ological Classes: MetData and Scalar) 187.84 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(46) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(T) 108 678.02 T
(o store a data point into the data chunk, use) 114.37 678.02 T
5 F
(dc_AddScalar\050\051) 325.34 678.02 T
0 F
( as follo) 426.14 678.02 T
(ws:) 464.51 678.02 T
7 10 Q
(void) 126 659.35 T
(dc_AddScalar \050dc, when, sample, field, value\051) 126 647.35 T
(DataChunk *dc;) 126 635.35 T
(ZebTime *when;) 126 623.35 T
(int sample;) 126 611.35 T
(FieldId field;) 126 599.35 T
(void *value;) 126 587.35 T
0 12 Q
0.84 (Where) 108 562.02 P
7 F
2.02 (dc) 143.82 562.02 P
0 F
0.84 ( is the data chunk,) 158.22 562.02 P
7 F
2.02 (when) 252.42 562.02 P
0 F
0.84 ( is the time of this datum,) 281.22 562.02 P
7 F
2.02 (sample) 412.45 562.02 P
0 F
0.84 ( is the) 455.65 562.02 P
0.01 (inde) 108 548.02 P
0.01 (x of the sample to be stored,) 128.48 548.02 P
7 F
0.03 (field) 267.22 548.02 P
0 F
0.01 ( is the \336eld of this data, and) 303.22 548.02 P
7 F
0.03 (value) 438.98 548.02 P
0 F
0.01 ( is) 474.98 548.02 P
(a pointer to the actual data v) 108 534.02 T
(alue.) 243.67 534.02 T
4.79 (T) 108 508.02 P
4.79 (o add a number of data points for one \336eld, the alternate interf) 114.37 508.02 P
4.79 (ace) 470.02 508.02 P
5 F
(dc_AddMultScalar\050\051) 108 494.02 T
0 F
( may be used.) 237.6 494.02 T
7 10 Q
(void) 126 475.35 T
(dc_AddMultScalar \050dc, when, sample, nsample, field, values\051) 126 463.35 T
(DataChunk *dc;) 126 451.35 T
(ZebTime *when;) 126 439.35 T
(int sample, nsample;) 126 427.35 T
(FieldId field;) 126 415.35 T
(void *values;) 126 403.35 T
0 12 Q
0.35 (Where) 108 378.02 P
7 F
0.85 (dc) 143.34 378.02 P
0 F
0.35 ( is the data chunk,) 157.74 378.02 P
7 F
0.85 (when) 249.5 378.02 P
0 F
0.35 ( is an array of times for this data,) 278.3 378.02 P
7 F
0.85 (sample) 442.8 378.02 P
0 F
0.7 (is the inde) 108 364.02 P
0.7 (x of the \336rst sample to be stored,) 158.55 364.02 P
7 F
1.68 (nsample) 324.46 364.02 P
0 F
0.7 ( is the number of sam-) 374.86 364.02 P
0.08 (ples to be stored,) 108 350.02 P
7 F
0.19 (field) 192.64 350.02 P
0 F
0.08 ( is the \336eld of this data. The) 228.64 350.02 P
7 F
0.19 (values) 366.26 350.02 P
0 F
0.08 ( parameter is an) 409.46 350.02 P
1.47 (array of data v) 108 336.02 P
1.47 (alues, containing one sample\325) 181.76 336.02 P
1.47 (s w) 328.17 336.02 P
1.47 (orth of data for the \336eld for) 345.85 336.02 P
-0.26 (each of the) 108 322.02 P
7 F
-0.62 (nsample) 162.87 322.02 P
0 F
-0.26 ( samples to be stored, be) 213.27 322.02 P
-0.26 (ginning at) 329.79 322.02 P
7 F
-0.62 (sample) 380.61 322.02 P
0 F
-0.26 (. \324) 423.81 322.02 P
-0.26 (A sample\325) 432.59 322.02 P
-0.26 (s) 481.33 322.02 P
-0.17 (w) 108 308.02 P
-0.17 (orth\325 of data depends on the application or the subclass. F) 116.54 308.02 P
-0.17 (or a grid subclass, a) 391.68 308.02 P
0.78 (sample of data for a \336eld will be a whole tw) 108 294.02 P
0.78 (o-dimensional array; for a scalar) 326.94 294.02 P
(subclass, a \336eld\325) 108 280.02 T
(s sample data will be a single element v) 187 280.02 T
(alue.) 377.34 280.02 T
0.31 (The) 108 254.02 P
5 F
0.73 (dc_GetScalar\050\051) 129.97 254.02 P
0 F
0.31 ( function retrie) 230.77 254.02 P
0.31 (v) 302.39 254.02 P
0.31 (es a \337oating point datum from a sca-) 308.21 254.02 P
(lar data chunk.) 108 240.02 T
7 10 Q
(float) 126 221.35 T
(dc_GetScalar \050dc, sample, field\051) 126 209.35 T
(DataChunk *dc;) 126 197.35 T
(int sample;) 126 185.35 T
(FieldId field;) 126 173.35 T
0 12 Q
0.37 (Where) 108 148.02 P
7 F
0.88 (dc) 143.35 148.02 P
0 F
0.37 ( is the data chunk,) 157.74 148.02 P
7 F
0.88 (sample) 249.56 148.02 P
0 F
0.37 ( is the sample of interest, and) 292.76 148.02 P
7 F
0.88 (field) 438.63 148.02 P
0 F
0.37 ( is) 474.63 148.02 P
1.26 (the \336eld of interest. The return v) 108 134.02 P
1.26 (alue will be the requested data point. If the) 270.93 134.02 P
0.23 (type of the gi) 108 120.02 P
0.23 (v) 172.06 120.02 P
0.23 (en \336eld is not \337oating point, this function f) 177.88 120.02 P
0.23 (ails and returns zero.) 385.32 120.02 P
1.26 (If the sample or \336eld cannot be found,) 108 106.02 P
5 F
3.04 (dc_GetScalar\050\051) 304.42 106.02 P
0 F
1.26 ( returns the data) 405.22 106.02 P
(chunk\325) 108 92.02 T
(s current bad v) 140.66 92.02 T
(alue \337ag.) 211.34 92.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 46
%%Page: "47" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Scalar DataChunk Class) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (47) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.37 (No) 126 678.02 P
0.37 (w that subclasses of MetData can support element types other than \337oating) 140.36 678.02 P
2.87 (point, the Scalar class pro) 126 664.02 P
2.87 (vides the) 260.94 664.02 P
5 F
6.88 (dc_GetScalarData\050\051) 312.67 664.02 P
0 F
2.87 ( method for) 442.27 664.02 P
(retrie) 126 650.02 T
(ving data v) 151.02 650.02 T
(alues of an) 204.05 650.02 T
(y type.) 255.85 650.02 T
7 10 Q
(void *) 144 631.35 T
(dc_GetScalarData \050dc, sample, field\051) 144 619.35 T
(DataChunk *dc;) 144 607.35 T
(int sample;) 144 595.35 T
(FieldId field;) 144 583.35 T
0 12 Q
6.03 (The) 126 558.02 P
5 F
14.48 (dc_GetScalarData\050\051) 153.69 558.02 P
0 F
6.03 ( function tak) 283.29 558.02 P
6.03 (es the same parameters as) 355.9 558.02 P
5 F
6.15 (dc_GetScalar\050\051) 126 544.02 P
0 F
2.56 (, where) 226.8 544.02 P
7 F
6.15 (dc) 270.24 544.02 P
0 F
2.56 ( is the data chunk,) 284.64 544.02 P
7 F
6.15 (sample) 387.45 544.02 P
0 F
2.56 ( is the sample) 430.65 544.02 P
0.23 (inde) 126 530.02 P
0.23 (x, and) 146.48 530.02 P
7 F
0.55 (field) 179.27 530.02 P
0 F
0.23 ( is the) 215.27 530.02 P
5 F
0.55 (FieldId) 247.62 530.02 P
0 F
0.23 ( from which to retrie) 298.02 530.02 P
0.23 (v) 397.94 530.02 P
0.23 (e the data v) 403.76 530.02 P
0.23 (alue. The) 459.12 530.02 P
0.37 (dif) 126 516.02 P
0.37 (ference is that) 139.03 516.02 P
5 F
0.88 (dc_GetScalarData\050\051) 210.43 516.02 P
0 F
0.37 ( returns a v) 340.03 516.02 P
0.37 (oid pointer to the indi-) 394.54 516.02 P
0.5 (cated data v) 126 502.02 P
0.5 (alue if the data e) 184.02 502.02 P
0.5 (xists in the data chunk. If the data noes not e) 265.16 502.02 P
0.5 (xist,) 483.66 502.02 P
(the function returns) 126 488.02 T
5 F
(NULL) 222.98 488.02 T
0 F
(.) 251.78 488.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "47" 47
%%Page: "48" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Simple Meteor) 108 736.18 T
(ological Classes: MetData and Scalar) 187.84 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(48) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "48" 48
%%Page: "49" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (49) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 5 \245) 126 677 S
0 24 Q
-0.48 (The Grid Classes: RGrid,) 252 677 S
-0.48 (IRGrid, and Image) 252 647 S
0 12 Q
0 (Whereas the Scalar class narro) 126 424 P
0 (ws the interpretation of a MetData \336eld to a sin-) 272.99 424 P
0.4 (gle scalar v) 126 410 P
0.4 (alue, the grid classes use a single \336eld to store entire grids of data.) 181.15 410 P
0.1 (Each data point in the grid is an element, and the type of the \336eld is equi) 126 396 P
0.1 (v) 474.97 396 P
0.1 (alent) 480.67 396 P
-0.02 (to the type of the elements of the grid. The geometry of the grid must be speci-) 126 382 P
0.22 (\336ed as auxiliary information to the grid data chunk, so each of the grid classes) 126 368 P
(pro) 126 354 T
(vide methods for storing and retrie) 141.82 354 T
(ving the geometry information.) 307.82 354 T
72 311 558 313 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 311 558 313 R
7 X
0 0 0 1 0 0 0 K
V
72 312 117 312 2 L
0.5 H
2 Z
0 X
N
126 312 558 312 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(5.1) 100.32 317 T
(The Irregular Grid DataChunk Class) 126 317 T
0 F
0.71 (The irre) 126 293 P
0.71 (gular grid class \050) 164.84 293 P
5 F
1.7 (DCC_IRGrid) 247.28 293 P
0 F
0.71 (, subclass of) 319.28 293 P
5 F
1.7 (DCC_MetData) 383.39 293 P
0 F
0.71 (\051 is used) 462.59 293 P
0.45 (to represent scalar points distrib) 126 279 P
0.45 (uted randomly o) 280.89 279 P
0.45 (v) 360.27 279 P
0.45 (er space. The current irre) 366.09 279 P
0.45 (gu-) 488 279 P
2.1 (lar grid implementation w) 126 265 P
2.1 (orks with \336x) 257.17 265 P
2.1 (ed points which are subplatforms in) 321.86 265 P
(their o) 126 251 T
(wn right; a future e) 156.7 251 T
(xtension to use anon) 248.5 251 T
(ymous points is possible.) 346.64 251 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "49" 49
%%Page: "50" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Grid Classes: RGrid, IRGrid, and Ima) 108 736.18 T
(g) 283.46 736.18 T
(e) 289.05 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(50) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(5.1.1) 72.31 678.02 T
(Initialization of Irregular Grid Data) 108 678.02 T
0 F
-0.2 (Data chunks of the irre) 108 660.02 P
-0.2 (gular grid class must be initialized with subplatform and) 216.98 660.02 P
3.17 (\336eld information before data may be stored therein. This initialization is) 108 646.02 P
(accomplished with) 108 632.02 T
5 F
(dc_IRSetup\050\051) 201.32 632.02 T
0 F
( as follo) 287.72 632.02 T
(ws:) 326.09 632.02 T
7 10 Q
(void) 126 613.35 T
(dc_IRSetup \050dc, nplat, platforms, locs, nfield, fields\051) 126 601.35 T
(DataChunk *dc;) 126 589.35 T
(int nplat;) 126 577.35 T
(PlatformId *platforms;) 126 565.35 T
(Location *locs;) 126 553.35 T
(int nfield;) 126 541.35 T
(FieldId *fields;) 126 529.35 T
0 12 Q
-0.06 (Where) 108 504.02 P
7 F
-0.14 (dc) 142.92 504.02 P
0 F
-0.06 ( is a data chunk subclassed from) 157.32 504.02 P
5 F
-0.14 (DCC_IRGrid) 315.23 504.02 P
0 F
-0.06 (,) 387.23 504.02 P
7 F
-0.14 (nplat) 393.17 504.02 P
0 F
-0.06 ( is the num-) 429.17 504.02 P
1.08 (ber of platforms in the irre) 108 490.02 P
1.08 (gular grid,) 240.18 490.02 P
7 F
2.59 (platforms) 295.33 490.02 P
0 F
1.08 ( is a list of ID\325) 360.13 490.02 P
1.08 (s for these) 434.52 490.02 P
1 (platforms,) 108 476.02 P
7 F
2.4 (locations) 161 476.02 P
0 F
1 ( is a list of locations for these platforms,) 225.8 476.02 P
7 F
2.4 (nfield) 430.79 476.02 P
0 F
1 ( is) 473.99 476.02 P
1.11 (the number of \336elds to be stored in the data chunk, and) 108 462.02 P
7 F
2.67 (fields) 388.34 462.02 P
0 F
1.11 ( is a list of) 431.54 462.02 P
(those \336elds.) 108 448.02 T
0.45 (Use) 108 422.02 P
5 F
1.08 (dc_IRGetNPlatform\050\051) 130.11 422.02 P
0 F
0.45 ( to retrie) 266.91 422.02 P
0.45 (v) 308.17 422.02 P
0.45 (e the number of platforms stored in) 313.99 422.02 P
(an irre) 108 408.02 T
(gular grid data chunk:) 138.8 408.02 T
7 10 Q
(int) 126 389.35 T
(dc_IRGetNPlatform \050dc\051) 126 377.35 T
(DataChunk *dc;) 126 365.35 T
0 12 Q
(Where) 108 340.02 T
7 F
(dc) 142.98 340.02 T
0 F
( is the data chunk, and the return v) 157.38 340.02 T
(alue is the number of platforms.) 322.72 340.02 T
0.17 (Information on the platforms represented in the irre) 108 314.02 P
0.17 (gular grid may be obtained) 355.99 314.02 P
(with) 108 300.02 T
5 F
(dc_IRGetPlatforms\050\051) 132.34 300.02 T
0 F
( as follo) 269.14 300.02 T
(ws:) 307.5 300.02 T
7 10 Q
(void) 126 281.35 T
(dc_IRGetPlatforms \050dc, platforms, locs\051) 126 269.35 T
(DataChunk *dc;) 126 257.35 T
(PlatformId *platforms;) 126 245.35 T
(Location *locs;) 126 233.35 T
0 12 Q
0.08 (Where) 108 208.02 P
7 F
0.19 (dc) 143.06 208.02 P
0 F
0.08 ( is the data chunk, and) 157.46 208.02 P
7 F
0.19 (platforms) 268.24 208.02 P
0 F
0.08 ( and) 333.05 208.02 P
7 F
0.19 (locs) 356.53 208.02 P
0 F
0.08 ( point to arrays suf) 385.33 208.02 P
0.08 (\336-) 475.33 208.02 P
(ciently long to store the platform identi\336er and the location of each platform.) 108 194.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "50" 50
%%Page: "51" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Regular Grid DataChunk Class) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (51) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(5.1.2) 90.31 678.02 T
(Storing and Retrie) 126 678.02 T
(ving Irregular Grid Data) 229.84 678.02 T
0 F
0.84 (An irre) 126 660.02 P
0.84 (gular grid may be added to a data chunk with) 160.98 660.02 P
5 F
2.02 (dc_IRAddGrid\050\051) 389.36 660.02 P
0 F
0.84 ( as) 490.16 660.02 P
(follo) 126 646.02 T
(ws:) 148.37 646.02 T
7 10 Q
(void) 144 627.35 T
(dc_IRAddGrid \050dc, when, sample, field, data\051) 144 615.35 T
(DataChunk *dc;) 144 603.35 T
(ZebTime *when;) 144 591.35 T
(int sample;) 144 579.35 T
(FieldId field;) 144 567.35 T
(void *data;) 144 555.35 T
0 12 Q
1.51 (Where) 126 530.02 P
7 F
3.62 (dc) 162.49 530.02 P
0 F
1.51 ( is the data chunk,) 176.89 530.02 P
7 F
3.62 (when) 274.42 530.02 P
0 F
1.51 ( is the time of this data,) 303.22 530.02 P
7 F
3.62 (sample) 429.11 530.02 P
0 F
1.51 ( is the) 472.31 530.02 P
0.3 (inde) 126 516.02 P
0.3 (x of the sample to be stored,) 146.48 516.02 P
7 F
0.71 (field) 287.2 516.02 P
0 F
0.3 ( is the \336eld to be stored, and) 323.2 516.02 P
7 F
0.71 (data) 463.9 516.02 P
0 F
0.3 ( is) 492.7 516.02 P
0.14 (the actual data. The data array is e) 126 502.02 P
0.14 (xpected to be a series of \337oating-point num-) 290.73 502.02 P
4.17 (bers, stored in the same order as the platform list that w) 126 488.02 P
4.17 (as passed to) 438.34 488.02 P
5 F
(dc_IRSetup\050\051) 126 474.02 T
0 F
(.) 212.4 474.02 T
3.36 (The) 126 448.02 P
5 F
8.07 (dc_IRGetGrid\050\051) 151.02 448.02 P
0 F
3.36 ( function retrie) 251.82 448.02 P
3.36 (v) 329.56 448.02 P
3.36 (es an irre) 335.38 448.02 P
3.36 (gular grid from a data) 385.91 448.02 P
(chunk:) 126 434.02 T
7 10 Q
(void *) 144 415.35 T
(dc_IRGetGrid \050dc, sample, field\051) 144 403.35 T
(DataChunk *dc;) 144 391.35 T
(int sample;) 144 379.35 T
(FieldId field;) 144 367.35 T
0 12 Q
3.07 (Where) 126 342.02 P
7 F
7.36 (dc) 164.05 342.02 P
0 F
3.07 ( is the data chunk,) 178.45 342.02 P
7 F
7.36 (sample) 283.78 342.02 P
0 F
3.07 ( is the inde) 326.98 342.02 P
3.07 (x of the sample to be) 388.34 342.02 P
0.52 (retrie) 126 328.02 P
0.52 (v) 151.02 328.02 P
0.52 (ed, and) 156.84 328.02 P
7 F
1.26 (field) 195.54 328.02 P
0 F
0.52 ( is the \336eld to be retrie) 231.54 328.02 P
0.52 (v) 342.37 328.02 P
0.52 (ed. The return v) 348.19 328.02 P
0.52 (alue is a pointer) 426.11 328.02 P
0.6 (to the data array for this grid, one v) 126 314.02 P
0.6 (alue per platform. If the requested sample) 300.12 314.02 P
(does not e) 126 300.02 T
(xist,) 174.48 300.02 T
5 F
(NULL) 197.82 300.02 T
0 F
( will be returned.) 226.62 300.02 T
-0.08 (Both) 126 274.02 P
5 F
-0.19 (dc_IRAddGrid\050\051) 152.26 274.02 P
0 F
-0.08 ( and) 253.06 274.02 P
5 F
-0.19 (dc_IRGetGrid\050\051) 276.24 274.02 P
0 F
-0.08 ( reference data arrays with) 377.04 274.02 P
0.55 (pointers to v) 126 260.02 P
0.55 (oid. The actual type of the data elements is not kno) 186.86 260.02 P
0.55 (wn, nor is the) 437.02 260.02 P
1.03 (element type rele) 126 246.02 P
1.03 (v) 210.4 246.02 P
1.03 (ant to the implementation of the IRGrid class. The IRGrid) 216.1 246.02 P
1.44 (class is merely implementing the geometry of the \336elds; MetData has tak) 126 232.02 P
1.44 (en) 492.67 232.02 P
(care of implementing the notions of \336elds and elements.) 126 218.02 T
72 175.02 558 177.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 175.02 558 177.02 R
7 X
0 0 0 1 0 0 0 K
V
72 176.02 117 176.02 2 L
0.5 H
2 Z
0 X
N
126 176.02 558 176.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(5.2) 100.32 181.02 T
(The Regular Grid DataChunk Class) 126 181.02 T
0 F
1.61 (Re) 126 157.02 P
1.61 (gular grids are one, tw) 139.15 157.02 P
1.61 (o, or three-dimensional arrays of data points, with) 253.11 157.02 P
6.97 (re) 126 143.02 P
6.97 (gular spacing between them. The class) 135.14 143.02 P
5 F
16.73 (DCC_RGrid) 365.27 143.02 P
0 F
6.97 ( \050subclass of) 430.07 143.02 P
5 F
-0.47 (DCC_MetData) 126 129.02 P
0 F
-0.19 (\051 implements re) 205.2 129.02 P
-0.19 (gular grids in a data chunk. There are currently) 279.95 129.02 P
0.23 (no subclasses of the re) 126 115.02 P
0.23 (gular grid class oriented to) 234.73 115.02 P
0.23 (w) 363.34 115.02 P
0.23 (ard speci\336cally one or tw) 371.88 115.02 P
0.23 (o-) 494 115.02 P
(dimensional grids; the) 126 101.02 T
(y can be added if the need de) 232.49 101.02 T
(v) 371.81 101.02 T
(elops.) 377.63 101.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "51" 51
%%Page: "52" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Grid Classes: RGrid, IRGrid, and Ima) 108 736.18 T
(g) 283.46 736.18 T
(e) 289.05 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(52) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(Re) 108 678.02 T
(gular grids are initialized with a call to) 121.15 678.02 T
5 F
(dc_RGSetup\050\051) 309.79 678.02 T
0 F
(.) 396.19 678.02 T
7 10 Q
(void) 126 659.35 T
(dc_RGSetup \050dc, nfield, fields\051) 126 647.35 T
(DataChunk *dc;) 126 635.35 T
(int nfield;) 126 623.35 T
(FieldId *fields;) 126 611.35 T
0 12 Q
-0.06 (Where) 108 586.02 P
7 F
-0.14 (dc) 142.92 586.02 P
0 F
-0.06 ( is a data chunk subclassed from) 157.32 586.02 P
5 F
-0.14 (DCC_RGrid) 315.23 586.02 P
0 F
-0.06 (,) 380.03 586.02 P
7 F
-0.14 (nfield) 385.97 586.02 P
0 F
-0.06 ( is the num-) 429.17 586.02 P
(ber of \336elds to be stored in this data chunk, and \336elds is a list of those \336elds.) 108 572.02 T
(T) 108 546.02 T
(o add a grid to a data chunk, use) 114.37 546.02 T
5 F
(dc_RGAddGrid\050\051) 272.34 546.02 T
0 F
( as follo) 373.14 546.02 T
(ws:) 411.5 546.02 T
7 10 Q
(void) 126 527.35 T
(dc_RGAddGrid \050dc, sample, field, origin, rginfo, when, data, len\051) 126 515.35 T
(DataChunk *dc;) 126 503.35 T
(int sample, len;) 126 491.35 T
(FieldId field;) 126 479.35 T
(Location *origin;) 126 467.35 T
(RGrid *rginfo;) 126 455.35 T
(ZebTime *when;) 126 443.35 T
(void *data;) 126 431.35 T
0 12 Q
0.51 (Where) 108 406.02 P
7 F
1.22 (dc) 143.49 406.02 P
0 F
0.51 ( is the data chunk,) 157.89 406.02 P
7 F
1.22 (sample) 250.42 406.02 P
0 F
0.51 ( is the inde) 293.62 406.02 P
0.51 (x of the sample to be stored,) 347.3 406.02 P
7 F
1.68 (field) 108 392.02 P
0 F
0.7 ( is the \336eld to be stored,) 144 392.02 P
7 F
1.68 (origin) 266.9 392.02 P
0 F
0.7 ( is the location of the bottom south-) 310.1 392.02 P
2.2 (west corner of the grid,) 108 378.02 P
7 F
5.28 (rginfo) 233.63 378.02 P
0 F
2.2 ( contains the grid dimension and spacing) 276.83 378.02 P
0.96 (information,) 108 364.02 P
7 F
2.3 (when) 171.62 364.02 P
0 F
0.96 ( is the time of this data,) 200.42 364.02 P
7 F
2.3 (data) 322.47 364.02 P
0 F
0.96 ( is the actual grid data, and) 351.27 364.02 P
7 F
-0.57 (len) 108 350.02 P
0 F
-0.24 ( is the length of the grid data in bytes. In most cases,) 129.6 350.02 P
7 F
-0.57 (len) 381.46 350.02 P
0 F
-0.24 ( may be speci\336ed) 403.07 350.02 P
(as zero, and it will be calculated from the grid dimensions.) 108 336.02 T
(T) 108 310.02 T
(o retrie) 114.37 310.02 T
(v) 148.39 310.02 T
(e a re) 154.21 310.02 T
(gular grid, use) 180.01 310.02 T
5 F
(dc_RGGetGrid\050\051) 252 310.02 T
0 F
(.) 352.8 310.02 T
7 10 Q
(void *) 126 291.35 T
(dc_RGGetGrid \050dc, sample, field, origin, rginfo, len\051) 126 279.35 T
(DataChunk *dc;) 126 267.35 T
(int sample, *len;) 126 255.35 T
(FieldId field;) 126 243.35 T
(Location *origin;) 126 231.35 T
(RGrid *rginfo;) 126 219.35 T
0 12 Q
1.09 (Where) 108 194.02 P
7 F
2.62 (dc) 144.07 194.02 P
0 F
1.09 ( is the data chunk,) 158.47 194.02 P
7 F
2.62 (sample) 253.93 194.02 P
0 F
1.09 ( is the inde) 297.12 194.02 P
1.09 (x of the sample of interest,) 352.56 194.02 P
-0.03 (and) 108 180.02 P
7 F
-0.06 (field) 128.3 180.02 P
0 F
-0.03 ( is the \336eld of interest. The return v) 164.3 180.02 P
-0.03 (alue is a v) 333.43 180.02 P
-0.03 (oid pointer to the grid) 381.44 180.02 P
-0.14 (data. An) 108 166.02 P
-0.14 (y of the rest of the parameters can be NULL, in which the parameter is) 148.34 166.02 P
-0.26 (ignored and not set to a return v) 108 152.02 P
-0.26 (alue. Otherwise,) 258.88 152.02 P
7 F
-0.62 (origin) 339.68 152.02 P
0 F
-0.26 ( will be set to the grid) 382.88 152.02 P
-0.23 (origin,) 108 138.02 P
7 F
-0.56 (rginfo) 142.44 138.02 P
0 F
-0.23 ( will be set to the dimension and spacing information, and) 185.64 138.02 P
7 F
-0.56 (len) 464.4 138.02 P
0 F
(will be set to the length of the grid, in bytes.) 108 124.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "52" 52
%%Page: "53" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Ima) 126 736.18 T
(g) 159.92 736.18 T
(e DataChunk Class) 165.51 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (53) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 672.02 558 674.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 672.02 558 674.02 R
7 X
0 0 0 1 0 0 0 K
V
72 673.02 117 673.02 2 L
0.5 H
2 Z
0 X
N
126 673.02 558 673.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(5.3) 100.32 678.02 T
(The Ima) 126 678.02 T
(g) 171.23 678.02 T
(e DataChunk Class) 178.68 678.02 T
0 F
1.01 (Image data \050) 126 654.02 P
5 F
2.43 (DCC_Image) 188 654.02 P
0 F
1.01 (\051 is a special subclass of) 252.8 654.02 P
5 F
2.43 (DCC_RGrid) 377.52 654.02 P
0 F
1.01 (, wherein all) 442.32 654.02 P
0.69 (images are tw) 126 640.02 P
0.69 (o-dimensional, and are stored as byte data with associated scal-) 193.9 640.02 P
0.64 (ing information. Since the image abstraction requires that the image elements) 126 626.02 P
-0.13 (be bytes, the \336elds are automatically assigned types of) 126 612.02 P
5 F
-0.31 (DCT_UnsignedChar) 388.8 612.02 P
0 F
(and protected from change. See Chapter) 126 598.02 T
(7 for information on element types.) 321.61 598.02 T
2 F
(5.3.1) 90.31 566.02 T
(Setting Up) 126 566.02 T
5 F
(DCC_Image) 126 548.02 T
0 F
( data chunks must be initialized by calling) 190.8 548.02 T
5 F
(dc_ImgSetup\050\051) 396.12 548.02 T
0 F
(.) 489.72 548.02 T
7 10 Q
(void) 144 529.35 T
(dc_ImgSetup \050dc, nfield, fields, scale\051) 144 517.35 T
(DataChunk *dc;) 144 505.35 T
(int nfield;) 144 493.35 T
(FieldId *fields;) 144 481.35 T
(ScaleInfo *scale;) 144 469.35 T
0 12 Q
-0.06 (Where) 126 444.02 P
7 F
-0.14 (dc) 160.92 444.02 P
0 F
-0.06 ( is a data chunk subclassed from) 175.32 444.02 P
5 F
-0.14 (DCC_Image) 333.23 444.02 P
0 F
-0.06 (,) 398.03 444.02 P
7 F
-0.14 (nfield) 403.97 444.02 P
0 F
-0.06 ( is the num-) 447.17 444.02 P
0.88 (ber of \336elds to be stored in this data chunk,) 126 430.02 P
7 F
2.12 (fields) 345.15 430.02 P
0 F
0.88 ( is a list of those \336elds,) 388.35 430.02 P
-0.27 (and) 126 416.02 P
7 F
-0.66 (scale) 146.05 416.02 P
0 F
-0.27 ( is a list of) 182.05 416.02 P
5 F
-0.66 (ScaleInfo) 233.69 416.02 P
0 F
-0.27 ( structures, gi) 298.49 416.02 P
-0.27 (ving the scale and of) 362.64 416.02 P
-0.27 (fset to be) 460.55 416.02 P
(used with each of the \336elds.) 126 402.02 T
2 F
(5.3.2) 90.31 370.02 T
(Storing) 126 370.02 T
0 F
(An image may be stored in a data chunk with) 126 352.02 T
5 F
(dc_ImgAddImage\050\051) 346.63 352.02 T
0 F
(.) 461.83 352.02 T
7 10 Q
(void) 144 333.35 T
(dc_ImgAddImage \050dc, sample, field, origin, rginfo, when, data, len\051) 144 321.35 T
(DataChunk *dc;) 144 309.35 T
(int sample, *len;) 144 297.35 T
(FieldId field;) 144 285.35 T
(Location *origin;) 144 273.35 T
(RGrid *rginfo;) 144 261.35 T
(ZebTime *when;) 144 249.35 T
(unsigned char *data;) 144 237.35 T
0 12 Q
0.51 (Where) 126 212.02 P
7 F
1.22 (dc) 161.49 212.02 P
0 F
0.51 ( is the data chunk,) 175.89 212.02 P
7 F
1.22 (sample) 268.42 212.02 P
0 F
0.51 ( is the inde) 311.62 212.02 P
0.51 (x of the sample to be stored,) 365.3 212.02 P
7 F
1.42 (field) 126 198.02 P
0 F
0.59 ( is the \336eld to be stored,) 162 198.02 P
7 F
1.42 (origin) 284.14 198.02 P
0 F
0.59 ( is the origin of the image,) 327.34 198.02 P
7 F
1.42 (rginfo) 460.8 198.02 P
0 F
0.55 (gi) 126 184.02 P
0.55 (v) 135.04 184.02 P
0.55 (es the dimensions and spacing of the image,) 140.86 184.02 P
7 F
1.32 (when) 359.57 184.02 P
0 F
0.55 ( is the time of this data,) 388.37 184.02 P
7 F
2.84 (data) 126 170.02 P
0 F
1.18 ( is the image data array) 154.8 170.02 P
1.18 (, and) 271.58 170.02 P
7 F
2.84 (len) 300.27 170.02 P
0 F
1.18 ( is the length of this array) 321.87 170.02 P
1.18 (. If) 450.85 170.02 P
7 F
2.84 (len) 470.21 170.02 P
0 F
1.18 ( is) 491.81 170.02 P
(speci\336ed as zero, it will be calculated from the dimension information.) 126 156.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "53" 53
%%Page: "54" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Grid Classes: RGrid, IRGrid, and Ima) 108 736.18 T
(g) 283.46 736.18 T
(e) 289.05 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(54) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(5.3.3) 72.31 678.02 T
(Retrie) 108 678.02 T
(ving) 141.83 678.02 T
0 F
0.2 (Images are retrie) 108 660.02 P
0.2 (v) 188.73 660.02 P
0.2 (ed from a data chunk with the) 194.55 660.02 P
5 F
0.49 (dc_ImgGetImage\050\051) 342.28 660.02 P
0 F
0.2 ( func-) 457.48 660.02 P
(tion, sho) 108 646.02 T
(wn belo) 149.04 646.02 T
(w:) 187.07 646.02 T
7 10 Q
(unsigned char *) 126 627.35 T
(dc_ImgGetImage \050dc, sample, field, origin, rginfo, len, scale\051) 126 615.35 T
(DataChunk *dc;) 126 603.35 T
(int sample, *len;) 126 591.35 T
(FieldId field;) 126 579.35 T
(Location *origin;) 126 567.35 T
(RGrid *rginfo;) 126 555.35 T
(ScaleInfo *scale;) 126 543.35 T
0 12 Q
0.32 (Where) 108 518.02 P
7 F
0.76 (dc) 143.3 518.02 P
0 F
0.32 ( is the same old, boring data chunk,) 157.7 518.02 P
7 F
0.76 (sample) 333.56 518.02 P
0 F
0.32 ( is the sample of inter-) 376.76 518.02 P
0.23 (est, and) 108 504.02 P
7 F
0.55 (field) 148.12 504.02 P
0 F
0.23 ( is the \336eld of interest. The return v) 184.12 504.02 P
0.23 (alue is a pointer to the data) 355.31 504.02 P
0.26 (array inside the data chunk, so the memory should be freed. An) 108 490.02 P
0.26 (y of the rest of) 414.97 490.02 P
0.25 (the parameters can be passed as) 108 476.02 P
5 F
0.61 (NULL) 264.8 476.02 P
0 F
0.25 (, in which case the parameter is ignored) 293.6 476.02 P
1.87 (and not set to a return v) 108 462.02 P
1.87 (alue. Otherwise,) 232.22 462.02 P
7 F
4.48 (origin) 317.26 462.02 P
0 F
1.87 ( is set to the grid origin,) 360.46 462.02 P
7 F
3.67 (rginfo) 108 448.02 P
0 F
1.53 ( is set to the dimension and spacing information,) 151.2 448.02 P
7 F
3.67 (len) 400.95 448.02 P
0 F
1.53 ( is set to the) 422.55 448.02 P
0.85 (length of the grid data array) 108 434.02 P
0.85 (, and) 245.08 434.02 P
7 F
2.03 (scale) 273.1 434.02 P
0 F
0.85 ( is set to the scaling information for) 309.1 434.02 P
(the requested \336eld.) 108 420.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "54" 54
%%Page: "55" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (55) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 6 \245) 126 677 S
0 24 Q
-0.48 (The N-space Class) 252 677 S
0 12 Q
3.05 (The N-space DataChunk class \050class ID) 126 424 P
5 F
7.32 (DCC_NSpace) 338.25 424 P
0 F
3.05 (\051, subclassed from) 410.25 424 P
5 F
2.25 (DCC_MetData) 126 410 P
0 F
0.94 (, stores general-purpose, N-dimensional, \337oating-point, re) 205.2 410 P
0.94 (gu-) 488 410 P
0.18 (larly- or irre) 126 396 P
0.18 (gularly-spaced meteorological data which do not \336t e) 184.82 396 P
0.18 (xisting Data-) 441.49 396 P
2.78 (Chunk class or) 126 382 P
2.78 (g) 202.68 382 P
2.78 (anizations. It \336lls a g) 208.62 382 P
2.78 (ap between the scalar class and the) 320.02 382 P
1.2 (gridded classes: scalar) 126 368 P
1.2 (-class data are limited to a single temporal dimension,) 235.46 368 P
-0.12 (while the dimensions of gridded-class data are restricted to ph) 126 354 P
-0.12 (ysical coordinate) 422.47 354 P
-0.03 (systems. N-space \336elds can be de\336ned as time-dependent or time-independent,) 126 340 P
0.13 (o) 126 326 P
0.13 (v) 131.82 326 P
0.13 (er zero dimensions or o) 137.64 326 P
0.13 (v) 250.63 326 P
0.13 (er se) 256.45 326 P
0.13 (v) 278.6 326 P
0.13 (eral dimensions. The N-space class is \337e) 284.42 326 P
0.13 (xible) 480 326 P
2.09 (enough to de\336ne se) 126 312 P
2.09 (v) 224.94 312 P
2.09 (eral or) 230.76 312 P
2.09 (g) 263.62 312 P
2.09 (anizations of data, including irre) 269.56 312 P
2.09 (gularly-spaced) 433.36 312 P
2.14 (data, and allo) 126 298 P
2.14 (w \336elds of dif) 194.31 298 P
2.14 (ferent or) 267.44 298 P
2.14 (g) 310.35 298 P
2.14 (anizations to be combined within the) 316.29 298 P
(same DataChunk.) 126 284 T
1.68 (On a fundamental le) 126 258 P
1.68 (v) 228.4 258 P
1.68 (el, the N-space class is analogous to the netCDF data) 234.22 258 P
1.16 (model. The class can serv) 126 244 P
1.16 (e as a v) 254.11 244 P
1.16 (ehicle for passing general data through the) 293.07 244 P
0.2 (DataChunk interf) 126 230 P
0.2 (ace to the netCDF interf) 209.73 230 P
0.2 (ace and netCDF-format \336les. The N-) 326.38 230 P
0.32 (space interf) 126 216 P
0.32 (ace mak) 181.84 216 P
0.32 (es use of man) 221.69 216 P
0.32 (y of the requirements and con) 288.12 216 P
0.32 (v) 432.21 216 P
0.32 (entions of the) 438.03 216 P
1.23 (netCDF interf) 126 202 P
1.23 (ace, including the use of) 194.11 202 P
4 F
1.23 (coor) 320.23 202 P
1.23 (dinate variables) 341.78 202 P
0 F
1.23 ( \050also referred to) 420.68 202 P
2.07 (here as) 126 188 P
4 F
2.07 (dimension variables) 166.79 188 P
0 F
2.07 (\051 to describe irre) 265.86 188 P
2.07 (gularly-inde) 350.86 188 P
2.07 (x) 409.34 188 P
2.07 (ed arrays of data.) 415.16 188 P
2.43 (Coordinate v) 126 174 P
2.43 (ariables are e) 190.46 174 P
2.43 (xplained in Section) 258.44 174 P
2.43 (6.1.2. Also, see the NetCDF) 358.96 174 P
(User\325) 126 160 T
(s Guide) 151.99 160 T
0 9.6 Q
(1) 188.99 164.8 T
0 12 Q
( for details on the netCDF interf) 193.79 160 T
(ace.) 347.65 160 T
72 100.98 558 130.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 108.98 270 108.98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(1.) 126 94.98 T
4 F
(NetCDF User\325) 137.25 94.98 T
(s Guide) 190.13 94.98 T
0 F
(, Unidata Program Center) 217.88 94.98 T
(, October 1991) 310.01 94.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "55" 55
%%Page: "56" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(56) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.85 (Since the N-space class is designed to tak) 108 678.02 P
0.85 (e adv) 313.43 678.02 P
0.85 (antage of the \337e) 339.63 678.02 P
0.85 (xibility of the) 418.97 678.02 P
0.99 (netCDF interf) 108 664.02 P
0.99 (ace, the netCDF \336le format is the only format for which Zebra) 175.86 664.02 P
0.1 (supports the storage and retrie) 108 650.02 P
0.1 (v) 252.74 650.02 P
0.1 (al of N-space DataChunks. The current support) 258.44 650.02 P
-0.14 (is limited to) 108 636.02 P
5 F
-0.35 (scalar) 167.92 636.02 P
0 F
-0.14 ( and) 211.12 636.02 P
5 F
-0.35 (nspace) 234.16 636.02 P
0 F
-0.14 ( or) 277.36 636.02 P
-0.14 (g) 289.99 636.02 P
-0.14 (anizations, b) 295.93 636.02 P
-0.14 (ut support for other or) 356.21 636.02 P
-0.14 (g) 461.4 636.02 P
-0.14 (ani-) 467.34 636.02 P
(zations is possible.) 108 622.02 T
0.12 (Note that Section) 108 596.02 P
0.12 (6.4, \322Examples\323, contains se) 194.57 596.02 P
0.12 (v) 332.6 596.02 P
0.12 (eral e) 338.42 596.02 P
0.12 (xamples of N-space code) 364.68 596.02 P
1.7 (which may be helpful references while reading the \336rst fe) 108 582.02 P
1.7 (w sections of the) 399.92 582.02 P
0.96 (chapter) 108 568.02 P
0.96 (. Feel free to suggest other e) 142.66 568.02 P
0.96 (xamples which w) 283.89 568.02 P
0.96 (ould help clarify an) 369.68 568.02 P
0.96 (y of) 466.04 568.02 P
(the information.) 108 554.02 T
2 F
(6.0.1) 72.31 522.02 T
(Chang) 108 522.02 T
(es in Zebra 4.1) 145.45 522.02 T
0 F
2.95 (Release 4.1 includes some ne) 108 504.02 P
2.95 (w \337e) 260.47 504.02 P
2.95 (xibility for manipulating N-space data-) 286.9 504.02 P
0.11 (chunks. Originally) 108 490.02 P
0.11 (, v) 196.66 490.02 P
0.11 (ariables and dimensions could be rede\336ned while the def-) 208.48 490.02 P
1.38 (inition w) 108 476.02 P
1.38 (as still open and no data had been added, b) 152.27 476.02 P
1.38 (ut a rede\336nition al) 369.77 476.02 P
1.38 (w) 461.46 476.02 P
1.38 (ays) 470 476.02 P
11.22 (produced a w) 108 462.02 P
11.22 (arning in the e) 194.96 462.02 P
11.22 (v) 297.3 462.02 P
11.22 (ent logger) 303.12 462.02 P
11.22 (. The ne) 362 462.02 P
11.22 (w function) 423.12 462.02 P
5 F
8.58 (dc_NSAllowRedefine\050\051) 108 448.02 P
0 F
3.58 ( allo) 252 448.02 P
3.58 (ws rede\336nitions to be e) 276.28 448.02 P
3.58 (xplicitly allo) 401.72 448.02 P
3.58 (wed) 466.01 448.02 P
1.94 (rather than al) 108 434.02 P
1.94 (w) 175.07 434.02 P
1.94 (ays causing w) 183.62 434.02 P
1.94 (arnings. F) 254.69 434.02 P
1.94 (or backw) 304.45 434.02 P
1.94 (ards compatibility) 350.59 434.02 P
1.94 (, N-space) 438.75 434.02 P
1.62 (datachunks def) 108 420.02 P
1.62 (ault to the historical beha) 181.81 420.02 P
1.62 (vior of w) 309.35 420.02 P
1.62 (arning about rede\336nitions.) 356.45 420.02 P
(See the ne) 108 406.02 T
(w section, Section) 157.02 406.02 T
(6.2.4, \322Rede\336nition\323, for more information.) 247.68 406.02 T
2 F
(6.0.2) 72.31 374.02 T
(Changes in Zebra 4.0) 108 374.02 T
0 F
-0.3 (Release 4.0 of Zebra includes some additions and enhancements to the N-space) 108 356.02 P
0.18 (interf) 108 342.02 P
0.18 (ace.   First of all, there is a ne) 133.87 342.02 P
0.18 (w function) 276.79 342.02 P
5 F
0.42 (dc_NSAddMultSamples\050\051) 331.8 342.02 P
0 F
0.18 (,) 483 342.02 P
1.43 (which allo) 108 328.02 P
1.43 (ws multiple samples of a single \336eld to be added in one function) 159.46 328.02 P
2.42 (call. This function is analogous to the MetData class\325) 108 314.02 P
2.42 (s) 382.32 314.02 P
5 F
5.8 (dc_AddMData\050\051) 392.4 314.02 P
0 F
(function.) 108 300.02 T
3.64 (The) 108 274.02 P
5 F
8.74 (dc_NSGetSample\050\051) 133.3 274.02 P
0 F
3.64 ( function is no longer restricted to retrie) 248.5 274.02 P
3.64 (ving) 464.66 274.02 P
1.75 (dynamic data. If data for a static \336eld is requested,) 108 260.02 P
5 F
4.2 (dc_NSGetSample\050\051) 370.8 260.02 P
0 F
0.99 (ignores the sample number parameter and returns the static data. This mak) 108 246.02 P
0.99 (es) 476 246.02 P
0.7 (sense because static data is by de\336nition constant across all of the samples in) 108 232.02 P
0.97 (the) 108 218.02 P
0.97 (DataChunk, and therefore it can be returned as v) 126.63 218.02 P
0.97 (alid data for an) 367 218.02 P
0.97 (y sample) 442.04 218.02 P
2.42 (number) 108 204.02 P
2.42 (. The opposite is not true; static data cannot be added through the) 144 204.02 P
5 F
(dc_NSAddSample\050\051) 108 190.02 T
0 F
( function.) 223.2 190.02 T
0.74 (The interf) 108 164.02 P
0.74 (ace sections belo) 156.27 164.02 P
0.74 (w) 238.75 164.02 P
0.74 (, Section) 246.64 164.02 P
0.74 (6.2.6, \322) 292.37 164.02 P
0.74 (Adding Data\323 and Section) 327.48 164.02 P
0.74 (6.2.7,) 459 164.02 P
2.53 (\322Extracting Data\323, describe both of the changes abo) 108 150.02 P
2.53 (v) 374.76 150.02 P
2.53 (e in more detail and) 380.58 150.02 P
(include the function prototypes.) 108 136.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "56" 56
%%Page: "57" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(General Over) 126 736.18 T
(vie) 182.62 736.18 T
(w) 194.99 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (57) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 672.02 558 674.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 672.02 558 674.02 R
7 X
0 0 0 1 0 0 0 K
V
72 673.02 117 673.02 2 L
0.5 H
2 Z
0 X
N
126 673.02 558 673.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(6.1) 100.32 678.02 T
(General Over) 126 678.02 T
(vie) 201.49 678.02 T
(w) 217.99 678.02 T
0 F
1.13 (This section describes three concepts which are unique to the N-space Data-) 126 654.02 P
(Chunk class: dimensions, coordinate v) 126 640.02 T
(ariables, and static \336elds.) 310.69 640.02 T
2 F
(6.1.1) 90.31 608.02 T
(Dimensions) 126 608.02 T
0 F
3.29 (Lik) 126 590.02 P
3.29 (e its parent class,) 142.55 590.02 P
5 F
7.89 (DCC_MetData) 240.69 590.02 P
0 F
3.29 (, the N-space class or) 319.89 590.02 P
3.29 (g) 435.13 590.02 P
3.29 (anizes Data-) 441.07 590.02 P
0.06 (Chunks as a collection of \336elds, each distinguished by their unique) 126 576.02 P
5 F
0.14 (FieldId) 450.6 576.02 P
0 F
0.06 (.) 501 576.02 P
2.53 (F) 126 562.02 P
2.53 (or the N-space class, the w) 132.49 562.02 P
2.53 (ords \324\336eld\325 and \324v) 273.64 562.02 P
2.53 (ariable\325 will be used inter-) 367.25 562.02 P
0.46 (changeably) 126 548.02 P
0.46 (, and in general the w) 179.87 548.02 P
0.46 (ords refer to the same concept. In addition to) 285.36 548.02 P
-0.02 (\336elds, the N-space class adds the notion of dimensions. T) 126 534.02 P
-0.02 (w) 400.54 534.02 P
-0.02 (o required pieces of) 409.08 534.02 P
2.17 (information describe a dimension: the name and the size. The dimension\325) 126 520.02 P
2.17 (s) 499.33 520.02 P
1.6 (name uniquely identi\336es itself among the other dimensions in a DataChunk) 126 506.02 P
1.19 (and serv) 126 492.02 P
1.19 (es as a reference when de\336ning \336elds or inquiring about the dimen-) 167.33 492.02 P
1.09 (sions in a DataChunk. The dimension\325) 126 478.02 P
1.09 (s size is simply the number of coordi-) 315.42 478.02 P
0.12 (nates \050i.e., indices\051 in the dimension. The N-space interf) 126 464.02 P
0.12 (ace allo) 396.08 464.02 P
0.12 (ws dimensions) 432.88 464.02 P
0.1 (to be speci\336ed either by name or by) 126 450.02 P
5 F
0.25 (FieldId) 301.47 450.02 P
0 F
0.1 (. When speci\336ed by) 351.87 450.02 P
5 F
0.25 (FieldId) 450.6 450.02 P
0 F
0.1 (,) 501 450.02 P
0.25 (the \336eld name associated with the) 126 436.02 P
5 F
0.6 (FieldId) 292.81 436.02 P
0 F
0.25 ( becomes the name of the dimen-) 343.21 436.02 P
1.19 (sion. The ability to specify dimensions by) 126 422.02 P
5 F
2.86 (FieldId) 338.35 422.02 P
0 F
1.19 ( can simplify situations) 388.75 422.02 P
0.03 (where one \336eld or a group of \336elds will serv) 126 408.02 P
0.03 (e to irre) 339.06 408.02 P
0.03 (gularly inde) 376.26 408.02 P
0.03 (x se) 433.77 408.02 P
0.03 (v) 452.5 408.02 P
0.03 (eral other) 458.32 408.02 P
(\336elds [see Section) 126 394.02 T
(6.1.2 on coordinate v) 216.32 394.02 T
(ariables].) 317.68 394.02 T
0.14 (An N-space \336eld dif) 126 368.02 P
0.14 (fers from MetData \336elds in that N-space \336elds are de\336ned) 223.77 368.02 P
0.25 (o) 126 354.02 P
0.25 (v) 131.82 354.02 P
0.25 (er a list of dimensions and can be either static or dynamic. The interf) 137.64 354.02 P
0.25 (ace for) 470.77 354.02 P
2.98 (de\336ning \336elds and dimensions is e) 126 340.02 P
2.98 (xplained in Section) 306.39 340.02 P
2.98 (6.2.3. Section) 408.02 340.02 P
2.98 (6.1.3) 480 340.02 P
(e) 126 326.02 T
(xplains static \336elds.) 131.15 326.02 T
2 F
(6.1.2) 90.31 294.02 T
(Coor) 126 294.02 T
(dinate V) 153.76 294.02 T
(ariab) 199.72 294.02 T
(les) 228.28 294.02 T
0 F
2.22 (T) 126 276.02 P
2.22 (o de\336ne irre) 132.37 276.02 P
2.22 (gularly-spaced data, the netCDF data model and the N-space) 194.62 276.02 P
0.33 (interf) 126 262.02 P
0.33 (ace rely on the notion of) 151.87 262.02 P
4 F
0.33 (coor) 273.82 262.02 P
0.33 (dinate variables) 295.37 262.02 P
0 F
0.33 (. A coordinate v) 373.36 262.02 P
0.33 (ariable is a) 451.36 262.02 P
0.22 (mapping whose range maps the domain of another v) 126 248.02 P
0.22 (ariable. Hence the coordi-) 378.73 248.02 P
1.62 (nate v) 126 234.02 P
1.62 (ariable maps the irre) 156.31 234.02 P
1.62 (gularly-spaced points along a dimension, while a) 259.3 234.02 P
-0.16 (v) 126 220.02 P
-0.16 (ariable de\336ned o) 131.7 220.02 P
-0.16 (v) 211.17 220.02 P
-0.16 (er that same dimension maps its range v) 216.99 220.02 P
-0.16 (alues corresponding) 407.85 220.02 P
2.7 (to the points mapped by the coordinate v) 126 206.02 P
2.7 (ariable. The con) 340.23 206.02 P
2.7 (v) 422.79 206.02 P
2.7 (ention used by) 428.61 206.02 P
0.85 (netCDF and adopted by the N-space interf) 126 192.02 P
0.85 (ace identi\336es a coordinate v) 334.28 192.02 P
0.85 (ariable) 471.35 192.02 P
-0.14 (as a v) 126 178.02 P
-0.14 (ariable whose name is identical to the name of a dimension. F) 152.75 178.02 P
-0.14 (or e) 447.67 178.02 P
-0.14 (xample,) 465.67 178.02 P
0.31 (consider a v) 126 164.02 P
0.31 (ariable named) 184.31 164.02 P
4 F
0.31 (x) 255.57 164.02 P
0 F
0.31 ( which maps the dimension x into the domain of a) 260.9 164.02 P
0.73 (v) 126 150.02 P
0.73 (ariable y) 131.7 150.02 P
0.73 (, yielding tw) 173.3 150.02 P
0.73 (o mappings) 234.97 150.02 P
0.73 ( and) 324.18 150.02 P
0.73 (, where) 374.61 150.02 P
0.73 (is the) 424.82 150.02 P
4 F
0.73 (variable x) 454.95 150.02 P
0 F
-0.21 (and) 126 136.02 P
-0.21 ( is the) 156.96 136.02 P
4 F
-0.21 (dimension x) 187.99 136.02 P
0 F
-0.21 (. Note that there is a distinction between) 245.45 136.02 P
4 F
-0.21 (x) 440.08 136.02 P
0 F
-0.21 ( the v) 445.4 136.02 P
-0.21 (ariable) 471.35 136.02 P
1.06 (and) 126 122.02 P
4 F
1.06 (x) 147.39 122.02 P
0 F
1.06 ( the dimension. The N-space interf) 152.71 122.02 P
1.06 (ace mak) 324.52 122.02 P
1.06 (es this distinction by clearly) 365.1 122.02 P
1.33 (separating the de\336nition of a v) 126 108.02 P
1.33 (ariable from the de\336nition of a dimension. In) 278.69 108.02 P
295.1 142.92 324.18 157.77 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
0 0 0 1 0 0 0 K
(x) 297.48 150.02 T
4 7 Q
(v) 301.84 147.12 T
4 9 Q
(x) 309.36 150.02 T
4 7 Q
(d) 313.72 147.12 T
6 9 Q
(\050) 305.48 150.02 T
(\051) 318.05 150.02 T
0 0 612 792 C
348.97 142.92 374.6 157.77 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
0 0 0 1 0 0 0 K
(y) 351.35 150.02 T
(x) 359.75 150.02 T
4 7 Q
(d) 364.12 147.12 T
6 9 Q
(\050) 355.87 150.02 T
(\051) 368.44 150.02 T
0 0 612 792 C
414.38 142.92 424.82 157.77 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
0 0 0 1 0 0 0 K
(x) 415.48 150.02 T
4 7 Q
(v) 419.85 147.12 T
0 0 612 792 C
146.12 128.92 156.96 143.77 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
0 0 0 1 0 0 0 K
(x) 147.13 136.02 T
4 7 Q
(d) 151.5 133.12 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "57" 57
%%Page: "58" 58
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(58) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.39 (this case,) 108 678.02 P
0.39 ( is the coordinate v) 166.21 678.02 P
0.39 (ariable. A set of data points for the irre) 258.79 678.02 P
0.39 (gularly-) 448.01 678.02 P
(spaced v) 108 664.02 T
(ariable) 149.35 664.02 T
4 F
(y) 185 664.02 T
0 F
( such as) 190.33 664.02 T
0.42 (w) 108 611.02 P
0.42 (ould be described by the follo) 116.54 611.02 P
0.42 (wing \336eld data in an N-space DataChunk \050) 261.33 611.02 P
4 F
0.42 (x) 469.25 611.02 P
0 F
0.42 ( is) 474.57 611.02 P
(the v) 108 597.02 T
(ariable) 131.36 597.02 T
(\051:) 177.46 597.02 T
(and) 108 542 T
-0.23 (If the domain of another v) 108 489 P
-0.23 (ariable,) 232.21 489 P
4 F
-0.23 (z) 270.63 489 P
0 F
-0.23 (, w) 275.3 489 P
-0.23 (as also mapped by) 289.62 489 P
4 F
-0.23 (x) 380.03 489 P
0 F
-0.23 (, then the \336eld w) 385.36 489 P
-0.23 (ould) 464.66 489 P
0.32 (be de\336ned as) 108 475 P
0.32 (in the DataChunk. The v) 195.91 475 P
0.32 (alues of) 315.22 475 P
4 F
0.32 (z) 356.52 475 P
0 F
0.32 ( w) 361.18 475 P
0.32 (ould be the v) 373.05 475 P
0.32 (alues of at) 436.04 475 P
(each of the points mapped by) 108 461 T
4 F
(x) 251.98 461 T
0 F
(.) 257.3 461 T
2.04 (The N-space interf) 108 435 P
2.04 (ace does not e) 201.92 435 P
2.04 (xplicitly de\336ne a coordinate v) 275.49 435 P
2.04 (ariable. The) 426.65 435 P
0.51 (interpretation of a \336eld as a coordinate v) 108 421 P
0.51 (ariable is implicit in the naming con-) 305.59 421 P
0.7 (v) 108 407 P
0.7 (ention described abo) 113.82 407 P
0.7 (v) 214.35 407 P
0.7 (e. A dimension) 220.17 407 P
4 F
0.7 (does not) 298.26 407 P
0 F
0.7 (need to ha) 342.99 407 P
0.7 (v) 393.47 407 P
0.7 (e a corresponding) 399.29 407 P
0.54 (v) 108 393 P
0.54 (ariable of the same name. A dimension without a coordinate v) 113.7 393 P
0.54 (ariable simply) 417.13 393 P
-0.12 (represents a re) 108 379 P
-0.12 (gularly-spaced domain containing the indices, 1, 2, 3,) 176.89 379 P
4 F
-0.12 (n) 435.92 379 P
0 F
-0.12 (, where) 441.92 379 P
4 F
-0.12 (n) 480 379 P
0 F
0.1 (is the size of the dimension. A \336eld dimensioned o) 108 365 P
0.1 (v) 352.04 365 P
0.1 (er such a domain maps the) 357.86 365 P
0.64 (indices of the dimension to the \336eld\325) 108 351 P
0.64 (s v) 287.17 351 P
0.64 (alues at speci\336c coordinates along the) 301.17 351 P
-0.2 (dimension. Coordinate v) 108 337 P
-0.2 (ariables are purely a method of attaching auxiliary and) 225.64 337 P
0.18 (optional information to a dimension, such as an e) 108 323 P
0.18 (xplicit mapping of the v) 345.58 323 P
0.18 (alues) 461.34 323 P
2.16 (in a \336eld\325) 108 309 P
2.16 (s domain or a ph) 157.66 309 P
2.16 (ysical signi\336cance of the \336eld\325) 246.23 309 P
2.16 (s dimension. F) 401.52 309 P
2.16 (or) 476 309 P
-0.22 (e) 108 295 P
-0.22 (xample, a v) 113.15 295 P
-0.22 (ector in 3-space dimensioned o) 168.18 295 P
-0.22 (v) 316.41 295 P
-0.22 (er time might be de\336ned as) 322.23 295 P
-0.22 (.) 483 295 P
-0.24 (T) 108 281 P
-0.24 (ime is the dimension) 114.91 281 P
4 F
-0.24 (t) 216.63 281 P
0 F
-0.24 (, while) 219.96 281 P
4 F
-0.24 (c) 255.15 281 P
0 F
-0.24 ( is the component dimension of size 3. The v) 260.48 281 P
-0.24 (al-) 473.34 281 P
2.12 (ues of the) 108 267 P
4 F
2.12 (x, y) 164.03 267 P
2.12 (, z) 182.15 267 P
0 F
2.12 ( and components of) 194.94 267 P
4 F
2.12 (v) 300.75 267 P
0 F
2.12 ( w) 306.08 267 P
2.12 (ould be stored at the coordinates) 319.74 267 P
0.85 (, respecti) 187.67 253 P
0.85 (v) 231.54 253 P
0.85 (ely) 237.36 253 P
0.85 (, for each time coordinate along dimension) 251.24 253 P
4 F
0.85 (t) 465.82 253 P
0 F
0.85 (. In) 469.15 253 P
-0.07 (this e) 108 239 P
-0.07 (xample, a coordinate v) 133.41 239 P
-0.07 (ariable for dimension) 242.2 239 P
4 F
-0.07 (c) 347.63 239 P
0 F
-0.07 ( is not only unnecessary b) 352.95 239 P
-0.07 (ut) 476.66 239 P
(unreasonable as well.) 108 225 T
2 F
(6.1.3) 72.31 193 T
(Static Fields) 108 193 T
0 F
0.7 (Occasionally it may be desirable to store a \336eld or coordinate v) 108 175 P
0.7 (ariable whose) 418.99 175 P
0.05 (data do not v) 108 161 P
0.05 (ary with time. Rather than store the same data repeatedly for each) 170.18 161 P
-0.17 (time sample in a DataChunk and w) 108 147 P
-0.17 (aste space, the N-space class allo) 275.53 147 P
-0.17 (ws the def-) 433.02 147 P
0.6 (inition of static \336elds. A static \336eld is not associated with a particular time or) 108 133 P
(sample number) 108 119 T
(, and its data only needs to be added to the DataChunk once.) 181.18 119 T
155.77 670.92 166.21 685.77 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
0 0 0 1 0 0 0 K
(x) 156.88 678.02 T
4 7 Q
(v) 161.24 675.12 T
0 0 612 792 C
54 87.98 540 686.02 C
60 633.02 534 660.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
0 X
0 0 0 1 0 0 0 K
(y) 181.27 645.55 T
0 0 0 1 0 0 0 K
0 F
(1.3) 190.35 645.55 T
0 0 0 1 0 0 0 K
6 F
(\050) 186.3 645.55 T
(\051) 203.55 645.55 T
0 0 0 1 0 0 0 K
0 F
(2.6) 222.52 645.55 T
0 0 0 1 0 0 0 K
4 F
(y) 240.26 645.55 T
0 0 0 1 0 0 0 K
0 F
(2.0) 249.33 645.55 T
0 0 0 1 0 0 0 K
6 F
(\050) 245.29 645.55 T
(\051) 262.54 645.55 T
(,) 235.02 645.55 T
0 0 0 1 0 0 0 K
0 F
(4.0) 281.5 645.55 T
0 0 0 1 0 0 0 K
4 F
(y) 299.24 645.55 T
0 0 0 1 0 0 0 K
0 F
(3.0) 308.31 645.55 T
0 0 0 1 0 0 0 K
6 F
(\050) 304.27 645.55 T
(\051) 321.52 645.55 T
(,) 294 645.55 T
0 0 0 1 0 0 0 K
0 F
(6.0) 340.48 645.55 T
0 0 0 1 0 0 0 K
4 F
(y) 358.22 645.55 T
0 0 0 1 0 0 0 K
0 F
(3.2) 367.29 645.55 T
0 0 0 1 0 0 0 K
6 F
(\050) 363.25 645.55 T
(\051) 380.5 645.55 T
(,) 352.98 645.55 T
0 0 0 1 0 0 0 K
0 F
(3.2) 399.46 645.55 T
(=) 211.88 645.55 T
(=) 270.86 645.55 T
(=) 329.85 645.55 T
(=) 388.83 645.55 T
0 0 0 1 0 0 0 K
54 87.98 540 686.02 C
0 0 612 792 C
167.02 589.92 177.46 604.77 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
0 0 0 1 0 0 0 K
(x) 168.12 597.02 T
4 7 Q
(v) 172.49 594.12 T
0 0 612 792 C
54 87.98 540 686.02 C
60 564 534 593.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
0 X
0 0 0 1 0 0 0 K
(x) 196.18 577.55 T
0 0 0 1 0 0 0 K
0 F
(0) 205.29 577.55 T
0 0 0 1 0 0 0 K
6 F
(\050) 201.24 577.55 T
(\051) 210.99 577.55 T
0 0 0 1 0 0 0 K
0 F
(1.3) 229.96 577.55 T
0 0 0 1 0 0 0 K
4 F
(x) 247.73 577.55 T
0 0 0 1 0 0 0 K
0 F
(1) 256.83 577.55 T
0 0 0 1 0 0 0 K
6 F
(\050) 252.79 577.55 T
(\051) 262.54 577.55 T
(,) 242.46 577.55 T
0 0 0 1 0 0 0 K
0 F
(2.0) 281.5 577.55 T
0 0 0 1 0 0 0 K
4 F
(x) 299.27 577.55 T
0 0 0 1 0 0 0 K
0 F
(2) 308.37 577.55 T
0 0 0 1 0 0 0 K
6 F
(\050) 304.33 577.55 T
(\051) 314.08 577.55 T
(,) 294 577.55 T
0 0 0 1 0 0 0 K
0 F
(3.0) 333.04 577.55 T
0 0 0 1 0 0 0 K
4 F
(x) 350.81 577.55 T
0 0 0 1 0 0 0 K
0 F
(3) 359.91 577.55 T
0 0 0 1 0 0 0 K
6 F
(\050) 355.87 577.55 T
(\051) 365.62 577.55 T
(,) 345.54 577.55 T
0 0 0 1 0 0 0 K
0 F
(3.2) 384.58 577.55 T
(=) 219.32 577.55 T
(=) 270.86 577.55 T
(=) 322.4 577.55 T
(=) 373.95 577.55 T
0 0 0 1 0 0 0 K
54 87.98 540 686.02 C
0 0 612 792 C
54 87.98 540 686.02 C
154.8 511 439.2 538 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
0 0 0 1 0 0 0 K
(y) 206.32 520.65 T
0 0 0 1 0 0 0 K
0 F
(0) 214.48 520.65 T
0 0 0 1 0 0 0 K
6 F
(\050) 210.85 520.65 T
(\051) 219.62 520.65 T
0 0 0 1 0 0 0 K
0 F
(2.6) 236.68 520.65 T
0 0 0 1 0 0 0 K
4 F
(y) 252.64 520.65 T
0 0 0 1 0 0 0 K
0 F
(1) 260.8 520.65 T
0 0 0 1 0 0 0 K
6 F
(\050) 257.17 520.65 T
(\051) 265.94 520.65 T
(,) 247.93 520.65 T
0 0 0 1 0 0 0 K
0 F
(4.0) 283 520.65 T
0 0 0 1 0 0 0 K
4 F
(y) 298.96 520.65 T
0 0 0 1 0 0 0 K
0 F
(2) 307.13 520.65 T
0 0 0 1 0 0 0 K
6 F
(\050) 303.49 520.65 T
(\051) 312.26 520.65 T
(,) 294.25 520.65 T
0 0 0 1 0 0 0 K
0 F
(6.0) 329.32 520.65 T
0 0 0 1 0 0 0 K
4 F
(y) 345.29 520.65 T
0 0 0 1 0 0 0 K
0 F
(3) 353.45 520.65 T
0 0 0 1 0 0 0 K
6 F
(\050) 349.81 520.65 T
(\051) 358.59 520.65 T
(,) 340.57 520.65 T
0 0 0 1 0 0 0 K
0 F
(3.2) 375.65 520.65 T
(=) 227.11 520.65 T
(=) 273.43 520.65 T
(=) 319.76 520.65 T
(=) 366.08 520.65 T
0 0 0 1 0 0 0 K
54 87.98 540 686.02 C
0 0 612 792 C
174.61 470.75 195.91 482.75 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
0 0 0 1 0 0 0 K
(z) 176.99 475 T
(x) 184.9 475 T
6 F
(\050) 181.02 475 T
(\051) 189.56 475 T
0 0 612 792 C
454.21 290.75 483 302.75 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
0 0 0 1 0 0 0 K
(v) 456.63 295 T
(t) 464.79 295 T
(c) 471.95 295 T
6 F
(,) 467.45 295 T
(\050) 461.15 295 T
(\051) 476.58 295 T
0 0 612 792 C
108 248.75 187.67 260.75 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
0 0 0 1 0 0 0 K
(c) 109 253 T
0 0 0 1 0 0 0 K
0 F
(1) 127.06 253 T
0 0 0 1 0 0 0 K
4 F
(c) 136.06 253 T
6 F
(,) 131.56 253 T
0 0 0 1 0 0 0 K
0 F
(2) 154.12 253 T
0 0 0 1 0 0 0 K
4 F
(c) 163.11 253 T
6 F
(,) 158.62 253 T
0 0 0 1 0 0 0 K
0 F
(3) 181.17 253 T
(=) 117.49 253 T
(=) 144.55 253 T
(=) 171.6 253 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "58" 58
%%Page: "59" 59
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Interface) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (59) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.91 (An) 126 678.02 P
0.91 (y N-space \336eld, re) 140.48 678.02 P
0.91 (g) 231 678.02 P
0.91 (ardless of the number of dimensions or whether it is a) 236.94 678.02 P
0.72 (coordinate v) 126 664.02 P
0.72 (ariable, can be de\336ned as static. A \336eld which is not static stores) 186.07 664.02 P
0.42 (data according to speci\336c times and sample numbers, as in the MetData inter-) 126 650.02 P
(f) 126 636.02 T
(ace.) 129.88 636.02 T
72 593.02 558 595.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 593.02 558 595.02 R
7 X
0 0 0 1 0 0 0 K
V
72 594.02 117 594.02 2 L
0.5 H
2 Z
0 X
N
126 594.02 558 594.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(6.2) 100.32 599.02 T
(The N-space Interface) 126 599.02 T
0 F
1.6 (This section pro) 126 575.02 P
1.6 (vides general guidelines for using the N-Space interf) 206.36 575.02 P
1.6 (ace, as) 470.42 575.02 P
1.55 (well as descriptions of the speci\336c interf) 126 561.02 P
1.55 (ace functions, their prototypes, and) 329.16 561.02 P
(their uses.) 126 547.02 T
2 F
(6.2.1) 90.31 515.02 T
(Guidelines) 126 515.02 T
0 F
0.58 (The N-space interf) 126 497.02 P
0.58 (ace di) 217.01 497.02 P
0.58 (vides the construction of an N-space DataChunk into) 245.62 497.02 P
0.84 (tw) 126 483.02 P
0.84 (o steps: \336rst, the de\336nition of dimensions and \336elds; and second, the addi-) 137.88 483.02 P
2.12 (tion of the data. The de\336nition must be completed before an) 126 469.02 P
2.12 (y data can be) 434.66 469.02 P
(added.) 126 455.02 T
0.75 (Dimensions can be de\336ned in tw) 126 429.02 P
0.75 (o w) 286.61 429.02 P
0.75 (ays: indi) 304.9 429.02 P
0.75 (vidually by specifying a) 346.35 429.02 P
5 F
1.8 (Fiel-) 468 429.02 P
-0.23 (dId) 126 415.02 P
0 F
-0.1 ( and a size, or in arrays of names and sizes passed to a \336eld de\336nition. The) 147.6 415.02 P
-0.04 (tw) 126 401.02 P
-0.04 (o methods dif) 137.88 401.02 P
-0.04 (fer primarily in that the use of a) 203.49 401.02 P
5 F
-0.1 (FieldId) 358.45 401.02 P
0 F
-0.04 ( to specify a dimen-) 408.86 401.02 P
1.48 (sion can mak) 126 387.02 P
1.48 (e the de\336nition of coordinate v) 192.17 387.02 P
1.48 (ariables more con) 346.92 387.02 P
1.48 (v) 434.71 387.02 P
1.48 (enient. Since) 440.53 387.02 P
5 F
1.73 (FieldId) 126 373.02 P
0 F
0.72 (s are unique, a dimension and a \336eld with identical) 176.4 373.02 P
5 F
1.73 (FieldId) 430.56 373.02 P
0 F
0.72 (s are) 480.96 373.02 P
0.96 (guaranteed to ha) 126 359.02 P
0.96 (v) 206.99 359.02 P
0.96 (e the same name, and hence by con) 212.81 359.02 P
0.96 (v) 388.35 359.02 P
0.96 (ention the \336eld can be) 394.17 359.02 P
2.79 (interpreted as a coordinate v) 126 345.02 P
2.79 (ariable. Also, when de\336ning man) 272.81 345.02 P
2.79 (y \336elds and) 443.09 345.02 P
(dimensions in a single DataChunk,) 126 331.02 T
5 F
(FieldId) 296.66 331.02 T
0 F
(s may be easier to manipulate.) 347.06 331.02 T
1.52 (In either approach to de\336ning dimensions, when de\336ning a \336eld the dimen-) 126 305.02 P
-0.2 (sions of the \336eld are listed in an array) 126 291.02 P
-0.2 (, either an array of) 304.26 291.02 P
5 F
-0.48 (FieldId) 394.56 291.02 P
0 F
-0.2 (s or an array) 444.96 291.02 P
0.22 (of names. The order of the dimensions in the array corresponds to the order of) 126 277.02 P
(the ar) 126 263.02 T
(guments in the \324function mapping\325 of the \336eld, as in) 152.77 263.02 T
0.17 (where) 126 190 P
4 F
0.17 (f) 158.49 190 P
0 F
0.17 ( is a \336eld de\336ned o) 161.82 190 P
0.17 (v) 253.5 190 P
0.17 (er four dimensions,) 259.32 190 P
4 F
0.17 (A, B, C,) 355.82 190 P
0 F
0.17 (and) 397.01 190 P
4 F
0.17 ( D) 414.33 190 P
0 F
0.17 (, whose range is) 426.17 190 P
0.06 (the set of real numbers,) 126 176 P
0.06 (. T) 251.78 176 P
0.06 (o store the multi-dimensional array of \336eld v) 264.22 176 P
0.06 (alues) 479.34 176 P
1.21 (in linear memory) 126 162 P
1.21 (, the N-space interf) 210.3 162 P
1.21 (ace requires that arrays be in ro) 305.77 162 P
1.21 (w-major) 463.34 162 P
72 87.98 558 686.02 C
78 212 552 259.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
0 X
0 0 0 1 0 0 0 K
(f) 270.46 234.03 T
(A) 279.24 234.03 T
(B) 295.92 234.03 T
6 F
(\264) 287.85 234.03 T
4 F
(C) 312.52 234.03 T
(D) 329.98 234.03 T
6 F
(\264) 321.91 234.03 T
(\302) 352.06 234.03 T
(\336) 339.7 234.03 T
(\264) 304.53 234.03 T
276.7 231.53 276.7 240.53 2 L
0.45 H
2 Z
N
72 87.98 558 686.02 C
0 0 612 792 C
241.62 171.75 251.78 183.75 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 9 Q
0 X
0 0 0 1 0 0 0 K
(\302) 242.62 176 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "59" 59
%%Page: "60" 60
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(60) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.26 (order\321the coordinate for dimension) 108 678.02 P
4 F
0.26 (d) 287.65 678.02 P
0 F
0.26 ( v) 293.65 678.02 P
0.26 (arying f) 302.61 678.02 P
0.26 (astest in memory) 340.4 678.02 P
0.26 (, follo) 422.13 678.02 P
0.26 (wed by) 450.75 678.02 P
(dimension) 108 664.02 T
4 F
(c) 161 664.02 T
0 F
(, and so on:) 166.33 664.02 T
1.04 (The use of ro) 108 593.02 P
1.04 (w-major order complies with the netCDF C interf) 174.48 593.02 P
1.04 (ace speci\336ca-) 419.99 593.02 P
0.62 (tion. All \336eld data will be stored and retrie) 108 579.02 P
0.62 (v) 316.96 579.02 P
0.62 (ed in ro) 322.78 579.02 P
0.62 (w-major order) 360.38 579.02 P
0.62 (, as a linear) 429.49 579.02 P
0.31 (array of \337oating point v) 108 565.02 P
0.31 (alues. The N-space interf) 222.92 565.02 P
0.31 (ace itself cannot v) 344.34 565.02 P
0.31 (erify that it) 432.06 565.02 P
1.69 (recei) 108 551.02 P
1.69 (v) 131.02 551.02 P
1.69 (es data in the correct order) 136.84 551.02 P
1.69 (. Improper ordering of a data array can be) 272.24 551.02 P
(detected by visual inspection of the netCDF \336le which stores the data.) 108 537.02 T
2.83 (Once all dimensions and \336elds ha) 108 511.02 P
2.83 (v) 283.55 511.02 P
2.83 (e been de\336ned, the de\336nition must be) 289.38 511.02 P
0.03 (mark) 108 497.02 P
0.03 (ed completed. This happens automatically when adding data to an) 132.54 497.02 P
0.03 (y of the) 449.27 497.02 P
0.51 (\336elds for the \336rst time. De\336nition can also be forced to completion by calling) 108 483.02 P
5 F
3.05 (dc_NSDefineComplete\050\051) 108 469.02 P
0 F
1.27 (. Once de\336nition is complete, it cannot be re-) 259.2 469.02 P
-0.18 (opened. Section) 108 455.02 P
-0.18 (6.2.3 describes the functions a) 187.48 455.02 P
-0.18 (v) 331.84 455.02 P
-0.18 (ailable for de\336ning dimensions) 337.54 455.02 P
(and \336elds. Section) 108 441.02 T
(6.2.6 describes the functions a) 199.33 441.02 T
(v) 344.4 441.02 T
(ailable for adding data.) 350.1 441.02 T
1.55 (There are tw) 108 415.02 P
1.55 (o cate) 171.61 415.02 P
1.55 (gories of functions for retrie) 201.3 415.02 P
1.55 (ving information from an N-) 342.49 415.02 P
2.43 (space DataChunk: inquiries about the a) 108 401.02 P
2.43 (v) 308.24 401.02 P
2.43 (ailable dimensions and \336elds, and) 313.94 401.02 P
2.18 (retrie) 108 387.02 P
2.18 (v) 133.02 387.02 P
2.18 (al of actual \336eld data. Section) 138.72 387.02 P
2.18 (6.2.5 e) 295.26 387.02 P
2.18 (xplains ho) 329.59 387.02 P
2.18 (w to get information) 381.13 387.02 P
1.62 (about the dimensions and \336elds in a DataChunk, and Section) 108 373.02 P
1.62 (6.2.6 e) 417.56 373.02 P
1.62 (xplains) 451.33 373.02 P
(ho) 108 359.02 T
(w to retrie) 119.7 359.02 T
(v) 168.72 359.02 T
(e \336eld data.) 174.54 359.02 T
1.81 (Numerical and Boolean parameters, e) 108 333.02 P
1.81 (xcept for the size of a dimension, are) 296.02 333.02 P
0.66 (al) 108 319.02 P
0.66 (w) 116.54 319.02 P
0.66 (ays type) 125.09 319.02 P
5 F
1.59 (int) 169.07 319.02 P
0 F
0.66 (. Dimension sizes and lengths of data arrays are al) 190.67 319.02 P
0.66 (w) 437.13 319.02 P
0.66 (ays type) 445.68 319.02 P
5 F
0.22 (unsigned long) 108 305.02 P
0 F
0.09 (. The \324length\325 of a data array or \324size\325 of a \336eld is the num-) 201.82 305.02 P
0.72 (ber of \337oating point elements in the array or in the range of the \336eld, respec-) 108 291.02 P
0.2 (ti) 108 277.02 P
0.2 (v) 114.37 277.02 P
0.2 (ely) 120.19 277.02 P
0.2 (,) 134.08 277.02 P
4 F
0.2 (not) 140.28 277.02 P
0 F
0.2 ( the number of bytes occupied by the data. F) 155.61 277.02 P
0.2 (or information retrie) 370.55 277.02 P
0.2 (v) 468.64 277.02 P
0.2 (al,) 474.34 277.02 P
-0.3 (character strings are returned as pointers to memory inside the DataChunk. The) 108 263.02 P
0.22 (memory containing the strings will be v) 108 249.02 P
0.22 (alid for the lifetime of the DataChunk,) 300.36 249.02 P
0.55 (b) 108 235.02 P
0.55 (ut it should not be freed or modi\336ed. An) 113.76 235.02 P
0.55 (y parameters passed by reference to) 311.64 235.02 P
2.38 (hold return v) 108 221.02 P
2.38 (alues can be passed as) 174.44 221.02 P
5 F
5.7 (NULL) 295.96 221.02 P
0 F
2.38 (, in which case nothing will be) 324.76 221.02 P
-0.21 (returned for that parameter) 108 207.02 P
-0.21 (. Lastly) 235.65 207.02 P
-0.21 (, all of the N-space interf) 270.66 207.02 P
-0.21 (ace functions ha) 389.43 207.02 P
-0.21 (v) 466.74 207.02 P
-0.21 (e a) 472.56 207.02 P
(pre\336x of \322dc_NS\323.) 108 193.02 T
-0.04 (Interf) 108 167.02 P
-0.04 (ace functions from the N-space parent class, MetData, can also be useful,) 134.53 167.02 P
0.19 (b) 108 153.02 P
0.19 (ut only for retrie) 113.76 153.02 P
0.19 (ving information and data, and only once de\336nition has been) 193.01 153.02 P
(completed. F) 108 139.02 T
(ollo) 170.48 139.02 T
(wing are some potentially useful MetData class functions:) 188.86 139.02 T
5 F
(dc_GetNField\050\051) 126 113.02 T
0 F
0.23 (F) 252 113.02 P
0.23 (or getting the total number of \336elds, both static) 258.49 113.02 P
(and dynamic.) 252 99.02 T
54 87.98 540 686.02 C
60 615.02 534 660.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
0 X
0 0 0 1 0 0 0 K
(f) 90.81 639.03 T
0 0 0 1 0 0 0 K
0 F
(1) 99.68 639.03 T
(1) 109.68 639.03 T
(1) 119.68 639.03 T
(1) 129.68 639.03 T
0 0 0 1 0 0 0 K
6 F
(,) 104.68 639.03 T
(,) 114.68 639.03 T
(,) 124.68 639.03 T
(\050) 95.64 639.03 T
(\051) 135.39 639.03 T
4 F
(f) 145.19 639.03 T
0 0 0 1 0 0 0 K
0 F
(1) 154.06 639.03 T
(1) 164.06 639.03 T
(1) 174.05 639.03 T
(2) 184.05 639.03 T
0 0 0 1 0 0 0 K
6 F
(,) 159.06 639.03 T
(,) 169.06 639.03 T
(,) 179.05 639.03 T
(\050) 150.02 639.03 T
(\051) 189.76 639.03 T
4 F
(f) 199.56 639.03 T
0 0 0 1 0 0 0 K
0 F
(1) 208.43 639.03 T
(1) 218.43 639.03 T
(1) 228.43 639.03 T
(3) 238.43 639.03 T
0 0 0 1 0 0 0 K
6 F
(,) 213.43 639.03 T
(,) 223.43 639.03 T
(,) 233.43 639.03 T
(\050) 204.39 639.03 T
(\051) 244.14 639.03 T
(\274) 252.46 639.03 T
0 0 0 1 0 0 0 K
0 F
(1) 271.5 639.03 T
(1) 281.5 639.03 T
(2) 291.5 639.03 T
(1) 301.5 639.03 T
0 0 0 1 0 0 0 K
6 F
(,) 276.5 639.03 T
(,) 286.5 639.03 T
(,) 296.5 639.03 T
(\050) 267.46 639.03 T
(\051) 307.21 639.03 T
4 F
(f) 317.01 639.03 T
0 0 0 1 0 0 0 K
0 F
(1) 325.88 639.03 T
(1) 335.88 639.03 T
(2) 345.87 639.03 T
(2) 355.87 639.03 T
0 0 0 1 0 0 0 K
6 F
(,) 330.88 639.03 T
(,) 340.88 639.03 T
(,) 350.87 639.03 T
(\050) 321.84 639.03 T
(\051) 361.58 639.03 T
(\274) 369.91 639.03 T
4 F
(f) 386.38 639.03 T
0 0 0 1 0 0 0 K
0 F
(2) 395.25 639.03 T
(3) 405.25 639.03 T
(4) 415.24 639.03 T
(5) 425.24 639.03 T
0 0 0 1 0 0 0 K
6 F
(,) 400.25 639.03 T
(,) 410.25 639.03 T
(,) 420.24 639.03 T
(\050) 391.21 639.03 T
(\051) 430.95 639.03 T
4 F
(f) 440.75 639.03 T
0 0 0 1 0 0 0 K
0 F
(2) 449.62 639.03 T
(3) 459.62 639.03 T
(4) 469.62 639.03 T
(6) 479.62 639.03 T
0 0 0 1 0 0 0 K
6 F
(,) 454.62 639.03 T
(,) 464.62 639.03 T
(,) 474.62 639.03 T
(\050) 445.58 639.03 T
(\051) 485.33 639.03 T
(\274) 493.66 639.03 T
(,) 138.72 639.03 T
(,) 193.09 639.03 T
(,) 247.47 639.03 T
(,) 262.46 639.03 T
(,) 310.54 639.03 T
(,) 364.91 639.03 T
(,) 379.91 639.03 T
(,) 434.28 639.03 T
(,) 488.66 639.03 T
54 87.98 540 686.02 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "60" 60
%%Page: "61" 61
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Interface) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (61) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 12 Q
(dc_GetFields\050\051) 144 678.02 T
0 F
0.69 (F) 270 678.02 P
0.69 (or getting lists of the \336elds and their \336eld IDs,) 276.49 678.02 P
(both static and dynamic.) 270 664.02 T
5 F
(dc_GetMData\050\051) 144 638.02 T
0 F
-0.05 (F) 270 638.02 P
-0.05 (or retrie) 276.49 638.02 P
-0.05 (ving data from a dynamic \336eld at a par-) 314.46 638.02 P
3.91 (ticular sample as an opaque block of bytes.) 270 624.02 P
0.85 (There is no w) 270 610.02 P
0.85 (ay to retrie) 338.08 610.02 P
0.85 (v) 391.46 610.02 P
0.85 (e static \336eld data out-) 397.28 610.02 P
(side of the N-space interf) 270 596.02 T
(ace.) 391.18 596.02 T
5 F
(dc_SetBadval\050\051, dc_GetBadval\050\051) 144 570.02 T
0 F
1.59 (Set and retrie) 270 556.02 P
1.59 (v) 336.87 556.02 P
1.59 (e the bad v) 342.69 556.02 P
1.59 (alues associated with) 399.49 556.02 P
2.17 (N-space \336elds. The bad v) 270 542.02 P
2.17 (alue can only be set) 400.68 542.02 P
0.71 (once de\336nition is complete, as the \336elds are not) 270 528.02 P
0.23 (de\336ned in the superclass MetData structure until) 270 514.02 P
(the de\336nition of all N-space \336elds is complete.) 270 500.02 T
0.05 (The N-space class inherits all of the attrib) 126 474.02 P
0.05 (ute capabilities of the MetData class,) 326.43 474.02 P
0.74 (including per) 126 460.02 P
0.74 (-\336eld and per) 190.16 460.02 P
0.74 (-sample attrib) 255.39 460.02 P
0.74 (utes. Of course, per) 322.22 460.02 P
0.74 (-sample attrib) 417.84 460.02 P
0.74 (utes) 484.67 460.02 P
(are meaningless for static \336elds.) 126 446.02 T
2 F
(6.2.2) 90.31 414.02 T
(Header File Dec) 126 414.02 T
(larations) 215.8 414.02 T
0 F
1.94 (The header \336le) 126 396.02 P
5 F
4.66 (DataStore.h) 206.8 396.02 P
0 F
1.94 ( contains some parameters and declarations) 286 396.02 P
0.61 (required by the N-space interf) 126 382.02 P
0.61 (ace. First of all, it contains prototypes for all of) 272.25 382.02 P
0.32 (the functions in the N-space interf) 126 368.02 P
0.32 (ace. It also contains comments outlining the) 291.11 368.02 P
-0.1 (general use of the N-space interf) 126 354.02 P
-0.1 (ace. Three C pre-processor symbols de\336ned in) 281.65 354.02 P
5 F
22.74 (DataStore.h) 126 340.02 P
0 F
9.47 ( are used by the N-space class:) 205.2 340.02 P
5 F
22.74 (DC_MaxField) 421.8 340.02 P
0 F
9.47 (,) 501 340.02 P
5 F
2.08 (DC_MaxDimension) 126 326.02 P
0 F
0.87 (, and) 234 326.02 P
5 F
2.08 (DC_MaxDimName) 262.06 326.02 P
0 F
0.87 (.) 355.66 326.02 P
5 F
2.08 (DC_MaxField) 362.53 326.02 P
0 F
0.87 ( is the maxi-) 441.73 326.02 P
3.29 (mum number of \336elds which can be de\336ned in a DataChunk. Lik) 126 312.02 P
3.29 (e) 473.98 312.02 P
3.29 (wise,) 479 312.02 P
5 F
3.47 (DC_MaxDimension) 126 298.02 P
0 F
1.45 ( is the maximum number of dimensions which can be) 234 298.02 P
1.31 (de\336ned in a DataChunk. The) 126 284.02 P
5 F
3.14 (DC_MaxDimName) 273.85 284.02 P
0 F
1.31 ( parameter is the maximum) 367.45 284.02 P
1.06 (size of a dimension name, including the) 126 270.02 P
5 F
2.53 (NULL) 327.37 270.02 P
0 F
1.06 ( terminator) 356.17 270.02 P
1.06 (. Dimension names) 409.56 270.02 P
3.76 (longer than the) 126 256.02 P
5 F
9.01 (DC_MaxDimName) 212.25 256.02 P
0 F
3.76 ( length are truncated, as described in) 305.85 256.02 P
7.98 (Section) 126 242.02 P
7.98 (6.2.3. An) 165 242.02 P
7.98 (y attempts to breach the) 217.47 242.02 P
5 F
19.16 (DC_MaxDimension) 375.02 242.02 P
0 F
7.98 ( or) 483.02 242.02 P
5 F
1.96 (DC_MaxField) 126 228.02 P
0 F
0.82 ( limits in an N-space DataChunk results in error messages to) 205.2 228.02 P
(the e) 126 214.02 T
(v) 148.69 214.02 T
(ent logger) 154.51 214.02 T
(.) 202.18 214.02 T
2 F
(6.2.3) 90.31 182.02 T
(De\336nition) 126 182.02 T
0 F
(All of the de\336nition functions ha) 126 164.02 T
(v) 282.76 164.02 T
(e the pre\336x) 288.58 164.02 T
5 F
(dc_NSDefine) 345.56 164.02 T
0 F
(.) 424.76 164.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "61" 61
%%Page: "62" 62
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(62) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
2.72 (The) 108 678.02 P
5 F
6.52 (dc_NSDefineField\050\051) 132.38 678.02 P
0 F
2.72 ( function de\336nes a \336eld and its dimensions) 261.98 678.02 P
(simultaneously:) 108 664.02 T
7 10 Q
(void) 126 645.35 T
(dc_NSDefineField\050dc, field, ndims, dimnames, dimsizes, is_static\051) 126 633.35 T
(DataChunk *dc;) 126 621.35 T
(FieldId field;) 126 609.35 T
(int ndims;) 126 597.35 T
(char **dimnames;) 126 585.35 T
(unsigned long *dimsizes;) 126 573.35 T
(int is_static;) 126 561.35 T
0 12 Q
0.48 (The) 108 536.02 P
5 F
1.16 (FieldId) 130.14 536.02 P
0 F
0.48 ( of the \336eld is passed in) 180.54 536.02 P
7 F
1.16 (field) 300.26 536.02 P
0 F
0.48 (. The number of dimensions in) 336.26 536.02 P
1.88 (this \336eld is gi) 108 522.02 P
1.88 (v) 178.35 522.02 P
1.88 (en in) 184.16 522.02 P
7 F
4.5 (ndims) 214.58 522.02 P
0 F
1.88 (, while) 250.58 522.02 P
7 F
4.5 (dimnames) 290 522.02 P
0 F
1.88 ( and) 347.6 522.02 P
7 F
4.5 (dimsizes) 374.68 522.02 P
0 F
1.88 ( are arrays) 432.28 522.02 P
-0.1 (which pro) 108 508.02 P
-0.1 (vide a name and size for each dimension. The \336eld will be de\336ned as) 156.04 508.02 P
1.08 (static if and only if the \337ag) 108 494.02 P
7 F
2.58 (is_static) 247.85 494.02 P
0 F
1.08 ( is non-zero. The dimension names) 312.65 494.02 P
2.31 (and sizes will be copied into the DataChunk, so the memory occupied by) 108 480.02 P
7 F
2.03 (dimnames) 108 466.02 P
0 F
0.85 ( and) 165.6 466.02 P
7 F
2.03 (dimsizes) 190.62 466.02 P
0 F
0.85 ( does not need to be v) 248.22 466.02 P
0.85 (alid be) 357.64 466.02 P
0.85 (yond the call to the) 390.63 466.02 P
0.28 (function. If a dimension named in) 108 452.02 P
7 F
0.67 (dimnames) 275.31 452.02 P
0 F
0.28 ( does not e) 332.91 452.02 P
0.28 (xist, it is de\336ned and) 385.22 452.02 P
1.86 (gi) 108 438.02 P
1.86 (v) 117.04 438.02 P
1.86 (en the corresponding size from) 122.86 438.02 P
7 F
4.46 (dimsizes) 283.79 438.02 P
0 F
1.86 (. If a named dimension does) 341.39 438.02 P
0.69 (e) 108 424.02 P
0.69 (xist in the DataChunk, it will be v) 113.15 424.02 P
0.69 (eri\336ed with the pre) 280.49 424.02 P
0.69 (vious de\336nition. A dis-) 373.25 424.02 P
0.46 (agreement in size will produce a w) 108 410.02 P
0.46 (arning and a re-de\336nition of the dimension) 277.93 410.02 P
3.58 (to the ne) 108 396.02 P
3.58 (w size.[See) 156.19 396.02 P
5 F
8.6 (dc_NSAllowRedefine\050\051) 221 396.02 P
0 F
3.58 ( in Section) 365 396.02 P
3.58 (6.2.4.] It is) 426.5 396.02 P
1.09 (acceptable to de\336ne a \336eld with zero dimensions. A dynamic \336eld with zero) 108 382.02 P
0.06 (dimensions is essentially identical to a) 108 368.02 P
5 F
0.15 (DCC_Scalar) 295.7 368.02 P
0 F
0.06 ( \336eld, while a static \336eld) 367.7 368.02 P
(with zero dimensions will hold a single \337oating point v) 108 354.02 T
(alue in the DataChunk.) 372.71 354.02 T
1.49 (The) 108 328.02 P
5 F
3.58 (dc_NSDefineField\050\051) 131.15 328.02 P
0 F
1.49 ( function is the simpler method of de\336ning a) 260.75 328.02 P
0.45 (\336eld, intended for \336elds whose dimensions will not be inde) 108 314.02 P
0.45 (x) 395.84 314.02 P
0.45 (ed by other \336elds) 401.66 314.02 P
-0.12 (in the DataChunk. As stated in Section) 108 300.02 P
-0.12 (6.1.1, dimension names must be unique) 296.6 300.02 P
1.16 (since the) 108 286.02 P
1.16 (y are used to distinguish the dimensions in a DataChunk, no matter) 151.3 286.02 P
0.3 (whether the dimension is de\336ned by name through) 108 272.02 P
5 F
0.73 (dc_NSDefineField\050\051) 356.4 272.02 P
0 F
0.98 (or by) 108 258.02 P
5 F
2.35 (FieldId) 137.95 258.02 P
0 F
0.98 ( through) 188.35 258.02 P
5 F
2.35 (dc_NSDefineDimension\050\051) 233.64 258.02 P
0 F
0.98 ( \050described belo) 392.04 258.02 P
0.98 (w\051.) 470.34 258.02 P
0.76 (It is not possible to de\336ne tw) 108 244.02 P
0.76 (o dimensions with identical names and dif) 251.11 244.02 P
0.76 (ferent) 458.02 244.02 P
0.35 (sizes. Each de\336nition of a dimension\325) 108 230.02 P
0.35 (s size o) 289.76 230.02 P
0.35 (v) 325.61 230.02 P
0.35 (errides an) 331.43 230.02 P
0.35 (y pre) 378.59 230.02 P
0.35 (vious de\336nitions.) 402.97 230.02 P
0.44 (A \336eld whose name matches a dimension name is assumed to be a coordinate) 108 216.02 P
0.42 (v) 108 202.02 P
0.42 (ariable \050see Section) 113.7 202.02 P
0.42 (6.1.2\051. When intentionally de\336ning a coordinate v) 211.51 202.02 P
0.42 (ariable) 453.35 202.02 P
0.01 (with) 108 188.02 P
5 F
0.03 (dc_NSDefineField\050\051) 132.35 188.02 P
0 F
0.01 (, note that errors such as misspelled dimension) 261.95 188.02 P
14.15 (names cannot be caught by the interf) 108 174.02 P
14.15 (ace. The functions) 369.4 174.02 P
5 F
4.47 (dc_NSDefineDimension\050\051) 108 160.02 P
0 F
1.86 ( and) 266.4 160.02 P
5 F
4.47 (dc_NSDefineVariable\050\051) 293.46 160.02 P
0 F
1.86 ( pro) 444.66 160.02 P
1.86 (vide) 465.34 160.02 P
(a more rigorous approach to de\336ning indirectly-inde) 108 146.02 T
(x) 359.11 146.02 T
(ed \336eld data.) 364.93 146.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "62" 62
%%Page: "63" 63
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Interface) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (63) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.73 (Use) 126 678.02 P
5 F
4.16 (dc_NSDefineDimension\050\051) 149.39 678.02 P
0 F
1.73 ( to e) 307.79 678.02 P
1.73 (xplicitly de\336ne a single dimension) 331.74 678.02 P
(using the) 126 664.02 T
5 F
(FieldId) 172.67 664.02 T
0 F
( mechanism:) 223.07 664.02 T
7 10 Q
(void) 144 645.35 T
(dc_NSDefineDimension\050dc, dimn, size\051) 144 633.35 T
(DataChunk *dc;) 144 621.35 T
(FieldId dimn;) 144 609.35 T
(unsigned long size;) 144 597.35 T
0 12 Q
0.11 (The dimension\325) 126 572.02 P
0.11 (s) 201.11 572.02 P
5 F
0.27 (FieldId) 208.9 572.02 P
0 F
0.11 ( is tak) 259.3 572.02 P
0.11 (en from) 288.07 572.02 P
7 F
0.27 (dimn) 328.95 572.02 P
0 F
0.11 (, while) 357.75 572.02 P
7 F
0.27 (size) 393.64 572.02 P
0 F
0.11 ( is the size of the) 422.44 572.02 P
-0.07 (dimension. The name associated with the) 126 558.02 P
5 F
-0.17 (FieldId) 326.56 558.02 P
7 F
-0.17 (dimn) 379.89 558.02 P
0 F
-0.07 ( is used as the name) 408.69 558.02 P
0.53 (of the dimension. An) 126 544.02 P
0.53 (y dimension de\336ned with a) 228.74 544.02 P
5 F
1.27 (FieldId) 364.39 544.02 P
0 F
0.53 ( can be referenced) 414.79 544.02 P
1.64 (either by its name or by its) 126 530.02 P
5 F
3.94 (FieldId) 268.48 530.02 P
0 F
1.64 (. Ordinarily) 318.89 530.02 P
1.64 (, dimensions de\336ned with) 375.74 530.02 P
5 F
22.38 (dc_NSDefineDimension\050\051) 126 516.02 P
0 F
9.33 ( are used in de\336ning a \336eld with) 284.4 516.02 P
5 F
6.2 (dc_NSDefineVariable\050\051) 126 502.02 P
0 F
2.58 ( \050described belo) 277.2 502.02 P
2.58 (w\051. The N-space class inter-) 358.71 502.02 P
-0.04 (prets an) 126 488.02 P
-0.04 (y \336eld de\336ned with the same) 163.44 488.02 P
5 F
-0.09 (FieldId) 304.53 488.02 P
0 F
-0.04 ( as a dimension as a coordinate) 354.93 488.02 P
-0.28 (v) 126 474.02 P
-0.28 (ariable. [See Section) 131.7 474.02 P
-0.28 (6.3 for e) 233.11 474.02 P
-0.28 (xceptions in netCDF \336les.] The dimension name) 272.69 474.02 P
0.26 (is still check) 126 460.02 P
0.26 (ed for uniqueness among other dimensions, e) 186.41 460.02 P
0.26 (v) 404.66 460.02 P
0.26 (en if the) 410.48 460.02 P
5 F
0.63 (FieldId) 453.6 460.02 P
0 F
0.43 (is unique. If a dimension of the same name has already been de\336ned, then the) 126 446.02 P
2.4 (most recent de\336nition, including the) 126 432.02 P
5 F
5.76 (FieldId) 314.66 432.02 P
0 F
2.4 ( and size, will o) 365.06 432.02 P
2.4 (v) 450.13 432.02 P
2.4 (erride the) 455.95 432.02 P
(e) 126 418.02 T
(xisting de\336nition.) 131.15 418.02 T
0.65 (The) 126 392.02 P
5 F
1.56 (dc_NSDefineVariable\050\051) 148.31 392.02 P
0 F
0.65 ( function adds a \336eld to an N-space Data-) 299.51 392.02 P
(Chunk:) 126 378.02 T
7 10 Q
(void) 144 359.35 T
(dc_NSDefineVariable\050dc, field, ndims, dims, is_static\051) 144 347.35 T
(DataChunk *dc;) 144 335.35 T
(FieldId field;) 144 323.35 T
(int ndims;) 144 311.35 T
(FieldId *dims;) 144 299.35 T
(int is_static;) 144 287.35 T
0 12 Q
-0.06 (The \336eld is identi\336ed by the) 126 262.02 P
5 F
-0.15 (FieldId) 263.63 262.02 P
7 F
-0.15 (field) 321.08 262.02 P
0 F
-0.06 (. The \336eld will be de\336ned o) 357.08 262.02 P
-0.06 (v) 488.86 262.02 P
-0.06 (er) 494.68 262.02 P
7 F
1.89 (ndims) 126 248.02 P
0 F
0.79 ( dimensions, where each) 162 248.02 P
5 F
1.89 (FieldId) 286.12 248.02 P
0 F
0.79 ( in the array) 336.52 248.02 P
7 F
1.89 (dims) 400.31 248.02 P
0 F
0.79 ( corresponds to) 429.11 248.02 P
17.08 (the) 126 234.02 P
5 F
41 (FieldId) 160.75 234.02 P
0 F
17.08 ( of a dimension de\336ned pre) 211.15 234.02 P
17.08 (viously with) 427.24 234.02 P
5 F
0.05 (dc_NSDefineDimension\050\051) 126 220.02 P
0 F
0.02 (. If) 284.4 220.02 P
7 F
0.05 (is_static) 301.43 220.02 P
0 F
0.02 ( is non-zero, the \336eld will be) 366.23 220.02 P
0.39 (de\336ned as static\321it will not be implicitly de\336ned o) 126 206.02 P
0.39 (v) 375.64 206.02 P
0.39 (er time, meaning data for) 381.46 206.02 P
0.28 (this \336eld will be stored independent of sample numbers and sample times \050see) 126 192.02 P
-0.16 (Section) 126 178.02 P
-0.16 (6.1.3\051. The) 165 178.02 P
7 F
-0.39 (is_static) 220.33 178.02 P
0 F
-0.16 ( \337ag is primarily intended for coordinate v) 285.13 178.02 P
-0.16 (ari-) 487.34 178.02 P
0.57 (ables whose mappings do not change o) 126 164.02 P
0.57 (v) 316.55 164.02 P
0.57 (er the period of samples stored in the) 322.37 164.02 P
0.47 (DataChunk. As mentioned with) 126 150.02 P
5 F
1.13 (dc_NSDefineField\050\051) 282.87 150.02 P
0 F
0.47 (, it is acceptable to) 412.47 150.02 P
0.45 (de\336ne a v) 126 136.02 P
0.45 (ariable with zero dimensions. Pre) 173.26 136.02 P
0.45 (vious de\336nitions of a v) 335.06 136.02 P
0.45 (ariable with) 446.56 136.02 P
(the same) 126 122.02 T
5 F
(FieldId) 171.32 122.02 T
0 F
( will be o) 221.72 122.02 T
(v) 266.54 122.02 T
(erridden by the most recent de\336nition.) 272.36 122.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "63" 63
%%Page: "64" 64
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(64) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.63 (The N-space de\336nition interf) 108 678.02 P
0.63 (ace contains tw) 248.74 678.02 P
0.63 (o functions dealing with the state) 323.86 678.02 P
(of a DataChunk\325) 108 664.02 T
(s de\336nition:) 187.32 664.02 T
7 10 Q
(void) 126 645.35 T
(dc_NSDefineComplete \050dc\051) 126 633.35 T
(DataChunk *dc;) 126 621.35 T
0 12 Q
(and) 108 596.02 T
7 10 Q
(int) 126 577.35 T
(dc_NSDefineIsComplete \050dc\051) 126 565.35 T
(DataChunk *dc;) 126 553.35 T
0 12 Q
0.6 (The \336rst function,) 108 528.02 P
5 F
1.44 (dc_NSDefineComplete\050\051) 199.13 528.02 P
0 F
0.6 (, marks the de\336nition of the) 350.33 528.02 P
0.91 (DataChunk as completed. Closing the de\336nition blocks an) 108 514.02 P
0.91 (y further de\336nition) 393.52 514.02 P
0.92 (changes or additions, de\336nes the N-space \336elds to the parent class, MetData,) 108 500.02 P
-0.02 (and calculates the sizes of each of the \336elds from the sizes of their dimensions.) 108 486.02 P
1.88 (If de\336nition is already closed,) 108 472.02 P
5 F
4.51 (dc_NSDefineComplete\050\051) 263.37 472.02 P
0 F
1.88 ( does nothing.) 414.57 472.02 P
2.39 (De\336nition is automatically completed whene) 108 458.02 P
2.39 (v) 332.56 458.02 P
2.39 (er data are \336rst added to the) 338.38 458.02 P
0.99 (DataChunk; the) 108 444.02 P
5 F
2.39 (dc_NSDefineComplete\050\051) 188.65 444.02 P
0 F
0.99 ( function is pro) 339.85 444.02 P
0.99 (vided to allo) 415.65 444.02 P
0.99 (w) 477.34 444.02 P
4.56 (important calculations to be forced before dumping a DataChunk with) 108 430.02 P
5 F
2.32 (dc_DumpDC\050\051) 108 416.02 P
0 F
0.97 (, without requiring the addition of an) 187.2 416.02 P
0.97 (y data. Once the de\336ni-) 369.82 416.02 P
(tion is mark) 108 402.02 T
(ed completed, it cannot be re-opened.) 165.22 402.02 T
0.48 (T) 108 376.02 P
0.48 (o test whether the de\336nition of a DataChunk is open or closed, use the func-) 114.37 376.02 P
0.72 (tion) 108 362.02 P
5 F
1.72 (dc_NSDefineIsComplete\050\051) 130.39 362.02 P
0 F
0.72 (, which returns a non-zero v) 295.99 362.02 P
0.72 (alue if and) 433.91 362.02 P
(only if the de\336nition is complete \050closed\051.) 108 348.02 T
2 F
(6.2.4) 72.31 316.02 T
(Rede\336nition) 108 316.02 T
0 F
7.63 (While a datachunk\325) 108 298.02 P
7.63 (s de\336nition is still open, applications can call) 216.58 298.02 P
5 F
9.61 (dc_NSAllowRedefine\050\051) 108 284.02 P
0 F
4 ( to set whether rede\336nitions should produce) 252 284.02 P
(w) 108 270.02 T
(arning messages or be silently accepted.) 116.54 270.02 T
7 10 Q
(void) 126 251.35 T
(dc_NSAllowRedefine\050dc, allow\051) 126 239.35 T
(DataChunk *dc;) 126 227.35 T
(int allow;) 126 215.35 T
0 12 Q
1.52 (The) 108 190.02 P
7 F
3.64 (allow) 131.18 190.02 P
0 F
1.52 ( parameter is a Boolean v) 167.18 190.02 P
1.52 (alue. If non-zero, rede\336nitions will be) 296.77 190.02 P
0.88 (silently accepted for the gi) 108 176.02 P
0.88 (v) 238.53 176.02 P
0.88 (en datachunk. If zero, the datachunk resets to the) 244.35 176.02 P
0.16 (def) 108 162.02 P
0.16 (ault beha) 123.2 162.02 P
0.16 (vior of w) 166.77 162.02 P
0.16 (arning about all rede\336nitions. Once the datachunk de\336ni-) 210.96 162.02 P
(tion has been closed, calls to) 108 148.02 T
5 F
(dc_NSAllowRedefine\050\051) 248.32 148.02 T
0 F
( ha) 392.32 148.02 T
(v) 406.4 148.02 T
(e no ef) 412.22 148.02 T
(fect.) 444.58 148.02 T
0.66 (Changing the rede\336nition beha) 108 122.02 P
0.66 (vior can be useful when de\336ning \324placeholder\325) 258.07 122.02 P
0.83 (dimensions or v) 108 108.02 P
0.83 (ariables whose sizes will not be kno) 186.03 108.02 P
0.83 (wn until a program com-) 363.36 108.02 P
0.97 (pletes other calculations. W) 108 94.02 P
0.97 (arnings can be turned on and of) 243.26 94.02 P
0.97 (f depending upon) 400.07 94.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "64" 64
%%Page: "65" 65
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Interface) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (65) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.4 (where and when rede\336nitions must be allo) 126 678.02 P
0.4 (wed, so that unintended or acciden-) 331.39 678.02 P
(tal rede\336nitions can still be easily detected and deb) 126 664.02 T
(ugged.) 370.39 664.02 T
2 F
(6.2.5) 90.31 632.02 T
(Inquir) 126 632.02 T
(y) 159.46 632.02 T
0 F
1.79 (The inquiry functions retrie) 126 614.02 P
1.79 (v) 263.37 614.02 P
1.79 (e the information which is de\336ned through the) 269.19 614.02 P
1.48 (de\336nition functions. All of the inquiry functions return type) 126 600.02 P
5 F
3.55 (int) 428.62 600.02 P
0 F
1.48 (. F) 450.22 600.02 P
1.48 (or some) 464.19 600.02 P
0.36 (functions, this return v) 126 586.02 P
0.36 (alue is either the number of \336elds or dimensions found.) 235.44 586.02 P
1.15 (F) 126 572.02 P
1.15 (or other functions, the return v) 132.49 572.02 P
1.15 (alue is a result code. A non-zero result code) 284.56 572.02 P
(indicates success; result codes of zero indicate f) 126 558.02 T
(ailure.) 355.49 558.02 T
0.94 (The function) 126 532.02 P
5 F
2.26 (dc_NSGetAllDimensions\050\051) 192.54 532.02 P
0 F
0.94 ( returns all a) 358.14 532.02 P
0.94 (v) 420.38 532.02 P
0.94 (ailable informa-) 426.08 532.02 P
(tion for each of the dimensions de\336ned in an N-space DataChunk.) 126 518.02 T
7 10 Q
(int) 144 499.35 T
(dc_NSGetAllDimensions\050dc, names, dimn_ids, sizes\051) 144 487.35 T
(DataChunk *dc;) 144 475.35 T
(char **names;) 144 463.35 T
(FieldId *dimn_ids;) 144 451.35 T
(unsigned long *sizes;) 144 439.35 T
0 12 Q
0.84 (It returns the number of dimensions contained in the DataChunk as its return) 126 414.02 P
0.84 (v) 126 400.02 P
0.84 (alue. If) 131.7 400.02 P
7 F
2.01 (dimn_ids) 170.36 400.02 P
0 F
0.84 ( is non-) 227.96 400.02 P
5 F
2.01 (NULL) 265.63 400.02 P
0 F
0.84 (, the function also copies the) 294.43 400.02 P
5 F
2.01 (FieldId) 439.77 400.02 P
0 F
0.84 ( of) 490.17 400.02 P
0.73 (each dimension into the array of) 126 386.02 P
5 F
1.75 (FieldId) 288.35 386.02 P
0 F
0.73 (s pointed to by) 338.75 386.02 P
7 F
1.75 (dimn_ids) 415.67 386.02 P
0 F
0.73 (. Only) 473.27 386.02 P
-0.04 (those dimensions de\336ned through) 126 372.02 P
5 F
-0.1 (dc_NSDefineDimension\050\051) 290.49 372.02 P
0 F
-0.04 ( will ha) 448.89 372.02 P
-0.04 (v) 484.57 372.02 P
-0.04 (e a) 490.39 372.02 P
-0.27 (v) 126 358.02 P
-0.27 (alid) 131.7 358.02 P
5 F
-0.65 (FieldId) 152.43 358.02 P
0 F
-0.27 (, all other elements of) 202.83 358.02 P
7 F
-0.65 (dimn_ids) 308.78 358.02 P
0 F
-0.27 ( will be set to) 366.38 358.02 P
5 F
-0.65 (BadField) 432.68 358.02 P
0 F
-0.27 (. If) 490.28 358.02 P
7 F
1.8 (sizes) 126 344.02 P
0 F
0.75 ( is non-) 162 344.02 P
5 F
1.8 (NULL) 199.5 344.02 P
0 F
0.75 (, the array of) 228.3 344.02 P
5 F
1.8 (unsigned long) 295.6 344.02 P
0 F
0.75 (s pointed to by) 391 344.02 P
7 F
1.8 (sizes) 468 344.02 P
0 F
1.4 (holds the size of each dimension. If) 126 330.02 P
7 F
3.37 (names) 309.13 330.02 P
0 F
1.4 ( is non-) 345.13 330.02 P
5 F
3.37 (NULL) 383.94 330.02 P
0 F
1.4 (, a pointer to each) 412.74 330.02 P
1.46 (dimension name is assigned to each element of) 126 316.02 P
5 F
3.51 (names) 366.32 316.02 P
0 F
1.46 (. The memory refer-) 402.32 316.02 P
2.26 (enced by the elements of) 126 302.02 P
7 F
5.43 (names) 259.62 302.02 P
0 F
2.26 ( is guaranteed to be v) 295.62 302.02 P
2.26 (alid as long as the) 408.95 302.02 P
1.42 (DataChunk e) 126 288.02 P
1.42 (xists. This memory must not be freed or modi\336ed. Dimensions) 190.23 288.02 P
0.32 (are listed in the) 126 274.02 P
7 F
0.76 (names) 203.92 274.02 P
0 F
0.32 (,) 239.92 274.02 P
7 F
0.76 (dimn_ids) 246.24 274.02 P
0 F
0.32 (, and) 303.84 274.02 P
7 F
0.76 (sizes) 330.8 274.02 P
0 F
0.32 ( arrays in the order in which) 366.8 274.02 P
1.16 (the) 126 260.02 P
1.16 (y were de\336ned. Adequate space for the) 140.48 260.02 P
7 F
2.8 (dimn_ids) 338.58 260.02 P
0 F
1.16 (,) 396.18 260.02 P
7 F
2.8 (names) 403.34 260.02 P
0 F
1.16 (, and) 439.34 260.02 P
7 F
2.8 (sizes) 468 260.02 P
0 F
(arrays can be de\336ned with) 126 246.02 T
5 9 Q
(char *names[ DC_MaxDimension ];) 144 223.02 T
(FieldId dimn_ids[ DC_MaxDimension ];) 144 212.02 T
(unsigned long sizes[ DC_MaxDimension ];) 144 201.02 T
0 12 Q
0.12 (The function) 126 176.02 P
5 F
0.29 (dc_NSGetAllVariables\050\051) 190.9 176.02 P
0 F
0.12 ( retrie) 349.3 176.02 P
0.12 (v) 377.44 176.02 P
0.12 (es lists of all of the \336elds) 383.26 176.02 P
(in a DataChunk and the number of dimensions in each \336eld.) 126 162.02 T
7 10 Q
(int) 144 143.35 T
(dc_NSGetAllVariables\050dc, fields, ndims\051) 144 131.35 T
(DataChunk *dc;) 144 119.35 T
(FieldId *fields;) 144 107.35 T
(int *ndims;) 144 95.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "65" 65
%%Page: "66" 66
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(66) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
-0.26 (The return v) 108 678.02 P
-0.26 (alue of the function is the number of v) 166.49 678.02 P
-0.26 (ariables in the) 348.07 678.02 P
-0.26 (DataChunk. If) 417.61 678.02 P
7 F
2.75 (fields) 108 664.02 P
0 F
1.15 ( is non-) 151.2 664.02 P
5 F
2.75 (NULL) 189.49 664.02 P
0 F
1.15 (, its elements return the) 218.29 664.02 P
5 F
2.75 (FieldId) 339.35 664.02 P
0 F
1.15 ( of each v) 389.75 664.02 P
1.15 (ariable in) 439.86 664.02 P
1.84 (the DataChunk. If) 108 650.02 P
7 F
4.42 (ndims) 202.84 650.02 P
0 F
1.84 ( is non-) 238.84 650.02 P
5 F
4.42 (NULL) 278.52 650.02 P
0 F
1.84 (, the elements of) 307.32 650.02 P
7 F
4.42 (ndims) 397 650.02 P
0 F
1.84 ( return the) 433 650.02 P
0.69 (number of dimensions in each v) 108 636.02 P
0.69 (ariable. The function lists the v) 264.81 636.02 P
0.69 (ariables in the) 417.29 636.02 P
0.88 (order in which the) 108 622.02 P
0.88 (y were de\336ned. T) 198.11 622.02 P
0.88 (o ensure adequate space for returned v) 283.76 622.02 P
0.88 (al-) 473.34 622.02 P
-0.04 (ues, the follo) 108 608.02 P
-0.04 (wing de\336nitions may be used for the) 169.94 608.02 P
7 F
-0.11 (fields) 347.95 608.02 P
0 F
-0.04 ( and) 391.15 608.02 P
7 F
-0.11 (ndims) 414.39 608.02 P
0 F
-0.04 ( arrays:) 450.39 608.02 P
5 9 Q
(FieldId fields[ DC_MaxField ];) 126 590.02 T
(int ndims[ DC_MaxField ];) 126 579.02 T
0 12 Q
7.28 (The information retrie) 108 554.02 P
7.28 (v) 228.91 554.02 P
7.28 (al counterpart to) 234.61 554.02 P
5 F
17.48 (dc_NSDefineField\050\051) 338.11 554.02 P
0 F
7.28 ( is) 467.71 554.02 P
5 F
(dc_NSGetField\050\051) 108 540.02 T
0 F
(:) 216 540.02 T
7 10 Q
(int) 126 521.35 T
(dc_NSGetField \050dc, field, ndims, names, sizes, is_static\051) 126 509.35 T
(DataChunk *dc;) 126 497.35 T
(FieldId field;) 126 485.35 T
(int *ndims;) 126 473.35 T
(char **names;) 126 461.35 T
(unsigned long *sizes;) 126 449.35 T
(int *is_static;) 126 437.35 T
0 12 Q
4.11 (F) 108 412.02 P
4.11 (or the speci\336ed DataChunk) 114.49 412.02 P
7 F
9.85 (dc) 264.9 412.02 P
0 F
4.11 ( and the \336eld with) 279.3 412.02 P
5 F
9.85 (FieldId) 389.49 412.02 P
7 F
9.85 (field) 447 412.02 P
0 F
4.11 (,) 483 412.02 P
5 F
0.01 (dc_NSGetField\050\051) 108 398.02 P
0 F
0 ( returns that \336eld\325) 216 398.02 P
0 (s number of dimensions, the name and) 301 398.02 P
0.54 (size of each dimension, and a \337ag indicating whether the \336eld is static. If an) 108 384.02 P
0.54 (y) 480 384.02 P
0.12 (of the reference parameters are) 108 370.02 P
5 F
0.3 (NULL) 260.21 370.02 P
0 F
0.12 (, no v) 289.01 370.02 P
0.12 (alue will be returned in that param-) 315.96 370.02 P
0.29 (eter) 108 356.02 P
0.29 (. The return v) 125.33 356.02 P
0.29 (alue of the function is non-zero if and only if no errors occur) 191.22 356.02 P
1.61 (during the inquiry) 108 342.02 P
1.61 (. When) 197.1 342.02 P
7 F
3.86 (names) 237.97 342.02 P
0 F
1.61 ( is non-) 273.97 342.02 P
5 F
3.86 (NULL) 313.18 342.02 P
0 F
1.61 (, the elements of the) 341.98 342.02 P
7 F
3.86 (names) 450 342.02 P
0 F
0.98 (array point to the names of each of the \336eld\325) 108 328.02 P
0.98 (s dimensions. Lik) 329.14 328.02 P
0.98 (e) 415.99 328.02 P
0.98 (wise,) 421.02 328.02 P
7 F
2.36 (sizes) 450 328.02 P
0 F
1.58 (holds the corresponding size of each dimension. The inte) 108 314.02 P
1.58 (ger) 394.1 314.02 P
5 F
3.8 (*) 414 314.02 P
7 F
3.8 (is_static) 421.2 314.02 P
0 F
-0.28 (returns non-zero if the \336eld is static. The follo) 108 300.02 P
-0.28 (wing de\336nitions suggest one pos-) 326.44 300.02 P
(sibility for de\336ning adequate space for the returned information:) 108 286.02 T
5 9 Q
(char *names[ DC_MaxDimension ];) 126 263.02 T
(unsigned long sizes[ DC_MaxDimension ];) 126 252.02 T
0 12 Q
2.48 (The information retrie) 108 227.02 P
2.48 (v) 219.31 227.02 P
2.48 (al counterpart to) 225.01 227.02 P
5 F
5.96 (dc_NSDefineDimension\050\051) 314.11 227.02 P
0 F
2.48 ( is) 472.51 227.02 P
(the function) 108 213.02 T
5 F
(dc_NSGetDimension\050\051) 168.66 213.02 T
0 F
(:) 305.46 213.02 T
7 10 Q
(int) 126 194.35 T
(dc_NSGetDimension \050dc, dimn, name, size\051) 126 182.35 T
(DataChunk *dc;) 126 170.35 T
(FieldId dimn;) 126 158.35 T
(char **name;) 126 146.35 T
(unsigned long *size;) 126 134.35 T
0 12 Q
-0.26 (This function returns information about the dimension identi\336ed by the) 108 109.02 P
5 F
-0.64 (Fiel-) 450 109.02 P
3.13 (dId) 108 95.02 P
7 F
3.13 (dimn) 133.9 95.02 P
0 F
1.3 (. The search for the dimension e) 162.71 95.02 P
1.3 (xplicitly uses the v) 324.65 95.02 P
1.3 (alue of) 418.6 95.02 P
7 F
3.13 (dimn) 457.2 95.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "66" 66
%%Page: "67" 67
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Interface) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (67) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
-0.28 (rather than the name associated with the) 126 678.02 P
5 F
-0.67 (FieldId) 319.67 678.02 P
0 F
-0.28 (. Hence this function is only) 370.07 678.02 P
25.45 (useful for dimensions which were de\336ned with) 126 664.02 P
5 F
2.92 (dc_NSDefineDimension\050\051) 126 650.02 P
0 F
1.22 (. No v) 284.4 650.02 P
1.22 (alues are returned for) 316.2 650.02 P
5 F
2.92 (NULL) 426.36 650.02 P
0 F
1.22 ( reference) 455.15 650.02 P
1.73 (parameters. The address of the dimension name is returned in) 126 636.02 P
5 F
4.16 (*) 441.61 636.02 P
7 F
4.16 (name) 448.81 636.02 P
0 F
1.73 (. The) 477.61 636.02 P
0.64 (memory occupied by the name e) 126 622.02 P
0.64 (xists until the datachunk is destro) 285.32 622.02 P
0.64 (yed; do not) 448.72 622.02 P
2.31 (try to free it as it belongs to the datachunk. The size of the dimension is) 126 608.02 P
1.2 (returned in) 126 594.02 P
5 F
2.88 (*) 183.72 594.02 P
7 F
2.88 (size) 190.92 594.02 P
0 F
1.2 (. The return v) 219.72 594.02 P
1.2 (alue of the function is non-zero on success,) 288.33 594.02 P
(zero otherwise.) 126 580.02 T
1.43 (The function) 126 554.02 P
5 F
3.44 (dc_NSGetVariable\050\051) 193.53 554.02 P
0 F
1.43 ( is the information retrie) 323.13 554.02 P
1.43 (v) 445.22 554.02 P
1.43 (al counter-) 450.92 554.02 P
(part to the function) 126 540.02 T
5 F
(dc_NSDefineVariable\050\051) 220.66 540.02 T
0 F
(:) 371.86 540.02 T
7 10 Q
(int) 144 521.35 T
(dc_NSGetVariable \050dc, field, ndims, dims, is_static\051) 144 509.35 T
(DataChunk *dc;) 144 497.35 T
(FieldId field;) 144 485.35 T
(int *ndims;*ndims*ndims) 144 473.35 T
(FieldId *dims;) 144 461.35 T
(int *is_static;) 144 449.35 T
0 12 Q
0.46 (If) 126 424.02 P
7 F
1.11 (ndims) 137.46 424.02 P
0 F
0.46 ( is non-) 173.46 424.02 P
5 F
1.11 (NULL) 210.38 424.02 P
0 F
0.46 (, this function returns the number of dimensions in the) 239.18 424.02 P
1 (v) 126 410.02 P
1 (ariable in *) 131.7 410.02 P
7 F
2.41 (ndims) 187.7 410.02 P
0 F
1 (. If) 223.7 410.02 P
7 F
2.41 (dims) 242.7 410.02 P
0 F
1 ( is non-) 271.5 410.02 P
5 F
2.41 (NULL) 309.51 410.02 P
0 F
1 (, then it must point to an array of) 338.31 410.02 P
0.04 (length *) 126 396.02 P
7 F
0.09 (ndims) 165.04 396.02 P
0 F
0.04 (. Each element of) 201.04 396.02 P
7 F
0.09 (dims) 288.16 396.02 P
0 F
0.04 ( will be set to the) 316.96 396.02 P
5 F
0.09 (FieldId) 402.51 396.02 P
0 F
0.04 ( of each of) 452.91 396.02 P
0.75 (the dimensions o) 126 382.02 P
0.75 (v) 208.65 382.02 P
0.75 (er which the v) 214.47 382.02 P
0.75 (ariable is de\336ned. If a dimension of the v) 284.72 382.02 P
0.75 (ari-) 487.34 382.02 P
1.29 (able w) 126 368.02 P
1.29 (as not de\336ned with) 158.83 368.02 P
5 F
3.11 (dc_NSDefineDimension\050\051) 258 368.02 P
0 F
1.29 (, that dimension\325) 416.4 368.02 P
1.29 (s) 499.33 368.02 P
-0.11 (returned) 126 354.02 P
5 F
-0.27 (FieldId) 168.87 354.02 P
0 F
-0.11 ( will be) 219.27 354.02 P
5 F
-0.27 (BadField) 257.93 354.02 P
0 F
-0.11 (. If the v) 315.53 354.02 P
-0.11 (ariable is static, *) 355.55 354.02 P
7 F
-0.27 (is_static) 439.2 354.02 P
0 F
-0.13 (will be non-zero. Once the) 126 340.02 P
5 F
-0.31 (FieldId) 255.99 340.02 P
0 F
-0.13 (s of the v) 306.39 340.02 P
-0.13 (ariable\325) 350.04 340.02 P
-0.13 (s dimensions are kno) 386.03 340.02 P
-0.13 (wn,) 486.34 340.02 P
18.05 (speci\336cs about each dimension can be obtained with) 126 326.02 P
5 F
14.22 (dc_NSGetDimension\050\051) 126 312.02 P
0 F
5.93 (, assuming the dimensions were assigned a) 262.8 312.02 P
5 F
5.06 (FieldId) 126 298.02 P
0 F
2.11 ( via) 176.4 298.02 P
5 F
5.06 (dc_NSDefineDimension\050\051) 201.28 298.02 P
0 F
2.11 (. Information for dimensions) 359.68 298.02 P
7.03 (whose) 126 284.02 P
5 F
16.87 (FieldId) 166.69 284.02 P
0 F
7.03 ( is) 217.09 284.02 P
5 F
16.87 (BadField) 245.15 284.02 P
0 F
7.03 ( will ha) 302.75 284.02 P
7.03 (v) 352.57 284.02 P
7.03 (e to be retrie) 358.39 284.02 P
7.03 (v) 439.49 284.02 P
7.03 (ed through) 445.31 284.02 P
5 F
1.63 (dc_NSGetField\050\051) 126 270.02 P
0 F
0.68 ( or) 234 270.02 P
5 F
1.63 (dc_NSGetAllDimensions\050\051) 251.35 270.02 P
0 F
0.68 (. The return v) 416.95 270.02 P
0.68 (alue) 484.01 270.02 P
(of the function is non-zero on success, zero otherwise.) 126 256.02 T
2.53 (The) 126 230.02 P
5 F
6.06 (dc_NSIsStatic\050\051) 150.19 230.02 P
0 F
2.53 ( function pro) 258.19 230.02 P
2.53 (vides a simple test for determining) 325.05 230.02 P
(whether a \336eld is static or dynamic.) 126 216.02 T
7 10 Q
(int) 144 197.35 T
(dc_NSIsStatic \050dc, field\051) 144 185.35 T
(DataChunk *dc;) 144 173.35 T
(FieldId field;) 144 161.35 T
0 12 Q
1.61 (The return v) 126 136.02 P
1.61 (alue is non-zero if and only if the \336eld speci\336ed by) 188.24 136.02 P
5 F
3.87 (FieldId) 453.6 136.02 P
7 F
(field) 126 122.02 T
0 F
( is static.) 162 122.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "67" 67
%%Page: "68" 68
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(68) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(6.2.6) 72.31 678.02 T
(Ad) 108 678.02 T
(ding Data) 123.88 678.02 T
0 F
(T) 108 660.02 T
(o add a sample of dynamic \336eld data to an N-space DataChunk, use) 114.37 660.02 T
7 10 Q
(void) 126 641.35 T
(dc_NSAddSample\050dc, when, sample, field, values\051) 126 629.35 T
(DataChunk *dc;) 126 617.35 T
(ZebTime *when;) 126 605.35 T
(int sample;) 126 593.35 T
(FieldId field;) 126 581.35 T
(void *values;) 126 569.35 T
0 12 Q
-0.1 (This function stores the array of \337oating point v) 108 544.02 P
-0.1 (alues in the speci\336ed) 336.88 544.02 P
7 F
-0.24 (sample) 439.8 544.02 P
0 F
-0.1 (,) 483 544.02 P
1.18 (associated with time) 108 530.02 P
7 F
2.84 (when) 212.54 530.02 P
0 F
1.18 ( and v) 241.34 530.02 P
1.18 (ariable) 272.73 530.02 P
7 F
2.84 (field) 309.57 530.02 P
0 F
1.18 (. The length of the) 345.57 530.02 P
7 F
2.84 (values) 442.8 530.02 P
0 F
1.06 (array equals the size of the \336eld\321the product of the sizes of the dimensions) 108 516.02 P
-0.15 (o) 108 502.02 P
-0.15 (v) 113.82 502.02 P
-0.15 (er which the v) 119.64 502.02 P
-0.15 (ariable w) 187.2 502.02 P
-0.15 (as de\336ned. The array should be in ro) 231.24 502.02 P
-0.15 (w-major order\321) 405.18 502.02 P
0.15 (the last dimension \050the one de\336ned at the highest inde) 108 488.02 P
0.15 (x into the) 367.47 488.02 P
5 F
0.36 (dims) 416.26 488.02 P
0 F
0.15 ( array or) 445.06 488.02 P
0.76 (the) 108 474.02 P
5 F
1.81 (dimnames) 126.42 474.02 P
0 F
0.76 ( array\051 v) 184.02 474.02 P
0.76 (aries the f) 225.88 474.02 P
0.76 (astest in linear memory \050see Section) 274.58 474.02 P
0.76 (6.2.1\051.) 455 474.02 P
0.01 (The v) 108 460.02 P
0.01 (ariable must ha) 135.37 460.02 P
0.01 (v) 208.47 460.02 P
0.01 (e been de\336ned as dynamic, else an error occurs. If this is) 214.29 460.02 P
1.65 (the \336rst attempt to add data to the) 108 446.02 P
1.65 (DataChunk,) 285.17 446.02 P
5 F
3.95 (dc_NSAddSample\050\051) 347.48 446.02 P
0 F
1.65 ( will) 462.68 446.02 P
(complete the de\336nition and \337ag it as closed before adding the data.) 108 432.02 T
2.08 (Multiple samples of data for a single \336eld can be added with the function) 108 406.02 P
5 F
(dc_NSAddMultSamples\050\051) 108 392.02 T
0 F
(:) 259.2 392.02 T
7 10 Q
(void) 126 373.35 T
(dc_NSAddMultSamples\050dc, when, begin, nsample, field, values\051) 126 361.35 T
(DataChunk *dc;) 126 349.35 T
(ZebTime *when;) 126 337.35 T
(/* an array of times, one per sample) 234 337.35 T
(*/) 450 337.35 T
(int begin;) 126 325.35 T
(/* starting sample index) 234 325.35 T
(*/) 384 325.35 T
(int nsample;) 126 313.35 T
(/* number of samples to add) 234 313.35 T
(*/) 396 313.35 T
(FieldId field;) 126 301.35 T
(void *values;) 126 289.35 T
0 12 Q
0.22 (As in) 108 264.02 P
5 F
0.53 (dc_NSAddSample\050\051) 137.11 264.02 P
0 F
0.22 (,) 252.31 264.02 P
7 F
0.53 (dc) 258.53 264.02 P
0 F
0.22 ( is the N-space datachunk and) 272.93 264.02 P
7 F
0.53 (field) 420.89 264.02 P
0 F
0.22 ( is the) 456.89 264.02 P
5 F
-0.58 (FieldId) 108 250.02 P
0 F
-0.24 ( of the \336eld be) 158.4 250.02 P
-0.24 (gin stored. The \336rst sample number to store is gi) 226.58 250.02 P
-0.24 (v) 456.76 250.02 P
-0.24 (en in) 462.58 250.02 P
7 F
1.77 (begin) 108 236.02 P
0 F
0.74 (, and) 144 236.02 P
7 F
1.77 (nsample) 171.8 236.02 P
0 F
0.74 ( holds the number of samples to store. The) 222.2 236.02 P
7 F
1.77 (when) 436.14 236.02 P
0 F
0.74 ( and) 464.94 236.02 P
7 F
2.4 (values) 108 222.02 P
0 F
1 ( arrays must hold times and data v) 151.2 222.02 P
1 (alues, respecti) 322.22 222.02 P
1 (v) 390.9 222.02 P
1 (ely) 396.72 222.02 P
1 (, for) 410.61 222.02 P
7 F
2.4 (nsample) 435.6 222.02 P
0 F
(numbers of samples.) 108 208.02 T
(T) 108 182.02 T
(o add static \336eld data to an N-space DataChunk, use) 114.37 182.02 T
7 10 Q
(void) 126 163.35 T
(dc_NSAddStatic \050dc, field, values\051) 126 151.35 T
(DataChunk *dc;) 126 139.35 T
(FieldId field;) 126 127.35 T
(void *values;) 126 115.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "68" 68
%%Page: "69" 69
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Interface) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (69) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.83 (This function is similar to) 126 678.02 P
5 F
2 (dc_NSAddSample\050\051) 257.17 678.02 P
0 F
0.83 ( with the e) 372.37 678.02 P
0.83 (xception that no) 425.01 678.02 P
1.36 (time or sample number is associated with the \336eld\325) 126 664.02 P
1.36 (s data. The) 380.89 664.02 P
7 F
3.27 (field) 440.3 664.02 P
0 F
1.36 ( must) 476.3 664.02 P
10.72 (ha) 126 650.02 P
10.72 (v) 137.09 650.02 P
10.72 (e been de\336ned as static, else an error occurs. As with) 142.91 650.02 P
5 F
6.78 (dc_NSAddSample\050\051) 126 636.02 P
0 F
2.83 (, the) 241.2 636.02 P
5 F
6.78 (values) 270.52 636.02 P
0 F
2.83 ( array should be in ro) 313.72 636.02 P
2.83 (w-major order) 429.86 636.02 P
2.83 (.) 501 636.02 P
0.02 (Each successi) 126 622.02 P
0.02 (v) 192.03 622.02 P
0.02 (e call to) 197.85 622.02 P
5 F
0.05 (dc_NSAddStatic\050\051) 238.91 622.02 P
0 F
0.02 ( o) 354.11 622.02 P
0.02 (v) 362.96 622.02 P
0.02 (erwrites an) 368.78 622.02 P
0.02 (y data pre) 421.6 622.02 P
0.02 (viously) 468.66 622.02 P
1.65 (stored for the gi) 126 608.02 P
1.65 (v) 206.96 608.02 P
1.65 (en \336eld. Static data will be added directly to the ra) 212.78 608.02 P
1.65 (w data) 470.7 608.02 P
0.48 (chunk since it is not associated with an) 126 594.02 P
0.48 (y particular sample, hence it cannot be) 316.16 594.02 P
0.37 (retrie) 126 580.02 P
0.37 (v) 151.02 580.02 P
0.37 (ed through an) 156.84 580.02 P
0.37 (y of the MetData class methods. Note that static \336elds are) 223.38 580.02 P
0.22 (lumped into the \336elds de\336nition for the MetData class structure \050see de\336nition) 126 566.02 P
2.34 (completion in Section) 126 552.02 P
2.34 (6.2.1\051, b) 239.02 552.02 P
2.34 (ut no data are e) 281.12 552.02 P
2.34 (v) 363.49 552.02 P
2.34 (er stored for the \336elds via) 369.31 552.02 P
5 F
(dc_AddMData\050\051) 126 538.02 T
0 F
(.) 219.6 538.02 T
2 F
(6.2.7) 90.31 506.02 T
(Extracting Data) 126 506.02 T
0 F
(T) 126 488.02 T
(o get a pointer to a sample of \336eld data, use) 132.37 488.02 T
7 10 Q
(void *) 144 469.35 T
(dc_NSGetSample\050dc, sample, field, size\051) 144 457.35 T
(DataChunk *dc;) 144 445.35 T
(int sample;) 144 433.35 T
(FieldId field;) 144 421.35 T
(unsigned long *size;) 144 409.35 T
0 12 Q
0.43 (The function returns a pointer to the data for) 126 384.02 P
7 F
1.03 (field) 346.16 384.02 P
0 F
0.43 ( at sample number) 382.16 384.02 P
7 F
1.03 (sam-) 475.2 384.02 P
1.04 (ple) 126 370.02 P
0 F
0.43 (. If) 147.6 370.02 P
7 F
1.04 (size) 165.46 370.02 P
0 F
0.43 ( is non-) 194.26 370.02 P
5 F
1.04 (NULL) 231.12 370.02 P
0 F
0.43 (, *) 259.92 370.02 P
7 F
1.04 (size) 272.36 370.02 P
0 F
0.43 ( returns the length of the data array as the) 301.16 370.02 P
-0.1 (number of \337oating point elements in the array) 126 356.02 P
-0.1 (. The array is in ro) 344.79 356.02 P
-0.1 (w-major order) 432.61 356.02 P
-0.1 (,) 501 356.02 P
1.62 (e) 126 342.02 P
1.62 (xactly as it w) 131.15 342.02 P
1.62 (as stored. If the data for the speci\336ed \336eld or sample cannot) 199.55 342.02 P
(found, the function returns) 126 328.02 T
5 F
(NULL) 256.98 328.02 T
0 F
(.) 285.78 328.02 T
0.01 (The) 126 302.02 P
7 F
0.01 (field) 147.67 302.02 P
0 F
0.01 ( parameter may be a static \336eld, in which case the function ignores) 183.66 302.02 P
0.17 (the sample number and returns that \336eld\325) 126 288.02 P
0.17 (s static data. By de\336nition, static data) 323.66 288.02 P
0.39 (are v) 126 274.02 P
0.39 (alid and constant across all of the samples in the DataChunk, so it mak) 149.74 274.02 P
0.39 (es) 494 274.02 P
0.42 (sense to return the same static data for an) 126 260.02 P
0.42 (y sample in the DataChunk. As long) 327.14 260.02 P
0.26 (as the sample number) 126 246.02 P
7 F
0.62 (sample) 234.35 246.02 P
0 F
0.26 ( e) 277.55 246.02 P
0.26 (xists in the DataChunk and data for the static) 285.96 246.02 P
1.25 (\336eld ha) 126 232.02 P
1.25 (v) 162.68 232.02 P
1.25 (e been stored in the DataChunk,) 168.49 232.02 P
5 F
3 (dc_NSGetSample\050\051) 332.97 232.02 P
0 F
1.25 ( will return) 448.17 232.02 P
-0.22 (those data re) 126 218.02 P
-0.22 (g) 186.02 218.02 P
-0.22 (ardless of the sample number) 191.96 218.02 P
-0.22 (. If there are no data for that \336eld, or) 331.05 218.02 P
1.65 (the sample number is out of range,) 126 204.02 P
5 F
3.97 (dc_NSGetSample\050\051) 306.88 204.02 P
0 F
1.65 ( reports an error) 422.08 204.02 P
(and returns) 126 190.02 T
5 F
(NULL) 182.65 190.02 T
0 F
(.) 211.45 190.02 T
2.64 (Note that there is no analogous capability in) 126 164.02 P
5 F
6.34 (dc_NSAddSample\050\051) 361.79 164.02 P
0 F
2.64 (. T) 476.98 164.02 P
2.64 (oo) 492 164.02 P
0.19 (man) 126 150.02 P
0.19 (y ambiguities can arise about which static data should tak) 146.48 150.02 P
0.19 (e precedence for) 424.34 150.02 P
0.42 (which samples, and whether static data can be added for a sample which does) 126 136.02 P
2.06 (not contain an) 126 122.02 P
2.06 (y dynamic data. More importantly) 197.93 122.02 P
2.06 (, when static data is being) 369.71 122.02 P
0.22 (added, it is essentially being added for the entire DataChunk and not for a sin-) 126 108.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "69" 69
%%Page: "70" 70
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(70) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.91 (gle sample. Requiring the use of) 108 678.02 P
5 F
4.6 (dc_NSAddStatic\050\051) 277.81 678.02 P
0 F
1.91 ( to add static \336eld) 393.01 678.02 P
(data mak) 108 664.02 T
(es this distinction v) 151.54 664.02 T
(ery clear) 244.37 664.02 T
(.) 285.35 664.02 T
(T) 108 638.02 T
(o get a pointer to a \336eld\325) 114.37 638.02 T
(s static data in an N-space DataChunk, use) 231.7 638.02 T
7 10 Q
(void *) 126 619.35 T
(dc_NSGetStatic \050dc, field, size\051) 126 607.35 T
(DataChunk *dc;) 126 595.35 T
(FieldId field;) 126 583.35 T
(unsigned long *size;) 126 571.35 T
0 12 Q
0.19 (Basically) 108 546.02 P
0.19 (, this function is e) 151.88 546.02 P
0.19 (xactly lik) 238.15 546.02 P
0.19 (e) 283.23 546.02 P
5 F
0.47 (dc_NSGetSample\050\051) 291.75 546.02 P
0 F
0.19 (, e) 406.95 546.02 P
0.19 (xcept no sam-) 418.29 546.02 P
1.25 (ple number is necessary and the \336eld with) 108 532.02 P
5 F
2.99 (FieldId) 322.61 532.02 P
7 F
2.99 (field) 377.26 532.02 P
0 F
1.25 ( must be static) 413.26 532.02 P
(rather than dynamic.) 108 518.02 T
54 475.02 540 477.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 475.02 540 477.02 R
7 X
0 0 0 1 0 0 0 K
V
54 476.02 99 476.02 2 L
0.5 H
2 Z
0 X
N
108 476.02 540 476.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(6.3) 82.32 481.02 T
(Stora) 108 481.02 T
(g) 138.55 481.02 T
(e in netCDF Files) 146 481.02 T
0 F
1.72 (This section gi) 108 457.02 P
1.72 (v) 181.8 457.02 P
1.72 (es information which might be helpful when using N-) 187.62 457.02 P
1.72 (space) 459.35 457.02 P
(DataChunks to store data in netCDF \336les.) 108 443.02 T
1.43 (Dimensions in the N-space DataChunk will be de\336ned as dimensions in the) 108 417.02 P
0.91 (netCDF \336le using the N-space name and the corresponding size. Static \336elds) 108 403.02 P
2.55 (will be de\336ned as netCDF v) 108 389.02 P
2.55 (ariables o) 254.79 389.02 P
2.55 (v) 303.48 389.02 P
2.55 (er their gi) 309.3 389.02 P
2.55 (v) 360.76 389.02 P
2.55 (en N-space dimensions,) 366.58 389.02 P
0.41 (while dynamic \336elds will be de\336ned o) 108 375.02 P
0.41 (v) 293.64 375.02 P
0.41 (er a temporal dimension as well as the) 299.46 375.02 P
0.25 (N-space dimensions. If a) 108 361.02 P
5 F
0.61 (FieldId) 231.32 361.02 P
0 F
0.25 ( is de\336ned as both a dimension and a v) 281.72 361.02 P
0.25 (ari-) 469.34 361.02 P
1.78 (able in the DataChunk, then a v) 108 347.02 P
1.78 (ariable will automatically be de\336ned in the) 270.02 347.02 P
1 (netCDF \336le with the same name as a netCDF dimension. Hence, by netCDF) 108 333.02 P
-0.17 (con) 108 319.02 P
-0.17 (v) 124.85 319.02 P
-0.17 (ention, the v) 130.67 319.02 P
-0.17 (ariable will be a coordinate v) 189.69 319.02 P
-0.17 (ariable, implying that it maps the) 328.18 319.02 P
1.53 (irre) 108 305.02 P
1.53 (gularly-spaced domain of an) 124.48 305.02 P
1.53 (y v) 265.85 305.02 P
1.53 (ariables de\336ned o) 282.08 305.02 P
1.53 (v) 369.6 305.02 P
1.53 (er the coordinate v) 375.42 305.02 P
1.53 (ari-) 469.34 305.02 P
0.88 (able\325) 108 291.02 P
0.88 (s dimension. The naming scheme for coordinate v) 131.33 291.02 P
0.88 (ariables is only a con-) 377.16 291.02 P
1.04 (v) 108 277.02 P
1.04 (ention. It is up to the application using the netCDF \336le to look for possible) 113.82 277.02 P
(coordinate v) 108 263.02 T
(ariables and handle them appropriately) 167.35 263.02 T
(.) 353.2 263.02 T
1.03 (The N-space class limits the number of dimensions in a) 108 237.02 P
5 F
2.47 (DCC_NSpace) 387.61 237.02 P
0 F
1.03 ( v) 459.61 237.02 P
1.03 (ari-) 469.34 237.02 P
1.84 (able to) 108 223.02 P
5 F
4.4 (DC_MaxDimension) 147 223.02 P
0 F
1.84 (, which ideally is less than the netCDF maxi-) 255 223.02 P
3.28 (mum,) 108 209.02 P
5 F
7.88 (MAX_NC_DIMS) 141.95 209.02 P
0 F
3.28 (. Note that the N-space limit does not include the) 221.15 209.02 P
0.26 (temporal dimension, which for MetData subclasses is implicit in the or) 108 195.02 P
0.26 (g) 450.74 195.02 P
0.26 (aniza-) 456.68 195.02 P
0.4 (tion of data by samples. Therefore dynamic v) 108 181.02 P
0.4 (ariables normally should be lim-) 328.43 181.02 P
0.94 (ited to one dimension less than the netCDF maximum for storage in netCDF) 108 167.02 P
1.22 (\336les.) 108 153.02 P
5 F
2.93 (MAX_NC_DIMS) 135.23 153.02 P
0 F
1.22 ( is de\336ned in the netCDF header \336le,) 214.43 153.02 P
5 F
2.93 (netcdf.h) 403.85 153.02 P
0 F
1.22 (, and) 461.45 153.02 P
5 F
0.64 (DC_MaxDimension) 108 139.02 P
0 F
0.27 ( is de\336ned in) 216 139.02 P
5 F
0.64 (DataStore.h) 281.74 139.02 P
0 F
0.27 (. See Section) 360.94 139.02 P
0.27 (6.2.2 for the) 426.81 139.02 P
(N-) 108 125.02 T
(space header \336le de\336nitions.) 120.66 125.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "70" 70
%%Page: "71" 71
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Examples) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (71) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
3.49 (Dimension names must be limited in length to) 126 678.02 P
5 F
8.37 (DC_MaxDimName) 378.58 678.02 P
0 F
3.49 ( bytes) 472.18 678.02 P
1.02 (\050including the) 126 664.02 P
5 F
2.46 (NULL) 198.04 664.02 P
0 F
1.02 ( terminator\051, which is reasonable since there is a similar) 226.84 664.02 P
0.61 (limit to dimension names in netCDF \336les. Ho) 126 650.02 P
0.61 (we) 348.62 650.02 P
0.61 (v) 362.32 650.02 P
0.61 (er) 368.14 650.02 P
0.61 (, if a dimension is de\336ned) 376.98 650.02 P
2.54 (with a name that is too long, either through) 126 636.02 P
5 F
6.1 (dc_NSDefineField\050\051) 358.86 636.02 P
0 F
2.54 ( or) 488.46 636.02 P
5 F
9.29 (dc_NSDefineDimension\050\051) 126 622.02 P
0 F
3.87 (, then the name will be truncated. If the) 284.4 622.02 P
0.9 (dimension name w) 126 608.02 P
0.9 (as meant to match the name of a coordinate v) 218.34 608.02 P
0.9 (ariable, then) 443.78 608.02 P
-0.02 (the con) 126 594.02 P
-0.02 (v) 160.49 594.02 P
-0.02 (ention may be lost in the netCDF \336le as the truncated dimension name) 166.31 594.02 P
(may be dif) 126 580.02 T
(ferent from the v) 177.02 580.02 T
(ariable name.) 257.7 580.02 T
0.52 (W) 126 554.02 P
0.52 (ith the N-space interf) 136.85 554.02 P
0.52 (ace, it is no) 239.93 554.02 P
0.52 (w possible to store the same \336elds in more) 295.85 554.02 P
2.48 (than one netCDF \336le using dif) 126 540.02 P
2.48 (ferently sized dimensions, or e) 283.76 540.02 P
2.48 (v) 440.36 540.02 P
2.48 (en dif) 446.18 540.02 P
2.48 (ferent) 476.02 540.02 P
0.37 (numbers of dimensions, by changing the de\336nition of the N-space DataChunk) 126 526.02 P
-0.08 (for each data \336le. This can be hazardous to Zebra if a data fetch spanning more) 126 512.02 P
0.71 (than one \336le must read the same \336eld b) 126 498.02 P
0.71 (ut dif) 319.43 498.02 P
0.71 (ferent dimensions from the \336les.) 345.51 498.02 P
0.23 (At present, nothing in Zebra attempts to detect a change in the shape of a \336eld) 126 484.02 P
-0.15 (between \336les. As long as fetches are performed on the observ) 126 470.02 P
-0.15 (ation le) 419.13 470.02 P
-0.15 (v) 454.35 470.02 P
-0.15 (el, where) 460.17 470.02 P
1.37 (an observ) 126 456.02 P
1.37 (ation in Zebra corresponds to a single \336le, shape changes between) 173.39 456.02 P
(\336les should not be a problem.) 126 442.02 T
0.34 (There is another shortcoming in Zebra\325) 126 416.02 P
0.34 (s handling of N-space data. At present,) 315.33 416.02 P
-0.1 (Zebra applications e) 126 402.02 P
-0.1 (xpect all data \336les to contain time-dependent data. In other) 222.93 402.02 P
-0.07 (w) 126 388.02 P
-0.07 (ords, an application e) 134.54 388.02 P
-0.07 (xpects to \336nd an array of sample times in e) 236.8 388.02 P
-0.07 (v) 442.17 388.02 P
-0.07 (ery \336le. F) 447.99 388.02 P
-0.07 (or) 494 388.02 P
0.93 (this reason, it is not a good idea to store N-space DataChunks which contain) 126 374.02 P
0.41 (only static \336elds. There needs to be at least one non-static \336eld from which to) 126 360.02 P
(generate the sample times for the \336le.) 126 346.02 T
72 303.02 558 305.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 303.02 558 305.02 R
7 X
0 0 0 1 0 0 0 K
V
72 304.02 117 304.02 2 L
0.5 H
2 Z
0 X
N
126 304.02 558 304.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(6.4) 100.32 309.02 T
(Examples) 126 309.02 T
0 F
1.19 (This section includes se) 126 285.02 P
1.19 (v) 243.59 285.02 P
1.19 (eral e) 249.41 285.02 P
1.19 (xamples of code which use the N-space inter-) 276.74 285.02 P
-0.1 (f) 126 271.02 P
-0.1 (ace. All of the e) 129.88 271.02 P
-0.1 (xamples also include CDL \050netw) 205.61 271.02 P
-0.1 (ork Common Data form Lan-) 363.08 271.02 P
0.13 (guage\051 descriptions of the netCDF \336le structure generated by the sample code.) 126 257.02 P
-0.26 (Most of the e) 126 243.02 P
-0.26 (xamples concentrate on establishing the structure and shape of the) 188.71 243.02 P
(dataset; once the de\336nition is complete the addition of data is straightforw) 126 229.02 T
(ard.) 481.51 229.02 T
2 F
(6.4.1) 90.31 197.02 T
(A Dynamic Field Over a Single Dimension) 126 197.02 T
0 F
0.31 (The \336rst e) 126 179.02 P
0.31 (xample of the N-space interf) 175.1 179.02 P
0.31 (ace de\336nes a single, dynamic \336eld o) 313.52 179.02 P
0.31 (v) 488.86 179.02 P
0.31 (er) 494.68 179.02 P
-0.11 (a single dimension. In ef) 126 165.02 P
-0.11 (fect this creates a time-v) 243.58 165.02 P
-0.11 (arying v) 360.14 165.02 P
-0.11 (ector) 399.51 165.02 P
-0.11 (, where the num-) 423.02 165.02 P
0.05 (ber of components in the v) 126 151.02 P
0.05 (ector equals the size of the dimension. The v) 254.41 151.02 P
0.05 (ector is) 468.95 151.02 P
0.71 (an array of virtual temperatures measured at 50 le) 126 137.02 P
0.71 (v) 370.02 137.02 P
0.71 (els of an atmospheric pro-) 375.84 137.02 P
(\336le.) 126 123.02 T
5 9 Q
(DataChunk *dc;) 144 100.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "71" 71
%%Page: "72" 72
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(72) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(char *dim_names[] = { \322levels\323 };) 126 680.02 T
(unsigned long dim_sizes[] = { 50 };) 126 669.02 T
(FieldId vfld;) 126 658.02 T
(dc = dc_CreateDC \050DCC_NSpace\051;) 126 636.02 T
(dc->dc_Platform = ds_LookupPlatform \050\322profiler\323\051;) 126 625.02 T
(dc_SetBadval \050dc, BADVAL\051;) 126 614.02 T
(vfld = F_DeclareField \050\322virtual\323,\322Virtual temperature\323, \322K\323\051;) 126 603.02 T
(/*) 126 581.02 T
( * Define a dynamic field, dimensioned on \322levels\323) 126 570.02 T
( */) 126 559.02 T
(dc_NSDefineField \050dc, vlfd, 1, dim_names, dim_sizes, FALSE\051;) 126 548.02 T
0 12 Q
(The code abo) 108 523.02 T
(v) 172.46 523.02 T
(e produces a netCDF structure lik) 178.28 523.02 T
(e the follo) 339.8 523.02 T
(wing:) 388.16 523.02 T
5 9 Q
(netcdf example {) 126 500.02 T
(// a single dynamic field with 1 non-temporal dimn) 217.8 500.02 T
(dimensions:) 126 489.02 T
(time = unlimited;) 154.8 478.02 T
(levels = 50;) 154.8 467.02 T
(variables:) 126 445.02 T
(float) 154.8 434.02 T
(virtual\050time,levels\051;) 183.6 434.02 T
(virtual:long_name = \322Virtual temperature\323;) 183.6 423.02 T
(virtual:units = \322K\323;) 183.6 412.02 T
(}) 126 401.02 T
0 12 Q
0.2 (Note that the time dimension de\336ned in the netCDF \336le w) 108 376.02 P
0.2 (as not de\336ned in the) 388.54 376.02 P
-0.07 (N-space call to) 108 362.02 P
5 F
-0.17 (dc_NSDefineField\050\051) 182.76 362.02 P
0 F
-0.07 (. The temporal dimension is implied) 312.36 362.02 P
1.51 (by specifying the) 108 348.02 P
5 F
3.63 (is_static) 198.19 348.02 P
0 F
1.51 ( parameter as) 262.99 348.02 P
5 F
3.63 (FALSE) 334.49 348.02 P
0 F
1.51 (. F) 370.49 348.02 P
1.51 (or each time coordi-) 384.49 348.02 P
1.14 (nate, or sample, in the \336le, this dataset holds 50 temperatures\321one for each) 108 334.02 P
(coordinate along the) 108 320.02 T
5 F
(levels) 208.98 320.02 T
0 F
( dimension.) 252.18 320.02 T
2 F
(6.4.2) 72.31 288.02 T
(De\336ning a Coordinate V) 108 288.02 T
(ariab) 243.3 288.02 T
(le) 271.86 288.02 T
0 F
0.08 (In the pre) 108 270.02 P
0.08 (vious e) 153.84 270.02 P
0.08 (xample, no ph) 188.07 270.02 P
0.08 (ysical signi\336cance w) 256.49 270.02 P
0.08 (as attached to the) 356.51 270.02 P
5 F
0.19 (levels) 442.8 270.02 P
0 F
0.92 (dimension. There is no information about the location or meaning of each of) 108 256.02 P
0.38 (the coordinates along the le) 108 242.02 P
0.38 (v) 241.22 242.02 P
0.38 (els dimension. The virtual temperature v) 247.04 242.02 P
0.38 (alues are) 443.3 242.02 P
0.97 (simply accessed directly through the indices 1, 2, \311, 50. Ho) 108 228.02 P
0.97 (we) 407.38 228.02 P
0.97 (v) 421.07 228.02 P
0.97 (er) 426.89 228.02 P
0.97 (, since the) 435.73 228.02 P
2.36 (domain of the virtual temperature v) 108 214.02 P
2.36 (ector has a ph) 289.93 214.02 P
2.36 (ysical basis\321a series of) 363.27 214.02 P
5.31 (heights abo) 108 200.02 P
5.31 (v) 168.13 200.02 P
5.31 (e ground le) 173.95 200.02 P
5.31 (v) 238.27 200.02 P
5.31 (el\321this relationship should be communicated) 244.09 200.02 P
1.3 (through the de\336nition of the data. A coordinate v) 108 186.02 P
1.3 (ariable [Section) 353.09 186.02 P
1.3 (6.1.2] sup-) 433.04 186.02 P
0.17 (plies the link between the locations of the virtual temperature readings and the) 108 172.02 P
1.12 (temperature v) 108 158.02 P
1.12 (alues. Since there are 50 le) 175.13 158.02 P
1.12 (v) 309.05 158.02 P
1.12 (els in the pro\336le, both the array of) 314.87 158.02 P
-0.01 (temperatures and the array of heights will ha) 108 144.02 P
-0.01 (v) 321.94 144.02 P
-0.01 (e 50 components in the non-tem-) 327.76 144.02 P
2.74 (poral dimension. T) 108 130.02 P
2.74 (o e) 203.51 130.02 P
2.74 (xplicitly sho) 220.4 130.02 P
2.74 (w the link between the heights and the) 282.52 130.02 P
-0.2 (domain of the virtual \336eld, the height v) 108 116.02 P
-0.2 (alues are stored in a \336eld whose name is) 294.3 116.02 P
0.12 (the same as the dimension used to inde) 108 102.02 P
0.12 (x the virtual temperature heights. In the) 295.64 102.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "72" 72
%%Page: "73" 73
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Examples) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (73) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
2.45 (N-) 126 678.02 P
2.45 (space interf) 138.66 678.02 P
2.45 (ace, the tw) 196.63 678.02 P
2.45 (o \336elds are de\336ned as usual, both o) 253.05 678.02 P
2.45 (v) 438.64 678.02 P
2.45 (er the same) 444.46 678.02 P
0.67 (dimension. The only signi\336cance to the de\336nition is that one of the \336elds has) 126 664.02 P
0.62 (the same name as its dimension. Also, the dimension name has been changed) 126 650.02 P
0.25 (from \322le) 126 636.02 P
0.25 (v) 166.27 636.02 P
0.25 (els\323 to \322height\323, since \322height\323 is more descripti) 172.09 636.02 P
0.25 (v) 405.52 636.02 P
0.25 (e. It might be help-) 411.34 636.02 P
1.52 (ful to think of dimensions as coordinates rather than as arrays of indices or) 126 622.02 P
2.56 (simply lengths and sizes. In actuality dimensions represent coordinates. A) 126 608.02 P
1.65 (mapping o) 126 594.02 P
1.65 (v) 178.47 594.02 P
1.65 (er 3-space has dimensions) 184.29 594.02 P
4 F
1.65 (x) 319.52 594.02 P
0 F
1.65 (,) 324.85 594.02 P
4 F
1.65 (y) 332.5 594.02 P
0 F
1.65 (, and) 337.05 594.02 P
4 F
1.65 (z) 366.67 594.02 P
0 F
1.65 (, as opposed to ha) 371.34 594.02 P
1.65 (ving the) 463.35 594.02 P
1.09 (dimensions \322Xs\323, \322Ys\323, and \322Zs\323. The f) 126 580.02 P
1.09 (act that a size must be assigned to a) 324.68 580.02 P
0.58 (dimension confuses the f) 126 566.02 P
0.58 (act that the dimension is more than just a count. The) 247.26 566.02 P
1.93 (assignment of a size is necessary to specify ho) 126 552.02 P
1.93 (w man) 363.8 552.02 P
1.93 (y coordinates will be) 397.88 552.02 P
0.09 (stored in a dataset along a dimension, b) 126 538.02 P
0.09 (ut the dimension name should still be a) 315.7 538.02 P
1.09 (dimension rather than a counting v) 126 524.02 P
1.09 (ariable. Hence this e) 298.12 524.02 P
1.09 (xample uses \322height\323) 399.17 524.02 P
(rather than \322le) 126 510.02 T
(v) 194.34 510.02 T
(els\323 or \322heights\323. The code looks lik) 200.16 510.02 T
(e this:) 375.01 510.02 T
5 9 Q
(DataChunk *dc;) 144 487.02 T
(char *dim_names[] = { \322height\323 };) 144 476.02 T
(unsigned long dim_sizes[] = { 50 };) 144 465.02 T
(FieldId vfld, hfld;) 144 454.02 T
(dc = dc_CreateDC \050DCC_NSpace\051;) 144 432.02 T
(dc->dc_Platform = ds_LookupPlatform \050\322profiler\323\051;) 144 421.02 T
(dc_SetBadval \050dc, BADVAL\051;) 144 410.02 T
(vfld = F_DeclareField \050\322virtual\323, \322Virtual temperature\323, \322K\323\051;) 144 388.02 T
(hfld = F_DeclareField \050\322height\323, \322Height above ground\323, \322km\323\051;) 144 377.02 T
(dc_NSDefineField \050dc, vlfd, 1, dim_names, dim_sizes, FALSE\051;) 144 366.02 T
(dc_NSDefineField \050dc, hfld, 1, dim_names, dim_sizes, FALSE\051;) 144 355.02 T
0 12 Q
(The CDL description for the corresponding netCDF header looks lik) 126 330.02 T
(e this:) 454.84 330.02 T
5 9 Q
(netcdf example { // using a coordinate variable) 144 307.02 T
(dimensions:) 144 296.02 T
(time = UNLIMITED ;) 172.8 285.02 T
(height = 50 ;) 172.8 274.02 T
(variables:) 144 252.02 T
(float) 172.8 241.02 T
(virtual\050time,height\051;) 201.6 241.02 T
(virtual:long_name = \322Virtual temperature\323;) 201.6 230.02 T
(virtual:units = \322K\323;) 201.6 219.02 T
(float) 172.8 208.02 T
(height\050time,height\051;) 201.6 208.02 T
(height:long_name = \322Height above ground\323;) 201.6 197.02 T
(height:units = \322km\323;) 201.6 186.02 T
0 12 Q
2.82 (Notice ho) 126 161.02 P
2.82 (w the netCDF \336le clearly describes a set of temperature v) 175.51 161.02 P
2.82 (alues) 479.34 161.02 P
0.22 (de\336ned at each of 50 heights and at each sample time, and the actual locations) 126 147.02 P
1.05 (of those heights are gi) 126 133.02 P
1.05 (v) 235.88 133.02 P
1.05 (en in the v) 241.7 133.02 P
1.05 (ariable \322height\323. The temperature readings) 294.87 133.02 P
1.15 (are no longer just a set of v) 126 119.02 P
1.15 (alues o) 264.1 119.02 P
1.15 (v) 298.73 119.02 P
1.15 (er some 50 le) 304.55 119.02 P
1.15 (v) 372.04 119.02 P
1.15 (els; the temperatures no) 377.86 119.02 P
1.15 (w) 495.34 119.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "73" 73
%%Page: "74" 74
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(74) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.63 (correspond to speci\336c heights abo) 108 678.02 P
0.63 (v) 273.64 678.02 P
0.63 (e the ground, whose locations are gi) 279.46 678.02 P
0.63 (v) 455.89 678.02 P
0.63 (en in) 461.71 678.02 P
(kilometers abo) 108 664.02 T
(v) 178.81 664.02 T
(e the ground.) 184.63 664.02 T
8.56 (The N-) 108 638.02 P
8.56 (space interf) 150.88 638.02 P
8.56 (ace functions) 214.96 638.02 P
5 F
20.53 (dc_NSDefineDimension\050\051) 298.72 638.02 P
0 F
8.56 ( and) 457.12 638.02 P
5 F
-0.2 (dc_NSDefineVariable\050\051) 108 624.02 P
0 F
-0.08 ( can also be used to de\336ne this dataset. The fol-) 259.2 624.02 P
(lo) 108 610.02 T
(wing code produces a CDL header identical to the CDL header abo) 117.04 610.02 T
(v) 439.78 610.02 T
(e.) 445.6 610.02 T
5 9 Q
(DataChunk *dc;) 126 592.02 T
(FieldId vfld, hfld;) 126 581.02 T
(dc = dc_CreateDC \050DCC_NSpace\051;) 126 559.02 T
(dc->dc_Platform = ds_LookupPlatform \050\322profiler\323\051;) 126 548.02 T
(dc_SetBadval \050dc, BADVAL\051;) 126 537.02 T
(vfld = F_DeclareField \050\322virtual\323, \322Virtual temperature\323, \322K\323\051;) 126 515.02 T
(hfld = F_DeclareField \050\322height\323, \322Height above ground\323, \322km\323\051;) 126 504.02 T
(dc_NSDefineDimension \050dc, hfld, \050unsigned long\05150\051;) 126 493.02 T
(dc_NSDefineVariable \050dc, vfld, 1, &hlfd, FALSE\051;) 126 482.02 T
(dc_NSDefineVariable \050dc, hfld, 1, &hlfd, FALSE\051;) 126 471.02 T
0 12 Q
1.25 (An) 108 446.02 P
1.25 (y data structure describable in N-) 122.48 446.02 P
1.25 (space can be de\336ned using either of the) 288.33 446.02 P
0.9 (tw) 108 432.02 P
0.9 (o coding methods sho) 119.88 432.02 P
0.9 (wn in this e) 227.28 432.02 P
0.9 (xample. In general, ho) 285.48 432.02 P
0.9 (we) 395.52 432.02 P
0.9 (v) 409.21 432.02 P
0.9 (er) 415.03 432.02 P
0.9 (, for compli-) 423.87 432.02 P
2.61 (cated data structures the) 108 418.02 P
5 F
6.26 (dc_NSDefineDimension\050\051) 237.06 418.02 P
0 F
2.61 ( method produces) 395.46 418.02 P
2.37 (code which is more readable than the) 108 404.02 P
5 F
5.68 (dc_NSDefineField\050\051) 306.18 404.02 P
0 F
2.37 ( interf) 435.78 404.02 P
2.37 (ace.) 467.02 404.02 P
2.43 (When using) 108 390.02 P
5 F
5.84 (dc_NSDefineDimension\050\051) 173.53 390.02 P
0 F
2.43 (, e) 331.93 390.02 P
2.43 (v) 345.39 390.02 P
2.43 (ery dimension is e) 351.21 390.02 P
2.43 (xplicitly) 445.99 390.02 P
-0.12 (de\336ned once, and once de\336ned the dimension can be referenced an) 108 376.02 P
-0.12 (y number of) 427.57 376.02 P
-0.03 (times by its) 108 362.02 P
5 F
-0.06 (FieldId) 166.27 362.02 P
0 F
-0.03 (, in as man) 216.67 362.02 P
-0.03 (y places and for as man) 268.41 362.02 P
-0.03 (y v) 381.07 362.02 P
-0.03 (ariables as needed.) 395.75 362.02 P
0.36 (Also, when de\336ning coordinate v) 108 348.02 P
0.36 (ariables, the code clearly sho) 268.8 348.02 P
0.36 (ws when a v) 408.9 348.02 P
0.36 (ari-) 469.34 348.02 P
3.23 (able is being de\336ned \322o) 108 334.02 P
3.23 (v) 234.06 334.02 P
3.23 (er itself\323, i.e., o) 239.88 334.02 P
3.23 (v) 323.71 334.02 P
3.23 (er a dimension with the same) 329.53 334.02 P
5 F
(FieldId) 108 320.02 T
0 F
( as the v) 158.4 320.02 T
(ariable.) 197.76 320.02 T
2.52 (It might be tempting to de\336ne the abo) 108 294.02 P
2.52 (v) 306.44 294.02 P
2.52 (e dataset by retaining the \322le) 312.26 294.02 P
2.52 (v) 461.52 294.02 P
2.52 (els\323) 467.34 294.02 P
(dimension, as in the follo) 108 280.02 T
(wing code:) 229.37 280.02 T
5 9 Q
(DataChunk *dc;) 126 262.02 T
(char *dim_names[] = { \322levels\323 };) 126 251.02 T
(unsigned long dim_sizes[] = { 50 };) 126 240.02 T
(FieldId vfld, hfld;) 126 229.02 T
(dc = dc_CreateDC \050DCC_NSpace\051;) 126 207.02 T
(dc->dc_Platform = ds_LookupPlatform \050\322profiler\323\051;) 126 196.02 T
(dc_SetBadval \050dc, BADVAL\051;) 126 185.02 T
(vfld = F_DeclareField \050\322virtual\323, Virtual temperature\323, \322K\323\051;) 126 163.02 T
(hfld = F_DeclareField \050\322height\323, \322Height above ground\323, \322km\323\051;) 126 152.02 T
(dc_NSDefineField \050dc, vlfd, 1, dim_names, dim_sizes, FALSE\051;) 126 141.02 T
(dc_NSDefineField \050dc, hfld, 1, dim_names, dim_sizes, FALSE\051;) 126 130.02 T
0 12 Q
(The abo) 108 105.02 T
(v) 146.81 105.02 T
(e de\336nition results in this CDL header:) 152.63 105.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "74" 74
%%Page: "75" 75
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Examples) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (75) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(netcdf example {) 144 680.02 T
(// using a coordinate variable) 259.2 680.02 T
(dimensions:) 144 669.02 T
(time = unlimited;) 172.8 658.02 T
(levels = 50;) 172.8 647.02 T
(variables:) 144 625.02 T
(float) 172.8 614.02 T
(virtual\050time,levels\051;) 201.6 614.02 T
(virtual:long_name = \322Virtual temperature\323;) 201.6 603.02 T
(virtual:units = \322K\323;) 201.6 592.02 T
(float) 172.8 581.02 T
(height\050time,levels\051;) 201.6 581.02 T
(height:long_name = \322Height above ground\323;) 201.6 570.02 T
(height:units = \322km\323;) 201.6 559.02 T
(}) 144 548.02 T
0 12 Q
0.86 (In this CDL, the only observ) 126 523.02 P
0.86 (ation that is certain is that the virtual and height) 267.31 523.02 P
0.48 (\336elds ha) 126 509.02 P
0.48 (v) 166.57 509.02 P
0.48 (e 50 components along the) 172.39 509.02 P
5 F
1.14 (levels) 306.42 509.02 P
0 F
0.48 ( dimension. It is not necessarily) 349.62 509.02 P
2.36 (ob) 126 495.02 P
2.36 (vious that the heights of the virtual temperature v) 137.82 495.02 P
2.36 (alues are gi) 393.06 495.02 P
2.36 (v) 452.13 495.02 P
2.36 (en in the) 457.95 495.02 P
1.29 (height \336eld for each coordinate in) 126 481.02 P
5 F
3.09 (levels) 299.03 481.02 P
0 F
1.29 (. Further confusion is possible if) 342.23 481.02 P
0.65 (more \336elds are added, such as) 126 467.02 P
4 F
0.65 (pr) 276.89 467.02 P
0.65 (es \050time) 287.11 467.02 P
0.65 (, le) 325.3 467.02 P
0.65 (vels\051) 340.44 467.02 P
0 F
0.65 (. Hence it is advisable to use) 363.1 467.02 P
0.5 (the coordinate v) 126 453.02 P
0.5 (ariable con) 204.02 453.02 P
0.5 (v) 257.02 453.02 P
0.5 (ention whene) 262.84 453.02 P
0.5 (v) 327.36 453.02 P
0.5 (er possible to reduce the ambiguity) 333.18 453.02 P
(of the dataset\325) 126 439.02 T
(s description.) 193.32 439.02 T
2 F
(6.4.3) 90.31 407.02 T
(De\336ning a Static Field) 126 407.02 T
0 F
-0.07 (No) 126 389.02 P
-0.07 (w suppose that the pro\336ler in the \336rst and second e) 140.36 389.02 P
-0.07 (xamples produces virtual) 383.49 389.02 P
1.13 (readings at \336x) 126 375.02 P
1.13 (ed heights for e) 196.06 375.02 P
1.13 (v) 273.46 375.02 P
1.13 (ery time sample. In other w) 279.28 375.02 P
1.13 (ords, the \322height\323) 416.76 375.02 P
-0.28 (v) 126 361.02 P
-0.28 (alues will not change o) 131.7 361.02 P
-0.28 (v) 241.03 361.02 P
-0.28 (er time. The height \336eld is not time-dependent, so it is) 246.85 361.02 P
-0.01 (inaccurate to gi) 126 347.02 P
-0.01 (v) 199.66 347.02 P
-0.01 (e the height \336eld a time dimension. Also, a great deal of space) 205.48 347.02 P
0.98 (is w) 126 333.02 P
0.98 (asted by storing the same 50 heights for e) 146.52 333.02 P
0.98 (v) 353.35 333.02 P
0.98 (ery sample in a data \336le. The) 359.17 333.02 P
2.13 (N-) 126 319.02 P
2.13 (space interf) 138.66 319.02 P
2.13 (ace addresses this issue by allo) 196.32 319.02 P
2.13 (wing \336elds to be speci\336ed as) 355 319.02 P
-0.3 (static [see Section) 126 305.02 P
-0.3 (6.1.3]. The code which de\336nes the \322height\323 v) 215.05 305.02 P
-0.3 (ariable as static) 430.62 305.02 P
0.64 (using) 126 291.02 P
5 F
1.54 (dc_NSDefineVariable\050\051) 155.64 291.02 P
0 F
0.64 ( looks e) 306.84 291.02 P
0.64 (xactly lik) 345.28 291.02 P
0.64 (e the code in the pre) 390.8 291.02 P
0.64 (vi-) 490.67 291.02 P
1.56 (ous e) 126 277.02 P
1.56 (xample, e) 152.38 277.02 P
1.56 (xcept the) 200.41 277.02 P
5 F
3.74 (is_static) 250.18 277.02 P
0 F
1.56 ( parameter is passed as) 314.98 277.02 P
5 F
3.74 (TRUE) 435.75 277.02 P
0 F
1.56 (. So the) 464.55 277.02 P
5 F
(dc_NSDefineField\050\051) 126 263.02 T
0 F
( call becomes) 255.6 263.02 T
5 9 Q
(dc_NSDefineField \050dc, hfld, 1, dim_names, dim_sizes, TRUE\051;) 144 240.02 T
0 12 Q
(and the call to) 126 215.02 T
5 F
(dc_NSDefineVariable\050\051) 196.66 215.02 T
0 F
( becomes) 347.86 215.02 T
5 9 Q
(dc_NSDefineVariable \050dc, hfld, 1, &hlfd, TRUE\051;) 144 192.02 T
0 12 Q
(The resulting CDL looks lik) 126 167.02 T
(e this:) 261.22 167.02 T
5 9 Q
(netcdf example {) 144 144.02 T
(// using a coordinate variable) 235.8 144.02 T
(dimensions:) 144 133.02 T
(time = unlimited;) 172.8 122.02 T
(height = 50;) 172.8 111.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "75" 75
%%Page: "76" 76
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(76) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(variables:) 126 680.02 T
(float) 154.8 669.02 T
(virtual\050time,height\051;) 183.6 669.02 T
(virtual: long_name =) 183.6 658.02 T
(\322Virtual temperature\323;) 297 658.02 T
(virtual: units = \322K\323;) 183.6 647.02 T
(float) 154.8 636.02 T
(height\050height\051;) 183.6 636.02 T
(height: long_name = \322Height above ground\323;) 183.6 625.02 T
(height: units = \322km\323;) 183.6 614.02 T
(}) 126 603.02 T
0 12 Q
0.05 (The shape of the data clearly sho) 108 578.02 P
0.05 (ws that the heights of the virtual temperatures) 265.98 578.02 P
0.64 (are \336x) 108 564.02 P
0.64 (ed o) 138.79 564.02 P
0.64 (v) 159.58 564.02 P
0.64 (er all of the samples in the \336le. There are 50 heights stored in the) 165.4 564.02 P
(\336le, and these heights are v) 108 550.02 T
(alid for e) 238.34 550.02 T
(v) 281.36 550.02 T
(ery sample.) 287.18 550.02 T
0.15 (Only the) 108 524.02 P
5 F
0.35 (height) 152.96 524.02 P
0 F
0.15 ( v) 196.16 524.02 P
0.15 (ariable is static,) 205 524.02 P
5 F
0.35 (virtual) 283.43 524.02 P
0 F
0.15 ( is de\336ned as before and retains) 333.83 524.02 P
1.45 (its time dimension. An) 108 510.02 P
1.45 (y number of static and dynamic \336elds may be mix) 221.51 510.02 P
1.45 (ed) 474.67 510.02 P
3.63 (together in an N-space de\336nition. The dynamic \336elds will automatically) 108 496.02 P
-0.13 (include the time, or \322sample\323, dimension, and the) 108 482.02 P
-0.13 (y can accept data for a partic-) 344.86 482.02 P
0.62 (ular sample. Static \336elds ha) 108 468.02 P
0.62 (v) 242.56 468.02 P
0.62 (e no temporal dimension, and hence the N-space) 248.38 468.02 P
0.42 (interf) 108 454.02 P
0.42 (ace does not allo) 133.87 454.02 P
0.42 (w data for static \336elds to be associated with a particular) 215.16 454.02 P
(time or sample. See Section) 108 440.02 T
(6.2.6 for the precise interf) 244.66 440.02 T
(ace.) 369.17 440.02 T
2 F
(6.4.4) 72.31 408.02 T
(Mixing Static and Sampled Data) 108 408.02 T
0 F
-0.05 (The ne) 108 390.02 P
-0.05 (xt e) 140.76 390.02 P
-0.05 (xample constructs an N-) 158.2 390.02 P
-0.05 (space DataChunk containing tw) 275.04 390.02 P
-0.05 (o \336elds, one) 427.76 390.02 P
1.16 (static and the other dynamic, each o) 108 376.02 P
1.16 (v) 287.05 376.02 P
1.16 (er the same tw) 292.87 376.02 P
1.16 (o dimensions. This code) 365.87 376.02 P
1.51 (uses the) 108 362.02 P
5 F
3.62 (dc_NSDefineField\050\051) 152.35 362.02 P
0 F
1.51 ( function to de\336ne a \336eld and its dimen-) 281.95 362.02 P
2.82 (sions simultaneously) 108 348.02 P
2.82 (. In the second call to) 210.38 348.02 P
5 F
6.76 (dc_NSDefineField\050\051) 332.92 348.02 P
0 F
2.82 (, the) 462.52 348.02 P
0.52 (dimensions are already de\336ned, so the interf) 108 334.02 P
0.52 (ace implicitly assumes the identi-) 323.27 334.02 P
0.7 (cal names refer to the pre) 108 320.02 P
0.7 (viously de\336ned dimensions, and silently ignores the) 232.81 320.02 P
0.02 (dimensions which are identical to their e) 108 306.02 P
0.02 (xisting de\336nitions. If a dimension size) 302.57 306.02 P
1.3 (speci\336ed in the second call disagreed with the e) 108 292.02 P
1.3 (xisting de\336nition, a w) 346.87 292.02 P
1.3 (arning) 455.34 292.02 P
-0 (message w) 108 278.02 P
-0 (ould be produced and the dimension w) 160.2 278.02 P
-0 (ould be re-de\336ned to the ne) 346.02 278.02 P
-0 (w) 477.34 278.02 P
-0.01 (size. The code includes e) 108 264.02 P
-0.01 (xamples of both storing and retrie) 228.08 264.02 P
-0.01 (ving data. The CDL) 390.04 264.02 P
(description of the dataset follo) 108 250.02 T
(ws the code.) 253.68 250.02 T
5 9 Q
(DataChunk *dc;) 126 227.02 T
(float *retrieve;) 126 216.02 T
(FieldId field, sfield;) 126 205.02 T
(char *dim_names[2];) 126 194.02 T
(unsigned long dim_sizes[2];) 126 183.02 T
(ZebTime when;) 126 172.02 T
(float test_data[5000];) 126 161.02 T
(/*) 126 139.02 T
( * Set-up the name and size arrays for the dimensions) 126 128.02 T
( */) 126 117.02 T
(dim_names[0] = \322x\323;) 126 106.02 T
(dim_names[1] = \322y\323;) 126 95.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "76" 76
%%Page: "77" 77
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Examples) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (77) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(dim_sizes[0] = 50;) 144 680.02 T
(dim_sizes[1] = 25;) 144 669.02 T
(/*) 144 647.02 T
( * Declare the fields and obtain the FieldId\325s) 144 636.02 T
( */) 144 625.02 T
(field = F_DeclareField \050\322curl\323, \323Long name\323, \323units\323\051;) 144 614.02 T
(sfield = F_DeclareField \050\322static_curl\323, \323Long name\323, \323units\323\051;) 144 603.02 T
(/*) 144 581.02 T
( * Create and define our datachunk, sfield is static) 144 570.02 T
( */) 144 559.02 T
(dc = dc_CreateDC \050DCC_NSpace\051;) 144 548.02 T
(dc->dc_Platform = ds_LookupPlatform\050\322platform\323\051;) 144 537.02 T
(dc_NSDefineField \050dc, field, 2, dim_names, dim_sizes, FALSE\051;) 144 526.02 T
(dc_NSDefineField \050dc, sfield, 2, dim_names, dim_sizes, TRUE\051;) 144 515.02 T
(/*) 144 493.02 T
( * Add some data) 144 482.02 T
( */) 144 471.02 T
(dc_NSAddSample \050dc, &when, 0, field, test_data\051;) 144 460.02 T
(dc_NSAddStatic \050dc, sfield, test_data\051;) 144 449.02 T
(dc_NSAddSample \050dc, &when, 1, field, test_data+100\051;) 144 438.02 T
(/*) 144 416.02 T
( *Locate the data) 144 405.02 T
( */) 144 394.02 T
(retrieve = dc_NSGetStatic \050dc, field, &size\051;) 144 383.02 T
(retrieve = dc_NSGetSample \050dc, 1, field, &size\051;) 144 372.02 T
0 12 Q
(And no) 126 347.02 T
(w for the description of the dataset using CDL notation:) 161.36 347.02 T
5 9 Q
(netcdf example {) 144 324.02 T
(dimensions:) 144 313.02 T
(time = unlimited;) 172.8 302.02 T
(x = 50;) 172.8 291.02 T
(y = 25;) 172.8 280.02 T
(variables:) 144 258.02 T
(float) 172.8 247.02 T
(curl\050time,x,y\051;) 201.6 247.02 T
(curl:long_name = \322Long name\323;) 201.6 236.02 T
(curl:units = \322units\323;) 201.6 225.02 T
(float) 172.8 214.02 T
(static_curl\050x,y\051;) 201.6 214.02 T
(static_curl:long_name = \322Long name\323;) 201.6 203.02 T
(static_curl:units = \322units\323;) 201.6 192.02 T
(}) 144 181.02 T
2 12 Q
(6.4.5) 90.31 150.02 T
(De\336ning Dimensions Explicitl) 126 150.02 T
(y) 294.53 150.02 T
(, and Ad) 300.24 150.02 T
(ding Data) 347.46 150.02 T
0 F
1.08 (The ne) 126 132.02 P
1.08 (xt e) 159.89 132.02 P
1.08 (xample e) 178.45 132.02 P
1.08 (xplicitly de\336nes each dimension with its o) 223.01 132.02 P
1.08 (wn) 431.86 132.02 P
5 F
2.59 (FieldId) 450.6 132.02 P
0 F
1.08 (.) 501 132.02 P
0.49 (One of the \336elds serv) 126 118.02 P
0.49 (es as a coordinate v) 230.44 118.02 P
0.49 (ariable for the other \336elds, and since) 326.08 118.02 P
0.49 (this \336eld does not change o) 126 104.02 P
0.49 (v) 259.28 104.02 P
0.49 (er time, it is de\336ned as static. The data are added) 265.1 104.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "77" 77
%%Page: "78" 78
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(78) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
7.6 (using the) 108 678.02 P
5 F
18.25 (dc_NSAddStatic\050\051) 169.87 678.02 P
0 F
7.6 ( function for the static \336elds and) 285.07 678.02 P
5 F
2.2 (dc_NSAddSample\050\051) 108 664.02 P
0 F
0.92 ( for dynamic data. Note that the static data need only) 223.2 664.02 P
0.81 (be stored once. When static data are added for a \336eld, the data o) 108 650.02 P
0.81 (v) 425.24 650.02 P
0.81 (erwrite an) 431.06 650.02 P
0.81 (y) 480 650.02 P
(data pre) 108 636.02 T
(viously stored for that \336eld.) 146.02 636.02 T
5 9 Q
(DataChunk *dc;) 126 613.02 T
(ZebTime when;) 126 602.02 T
(float test_data[7000];) 126 591.02 T
(FieldId wnum_id, therm_id;) 126 580.02 T
(FieldId mean_rad_id, sd_rad_id;) 126 569.02 T
(FieldId *fields;) 126 558.02 T
(int nfield;) 126 547.02 T
(dc = dc_CreateDC\050DCC_NSpace\051;) 126 525.02 T
(dc->dc_Platform = ds_LookupPlatform\050\322aeri\323\051;) 126 514.02 T
(/*) 126 492.02 T
( * Define a dimension and a field with the same) 126 481.02 T
(FieldId) 385.2 481.02 T
( */) 126 470.02 T
(wnum_id = F_DeclareField\050\322wnum\323, \323Wave Number\323,) 126 459.02 T
(\3231 / cm\323\051;) 385.2 459.02 T
(dc_NSDefineDimension\050dc, wnum_id, 6224\051;) 126 448.02 T
(dc_NSDefineVariable\050dc, wnum_id, 1, &wnum_id,) 126 437.02 T
(/*is_static*/TRUE\051;) 374.4 437.02 T
(mean_rad_id = F_DeclareField\050\322mean_rad\323,) 126 426.02 T
(\322Mean of Radiance spectra ensemble\323,) 212.4 415.02 T
(\322mW / m^2 sr 1 / cm\323\051;) 212.4 404.02 T
(dc_NSDefineVariable\050dc, mean_rad_id, 1, &wnum_id,) 126 393.02 T
(FALSE\051;) 396 393.02 T
(sd_rad_id = F_DeclareField\050\322standard_dev_rad\323,) 126 382.02 T
(\322standard deviation for Radiance spectra ensemble\323,) 154.8 371.02 T
(\3221/cm\323\051;) 435.6 371.02 T
(dc_NSDefineVariable\050dc, sd_rad_id, 1, &wnum_id, FALSE\051;) 126 360.02 T
(/*) 126 338.02 T
( * The thermistor field is a single scalar per sample,) 126 327.02 T
( * so it is defined with zero dimensions. The temporal) 126 316.02 T
( * dimension is implied since is_static parameter is FALSE.) 126 305.02 T
( */) 126 294.02 T
(therm_id = F_DeclareField\050\322thermistor1\323,) 126 283.02 T
(\322Long name for thermistor\323,) 212.4 272.02 T
(\322units\323\051;) 363.6 272.02 T
(dc_NSDefineVariable\050dc, therm_id, 0, NULL, FALSE\051;) 126 261.02 T
(/* Definition will be closed when data added */) 126 239.02 T
(dc_NSAddSample \050dc, &begin, 0, therm_id, test_data\051;) 126 228.02 T
(dc_NSAddSample \050dc, &begin, 0, mean_rad_id,) 126 217.02 T
(test_data\051;) 363.6 217.02 T
(dc_NSAddSample \050dc, &begin, 0, sd_rad_id, test_data\051;) 126 206.02 T
(dc_NSAddSample \050dc, &end, 1, therm_id, test_data+100\051;) 126 184.02 T
(dc_NSAddSample \050dc, &end, 1, mean_rad_id,) 126 173.02 T
(test_data+100\051;) 352.8 173.02 T
(dc_NSAddSample \050dc, &end, 1, sd_rad_id,) 126 162.02 T
(test_data+100\051;) 342 162.02 T
(dc_NSAddStatic \050dc, wnum_id, test_data+50\051;) 126 151.02 T
(/*) 126 129.02 T
( * Use a DCC_MetData method to get a list of fields) 126 118.02 T
( */) 126 107.02 T
(fields = dc_GetFields \050dc, &nfield\051;) 126 96.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "78" 78
%%Page: "79" 79
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Examples) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (79) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(dc_DestroyDC \050dc\051;) 144 680.02 T
0 12 Q
(The corresponding CDL looks lik) 126 655.02 T
(e this:) 287.87 655.02 T
5 9 Q
(netcdf example {) 144 632.02 T
(dimensions:) 144 621.02 T
(time = unlimited; // \0502 currently\051) 172.8 610.02 T
(wnum = 6224,) 172.8 599.02 T
(variables:) 144 577.02 T
(float) 172.8 566.02 T
(wnum\050wnum\051;) 201.6 566.02 T
(wnum:long_name = \322Wave Number\323;) 201.6 555.02 T
(wnum:units = \3221 / cm\323;) 201.6 544.02 T
(float) 172.8 533.02 T
(mean_rad\050time,wnum\051;) 201.6 533.02 T
(mean_rad:long_name = \322Mean of Radiance spectra ensemble\323;) 201.6 522.02 T
(mean_rad:units =) 201.6 511.02 T
(\322mW / m^2 sr 1 / cm\323;) 293.4 511.02 T
(float) 172.8 500.02 T
(standard_dev_rad\050time,wnum\051) 201.6 500.02 T
(standard_dev_rad:long_name =) 201.6 489.02 T
(   \322standard deviation for Radiance spectra ensemble\323;) 172.8 478.02 T
(standard_dev_rad:units = \3221/cm\323;) 201.6 467.02 T
(// Note the definition of a field with only the) 144 456.02 T
(// temporal dimension) 144 445.02 T
(float) 172.8 434.02 T
(thermistor1\050time\051;) 201.6 434.02 T
(thermistor1:long_name = \322Long name for thermistor\323;) 201.6 423.02 T
(thermistor1:units = \322units\323;) 201.6 412.02 T
(}) 144 401.02 T
2 12 Q
(6.4.6) 90.31 370.02 T
(Zer) 126 370.02 T
(o-Dimensional Data) 144.43 370.02 T
0 F
1.06 (The N-space interf) 126 352.02 P
1.06 (ace allo) 217.96 352.02 P
1.06 (ws an) 255.7 352.02 P
1.06 (y \336eld, static or dynamic, to be de\336ned with) 284.23 352.02 P
-0.13 (zero dimensions. This means a dynamic \336eld has no non-temporal coordinates.) 126 338.02 P
0.69 (If the \336eld is static, the \336eld has no dimensions at all. The entire DataChunk,) 126 324.02 P
0.14 (and e) 126 310.02 P
0.14 (v) 151.49 310.02 P
0.14 (en the entire data \336le, contain only one v) 157.31 310.02 P
0.14 (alue for that \336eld. If the \336eld is) 353.73 310.02 P
-0.19 (dynamic, then each sample contains just one v) 126 296.02 P
-0.19 (alue for the \336eld. Dynamic \336elds) 346.98 296.02 P
3.85 (de\336ned with zero N-space dimensions are analogous to the data in the) 126 282.02 P
5 F
1.44 (DCC_Scalar) 126 268.02 P
0 F
0.6 ( class\321one \337oating point v) 198 268.02 P
0.6 (alue per \336eld per sample. The code) 332.11 268.02 P
3.59 (belo) 126 254.02 P
3.59 (w de\336nes tw) 146.36 254.02 P
3.59 (o \336elds with zero dimensions: one static \336eld and one) 214.08 254.02 P
(dynamic \336eld.) 126 240.02 T
5 9 Q
(DataChunk *dc;) 144 222.02 T
(FieldId pi, rainr;) 144 211.02 T
(dc = dc_CreateDC \050DCC_NSpace\051;) 144 189.02 T
(dc->dc_Platform = ds_LookupPlatform \050\322constants\323\051;) 144 178.02 T
(pi = F_DeclareField \050\322pi\323, \322Circumference/Diameter\323, \322none\323\051;) 144 156.02 T
(rainr = F_DeclareField \050\322rainr\323, \322Rainrate\323, \322mm/hr\323\051;) 144 145.02 T
(dc_NSDefineField \050dc, pi, 0, NULL, NULL, TRUE\051;) 144 134.02 T
(dc_NSDefineField \050dc, rainr, 0, NULL, NULL, FALSE\051;) 144 123.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "79" 79
%%Page: "80" 80
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(80) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.54 (The \336eld) 108 678.02 P
5 F
3.69 (pi) 157.07 678.02 P
0 F
1.54 ( is de\336ned with) 171.48 678.02 P
5 F
3.69 (is_static) 254.3 678.02 P
3.69 (TRUE) 323.64 678.02 P
0 F
1.54 (, so there will be only one) 352.44 678.02 P
-0.05 (v) 108 664.02 P
-0.05 (alue of) 113.7 664.02 P
5 F
-0.13 (pi) 149.58 664.02 P
0 F
-0.05 ( stored in the DataChunk and data \336le. The) 163.98 664.02 P
5 F
-0.13 (rainrate) 372.81 664.02 P
0 F
-0.05 ( \336eld v) 430.41 664.02 P
-0.05 (aries) 463.34 664.02 P
0.31 (o) 108 650.02 P
0.31 (v) 113.82 650.02 P
0.31 (er time, b) 119.64 650.02 P
0.31 (ut since there is a single scalar v) 165.68 650.02 P
0.31 (alue per sample, it is de\336ned with) 322.5 650.02 P
0.08 (zero dimensions in the call to) 108 636.02 P
5 F
0.19 (dc_NSDefineField\050\051) 252.46 636.02 P
0 F
0.08 (. The CDL header for) 382.06 636.02 P
(the \336le appears belo) 108 622.02 T
(w:) 204.01 622.02 T
5 9 Q
(netcdf example {) 126 599.02 T
(// zero-dimensional fields) 217.8 599.02 T
(dimensions:) 126 588.02 T
(time = unlimited;) 154.8 577.02 T
(variables:) 126 555.02 T
(float) 154.8 544.02 T
(pi;) 183.6 544.02 T
(pi:long_name = \322Circumference/Diameter\323;) 183.6 533.02 T
(pi:units = \322none\323;) 183.6 522.02 T
(float) 154.8 511.02 T
(rainr\050time\051;) 183.6 511.02 T
(rainr:long_name = \322Rainrate\323;) 183.6 500.02 T
(rainr:units = \322mm/hr\323;) 183.6 489.02 T
(}) 126 478.02 T
2 12 Q
(6.4.7) 72.31 447.02 T
(Going f) 108 447.02 T
(or Comple) 149.76 447.02 T
(xity) 208.92 447.02 T
0 F
1.49 (The last e) 108 429.02 P
1.49 (xample combines se) 157.46 429.02 P
1.49 (v) 257.46 429.02 P
1.49 (eral of the possible dataset shapes\321man) 263.28 429.02 P
1.49 (y of) 465.51 429.02 P
0.78 (which were sho) 108 415.02 P
0.78 (wn in pre) 184.57 415.02 P
0.78 (vious e) 231.16 415.02 P
0.78 (xamples\321into one comple) 266.1 415.02 P
0.78 (x N-) 396.8 415.02 P
0.78 (space dataset.) 419.24 415.02 P
1.49 (F) 108 401.02 P
1.49 (or the sak) 114.49 401.02 P
1.49 (e of bre) 164 401.02 P
1.49 (vity) 203.32 401.02 P
1.49 (, the v) 221.22 401.02 P
1.49 (ariable attrib) 253.55 401.02 P
1.49 (utes are not included in the corre-) 315.79 401.02 P
-0.04 (sponding CDL. Bear in mind that this e) 108 387.02 P
-0.04 (xample does not attempt to sho) 296.9 387.02 P
-0.04 (w a sen-) 446.09 387.02 P
1.43 (sible combination, b) 108 373.02 P
1.43 (ut only what is possible. Also note that this code is not) 208.28 373.02 P
2.31 (written to be rob) 108 359.02 P
2.31 (ust. There are no checks for error conditions, and in this) 194.33 359.02 P
(respect the code should not be tak) 108 345.02 T
(en as a model for most applications.) 270.52 345.02 T
5 9 Q
(DataChunk *dc;) 126 327.02 T
(FieldId u_wind_id, v_wind_id w_wind_id;) 126 316.02 T
(FieldId ref_id, azimuth_id, elev_id;) 126 305.02 T
(FieldId dpt_id, tdry_id, cal_id;) 126 294.02 T
(FieldId avg_wspd_id, avg_wdir_id;) 126 283.02 T
(char *grid_dim_names[] = { \322x\323, \322y\323, \322z\323 };) 126 272.02 T
(unsigned long grid_dim_sizes[] = { 40, 50, 30 };) 126 261.02 T
(char *range_name[] = { \322range\323 };) 126 250.02 T
(unsigned long range_size[] = { 1000 };) 126 239.02 T
(FieldId dim_ids[3];) 126 228.02 T
(/*) 126 206.02 T
( * Create the DataChunk, set the PlatformId, and set the bad value) 126 195.02 T
( */) 126 184.02 T
(dc = dc_CreateDC\050DCC_NSpace\051;) 126 173.02 T
(dc->dc_Platform = ds_LookupPlatform\050\322kitchen_sink\323\051;) 126 162.02 T
(dc_SetBadval\050dc, -99999\051;) 126 151.02 T
(/*) 126 129.02 T
( * Define a volume of 3-D wind vectors. Each component) 126 118.02 T
(is one) 423 118.02 T
( * scalar) 126 107.02 T
(field dimensioned over the entire) 180 107.02 T
(3-D grid.) 363.6 107.02 T
( */) 126 96.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "80" 80
%%Page: "81" 81
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Examples) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (81) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(u_wind_id = F_DeclareField\050\322u_wind\323,) 144 680.02 T
(\323Westerly wind\323,\323m/s\323\051;) 343.8 680.02 T
(v_wind_id = F_DeclareField\050\322v_wind\323,) 144 669.02 T
(\323Southerly wind\323,\323m/s\323\051;) 343.8 669.02 T
(w_wind_id = F_DeclareField\050\322w_wind\323,) 144 658.02 T
(\323Vertical wind\323,\323m/s\323\051;) 343.8 658.02 T
(dc_NSDefineField\050dc, u_wind_id, 3, grid_dim_names,) 144 647.02 T
( grid_dim_sizes, FALSE\051;) 201.6 636.02 T
(dc_NSDefineField\050dc, v_wind_id, 3, grid_dim_names,) 144 625.02 T
( grid_dim_sizes, FALSE\051;) 201.6 614.02 T
(dc_NSDefineField\050dc, w_wind_id, 3, grid_dim_names,) 144 603.02 T
( grid_dim_sizes, FALSE\051;) 201.6 592.02 T
(/*) 144 570.02 T
( * Store an origin for the grid. We\325ll do it two ways: one field for) 144 559.02 T
( * each coordinate, and one field for all three coordinates. Note that) 144 548.02 T
( * for both ways, all fields are static, meaning the grid is) 144 537.02 T
( * stationary and the origin is valid over all the grid samples in the) 144 526.02 T
( * DataChunk.) 144 515.02 T
( * Of the two, the first is recommended as it is a little less) 144 504.02 T
( * ambiguous. First, the first way:) 144 493.02 T
( */) 144 482.02 T
(dc_NSDefineField\050dc, F_DeclareField\050\322grid_lat\323,\323Grid latitude\323,) 144 471.02 T
(\322degrees\323\051, 0, NULL, NULL, TRUE\051;) 201.6 460.02 T
(dc_NSDefineField\050dc, F_DeclareField\050\322grid_lon\323,\323Grid longitude\323,) 144 449.02 T
(\323degrees\323\051, 0, NULL, NULL, TRUE\051;) 201.6 438.02 T
(dc_NSDefineField\050dc, F_DeclareField\050\322grid_alt\323,\323Grid altitude\323,) 144 427.02 T
(\323km\323\051, 0, NULL, NULL, TRUE\051;) 201.6 416.02 T
(/*) 144 405.02 T
( * And now the second way:) 144 394.02 T
( */) 144 383.02 T
({) 144 372.02 T
(char *orig_dimn = \322components\323;) 172.8 361.02 T
(unsigned long orig_size = 3;) 172.8 350.02 T
(dc_NSDefineField\050dc,F_DeclareField\050\322grid_origin\323,) 172.8 328.02 T
(\322Grid lat, lon, and alt\323,\323deg, deg, km\323\051,) 201.6 317.02 T
(1, &orig_dimn, &orig_size, TRUE\051;) 201.6 306.02 T
(}) 144 295.02 T
(/*) 144 273.02 T
( * Define some more static fields containing statistical info:) 144 262.02 T
( * averages over all the samples in the DataChunk.) 144 251.02 T
( */) 144 240.02 T
(avg_wspd_id = F_DeclareField \050\322avg_wspd\323,\323Average wind speed\323,\323m/s\323\051;) 144 229.02 T
(avg_wdir_id = F_DeclareField \050\322avg_wdir\323, \322Average wind) 144 218.02 T
(direction\323,) 446.4 218.02 T
( \323degrees\323\051;) 259.2 207.02 T
(dc_NSDefineField \050dc, avg_wspd_id, 3, grid_dim_names,) 144 196.02 T
(grid_dim_sizes, TRUE\051;) 230.4 185.02 T
(dc_NSDefineField \050dc, avg_wdir_id, 3, grid_dim_names,) 144 174.02 T
(grid_dim_sizes, TRUE\051;) 230.4 163.02 T
(/*) 144 141.02 T
( * Give our radar dimensions FieldIds) 144 130.02 T
( */) 144 119.02 T
(azimuth_id = F_DeclareField\050\322azimuth\323,\323Azimuth of radar beam\323,) 144 108.02 T
( \322degrees\323\051;) 230.4 97.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "81" 81
%%Page: "82" 82
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(82) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(elev_id = F_DeclareField\050\322elev\323,\323Elevation of radar beam\323,) 126 680.02 T
( \322degrees\323\051;) 212.4 669.02 T
(range_id = F_DeclareField\050\322range\323,\323Coordinate along beam\323,) 126 658.02 T
( \322none\323\051;) 212.4 647.02 T
(/*) 126 636.02 T
( * Define the three dimensions of our radar volume) 126 625.02 T
( */) 126 614.02 T
(dc_NSDefineDimension\050dc, azimuth_id, 360\051;) 126 603.02 T
(dc_NSDefineDimension\050dc, elev_id, 45\051;) 126 592.02 T
(dc_NSDefineDimension\050dc, range_id, 1000\051;) 126 581.02 T
(dim_ids[0] = azimuth_id;) 126 570.02 T
(dim_ids[1] = elev_id;) 126 559.02 T
(dim_ids[2] = range_id;) 126 548.02 T
(ref_id = F_DeclareField\050\322reflectivity\323,\323Radar reflectivity\323,\323dbz\323\051;) 126 537.02 T
(dc_NSDefineVariable\050dc, ref_id, 3, dim_ids, FALSE\051;) 126 526.02 T
(/*) 126 504.02 T
( * Note that though we defined all three dimensions explicitly) 126 493.02 T
( * and gave them FieldId\325s for use in the above call to) 126 482.02 T
( * dc_NSDefineVariable\050\051, only azimuth and elevation will) 126 471.02 T
( * actually be indirectly indexed via coordinate variables.) 126 460.02 T
( */) 126 449.02 T
(dc_NSDefineVariable\050dc, azimuth_id, 1, &azimuth_id, FALSE\051;) 126 438.02 T
(dc_NSDefineVariable\050dc, elev_id, 1, &elev_id, FALSE\051;) 126 427.02 T
(/*) 126 405.02 T
( * Since not all volume coordinates may be valid for every volume) 126 394.02 T
( * time, three more variables are needed to record the valid) 126 383.02 T
( * number for each volume sample. The name is the dimension name) 126 372.02 T
( * prepended with \324n_\325.) 126 361.02 T
( */) 126 350.02 T
(dc_NSDefineVariable\050dc, F_DeclareField\050\322n_azimuth\323,) 126 339.02 T
(\322Number azimuths stored per sample\323,\323none\323\051,) 183.6 328.02 T
( 0, 0, FALSE\051;) 183.6 317.02 T
(dc_NSDefineVariable\050dc, F_DeclareField\050\322n_elev\323,) 126 306.02 T
(\322Number elevations stored per sample\323,\323none\323\051,) 183.6 295.02 T
( 0, 0, FALSE\051;) 183.6 284.02 T
(/*) 126 273.02 T
( * We want to specify the size of the range for a particular sample,) 126 262.02 T
( * azimuth, and elevation, hence we add those dimensions to \324n_range\325) 126 251.02 T
( */) 126 240.02 T
(dc_NSDefineVariable\050dc, F_DeclareField\050\322n_range\323,) 126 229.02 T
(\322Number ranges stored per sample\323,\323none\323\051,) 183.6 218.02 T
(2, dim_ids, FALSE\051;) 183.6 207.02 T
(/*) 126 196.02 T
( * Define some fields which use a dimension to differentiate) 126 185.02 T
( * between multiple instruments \050e.g. instrument types, backups\051.) 126 174.02 T
( */) 126 163.02 T
({) 126 152.02 T
(char *dim_name = \322instrument\323;) 154.8 141.02 T
(unsigned long dim_size = 5;) 154.8 130.02 T
(/* 5 different instruments */) 154.8 119.02 T
(dc_NSDefineField \050dc, F_Lookup\050\322tdry\323\051, &dim_name,) 154.8 108.02 T
( &dim_size, FALSE\051;) 212.4 97.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "82" 82
%%Page: "83" 83
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Examples) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (83) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(dc_NSDefineField \050dc, F_Lookup\050\322dpt\323\051, &dim_name,) 172.8 680.02 T
( &dim_size, FALSE\051;) 230.4 669.02 T
(}) 144 658.02 T
(/*) 144 647.02 T
( * A scalar time-series defined with zero \050non-temporal\051 dimensions) 144 636.02 T
( */) 144 625.02 T
(dc_NSDefineField \050dc, F_Lookup\050\322pres\323\051, 0, NULL, NULL, FALSE\051;) 144 614.02 T
(/*) 144 592.02 T
( * Last but not least, a calibration factor for the whole DataChunk,) 144 581.02 T
( * stored as a static value with zero dimensions.) 144 570.02 T
( */) 144 559.02 T
(dc_NSDefineField \050dc, F_Lookup\050\322calibration\323\051, 0, NULL, NULL, TRUE\051;) 144 548.02 T
(/*) 144 526.02 T
( * Just for the heck of it, explicitly close the definition.) 144 515.02 T
( */) 144 504.02 T
(dc_NSDefineComplete \050dc\051;) 144 493.02 T
(/*) 144 471.02 T
( * Nothing left to do now but add data...) 144 460.02 T
( */) 144 449.02 T
0 12 Q
0.34 (The CDL notation for the data structures de\336ned in the abo) 126 424.02 P
0.34 (v) 413.17 424.02 P
0.34 (e code, minus the) 418.99 424.02 P
(v) 126 410.02 T
(ariable attrib) 131.7 410.02 T
(utes:) 192.44 410.02 T
5 9 Q
(netcdf example {) 144 392.02 T
(dimensions:) 144 381.02 T
(time = unlimited;) 172.8 370.02 T
(x = 40, y = 50, z = 30;) 172.8 359.02 T
(components = 3;) 172.8 348.02 T
(azimuth = 360, elev = 45, range = 1000;) 172.8 337.02 T
(instrument = 5;) 172.8 326.02 T
(variables:) 144 304.02 T
(float) 172.8 293.02 T
(u_wind\050time,x,y,z\051;) 201.6 293.02 T
(float) 172.8 282.02 T
(v_wind\050time,x,y,z\051;) 201.6 282.02 T
(float) 172.8 271.02 T
(w_wind\050time,x,y,z\051;) 201.6 271.02 T
(float) 172.8 260.02 T
(grid_lat;) 201.6 260.02 T
(float) 172.8 249.02 T
(grid_lon;) 201.6 249.02 T
(float) 172.8 238.02 T
(grid_alt;) 201.6 238.02 T
(float) 172.8 227.02 T
(grid_origin\050components\051;) 201.6 227.02 T
(float) 172.8 216.02 T
(avg_wspd\050x,y,z\051;) 201.6 216.02 T
(float) 172.8 205.02 T
(avg_wdir\050x,y,z\051;) 201.6 205.02 T
(float) 172.8 194.02 T
(reflectivity\050time,azimuth,elev,range\051;) 201.6 194.02 T
(float) 172.8 183.02 T
(azimuth\050time,azimuth\051;) 201.6 183.02 T
(float) 172.8 172.02 T
(elev\050time,elev\051;) 201.6 172.02 T
(float) 172.8 161.02 T
(n_azimuth\050time\051;) 201.6 161.02 T
(float) 172.8 150.02 T
(n_elev\050time\051;) 201.6 150.02 T
(float) 172.8 139.02 T
(n_range\050time\051;) 201.6 139.02 T
(float) 172.8 128.02 T
(tdry\050time,instrument\051;) 201.6 128.02 T
(float) 172.8 117.02 T
(dpt\050time,instrument\051;) 201.6 117.02 T
(float) 172.8 106.02 T
(pres\050time\051;) 201.6 106.02 T
(float) 172.8 95.02 T
(calibration;) 201.6 95.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "83" 83
%%Page: "84" 84
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(84) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(}) 126 680.02 T
0 12 Q
0.99 (Ideally) 108 655.02 P
0.99 (, the counting v) 140.54 655.02 P
0.99 (ariables) 217.89 655.02 P
5 F
2.38 (n_azimuth) 259.2 655.02 P
0 F
0.99 (,) 324 655.02 P
5 F
2.38 (n_elev) 330.99 655.02 P
0 F
0.99 (, and) 373.41 655.02 P
5 F
2.38 (n_range) 401.73 655.02 P
0 F
0.99 ( w) 452.13 655.02 P
0.99 (ould) 464.66 655.02 P
0.79 (be netCDF inte) 108 641.02 P
0.79 (gers. Unfortunately) 182.73 641.02 P
0.79 (, this is not possible with the current Data-) 276.05 641.02 P
(Chunk interf) 108 627.02 T
(ace.) 168.88 627.02 T
54 584.02 540 586.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 584.02 540 586.02 R
7 X
0 0 0 1 0 0 0 K
V
54 585.02 99 585.02 2 L
0.5 H
2 Z
0 X
N
108 585.02 540 585.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(6.5) 82.32 590.02 T
(Internals and Implementation) 108 590.02 T
0 F
0.56 (The N-space code resides in the \336le) 108 566.02 P
5 F
1.35 (dc_NSpace.c) 286.23 566.02 P
0 F
0.56 (. The code is e) 365.43 566.02 P
0.56 (xtensi) 437.15 566.02 P
0.56 (v) 465.52 566.02 P
0.56 (ely) 471.34 566.02 P
0.82 (documented, and much of the implementation is carefully e) 108 552.02 P
0.82 (xplained there, as) 400.04 552.02 P
-0.27 (well as possible tar) 108 538.02 P
-0.27 (gets for impro) 198.63 538.02 P
-0.27 (v) 265.91 538.02 P
-0.27 (ement. This section gi) 271.73 538.02 P
-0.27 (v) 376.62 538.02 P
-0.27 (es a brief summary of) 382.44 538.02 P
0.32 (the implementation. None of the information in this section or in the ne) 108 524.02 P
0.32 (xt sec-) 454.02 524.02 P
0.05 (tion is required to ef) 108 510.02 P
0.05 (fecti) 205.23 510.02 P
0.05 (v) 226.25 510.02 P
0.05 (ely use the interf) 232.07 510.02 P
0.05 (ace outlined abo) 312.42 510.02 P
0.05 (v) 390.99 510.02 P
0.05 (e. Nor is the infor-) 396.81 510.02 P
1.56 (mation guaranteed to be accurate, since the underlying implementation may) 108 496.02 P
(change.) 108 482.02 T
2.31 (The N-space class maintains a single, \324master\325 auxiliary data entry \050ADE\051) 108 456.02 P
-0.25 (which holds the number of \336elds and dimensions, and a \337ag indicating whether) 108 442.02 P
0.11 (de\336nition has been completed. Each dimension is gi) 108 428.02 P
0.11 (v) 358.43 428.02 P
0.11 (en an ADE containing its) 364.25 428.02 P
0.17 (name, size, and the optional) 108 414.02 P
5 F
0.4 (FieldId) 245.8 414.02 P
0 F
0.17 (. The ADE is located in the DataChunk) 296.2 414.02 P
1.76 (by an inde) 108 400.02 P
1.76 (x assigned in the order the dimensions are de\336ned. Each \336eld is) 161.33 400.02 P
-0.13 (assigned its o) 108 386.02 P
-0.13 (wn ADE containing its) 172.1 386.02 P
5 F
-0.32 (FieldId) 284.89 386.02 P
0 F
-0.13 (, a static \337ag, and the indices of) 335.29 386.02 P
0.76 (the ADE\325) 108 372.02 P
0.76 (s of each of its dimensions. The \336eld ADE also holds an of) 154.42 372.02 P
0.76 (fset into) 446.24 372.02 P
0.3 (the ra) 108 358.02 P
0.3 (w DataChunk which points to an) 135.1 358.02 P
0.3 (y static data which ha) 294.06 358.02 P
0.3 (v) 398.99 358.02 P
0.3 (e been stored for) 404.81 358.02 P
(the \336eld.) 108 344.02 T
2.78 (T) 108 318.02 P
2.78 (o complete the de\336nition, all of the \336elds, both static and dynamic, are) 114.37 318.02 P
16.34 (de\336ned to the MetData class structure using MetData\325) 108 304.02 P
16.34 (s) 481.33 304.02 P
5 F
6.42 (dc_SetupFields\050\051) 108 290.02 P
0 F
2.68 (. [Section) 223.2 290.02 P
2.68 (4.1.1 on page) 274.87 290.02 P
2.68 (42.] This e) 347.88 290.02 P
2.68 (xplains wh) 404.71 290.02 P
2.68 (y the) 459.66 290.02 P
1.91 (MetData methods cannot be used with an N-space DataChunk until the N-) 108 276.02 P
-0.06 (space de\336nition has been completed. When completing the de\336nition, the sizes) 108 262.02 P
0.51 (of each of the \336elds are calculated from the sizes of each of their dimensions.) 108 248.02 P
0.53 (This ensures \336eld sizes are correct e) 108 234.02 P
0.53 (v) 284.16 234.02 P
0.53 (en if some dimensions or \336elds were re-) 289.98 234.02 P
0.96 (de\336ned before the de\336nition w) 108 220.02 P
0.96 (as closed. While the de\336nition is open, the N-) 259.02 220.02 P
-0.05 (space dump method will print the \336eld sizes calculated from the current de\336ni-) 108 206.02 P
(tions.) 108 192.02 T
-0.21 (The addition and retrie) 108 166.02 P
-0.21 (v) 216.71 166.02 P
-0.21 (al of dynamic \336eld data are essentially handled directly) 222.41 166.02 P
0.6 (by the MetData class methods. F) 108 152.02 P
0.6 (or static \336elds, the N-space methods allocate) 268.12 152.02 P
2.34 (ra) 108 138.02 P
2.34 (w DataChunk space and store the data directly) 117.14 138.02 P
2.34 (. Hence only the N-space) 355.68 138.02 P
(methods can store and retrie) 108 124.02 T
(v) 243 124.02 T
(e static data.) 248.82 124.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "84" 84
%%Page: "85" 85
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Comments) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (85) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 672.02 558 674.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 672.02 558 674.02 R
7 X
0 0 0 1 0 0 0 K
V
72 673.02 117 673.02 2 L
0.5 H
2 Z
0 X
N
126 673.02 558 673.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(6.6) 100.32 678.02 T
(Comments) 126 678.02 T
0 F
1.13 (A fe) 126 654.02 P
1.13 (w of the dra) 147.82 654.02 P
1.13 (wbacks of the N-space interf) 208.68 654.02 P
1.13 (ace must be mentioned, and so) 351.03 654.02 P
(the) 126 640.02 T
(y are mentioned belo) 140.48 640.02 T
(w) 241.16 640.02 T
(.) 249.05 640.02 T
2 F
(6.6.1) 90.31 608.02 T
(Hyper) 126 608.02 T
(slabs) 159.83 608.02 T
0 F
0.71 (Note that there is, as yet, no intention to include an equi) 126 590.02 P
0.71 (v) 401.83 590.02 P
0.71 (alent to the netCDF) 407.53 590.02 P
0.46 (interf) 126 576.02 P
0.46 (ace\325) 151.87 576.02 P
0.46 (s h) 171.19 576.02 P
0.46 (yperslab access in the N-space interf) 185.26 576.02 P
0.46 (ace. It could be easily imple-) 363.06 576.02 P
0.48 (mented by \336lling ne) 126 562.02 P
0.48 (w samples with) 223.47 562.02 P
5 F
1.15 (BadValue) 302.57 562.02 P
0 F
0.48 (s before storing h) 360.17 562.02 P
0.48 (yperslabs of) 445.2 562.02 P
0.56 (data \050v) 126 548.02 P
0.56 (ery similar to netCDF \324\336ll v) 159.37 548.02 P
0.56 (alues\325\051. Theoretically though, this is incor-) 296.22 548.02 P
1.79 (rect since the v) 126 534.02 P
1.79 (alues in a sample which were ne) 203.38 534.02 P
1.79 (v) 369.11 534.02 P
1.79 (er written via a h) 374.93 534.02 P
1.79 (yperslab) 463.34 534.02 P
1.65 (w) 126 520.02 P
1.65 (ould be missing rather than bad. Hyperslabs are described in the NetCDF) 134.54 520.02 P
(User\325) 126 506.02 T
(s Guide.) 151.99 506.02 T
2 F
(6.6.2) 90.31 474.02 T
(Static Data Whic) 126 474.02 T
(h Chang) 219.9 474.02 T
(e Between Files) 268.02 474.02 T
0 F
1.79 (Ev) 126 456.02 P
1.79 (en though static \336elds are de\336ned and forced to be static inside a single) 139.15 456.02 P
0.85 (DataChunk, there is no w) 126 442.02 P
0.85 (ay to enforce this across data \336les. One DataChunk) 251.59 442.02 P
-0.04 (may be written to one \336le at one time, while a second DataChunk may be writ-) 126 428.02 P
0.92 (ten to a second \336le at a dif) 126 414.02 P
0.92 (ferent time. Con\337ict and inconsistenc) 258.44 414.02 P
0.92 (y arise if the) 441.59 414.02 P
0.18 (data in the tw) 126 400.02 P
0.18 (o \336les are later read into the same DataChunk. There is currently) 191.41 400.02 P
0.36 (no w) 126 386.02 P
0.36 (ay to direct which \336le\325) 149.9 386.02 P
0.36 (s data tak) 259.32 386.02 P
0.36 (es precedence. So for the moment, appli-) 305.24 386.02 P
0.88 (cations which are fetching static \336elds across multiple \336les should be careful) 126 372.02 P
1.39 (about cases where the static \336eld data may actually dif) 126 358.02 P
1.39 (fer between the \336les.) 399.85 358.02 P
0.95 (The safest approach w) 126 344.02 P
0.95 (ould be to al) 236.35 344.02 P
0.95 (w) 298.73 344.02 P
0.95 (ays fetch DataChunks one \336le \050observ) 307.28 344.02 P
0.95 (a-) 494.68 344.02 P
(tion\051 at a time.) 126 330.02 T
72 287.02 558 289.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 287.02 558 289.02 R
7 X
0 0 0 1 0 0 0 K
V
72 288.02 117 288.02 2 L
0.5 H
2 Z
0 X
N
126 288.02 558 288.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(6.7) 100.32 293.02 T
(Quic) 126 293.02 T
(k Ref) 152.44 293.02 T
(erence) 181.66 293.02 T
0 F
0.29 (This section lists the prototypes of each of the N-Space interf) 126 269.02 P
0.29 (ace functions for) 422.77 269.02 P
(quick reference.) 126 255.02 T
5 9 Q
(void dc_NSDefineField \050DataChunk *dc, FieldId field, int ndims,) 144 232.02 T
(char **dimnames, unsigned long *dimsizes, int is_static\051;) 172.8 221.02 T
(void dc_NSDefineDimension \050DataChunk *dc, FieldId dimn,) 144 199.02 T
(unsigned long size\051;) 172.8 188.02 T
(void dc_NSDefineVariable \050DataChunk *dc, FieldId field,) 144 166.02 T
(int ndims, FieldId *dims, int is_static\051;) 172.8 155.02 T
(void dc_NSDefineComplete \050DataChunk *dc\051;) 144 133.02 T
(int dc_NSDefineIsComplete \050DataChunk *dc\051;) 144 111.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "85" 85
%%Page: "86" 86
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The N-space Class) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(86) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(int dc_NSGetAllDimensions \050DataChunk *dc, char **names,) 126 680.02 T
(FieldId *dimn_ids, unsigned long *sizes\051;) 154.8 669.02 T
(int dc_NSGetAllVariables \050DataChunk *dc, FieldId *fields, int *ndims\051;) 126 647.02 T
(int dc_NSGetField \050DataChunk *dc, FieldId field, int *ndims,) 126 625.02 T
(char **names, unsigned long *sizes, int *is_static\051;) 154.8 614.02 T
(int dc_NSGetDimension \050DataChunk *dc, FieldId dimn, char **name,) 126 592.02 T
(unsigned long *size\051;) 154.8 581.02 T
(int dc_NSGetVariable \050DataChunk *dc, FieldId field, int *ndims,) 126 559.02 T
(FieldId *dims, int *is_static\051;) 154.8 548.02 T
(int dc_NSIsStatic \050DataChunk *dc, FieldId field\051;) 126 526.02 T
(void dc_NSAddSample \050DataChunk *dc, ZebTime *when, int sample,) 126 504.02 T
(FieldId field, float *values\051;) 154.8 493.02 T
(void dc_NSAddMultSamples \050DataChunk *dc, ZebTime *when, int begin,) 126 471.02 T
(int nsample, FieldId field, void *values\051;) 154.8 460.02 T
(void dc_NSAddStatic \050DataChunk *dc, FieldId field, float *values\051;) 126 438.02 T
(float *dc_NSGetSample \050DataChunk *dc, int sample, FieldId field,) 126 416.02 T
(unsigned long *size\051;) 154.8 405.02 T
(float *dc_NSGetStatic \050DataChunk *dc, FieldId field,) 126 383.02 T
(unsigned long *size\051;) 154.8 372.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "86" 86
%%Page: "87" 87
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (87) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 7 \245) 126 677 S
0 24 Q
-0.48 (DataChunk Elements) 252 677 S
0 12 Q
0.11 (Ordinarily a data chunk only needs to store \337oating point data. Ho) 126 424 P
0.11 (we) 444.87 424 P
0.11 (v) 458.57 424 P
0.11 (er) 464.39 424 P
0.11 (, more) 473.23 424 P
-0.13 (and more cases ha) 126 410 P
-0.13 (v) 213 410 P
-0.13 (e arisen where data types other than \337oating point w) 218.82 410 P
-0.13 (ould be) 468.47 410 P
-0.17 (v) 126 396 P
-0.17 (ery useful, such as to sa) 131.82 396 P
-0.17 (v) 244.68 396 P
-0.17 (e space or to more accurately re\337ect the data types of) 250.5 396 P
-0.26 (the original data source. Consequently Zebra releases 4.0 and later include sup-) 126 382 P
-0.03 (port for typed, fundamental data v) 126 368 P
-0.03 (alues called) 289.53 368 P
4 F
-0.03 (elements) 348.79 368 P
0 F
-0.03 (. This chapter describes) 390.78 368 P
0.17 (data chunk elements and the basic frame) 126 354 P
0.17 (w) 321.32 354 P
0.17 (ork the) 329.87 354 P
0.17 (y pro) 363.52 354 P
0.17 (vide for handling multi-) 388.5 354 P
(ple, fundamental data types.) 126 340 T
72 297 558 299 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 297 558 299 R
7 X
0 0 0 1 0 0 0 K
V
72 298 117 298 2 L
0.5 H
2 Z
0 X
N
126 298 558 298 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(7.1) 100.32 303 T
(The Basics) 126 303 T
0 F
0.37 (Basically) 126 279 P
0.37 (, an element is a data v) 169.88 279 P
0.37 (alue of an) 281.45 279 P
0.37 (y of se) 329.33 279 P
0.37 (v) 361.77 279 P
0.37 (eral fundamental data types.) 367.59 279 P
1.84 (Elements are meant to be the absolute minimal le) 126 265 P
1.84 (v) 377.03 265 P
1.84 (el of resolution between) 382.85 265 P
-0.08 (data.) 126 251 P
0 9.6 Q
-0.06 (1) 148.99 255.8 P
0 12 Q
-0.08 ( The set of element types includes equi) 153.79 251 P
-0.08 (v) 339.9 251 P
-0.08 (alents for each of the types in the) 345.6 251 P
7.37 (C programming language as well a couple of unique types. The) 126 237 P
5 F
3.7 (DataStore.h) 126 223 P
0 F
1.54 ( header \336le includes all of the structures, enumerated types,) 205.2 223 P
(and function prototypes necessary for using the elements interf) 126 209 T
(ace.) 427.82 209 T
2 F
(7.1.1) 90.31 177 T
(The Fundamental T) 126 177 T
(ypes) 235.3 177 T
0 F
(The enumerated type) 126 159 T
5 F
(DC_ElemType) 230.3 159 T
0 F
( speci\336es the type of a data element.) 309.5 159 T
72 110.98 558 140.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 118.98 270 118.98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(1.) 126 104.98 T
0 12 Q
(Lik) 137.25 104.98 T
(e the classical de\336nition of the atom as the particle of matter which could not be) 153.8 104.98 T
(di) 126 94.98 T
(vided mechanically an) 135.04 94.98 T
(y further) 242.83 94.98 T
(.) 283.82 94.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "87" 87
%%Page: "88" 88
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Elements) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(88) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(typedef enum _DC_ElemType) 126 680.02 T
({) 126 669.02 T
(DCT_Unknown = 0,) 154.8 658.02 T
(DCT_Float,) 154.8 647.02 T
(DCT_Double,) 154.8 636.02 T
(DCT_LongDouble,) 154.8 625.02 T
(DCT_Char,) 154.8 614.02 T
(DCT_UnsignedChar,) 154.8 603.02 T
(DCT_ShortInt,) 154.8 592.02 T
(DCT_UnsignedShort,) 154.8 581.02 T
(DCT_Integer,) 154.8 570.02 T
(DCT_UnsignedInt,) 154.8 559.02 T
(DCT_LongInt,) 154.8 548.02 T
(DCT_UnsignedLong,) 154.8 537.02 T
(DCT_String,) 154.8 526.02 T
(DCT_Boolean,) 154.8 515.02 T
(DCT_ZebTime) 154.8 504.02 T
(} DC_ElemType;) 126 493.02 T
0 12 Q
1.35 (The) 108 468.02 P
5 F
3.24 (DC_Element) 131.01 468.02 P
0 F
1.35 ( union stores one v) 203.01 468.02 P
1.35 (alue of an) 298.77 468.02 P
1.35 (y of the element types. The) 348.61 468.02 P
(element type contained in the union must be noted in a separate v) 108 454.02 T
(ariable.) 421.66 454.02 T
5 9 Q
(typedef union _DC_Element) 126 431.02 T
({) 126 420.02 T
(float) 154.8 409.02 T
(dcv_float;) 241.2 409.02 T
(double) 154.8 398.02 T
(dcv_double;) 241.2 398.02 T
(long double) 154.8 387.02 T
(dcv_longdbl;) 241.2 387.02 T
(char) 154.8 376.02 T
(dcv_char;) 241.2 376.02 T
(unsigned char) 154.8 365.02 T
(dcv_uchar;) 241.2 365.02 T
(short) 154.8 354.02 T
(dcv_shortint;) 241.2 354.02 T
(unsigned short) 154.8 343.02 T
(dcv_ushort;) 241.2 343.02 T
(int) 154.8 332.02 T
(dcv_int;) 241.2 332.02 T
(unsigned int) 154.8 321.02 T
(dcv_uint;) 241.2 321.02 T
(long) 154.8 310.02 T
(dcv_longint;) 241.2 310.02 T
(unsigned long) 154.8 299.02 T
(dcv_ulong;) 241.2 299.02 T
(char *) 154.8 288.02 T
(dcv_string;) 241.2 288.02 T
(unsigned char) 154.8 277.02 T
(dcv_boolean;) 241.2 277.02 T
(ZebTime) 154.8 266.02 T
(dcv_zebtime) 241.2 266.02 T
(} DC_Element;) 126 255.02 T
0 12 Q
0.99 (Notice that the) 108 230.02 P
5 F
2.38 (DCT_String) 184.64 230.02 P
0 F
0.99 ( type is a) 256.64 230.02 P
4 F
0.99 (pointer) 306.61 230.02 P
0 F
0.99 ( to) 341.27 230.02 P
5 F
2.38 (char) 358.6 230.02 P
0 F
0.99 ( and not an array of) 387.4 230.02 P
6.65 (characters. In other w) 108 216.02 P
6.65 (ords, as seen in the) 231.79 216.02 P
5 F
15.96 (DC_Element) 359.03 216.02 P
0 F
6.65 ( union, a) 431.03 216.02 P
5 F
27.61 (DCT_String) 108 202.02 P
0 F
11.51 ( type only has space for a pointer\321with size) 180 202.02 P
5 F
5.09 (sizeof\050char) 108 188.02 P
5.09 (*\051) 194.4 188.02 P
0 F
2.12 (\321and not space for an arbitrary number of characters.) 208.8 188.02 P
1.07 (Data consisting of a string of characters are more properly represented as an) 108 174.02 P
(array of character elements.) 108 160.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "88" 88
%%Page: "89" 89
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Element Utilities) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (89) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 672.02 558 674.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 672.02 558 674.02 R
7 X
0 0 0 1 0 0 0 K
V
72 673.02 117 673.02 2 L
0.5 H
2 Z
0 X
N
126 673.02 558 673.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(7.2) 100.32 678.02 T
(Element Utilities) 126 678.02 T
0 F
1.33 (A fe) 126 654.02 P
1.33 (w con) 148.02 654.02 P
1.33 (v) 177.85 654.02 P
1.33 (enience routines are a) 183.68 654.02 P
1.33 (v) 291.71 654.02 P
1.33 (ailable for dealing with elements and ele-) 297.41 654.02 P
(ment types.) 126 640.02 T
2 F
(7.2.1) 90.31 608.02 T
(Macr) 126 608.02 T
(os) 153.77 608.02 T
0 F
1.85 (T) 126 590.02 P
1.85 (w) 132.37 590.02 P
1.85 (o macros access basic information about a gi) 140.92 590.02 P
1.85 (v) 368.48 590.02 P
1.85 (en element type. The \336rst) 374.3 590.02 P
(macro reports the size of the type.) 126 576.02 T
7 10 Q
(int) 144 557.35 T
(dc_SizeOfType \050type\051) 144 545.35 T
(DC_ElemType type;) 144 533.35 T
0 12 Q
1.1 (The) 126 508.02 P
5 F
2.64 (dc_SizeOfType) 148.76 508.02 P
0 F
1.1 ( macro returns the size, in bytes, of the element type) 242.36 508.02 P
-0.03 (gi) 126 494.02 P
-0.03 (v) 135.04 494.02 P
-0.03 (en in the) 140.86 494.02 P
7 F
-0.07 (type) 185.1 494.02 P
0 F
-0.03 ( parameter) 213.9 494.02 P
-0.03 (. The returned size will be equi) 264.18 494.02 P
-0.03 (v) 412.67 494.02 P
-0.03 (alent to the e) 418.37 494.02 P
-0.03 (v) 479.64 494.02 P
-0.03 (alu-) 485.34 494.02 P
1.77 (ation of the) 126 480.02 P
5 F
4.26 (sizeof) 188.98 480.02 P
0 F
1.77 ( operator on the element type\325) 232.18 480.02 P
1.77 (s corresponding C type.) 384.69 480.02 P
(Thus the tw) 126 466.02 T
(o follo) 182.54 466.02 T
(wing e) 213.91 466.02 T
(xpressions will al) 246.06 466.02 T
(w) 329.94 466.02 T
(ays be true.) 338.48 466.02 T
5 9 Q
(dc_SizeOfType\050DCT_UnsignedChar\051 == sizeof\050unsigned char\051) 144 443.02 T
(dc_SizeOfType\050DCT_LongInt\051 == sizeof\050long int\051) 144 432.02 T
0 12 Q
0.28 (The second macro,) 126 407.02 P
5 F
0.67 (dc_TypeName) 220.81 407.02 P
0 F
0.28 (, returns a string which uniquely identi\336es) 300.01 407.02 P
(the type.) 126 393.02 T
7 10 Q
(const char *) 144 374.35 T
(dc_TypeName \050type\051) 144 362.35 T
(DC_ElemType type;) 144 350.35 T
0 12 Q
1.12 (The) 126 325.02 P
7 F
2.68 (type) 148.78 325.02 P
0 F
1.12 ( parameter is the element type, and the macro e) 177.58 325.02 P
1.12 (v) 413.95 325.02 P
1.12 (aluates to a short) 419.66 325.02 P
0.25 (string identifying the type. Often the string is the C declaration for the equi) 126 311.02 P
0.25 (v) 488.98 311.02 P
0.25 (a-) 494.68 311.02 P
(lent C type. F) 126 297.02 T
(or e) 191.16 297.02 T
(xample the code belo) 209.3 297.02 T
(w prints \322double\323.) 311.32 297.02 T
5 9 Q
(printf \050\322%s\134n\323, dc_TypeName\050DCT_Double\051\051;) 144 274.02 T
0 12 Q
0.46 (As indicated by the) 126 249.02 P
5 F
1.12 (const) 223.85 249.02 P
1.12 (char) 267.05 249.02 P
1.12 (*) 303.05 249.02 P
0 F
0.46 ( return type, the returned pointer should) 310.24 249.02 P
(not be modi\336ed or freed.) 126 235.02 T
0.6 (The macros are pro) 126 209.02 P
0.6 (vided for ef) 220.59 209.02 P
0.6 (\336cienc) 277.48 209.02 P
0.6 (y) 309.29 209.02 P
0.6 (, since the return v) 314.51 209.02 P
0.6 (alue in both cases is) 405.6 209.02 P
1.9 (either a simple e) 126 195.02 P
1.9 (v) 210.38 195.02 P
1.9 (aluation \050) 216.08 195.02 P
5 F
4.56 (sizeof) 263.64 195.02 P
0 F
1.9 (\051 or a look-up into an internal array of) 306.84 195.02 P
2.01 (strings. T) 126 181.02 P
2.01 (o a) 172.38 181.02 P
2.01 (v) 188.48 181.02 P
2.01 (oid using the macro de\336nitions and instead use an equi) 194.24 181.02 P
2.01 (v) 474.97 181.02 P
2.01 (alent) 480.67 181.02 P
0.45 (function, call) 126 167.02 P
5 F
1.07 (_dc_SizeOfType\050\051) 193.22 167.02 P
0 F
0.45 ( or) 308.42 167.02 P
5 F
1.07 (_dc_TypeName\050\051) 325.3 167.02 P
0 F
0.45 (. Both functions) 426.1 167.02 P
(tak) 126 153.02 T
(e the same parameter list as the macros.) 140.54 153.02 T
0.55 (The) 126 127.02 P
5 F
1.32 (DC_ElemTypeMaxSize) 148.21 127.02 P
0 F
0.55 ( macro e) 277.81 127.02 P
0.55 (v) 319.92 127.02 P
0.55 (aluates to the lar) 325.62 127.02 P
0.55 (gest possible size of) 406.03 127.02 P
1.57 (an) 126 113.02 P
1.57 (y of the element types. It is useful for allocating space for an element of) 137.15 113.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "89" 89
%%Page: "90" 90
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Elements) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(90) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
2.63 (unkno) 108 678.02 P
2.63 (wn type. Of course, e) 137.7 678.02 P
2.63 (v) 250.55 678.02 P
2.63 (aluating the size of the) 256.25 678.02 P
5 F
6.31 (DC_Element) 381.04 678.02 P
0 F
2.63 ( union) 453.04 678.02 P
(should w) 108 664.02 T
(ork just as well:) 151.55 664.02 T
5 F
(sizeof\050DC_Element\051) 230.88 664.02 T
0 F
(.) 360.48 664.02 T
54 621.02 540 623.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 621.02 540 623.02 R
7 X
0 0 0 1 0 0 0 K
V
54 622.02 99 622.02 2 L
0.5 H
2 Z
0 X
N
108 622.02 540 622.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(7.3) 82.32 627.02 T
(DataChunk Field T) 108 627.02 T
(ypes) 212.63 627.02 T
0 F
-0.17 (The DataChunk interf) 108 603.02 P
-0.17 (ace originally de\336ned a \336eld as some collection of v) 212.86 603.02 P
-0.17 (alues) 461.34 603.02 P
-0.22 (arranged according to the or) 108 589.02 P
-0.22 (g) 242.2 589.02 P
-0.22 (anization of the class. F) 248.14 589.02 P
-0.22 (or re) 360.75 589.02 P
-0.22 (gular grid classes, the) 382.67 589.02 P
0.67 (\336eld is a tw) 108 575.02 P
0.67 (o-dimensional array of v) 165.55 575.02 P
0.67 (alues. F) 285.55 575.02 P
0.67 (or the scalar class, a \336eld holds a) 323.37 575.02 P
0.37 (single v) 108 561.02 P
0.37 (alue. T) 145.74 561.02 P
0.37 (o associate a type with the indi) 178.48 561.02 P
0.37 (vidual v) 328.41 561.02 P
0.37 (alues of a \336eld, the indi-) 367.48 561.02 P
(vidual v) 108 547.02 T
(alues are no) 146.7 547.02 T
(w referred to as elements.) 203.71 547.02 T
-0.27 (The) 108 521.02 P
5 F
-0.65 (MetData) 129.39 521.02 P
0 F
-0.27 ( class supports \336elds of mix) 179.79 521.02 P
-0.27 (ed types by allo) 311.93 521.02 P
-0.27 (wing the elements of) 386.49 521.02 P
0.75 (a \336eld to be stored as one of the fundamental element types. An) 108 507.02 P
0.75 (y subclass of) 422.5 507.02 P
5 F
0.35 (MetData) 108 493.02 P
0 F
0.14 ( is automatically capable of ha) 158.4 493.02 P
0.14 (ving \336elds of an) 305.18 493.02 P
0.14 (y type. The \336eld type) 383.1 493.02 P
0.32 (is actually the element type, since the \336eld may actually be an array or grid of) 108 479.02 P
0.78 (v) 108 465.02 P
0.78 (alues, and the element type is simply the type of e) 113.7 465.02 P
0.78 (v) 360.86 465.02 P
0.78 (ery element in the array) 366.68 465.02 P
0.78 (.) 483 465.02 P
1.22 (Data can be added to datachunks using the same functions as before, e) 108 451.02 P
1.22 (xcept) 460.01 451.02 P
0.84 (that class methods no) 108 437.02 P
0.84 (w use v) 213.22 437.02 P
0.84 (oid pointers to pass and return data arrays since) 251.32 437.02 P
(the array elements can be an) 108 423.02 T
(y type.) 244.1 423.02 T
0.48 (The ne) 108 397.02 P
0.48 (w interf) 141.17 397.02 P
0.48 (ace is backw) 179.19 397.02 P
0.48 (ards compatible with clients written before the 4.0) 241.34 397.02 P
-0.29 (release. Se) 108 383.02 P
-0.29 (v) 158.72 383.02 P
-0.29 (eral function prototypes ha) 164.54 383.02 P
-0.29 (v) 292.41 383.02 P
-0.29 (e changed to re\337ect the ne) 298.23 383.02 P
-0.29 (w use of v) 422.11 383.02 P
-0.29 (oid) 470.66 383.02 P
0.95 (pointers to e) 108 369.02 P
0.95 (xchange data arrays, b) 169.05 369.02 P
0.95 (ut most compilers will not complain since) 278.96 369.02 P
(ANSI C allo) 108 355.02 T
(ws implicit pointer con) 167.7 355.02 T
(v) 278.22 355.02 T
(ersion to) 284.04 355.02 T
5 F
(void) 328.7 355.02 T
(*) 364.7 355.02 T
0 F
(.) 371.9 355.02 T
2 F
(7.3.1) 72.31 323.02 T
(Setting Field T) 108 323.02 T
(ypes) 189.96 323.02 T
0 F
0.16 (The MetData class pro) 108 305.02 P
0.16 (vides methods for setting the element type of an) 217.27 305.02 P
0.16 (y of the) 449.02 305.02 P
0.28 (\336elds de\336ned in an) 108 291.02 P
0.28 (y data chunk which is a subclass of MetData. The MetData) 199.64 291.02 P
0.64 (subclasses which allo) 108 277.02 P
0.64 (w \336eld types only enforce the or) 212.29 277.02 P
0.64 (g) 371.2 277.02 P
0.64 (anization of a \336eld, so) 377.14 277.02 P
0.16 (the actual type of the elements in a \336eld is of no consequence to the subclass\325) 108 263.02 P
0.16 (s) 481.33 263.02 P
(implementation.) 108 249.02 T
1.6 (The \336elds must be de\336ned at the MetData class le) 108 223.02 P
1.6 (v) 361.08 223.02 P
1.6 (el before changing their) 366.9 223.02 P
0.91 (type from the def) 108 209.02 P
0.91 (ault. Usually) 193.59 209.02 P
0.91 (, this simply means calling a class\325) 255.05 209.02 P
0.91 (s \336eld setup) 426.84 209.02 P
8.7 (method. In the case of the Scalar class, the setup method is) 108 195.02 P
5 F
-0.31 (dc_SetScalarFields\050\051) 108 181.02 P
0 F
-0.13 (. After setting up the \336elds, the \336eld types can be) 252 181.02 P
0.72 (changed until data is added to the data chunk. Once data has been added to a) 108 167.02 P
(data chunk, the \336eld types cannot be changed.) 108 153.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "90" 90
%%Page: "91" 91
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Field T) 126 736.18 T
(ypes) 204.47 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (91) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(The method) 126 678.02 T
5 F
(dc_SetFieldTypes\050\051) 186.66 678.02 T
0 F
( sets the type of se) 316.26 678.02 T
(v) 404.28 678.02 T
(eral \336elds at once.) 410.1 678.02 T
7 10 Q
(void) 144 659.35 T
(dc_SetFieldTypes \050dc, nfield_in, fields_in, types_in\051) 144 647.35 T
(DataChunk *dc;) 144 635.35 T
(int nfield_in;) 144 623.35 T
(FieldId *field_in;) 144 611.35 T
(DC_ElemType *types_in;) 144 599.35 T
0 12 Q
0.23 (F) 126 574.02 P
0.23 (or each) 132.49 574.02 P
5 F
0.56 (FieldId) 170.94 574.02 P
0 F
0.23 ( in the) 221.34 574.02 P
7 F
0.56 (fields_in) 255.03 574.02 P
0 F
0.23 ( array) 319.83 574.02 P
0.23 (,) 346.93 574.02 P
5 F
0.56 (dc_SetFieldTypes\050\051) 353.17 574.02 P
0 F
0.23 ( sets) 482.77 574.02 P
1.07 (the type of that \336eld to the corresponding type in the) 126 560.02 P
7 F
2.57 (types_in) 392.73 560.02 P
0 F
1.07 ( array) 450.33 560.02 P
1.07 (. The) 478.27 560.02 P
2.27 (number of \336elds and elements in the arrays is passed in the) 126 546.02 P
7 F
5.45 (nfield_in) 439.2 546.02 P
0 F
0.35 (parameter) 126 532.02 P
0.35 (. Each of the \336elds in the) 173.32 532.02 P
7 F
0.84 (fields_in) 298.43 532.02 P
0 F
0.35 ( array must e) 363.23 532.02 P
0.35 (xist in the gi) 426.42 532.02 P
0.35 (v) 486.85 532.02 P
0.35 (en) 492.67 532.02 P
(data chunk,) 126 518.02 T
7 F
(dc) 184.32 518.02 T
0 F
(.) 198.72 518.02 T
1.46 (Consider an application which w) 126 492.02 P
1.46 (ants to de\336ne a bit \336eld for quality control) 289.69 492.02 P
(\337ags in a scalar data chunk. The de\336nition might proceed something lik) 126 478.02 T
(e this:) 469.85 478.02 T
5 9 Q
(DataChunk *dc;) 144 455.02 T
(FieldId fields[3];) 144 444.02 T
(DC_ElemType types[3];) 144 433.02 T
(dc = dc_CreateDC \050DCC_Scalar\051;) 144 411.02 T
(dc->dc_Platform = ds_LookupPlatform \050\322particles\323\051;) 144 400.02 T
(fields[0] = F_DeclareField \050\322flags\323, \322qc flags bitfield\323, \322none\323\051;) 144 389.02 T
(types[0] = DCT_UnsignedShort;) 144 378.02 T
(...) 144 367.02 T
(dc_SetScalarFields \050dc, 3, fields\051;) 144 356.02 T
(dc_SetFieldTypes \050dc, 3, fields, types\051;) 144 345.02 T
0 12 Q
-0.23 (Note that the array of \336elds passed to) 126 320.02 P
5 F
-0.56 (dc_SetFieldTypes\050\051) 306.11 320.02 P
0 F
-0.23 ( does not need) 435.71 320.02 P
0.04 (to be the same array passed to the setup method, nor do the \336elds need to be in) 126 306.02 P
0.72 (an) 126 292.02 P
0.72 (y particular order) 137.15 292.02 P
0.72 (. In the e) 221.22 292.02 P
0.72 (xample abo) 265.18 292.02 P
0.72 (v) 321.37 292.02 P
0.72 (e,) 327.19 292.02 P
5 F
1.72 (dc_SetScalarFields\050\051) 339.24 292.02 P
0 F
0.72 ( is a) 483.24 292.02 P
0.85 (method of the Scalar class, b) 126 278.02 P
0.85 (ut) 267.98 278.02 P
5 F
2.04 (dc_SetFieldTypes\050\051) 281.16 278.02 P
0 F
0.85 ( is a method of the) 410.76 278.02 P
-0.26 (MetData class. Thanks to encapsulation and an object-oriented design, the Sca-) 126 264.02 P
(lar class \324inherits\325 the \336eld type capabilities of the MetData class.) 126 250.02 T
(A second function) 126 224.02 T
5 F
(dc_SetType\050\051) 216.98 224.02 T
0 F
( sets the type of a single \336eld.) 303.38 224.02 T
7 10 Q
(void) 144 205.35 T
(dc_SetType \050dc, fid, type\051) 144 193.35 T
(DataChunk *dc;) 144 181.35 T
(/* subclass of DCC_MetData) 252 181.35 T
(*/) 432 181.35 T
(FieldId fid;) 144 169.35 T
(/* field whose type to define) 252 169.35 T
(*/) 432 169.35 T
(DC_ElemType type;) 144 157.35 T
(/* The type to assign) 252 157.35 T
(*/) 432 157.35 T
0 12 Q
0.22 (This function sets the type of \336eld) 126 132.02 P
7 F
0.53 (fid) 294.55 132.02 P
0 F
0.22 ( in data chunk) 316.15 132.02 P
7 F
0.53 (dc) 387.69 132.02 P
0 F
0.22 ( to the type in) 402.09 132.02 P
7 F
0.53 (type) 472.2 132.02 P
0 F
0.22 (.) 501 132.02 P
0.64 (It has the same calling restrictions as) 126 118.02 P
5 F
1.54 (dc_SetFieldTypes\050\051) 310.13 118.02 P
0 F
0.64 (; it should be) 439.73 118.02 P
(called after de\336ning the \336elds and before adding an) 126 104.02 T
(y data to the data chunk.) 372.43 104.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "91" 91
%%Page: "92" 92
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Elements) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(92) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(7.3.2) 72.31 678.02 T
(Inquiring About Field T) 108 678.02 T
(ypes) 238.62 678.02 T
0 F
0.3 (The MetData class also pro) 108 660.02 P
0.3 (vides a couple of methods for inquiring about \336eld) 240.31 660.02 P
(types and \336eld element sizes.) 108 646.02 T
(The) 108 626.02 T
5 F
(dc_SizeOf\050\051) 129.66 626.02 T
0 F
( function returns the element size, in bytes, of a \336eld.) 208.86 626.02 T
7 10 Q
(int) 126 607.35 T
(dc_SizeOf \050dc, fid\051) 126 595.35 T
(DataChunk *dc;) 126 583.35 T
(FieldId fid;) 126 571.35 T
0 12 Q
-0.1 (The data chunk is passed in) 108 546.02 P
7 F
-0.24 (dc) 242.72 546.02 P
0 F
-0.1 (, and) 257.12 546.02 P
7 F
-0.24 (fid) 283.25 546.02 P
0 F
-0.1 ( is the) 304.85 546.02 P
5 F
-0.24 (FieldId) 336.22 546.02 P
0 F
-0.1 ( of the \336eld to query) 386.62 546.02 P
-0.1 (.) 483 546.02 P
(The) 108 520.02 T
5 F
(dc_Type\050\051) 129.66 520.02 T
0 F
( function returns the type of a data chunk \336eld.) 194.46 520.02 T
7 10 Q
(DC_ElemType) 126 501.35 T
(dc_Type \050dc, fid\051) 126 489.35 T
(DataChunk *dc;) 126 477.35 T
(FieldId fid;) 126 465.35 T
0 12 Q
1.75 (Gi) 108 440.02 P
1.75 (v) 119.7 440.02 P
1.75 (en a data chunk) 125.52 440.02 P
7 F
4.19 (dc) 210.48 440.02 P
0 F
1.75 ( and a \336eld in the data chunk with) 224.88 440.02 P
5 F
4.19 (FieldId) 406.25 440.02 P
7 F
4.19 (fid) 461.4 440.02 P
0 F
1.75 (,) 483 440.02 P
5 F
(dc_Type\050\051) 108 426.02 T
0 F
( returns the type of the \336eld.) 172.8 426.02 T
2 F
(7.3.3) 72.31 394.02 T
(Storing T) 108 394.02 T
(yped Field Data) 159.95 394.02 T
0 F
-0.29 (Once a \336eld has been assigned its type, it can be stored just as an) 108 376.02 P
-0.29 (y re) 415.43 376.02 P
-0.29 (gular \337oat-) 433.29 376.02 P
0.28 (ing point data w) 108 362.02 P
0.28 (ould be stored. Where a class method requires a pointer to the) 186.37 362.02 P
0.03 (data to store, pass a pointer which points to an array of the \336eld\325) 108 348.02 P
0.03 (s de\336ned type.) 416.29 348.02 P
0.6 (The MetData class kno) 108 334.02 P
0.6 (ws the size of the elements in a \336eld from the element) 220.47 334.02 P
0.48 (type, so gi) 108 320.02 P
0.48 (v) 158.32 320.02 P
0.48 (en the number of elements in the \336eld from the subclass, MetData) 164.14 320.02 P
0.74 (can calculate the correct space requirements for a \336eld and properly cop) 108 306.02 P
0.74 (y the) 461.59 306.02 P
(gi) 108 292.02 T
(v) 117.04 292.02 T
(en array of data.) 122.86 292.02 T
-0.15 (F) 108 266.02 P
-0.15 (or e) 114.49 266.02 P
-0.15 (xample, recall the earlier e) 132.49 266.02 P
-0.15 (xample of the bit \336eld for quality control \337ags.) 259.34 266.02 P
5 9 Q
(unsigned short flags[10];) 126 243.02 T
(flags[0] = QC_OK;) 126 221.02 T
(flags[1] = QC_THRESHOLD | QC_BAD;) 126 210.02 T
(...) 126 199.02 T
(dc_AddMultScalar \050dc, times, 0, 10, fields[0], flags\051;) 126 188.02 T
2 12 Q
(7.3.4) 72.31 157.02 T
(Special N-Space Considerations) 108 157.02 T
0 F
0.75 (The N-space class does things a little dif) 108 139.02 P
0.75 (ferently than the other MetData sub-) 307.27 139.02 P
0.51 (classes. The task of de\336ning a \336eld is more complicated, in) 108 125.02 P
0.51 (v) 396.56 125.02 P
0.51 (olving the de\336ni-) 402.32 125.02 P
1.26 (tion of dimensions as well as \336elds. Consequently) 108 111.02 P
1.26 (, N-space holds of) 356.03 111.02 P
1.26 (f on the) 446.82 111.02 P
0.06 (setup of the \336elds at the MetData le) 108 97.02 P
0.06 (v) 279.07 97.02 P
0.06 (el right up until either the addition of data) 284.89 97.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "92" 92
%%Page: "93" 93
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Example: Creating an NSpace Chunk with Multiple Field T) 126 736.18 T
(ypes) 372.02 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (93) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.02 (or a call to) 126 678.02 P
5 F
0.04 (dc_NSDefineComplete\050\051) 180.05 678.02 P
0 F
0.02 (. Therefore, to set the \336eld types, an) 331.25 678.02 P
1.94 (application must call) 126 664.02 P
5 F
4.65 (dc_NSDefineComplete\050\051) 234.8 664.02 P
0 F
1.94 ( and) 386.01 664.02 P
4 F
1.94 (then) 413.21 664.02 P
0 F
1.94 ( call the Met-) 433.87 664.02 P
1.14 (Data \336eld type methods abo) 126 650.02 P
1.14 (v) 265.04 650.02 P
1.14 (e. See the N-space class interf) 270.86 650.02 P
1.14 (ace in Chapter) 420.4 650.02 P
1.14 (6,) 495 650.02 P
0.91 (page) 126 636.02 P
0.91 (64, for information on) 151.66 636.02 P
5 F
2.18 (dc_NSDefineComplete\050\051) 264.94 636.02 P
0 F
0.91 (. The ne) 416.14 636.02 P
0.91 (xt section) 456.76 636.02 P
(contains e) 126 622.02 T
(xamples of setting the types of N-space \336elds.) 174.14 622.02 T
1.76 (An important part of describing data in data chunks has yet to be laid out:) 126 596.02 P
2.24 (attrib) 126 582.02 P
2.24 (utes. W) 151.09 582.02 P
2.24 (ith the combination of N-space, multiple \336eld types, and type) 189.51 582.02 P
0.62 (attrib) 126 568.02 P
0.62 (ute arrays, an) 151.09 568.02 P
0.62 (y dataset which can be described in the netCDF model can) 216.47 568.02 P
0.2 (also be described in the Zebra data chunk model. The ne) 126 554.02 P
0.2 (xt chapter co) 398.79 554.02 P
0.2 (v) 460.99 554.02 P
0.2 (ers data) 466.81 554.02 P
(chunk attrib) 126 540.02 T
(utes.) 183.42 540.02 T
72 497.02 558 499.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 497.02 558 499.02 R
7 X
0 0 0 1 0 0 0 K
V
72 498.02 117 498.02 2 L
0.5 H
2 Z
0 X
N
126 498.02 558 498.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(7.4) 100.32 503.02 T
(Example: Creating an NSpace Chunk with Multiple Field T) 126 503.02 T
(ypes) 454.02 503.02 T
0 F
-0.09 (This section contains an e) 126 479.02 P
-0.09 (xample of creating an N-space data chunk with \336elds) 249.44 479.02 P
0.54 (of dif) 126 465.02 P
0.54 (ferent types. The e) 152.56 465.02 P
0.54 (xample emphasizes the procedure of \336rst de\336ning the) 243.29 465.02 P
(\336elds and then calling the MetData methods to set the \336eld types.) 126 451.02 T
2 F
(7.4.1) 90.31 419.02 T
(Some Code) 126 419.02 T
5 9 Q
(void) 144 396.02 T
(NSpacePasta\050\051) 144 385.02 T
({) 144 374.02 T
(#) 144 363.02 T
(define N_WNUM 65) 172.8 363.02 T
(#) 144 352.02 T
(define N_SAMPLE 16) 172.8 352.02 T
(DataChunk *dc, *ndc;) 172.8 341.02 T
(PlatformId plat_id;) 172.8 330.02 T
(ZebTime begin, when;) 172.8 319.02 T
(int i;) 172.8 308.02 T
(FieldId fields[10];) 172.8 297.02 T
(int nfield = 10;) 172.8 286.02 T
(FieldId bin_avg_id, wnum_id, mean_rad_id, therm_id, flags_id;) 172.8 275.02 T
(static const unsigned char Check_bits[] = {) 172.8 264.02 T
(0x00, 0x01, 0x80, 0x01, 0xc0, 0x00, 0x60, 0x00,) 201.6 253.02 T
(0x31, 0x00, 0x1b, 0x00, 0x0e, 0x00, 0x04, 0x00) 201.6 242.02 T
(};) 172.8 231.02 T
(char *bitmap_names[] = { \322row\323, \322col8\323 };) 172.8 220.02 T
(unsigned long bitmap_sizes[] = { 8, 2 };) 172.8 209.02 T
(FieldId bitmap_id;) 172.8 198.02 T
(char *text_dim[] = { \322text\323 };) 172.8 187.02 T
(unsigned long text_size[] = { 256 };) 172.8 176.02 T
(FieldId obs_id;) 172.8 165.02 T
(char obs[256];) 172.8 154.02 T
(char *process_dims[] = { \322bin\323, \322name\323 };) 172.8 143.02 T
(unsigned long process_sizes[] = { 7, 32 };) 172.8 132.02 T
(FieldId process_id;) 172.8 121.02 T
(static char process_names[7][32] = {) 172.8 110.02 T
(\322process one\323, \322process two\323, \322process three\323,) 201.6 99.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "93" 93
%%Page: "94" 94
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Elements) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(94) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(\322process four\323, \322process five\323, \322process six\323, \322process seven\323) 183.6 680.02 T
(};) 154.8 669.02 T
(double *mean_rads;) 154.8 658.02 T
(static float bin_averages[] = { 0.0, 1.0, 2.0, 4.0, 2.0, 1.0, 0.0 };) 154.8 647.02 T
(static char obs_types[5][256] = {) 154.8 636.02 T
(\322overcast; light precipitation visible to the east\323,) 183.6 625.02 T
(\322the sun is out\323,) 183.6 614.02 T
(\322the moon is looking a brilliant yellow this evening, and it\134) 183.6 603.02 T
(makes the beauty of your eyes glow with irresistable radiance\323,) 183.6 592.02 T
(\322\324twas brillig in the frothy toves...\323,) 183.6 581.02 T
(\322Oregon: 50 million gallons of water and no place to go on a Saturday\323) 154.8 570.02 T
(};) 126 559.02 T
(static Location loc = { 40.0, -160.0, 5280.0 }; /*Boulder home office*/) 154.8 548.02 T
(/*) 154.8 526.02 T
( * The usual initialization stuff) 154.8 515.02 T
( */) 154.8 504.02 T
(dc = dc_CreateDC \050DCC_NSpace\051;) 154.8 493.02 T
(plat_id = ds_LookupPlatform \050\322t_types_cdf\323\051;) 154.8 482.02 T
(dc->dc_Platform = plat_id;) 154.8 471.02 T
(dc_SetStaticLoc \050dc, &loc\051;) 154.8 460.02 T
(/*) 154.8 438.02 T
( * A bitmap to represent this platform. It doesn\325t change, so static) 154.8 427.02 T
( * is TRUE.) 154.8 416.02 T
( */) 154.8 405.02 T
(bitmap_id = F_DeclareField\050\322bitmap\323, \322Bitmap icon for this platform\323,) 154.8 394.02 T
(   \322none\323\051;) 241.2 383.02 T
(dc_NSDefineField \050dc, bitmap_id, 2, bitmap_names, bitmap_sizes, TRUE\051;) 154.8 372.02 T
(/*) 154.8 350.02 T
( * Text: on-site observations. New observation for each sample, so) 154.8 339.02 T
( * static is FALSE.) 154.8 328.02 T
( */) 154.8 317.02 T
(obs_id = F_DeclareField\050\322observation\323, \322Field observations\323, \322text\323\051;) 154.8 306.02 T
(dc_NSDefineField \050dc, obs_id, 1, text_dim, text_size, FALSE\051;) 154.8 295.02 T
(/*) 154.8 273.02 T
( * Example AERI data, motivated by the ARM program) 154.8 262.02 T
( */) 154.8 251.02 T
(wnum_id = F_DeclareField\050\322wnum\323, \322Wave Number\323, \322cm-1\323\051;) 154.8 240.02 T
(dc_NSDefineDimension \050dc, wnum_id, N_WNUM\051;) 154.8 229.02 T
(dc_NSDefineVariable \050dc, wnum_id, 1, &wnum_id, TRUE\051;) 154.8 218.02 T
(mean_rad_id = F_DeclareField \050\322mean_rad\323,) 154.8 207.02 T
(      \322Mean of radiance spectra ensemble\323, \322mW/\050m2 sr cm-1\051\323\051;) 183.6 196.02 T
(dc_NSDefineVariable \050dc, mean_rad_id, 1, &wnum_id, FALSE\051;) 154.8 185.02 T
(therm_id = F_DeclareField \050\322thermistor\323, \322Thermistor\323, \322C\323\051;) 154.8 174.02 T
(dc_NSDefineField \050dc, therm_id, 0, 0, 0, FALSE\051;) 154.8 163.02 T
(process_id = F_DeclareField \050\322process\323, \322Active process\323, \322none\323\051;) 154.8 152.02 T
(dc_NSDefineField \050dc, process_id, 2, process_dims, process_sizes,TRUE\051;) 154.8 141.02 T
(bin_avg_id = F_DeclareField \050\322bin_avg_rad\323, \322Bin average radiance\323,) 154.8 130.02 T
(     \322mW/\050m2 sr cm-1\051\323\051;) 241.2 119.02 T
(dc_NSDefineField \050dc, bin_avg_id, 1, process_dims,process_sizes,FALSE\051;) 154.8 108.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "94" 94
%%Page: "95" 95
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Example: Creating an NSpace Chunk with Multiple Field T) 126 736.18 T
(ypes) 372.02 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (95) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(/*) 172.8 680.02 T
( * Store error flag masks for each sample time) 172.8 669.02 T
( */) 172.8 658.02 T
(flags_id = F_DeclareField \050\322flags\323, \322Error flags mask\323, \322none\323\051;) 172.8 647.02 T
(dc_NSDefineField \050dc, flags_id, 0, 0, 0, FALSE\051;) 172.8 636.02 T
(/*) 172.8 614.02 T
( * Close out the definition and set the non-float field types.) 172.8 603.02 T
( * \050The other fields default to float.\051) 172.8 592.02 T
( */) 172.8 581.02 T
(dc_NSDefineComplete \050dc\051;) 172.8 570.02 T
(dc_SetType \050dc, bitmap_id, DCT_UnsignedChar\051;) 172.8 559.02 T
(dc_SetType \050dc, obs_id, DCT_Char\051;) 172.8 548.02 T
(dc_SetType \050dc, flags_id, DCT_UnsignedShort\051;) 172.8 537.02 T
(dc_SetType \050dc, mean_rad_id, DCT_Double\051;) 172.8 526.02 T
(dc_SetType \050dc, process_id, DCT_Char\051;) 172.8 515.02 T
(/*) 172.8 493.02 T
( * Definition is complete.  Add the static data.) 172.8 482.02 T
( */) 172.8 471.02 T
(dc_NSAddStatic \050dc, bitmap_id, \050void *\051Check_bits\051;) 172.8 460.02 T
(dc_NSAddStatic \050dc, wnum_id, \050void *\051wnum_data\051;) 172.8 449.02 T
(dc_NSAddStatic \050dc, process_id, \050void *\051process_names\051;) 172.8 438.02 T
(/*) 172.8 416.02 T
( * Add the dynamic data) 172.8 405.02 T
( */) 172.8 394.02 T
(mean_rads = \050double *\051malloc\050N_WNUM*sizeof\050double\051\051;) 172.8 383.02 T
(for \050i = 0; i < N_WNUM; ++i\051) 172.8 372.02 T
(mean_rads[i] = \050double\051i/1000.0;) 201.6 361.02 T
(/*) 172.8 339.02 T
( * Let it be known how many samples we\325ll be adding so that memory) 172.8 328.02 T
( * need only be allocated once.) 172.8 317.02 T
( */) 172.8 306.02 T
(dc_HintNSamples \050dc, N_SAMPLE, TRUE\051;) 172.8 295.02 T
(for \050i = 0; i < N_SAMPLE; ++i\051) 172.8 284.02 T
({) 172.8 273.02 T
(float therm = \050float\051i;) 201.6 262.02 T
(short flag = \050short\051i%50;) 201.6 251.02 T
(dc_NSAddSample\050dc, &when, i, obs_id, \050void *\051\050obs_types[i%5]\051\051;) 201.6 229.02 T
(dc_NSAddSample\050dc, &when, i, bin_avg_id, \050void *\051bin_averages\051;) 201.6 218.02 T
(dc_NSAddSample\050dc, &when, i, therm_id, \050void *\051&therm\051;) 201.6 207.02 T
(dc_NSAddSample\050dc, &when, i, flags_id, \050void *\051&flag\051;) 201.6 196.02 T
(dc_NSAddSample\050dc, &when, i, mean_rad_id, \050void *\051mean_rads\051;) 201.6 185.02 T
(++when.zt_Sec;) 201.6 174.02 T
(}) 172.8 163.02 T
(dc_DumpDC \050dc\051;) 172.8 152.02 T
(}) 144 141.02 T
2 12 Q
(7.4.2) 90.31 110.02 T
(Some Output) 126 110.02 T
0 F
(The results of the \336nal) 126 92.02 T
5 F
(dc_DumpDC\050dc\051) 236.99 92.02 T
0 F
( are included belo) 330.59 92.02 T
(w) 415.93 92.02 T
(.) 423.82 92.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "95" 95
%%Page: "96" 96
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Elements) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(96) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(NSPACE class: definition completed) 126 680.02 T
(Number of variables: 8        Number of dimensions: 6) 126 669.02 T
(                                   row: size 8       -- no field id) 126 658.02 T
(                                  col8: size 2       -- no field id) 126 647.02 T
(                                  text: size 256     -- no field id) 126 636.02 T
-0.16 (                                  wnum: size 65      -- field 2, \324Wave Number\325) 126 625.02 P
(                                   bin: size 7       -- no field id) 126 614.02 T
(                                  name: size 32      -- no field id) 126 603.02 T
-0.79 (  unsigned char bitmap \050 row, col8 \051 static, offset=0, size = 16, \324Bitmap icon) 126 592.02 P
(for this platform\325) 126 581.02 T
(  char observation \050 text \051size = 256, \324Field observations\325) 126 570.02 T
(  float wnum \050 wnum \051 static, offset=16, size = 65, \324Wave Number\325) 126 559.02 T
(  double mean_rad \050 wnum \051size = 65, \324Mean of radiance spectra ensemble\325) 126 548.02 T
(  float thermistor \050  \051size = 1, \324Thermistor\325) 126 537.02 T
-0.13 (  char process \050 bin, name \051 static, offset=276, size = 224, \324Active process\325) 126 526.02 P
(  float bin_avg_rad \050 bin \051size = 7, \324Bin average radiance\325) 126 515.02 T
(  unsigned short flags \050  \051size = 1, \324Error flags mask\325) 126 504.02 T
(METDATA class, 8 fields, uniform False, uniform org False, size 0) 126 493.02 T
(Fields:  bitmap\050unsigned char,1\051; observation\050char,1\051; wnum\050float,4\051;) 126 482.02 T
(mean_rad\050double,8\051; thermistor\050float,4\051; process\050char,1\051;) 126 471.02 T
(bin_avg_rad\050float,4\051; flags\050unsigned short,2\051;) 126 460.02 T
(Fixed-field-size, field offsets for sample 15:) 126 449.02 T
-1.26 (bitmap:0,0  observation:0,256  wnum:256,0  mean_rad:256,520  thermistor:776,4) 126 438.02 P
(process:780,0  bin_avg_rad:780,28  flags:808,2) 126 427.02 T
(Field Attributes:) 126 416.02 T
(TRANSPARENT class, 16 samples, 16 allocated, next off 13560, use avg: true) 126 405.02 T
(Hints: nsamples 16, sample size 816, avg 816, data 816, subclass 0) 126 394.02 T
(         0 at 1-Jan-93,0:00:00, len 810 offset 504) 126 383.02 T
(         1 at 1-Jan-93,0:00:01, len 810 offset 1320) 126 372.02 T
(         2 at 1-Jan-93,0:00:02, len 810 offset 2136) 126 361.02 T
(         3 at 1-Jan-93,0:00:03, len 810 offset 2952) 126 350.02 T
(         4 at 1-Jan-93,0:00:04, len 810 offset 3768) 126 339.02 T
(         5 at 1-Jan-93,0:00:05, len 810 offset 4584) 126 328.02 T
(         6 at 1-Jan-93,0:00:06, len 810 offset 5400) 126 317.02 T
(         7 at 1-Jan-93,0:00:07, len 810 offset 6216) 126 306.02 T
(         8 at 1-Jan-93,0:00:08, len 810 offset 7032) 126 295.02 T
(         9 at 1-Jan-93,0:00:09, len 810 offset 7848) 126 284.02 T
(        10 at 1-Jan-93,0:00:10, len 810 offset 8664) 126 273.02 T
(        11 at 1-Jan-93,0:00:11, len 810 offset 9480) 126 262.02 T
(        12 at 1-Jan-93,0:00:12, len 810 offset 10296) 126 251.02 T
(        13 at 1-Jan-93,0:00:13, len 810 offset 11112) 126 240.02 T
(        14 at 1-Jan-93,0:00:14, len 810 offset 11928) 126 229.02 T
(        15 at 1-Jan-93,0:00:15, len 810 offset 12744) 126 218.02 T
(RAW, class \324NSpace\325, plat 5 \050t_aeri_types_cdf\051, data len 14372, 5 ADE) 126 207.02 T
(totaling 3348) 126 196.02 T
(internal class checking: enabled) 126 185.02 T
(Global attributes:) 126 174.02 T
2 12 Q
(7.4.3) 72.31 143.02 T
(Some Comments) 108 143.02 T
0 F
-0.29 (The designer of this interf) 108 125.02 P
-0.29 (ace is the \336rst to admit that it is less than intuiti) 231.35 125.02 P
-0.29 (v) 454.82 125.02 P
-0.29 (e and) 460.64 125.02 P
0.75 (con) 108 111.02 P
0.75 (v) 124.85 111.02 P
0.75 (enient for application de) 130.67 111.02 P
0.75 (v) 249.59 111.02 P
0.75 (elopment. One possible impro) 255.41 111.02 P
0.75 (v) 402.14 111.02 P
0.75 (ement w) 407.96 111.02 P
0.75 (ould be) 449.59 111.02 P
0.01 (to allo) 108 97.02 P
0.01 (w \336elds to be de\336ned separately and added to the MetData le) 138.05 97.02 P
0.01 (v) 430.8 97.02 P
0.01 (el indi) 436.62 97.02 P
0.01 (vid-) 466.67 97.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "96" 96
%%Page: "97" 97
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Example: Creating an NSpace Chunk with Multiple Field T) 126 736.18 T
(ypes) 372.02 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (97) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.38 (ually) 126 678.02 P
1.38 (, so that a single \336eld could be de\336ned) 149.22 678.02 P
4 F
1.38 (and) 348.93 678.02 P
0 F
1.38 ( typed in a fe) 366.93 678.02 P
1.38 (w consecuti) 434.79 678.02 P
1.38 (v) 492.85 678.02 P
1.38 (e) 498.67 678.02 P
0.56 (lines of code. Unfortunately) 126 664.02 P
0.56 (, the present interf) 261.55 664.02 P
0.56 (ace forces all of the \336elds to be) 350.43 664.02 P
0.61 (de\336ned \336rst to the MetData subclass before the) 126 650.02 P
0.61 (y can be typed at the MetData) 356.38 650.02 P
1.69 (le) 126 636.02 P
1.69 (v) 134.36 636.02 P
1.69 (el. F) 140.18 636.02 P
1.69 (or the moment, though, the interf) 163.03 636.02 P
1.69 (ace w) 330.36 636.02 P
1.69 (orks, and the minor incon) 359.58 636.02 P
1.69 (v) 488.86 636.02 P
1.69 (e-) 494.68 636.02 P
0.4 (niences in the interf) 126 622.02 P
0.4 (ace are easily w) 222.04 622.02 P
0.4 (orth the e) 299.4 622.02 P
0.4 (xpanded \337e) 345.34 622.02 P
0.4 (xibility and function-) 401.21 622.02 P
(ality in describing datasets.) 126 608.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "97" 97
%%Page: "98" 98
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Elements) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(98) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "98" 98
%%Page: "99" 99
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (99) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 8 \245) 126 677 S
0 24 Q
-0.48 (DataChunk Attrib) 252 677 S
-0.48 (utes) 416.5 677 S
0 12 Q
1.95 (The w) 126 424 P
1.95 (orld w) 158.16 424 P
1.95 (ould be a simple place indeed if the data itself told us all we) 190.99 424 P
-0.16 (needed to kno) 126 410 P
-0.16 (w about it. Alas, such is not the case. Usually a great deal of aux-) 192.69 410 P
0.22 (iliary information needs to be stored along with the data, such as the source of) 126 396 P
2.38 (the data, instrument type and status, or an e) 126 382 P
2.38 (xplanation of deri) 352.82 382 P
2.38 (v) 442.59 382 P
2.38 (ations. The) 448.29 382 P
0.07 (information may apply to the whole data chunk, to indi) 126 368 P
0.07 (vidual samples, or e) 390.96 368 P
0.07 (v) 486.85 368 P
0.07 (en) 492.67 368 P
0.08 (to indi) 126 354 P
0.08 (vidual \336elds. The data chunk implementation includes f) 156.79 354 P
0.08 (acilities for stor-) 424.52 354 P
(ing this sort of auxiliary information, kno) 126 340 T
(wn as data chunk attrib) 324.7 340 T
(utes.) 435.77 340 T
72 297 558 299 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 297 558 299 R
7 X
0 0 0 1 0 0 0 K
V
72 298 117 298 2 L
0.5 H
2 Z
0 X
N
126 298 558 298 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(8.1) 100.32 303 T
(In With the Ne) 126 303 T
(w) 205.82 303 T
0 F
1.55 (The original) 126 279 P
0 9.6 Q
1.24 (1) 186.54 283.8 P
0 12 Q
1.55 ( attrib) 191.34 279 P
1.55 (ute interf) 220.98 279 P
1.55 (ace remains as before, b) 266.06 279 P
1.55 (ut man) 387.64 279 P
1.55 (y functions ha) 422 279 P
1.55 (v) 492.85 279 P
1.55 (e) 498.67 279 P
0.4 (been added which allo) 126 265 P
0.4 (w attrib) 234.54 265 P
0.4 (utes to be stored as a type other than string, and) 271.7 265 P
2.24 (as arrays of elements rather than just one. The interf) 126 251 P
2.24 (ace is no) 395.94 251 P
2.24 (w consistent) 442.1 251 P
1.2 (among all types of attrib) 126 237 P
1.2 (utes: global, sample, and \336eld. An) 247.87 237 P
1.2 (y attrib) 417.67 237 P
1.2 (ute can be) 452.96 237 P
0.56 (remo) 126 223 P
0.56 (v) 150.48 223 P
0.56 (ed, and e) 156.3 223 P
0.56 (v) 200.1 223 P
0.56 (ery type of attrib) 205.92 223 P
0.56 (ute no) 287.67 223 P
0.56 (w has a corresponding \324Process\325 func-) 317.6 223 P
0.95 (tion which calls a handler for each attrib) 126 209 P
0.95 (ute/v) 326.06 209 P
0.95 (alue pair) 349.76 209 P
0.95 (. The handler can e) 391.7 209 P
0.95 (v) 486.85 209 P
0.95 (en) 492.67 209 P
1.28 (modify the attrib) 126 195 P
1.28 (utes \050remo) 208.98 195 P
1.28 (v) 261.07 195 P
1.28 (e or rede\336ne\051 between calls to it from the \324Pro-) 266.89 195 P
0.03 (cess\325 function. The ne) 126 181 P
0.03 (wer functions usually include \324) 231.77 181 P
0.03 (AttrArray\325 in the function) 379.59 181 P
(name to distinguish them from the older functions.) 126 167 T
72 100.98 558 130.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 108.98 270 108.98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  Prior to V) 126 94.98 T
(ersion 4.0) 172.25 94.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "99" 99
%%Page: "100" 100
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Attrib) 108 736.18 T
(utes) 181.82 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(100) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.15 (Though the interf) 108 678.02 P
1.15 (ace is compatible, the underlying implementation is not. In) 194.16 678.02 P
0.94 (particular) 108 664.02 P
0.94 (, old ZNF \336les may contain attrib) 153.5 664.02 P
0.94 (ute blocks in the old attrib) 319.26 664.02 P
0.94 (ute for-) 449.4 664.02 P
0.44 (mat. The ne) 108 650.02 P
0.44 (w implementation tries to detect and con) 165.56 650.02 P
0.44 (v) 363.02 650.02 P
0.44 (ert old formats, b) 368.84 650.02 P
0.44 (ut may) 452.56 650.02 P
-0.21 (not al) 108 636.02 P
-0.21 (w) 134.67 636.02 P
-0.21 (ays be successful. There is no problem with old netCDF \336les. Old inter-) 143.21 636.02 P
1.73 (f) 108 622.02 P
1.73 (ace functions simply pass on their parameters to the ne) 111.88 622.02 P
1.73 (w ones, storing the) 390.14 622.02 P
(attrib) 108 608.02 T
(ute v) 133.09 608.02 T
(alue as a single string.) 156.46 608.02 T
0.76 (W) 108 582.02 P
0.76 (ith the addition of typed attrib) 118.85 582.02 P
0.76 (utes, data chunks can no) 266.08 582.02 P
0.76 (w completely mimic) 385.81 582.02 P
0.84 (all of the descripti) 108 568.02 P
0.84 (v) 197.22 568.02 P
0.84 (e and storage capability of netCDF \336les. This no) 203.04 568.02 P
0.84 (w allo) 442.46 568.02 P
0.84 (ws) 472.67 568.02 P
-0.18 (attrib) 108 554.02 P
-0.18 (utes which were meant be a type other than string to be stored as the natu-) 133.09 554.02 P
0.46 (ral or con) 108 540.02 P
0.46 (v) 154.41 540.02 P
0.46 (entional type. F) 160.23 540.02 P
0.46 (or e) 235.96 540.02 P
0.46 (xample, the \324min\325, \324max\325, and \324range\325 attrib) 254.56 540.02 P
0.46 (utes) 466.67 540.02 P
-0.27 (should be the same type as the netCDF v) 108 526.02 P
-0.27 (ariable with which the) 301.56 526.02 P
-0.27 (y are associated.) 407.56 526.02 P
(Until v) 108 512.02 T
(ersion 4.0, attrib) 141.49 512.02 T
(ute v) 219.91 512.02 T
(alues had to be stored as strings.) 243.28 512.02 T
54 469.02 540 471.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 469.02 540 471.02 R
7 X
0 0 0 1 0 0 0 K
V
54 470.02 99 470.02 2 L
0.5 H
2 Z
0 X
N
108 470.02 540 470.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(8.2) 82.32 475.02 T
(Over) 108 475.02 T
(vie) 135.47 475.02 T
(w) 151.97 475.02 T
0 F
0.16 (There are three types of attrib) 108 451.02 P
0.16 (utes: global, sample, and \336eld.) 250.84 451.02 P
0 9.6 Q
0.13 (1) 397.8 455.82 P
0 12 Q
0.16 ( Global attrib) 402.6 451.02 P
0.16 (utes) 466.67 451.02 P
0.64 (apply to the entire data chunk. A sample attrib) 108 437.02 P
0.64 (ute applies to a particular sam-) 335.17 437.02 P
0.27 (ple, and of course a \336eld attrib) 108 423.02 P
0.27 (ute applies to a particular \336eld. The scope of an) 255.66 423.02 P
0.19 (attrib) 108 409.02 P
0.19 (ute determines the class which implements the attrib) 133.09 409.02 P
0.19 (ute and whose meth-) 385.79 409.02 P
0.73 (ods store the attrib) 108 395.02 P
0.73 (ute in the data chunk. The Ra) 198.95 395.02 P
0.73 (w class naturally implements) 344.14 395.02 P
1.71 (global attrib) 108 381.02 P
1.71 (utes, meaning that e) 167.8 381.02 P
1.71 (v) 268.62 381.02 P
1.71 (ery data chunk class also possesses global) 274.44 381.02 P
0.44 (attrib) 108 367.02 P
0.44 (utes. The T) 133.09 367.02 P
0.44 (ransparent class, as the class which implements samples, also) 187.87 367.02 P
-0.11 (implements sample attrib) 108 353.02 P
-0.11 (utes, and so e) 228.87 353.02 P
-0.11 (v) 292.89 353.02 P
-0.11 (ery data chunk which uses samples can) 298.71 353.02 P
0.62 (also ha) 108 339.02 P
0.62 (v) 142.04 339.02 P
0.62 (e sample attrib) 147.86 339.02 P
0.62 (utes. Lik) 219.53 339.02 P
0.62 (e) 262.03 339.02 P
0.62 (wise, and not surprisingly) 267.06 339.02 P
0.62 (, the MetData class) 392.15 339.02 P
-0.1 (implements \336eld attrib) 108 325.02 P
-0.1 (utes since it also implements the notion of \336elds. An) 216.22 325.02 P
-0.1 (y of) 467.11 325.02 P
-0.02 (the subclasses of MetData can associate attrib) 108 311.02 P
-0.02 (utes with their \336elds. This mak) 327.57 311.02 P
-0.02 (es) 476 311.02 P
2.5 (sense since only subclasses of MetData will actually ha) 108 297.02 P
2.5 (v) 393.69 297.02 P
2.5 (e \336elds to which) 399.51 297.02 P
1.09 (attrib) 108 283.02 P
1.09 (utes can be attached. Lik) 133.09 283.02 P
1.09 (e) 256.31 283.02 P
1.09 (wise, only subclasses of) 261.34 283.02 P
5 F
2.62 (Transparent) 384.03 283.02 P
0 F
1.09 ( will) 463.23 283.02 P
(ha) 108 269.02 T
(v) 119.09 269.02 T
(e samples to which attrib) 124.91 269.02 T
(utes can be attached.) 244.66 269.02 T
2 F
(8.2.1) 72.31 237.02 T
(K) 108 237.02 T
(e) 116.48 237.02 T
(ys and V) 122.98 237.02 T
(alues) 171.61 237.02 T
0 F
1.36 (An attrib) 108 219.02 P
1.36 (ute associates a v) 152.11 219.02 P
1.36 (alue with a k) 238.86 219.02 P
1.36 (e) 304.46 219.02 P
1.36 (y) 309.61 219.02 P
1.36 (. The k) 314.83 219.02 P
1.36 (e) 351.08 219.02 P
1.36 (y is a simple string which) 356.22 219.02 P
2.69 (names the attrib) 108 205.02 P
2.69 (ute, and the v) 189.79 205.02 P
2.69 (alue is an array of) 262.22 205.02 P
4 F
2.69 (elements) 364.63 205.02 P
0 F
2.69 (, as descried in) 406.62 205.02 P
0.23 (Chapter) 108 191.02 P
0.23 (7. The k) 148.99 191.02 P
0.23 (e) 188.98 191.02 P
0.23 (y indicates the meaning of the attrib) 194.13 191.02 P
0.23 (ute and the sort of infor-) 367.89 191.02 P
5.65 (mation the attrib) 108 177.02 P
5.65 (ute holds. Common k) 198.4 177.02 P
5.65 (e) 318.58 177.02 P
5.65 (ys are \322source\323, \322max_v) 323.73 177.02 P
5.65 (alue\323,) 457.68 177.02 P
1.96 (\322long_name\323, or \322v) 108 163.02 P
1.96 (alid_range\323. The second part of the attrib) 205.93 163.02 P
1.96 (ute, the v) 415.06 163.02 P
1.96 (alue,) 463.01 163.02 P
54 120.98 540 150.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 128.98 252 128.98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
-0.04 (1.  Some realms call them global-le) 108 114.98 P
-0.04 (v) 235.24 114.98 P
-0.04 (el attrib) 239.61 114.98 P
-0.04 (utes \050GLA) 267.13 114.98 P
-0.04 (\325) 304.33 114.98 P
-0.04 (s\051 and \336eld-le) 306.83 114.98 P
-0.04 (v) 356.01 114.98 P
-0.04 (el attrib) 360.37 114.98 P
-0.04 (utes \050FLA) 387.9 114.98 P
-0.04 (\325) 423.6 114.98 P
-0.04 (s\051, b) 426.1 114.98 P
-0.04 (ut that\325) 441.38 114.98 P
-0.04 (s too) 466.59 114.98 P
-0.12 (man) 108 104.98 P
-0.12 (y TLA) 123.36 104.98 P
-0.12 (\325) 146.49 104.98 P
-0.12 (s \050three-letter acron) 148.99 104.98 P
-0.12 (yms\051 for me. In this manual the) 219.09 104.98 P
-0.12 (y are called simply global, sample, or \336eld) 331.47 104.98 P
(attrib) 108 94.98 T
(utes.) 126.82 94.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "100" 100
%%Page: "101" 101
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Over) 126 736.18 T
(vie) 146.6 736.18 T
(w) 158.98 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (101) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.39 (holds the information to be associated with the k) 126 678.02 P
0.39 (e) 362.35 678.02 P
0.39 (y) 367.5 678.02 P
0.39 (. This information can be a) 372.72 678.02 P
-0.17 (single data v) 126 664.02 P
-0.17 (alue or a series of data v) 186.03 664.02 P
-0.17 (alues. The type of the v) 301.36 664.02 P
-0.17 (alues can be an) 412.88 664.02 P
-0.17 (y of) 485.17 664.02 P
-0.06 (the types allo) 126 650.02 P
-0.06 (wed for data chunk elements; ho) 189.58 650.02 P
-0.06 (we) 345.29 650.02 P
-0.06 (v) 358.98 650.02 P
-0.06 (er) 364.8 650.02 P
-0.06 (, all of the elements associ-) 373.65 650.02 P
-0.05 (ated with a single attrib) 126 636.02 P
-0.05 (ute k) 238.22 636.02 P
-0.05 (e) 261.72 636.02 P
-0.05 (y must be the same type. Therefore all of the data) 266.87 636.02 P
1 (v) 126 622.02 P
1 (alues associated with a k) 131.7 622.02 P
1 (e) 254.22 622.02 P
1 (y called \322altitudes\323 can be either \337oating point or) 259.37 622.02 P
(inte) 126 608.02 T
(ger) 143.82 608.02 T
(, b) 158.66 608.02 T
(ut not both.) 170.42 608.02 T
1.07 (W) 126 582.02 P
1.07 (ith respect to the data chunk interf) 136.85 582.02 P
1.07 (ace, k) 307.12 582.02 P
1.07 (e) 336.05 582.02 P
1.07 (y names can contain an) 341.2 582.02 P
1.07 (y number) 457.27 582.02 P
1.78 (and kind of characters. Ho) 126 568.02 P
1.78 (we) 259.8 568.02 P
1.78 (v) 273.49 568.02 P
1.78 (er) 279.31 568.02 P
1.78 (, in practice it is best to restrict the k) 288.15 568.02 P
1.78 (e) 478.73 568.02 P
1.78 (y to) 483.88 568.02 P
0.29 (printable alphanumeric characters without an) 126 554.02 P
0.29 (y spaces. The k) 343.58 554.02 P
0.29 (e) 418.3 554.02 P
0.29 (y name becomes) 423.45 554.02 P
3.66 (especially critical when storing attrib) 126 540.02 P
3.66 (utes in netCDF \336les, since netCDF) 318.37 540.02 P
0.94 (enforces limits on the length and content of attrib) 126 526.02 P
0.94 (ute names. See the netCDF) 369.92 526.02 P
(manual for documentation of the limits.) 126 512.02 T
2 F
(8.2.2) 90.31 480.02 T
(Method Names) 126 480.02 T
0 F
0.65 (Ev) 126 462.02 P
0.65 (ery class of attrib) 139.15 462.02 P
0.65 (utes uses a similar naming scheme for its methods, and it) 223.84 462.02 P
0.01 (will be helpful to mention the scheme here. In k) 126 448.02 P
0.01 (eeping with the rest of the data) 355.96 448.02 P
0.42 (chunk interf) 126 434.02 P
0.42 (ace, e) 184.62 434.02 P
0.42 (v) 212.05 434.02 P
0.42 (ery attrib) 217.87 434.02 P
0.42 (ute function uses the \324dc_\325 pre\336x. The older func-) 261.7 434.02 P
0.66 (tions which only deal with string v) 126 420.02 P
0.66 (alues use the \324) 296.32 420.02 P
0.66 (Attr\325 suf) 365.66 420.02 P
0.66 (\336x, while the ne) 407.01 420.02 P
0.66 (wer) 486.01 420.02 P
2.52 (typed array functions usually end with \324) 126 406.02 P
2.52 (AttrArray\325. The base of the name) 331.46 406.02 P
0.69 (comes from the purpose of the function, which f) 126 392.02 P
0.69 (alls into one of these cate) 363.06 392.02 P
0.69 (go-) 488 392.02 P
(ries.) 126 378.02 T
(Set) 144 352.02 T
(Associate this attrib) 252 352.02 T
(ute v) 347.09 352.02 T
(alue \050array of elements\051) 370.45 352.02 T
(with a k) 252 338.02 T
(e) 290.54 338.02 T
(y) 295.69 338.02 T
(, and possibly with a \336eld or sample as) 300.91 338.02 T
(well.) 252 324.02 T
(Get) 144 298.02 T
(Retrie) 252 298.02 T
(v) 281.03 298.02 T
(e the v) 286.85 298.02 T
(alue associated with a k) 318.54 298.02 T
(e) 432.4 298.02 T
(y) 437.54 298.02 T
(.) 442.76 298.02 T
(GetN) 144 272.02 T
-0.25 (Return the number of attrib) 252 272.02 P
-0.25 (utes for a particular class.) 382.06 272.02 P
(Remo) 144 246.02 T
(v) 172.49 246.02 T
(e) 178.31 246.02 T
(Remo) 252 246.02 T
(v) 280.49 246.02 T
(e the attrib) 286.31 246.02 T
(ute with the gi) 337.39 246.02 T
(v) 406.09 246.02 T
(en k) 411.91 246.02 T
(e) 432.12 246.02 T
(y) 437.27 246.02 T
(.) 442.49 246.02 T
(Process or Proc) 144 220.02 T
(Loop o) 252 220.02 T
(v) 286.15 220.02 T
(er the attrib) 291.97 220.02 T
(ute k) 347.05 220.02 T
(e) 370.6 220.02 T
(ys in a class and call a) 375.74 220.02 T
(handler function for each.) 252 206.02 T
1.15 (The name will also contain an indication to the class of the attrib) 126 180.02 P
1.15 (utes, either) 450.19 180.02 P
(\324Global\325, \324Sample\325, or \324Field\325.) 126 166.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "101" 101
%%Page: "102" 102
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Attrib) 108 736.18 T
(utes) 181.82 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(102) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(8.2.3) 72.31 678.02 T
(General Notes about the Interface) 108 678.02 T
0 F
-0.02 (An attrib) 108 660.02 P
-0.02 (ute can ha) 150.73 660.02 P
-0.02 (v) 199.1 660.02 P
-0.02 (e only one string v) 204.91 660.02 P
-0.02 (alue, which is a null-terminated array of) 293.85 660.02 P
-0.21 (characters. An array of characters, on the other hand, is stored as N elements of) 108 646.02 P
(type) 108 632.02 T
5 F
(DCT_Char) 131.66 632.02 T
0 F
( \050or) 189.26 632.02 T
5 F
(DCT_UnsignedChar) 209.26 632.02 T
0 F
(\051, without an) 324.46 632.02 T
(y null terminator) 385.27 632.02 T
(.) 465.28 632.02 T
0.26 (Man) 108 606.02 P
0.26 (y of the prototypes return pointers to k) 129.82 606.02 P
0.26 (e) 316.52 606.02 P
0.26 (ys or v) 321.67 606.02 P
0.26 (alues. All returned pointers) 354.56 606.02 P
(point to internal memory and) 108 592.02 T
4 F
(should neither be modi\336ed nor fr) 250.99 592.02 T
(eed) 408.88 592.02 T
0 F
(.) 425.53 592.02 T
1.83 (Man) 108 566.02 P
1.83 (y of the methods return v) 129.82 566.02 P
1.83 (alues via reference parameters. Except where) 259.63 566.02 P
0.28 (e) 108 552.02 P
0.28 (xplicitly noted, such parameters can be passed as) 113.15 552.02 P
5 F
0.68 (NULL) 353.71 552.02 P
0 F
0.28 (, causing the parame-) 382.51 552.02 P
(ter to be disre) 108 538.02 T
(g) 173.47 538.02 T
(arded.) 179.41 538.02 T
54 495.02 540 497.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 495.02 540 497.02 R
7 X
0 0 0 1 0 0 0 K
V
54 496.02 99 496.02 2 L
0.5 H
2 Z
0 X
N
108 496.02 540 496.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(8.3) 82.32 501.02 T
(Global Attrib) 108 501.02 T
(utes) 180.43 501.02 T
0 F
0.77 (Global attrib) 108 477.02 P
0.77 (utes ha) 169.52 477.02 P
0.77 (v) 203.71 477.02 P
0.77 (e the simplest interf) 209.53 477.02 P
0.77 (ace since the) 306.71 477.02 P
0.77 (y ha) 369.37 477.02 P
0.77 (v) 390.23 477.02 P
0.77 (e the widest scope) 396.05 477.02 P
0.9 (and are not limited to a particular sample or \336eld. Each of the basic attrib) 108 463.02 P
0.9 (ute) 471.34 463.02 P
3.82 (methods are described here in detail. The sections on sample and \336eld) 108 449.02 P
1.01 (attrib) 108 435.02 P
1.01 (utes lea) 133.09 435.02 P
1.01 (v) 170.19 435.02 P
1.01 (e out some detail in f) 176.01 435.02 P
1.01 (a) 281.96 435.02 P
1.01 (v) 287.05 435.02 P
1.01 (or of referring to the common e) 292.81 435.02 P
1.01 (xplana-) 450.01 435.02 P
-0.02 (tions in this section. In other w) 108 421.02 P
-0.02 (ords, it will be helpful to thoroughly understand) 256.12 421.02 P
0.72 (this section before referring to the later sections. Also, on questions of ho) 108 407.02 P
0.72 (w a) 468.29 407.02 P
1.76 (particular method operates, consult the equi) 108 393.02 P
1.76 (v) 326.48 393.02 P
1.76 (alent method in this section as) 332.18 393.02 P
(well the method\325) 108 379.02 T
(s speci\336c prototype.) 188.66 379.02 T
2 F
(8.3.1) 72.31 347.02 T
(Setting and Getting) 108 347.02 T
0 F
(The tw) 108 329.02 T
(o backw) 141.54 329.02 T
(ards-compatible functions are belo) 181.74 329.02 T
(w) 347.74 329.02 T
(.) 355.62 329.02 T
7 10 Q
(void) 126 310.35 T
(dc_SetGlobalAttr \050dc, key, value\051) 126 298.35 T
(DataChunk *dc;) 126 286.35 T
(char *key, *value;) 126 274.35 T
(char *) 126 250.35 T
(dc_GetGlobalAttr \050dc, key\051) 126 238.35 T
(DataChunk *dc;) 126 226.35 T
(char *key;) 126 214.35 T
0 12 Q
0.05 (The \336rst function associates a string) 108 189.02 P
7 F
0.11 (value) 284.25 189.02 P
0 F
0.05 ( with the named) 320.25 189.02 P
7 F
0.11 (key) 400.42 189.02 P
0 F
0.05 ( for the gi) 422.02 189.02 P
0.05 (v) 468.85 189.02 P
0.05 (en) 474.67 189.02 P
0.98 (data chunk,) 108 175.02 P
7 F
2.36 (dc) 168.29 175.02 P
0 F
0.98 (. The second returns a pointer to the string v) 182.69 175.02 P
0.98 (alue of the gi) 403.21 175.02 P
0.98 (v) 468.85 175.02 P
0.98 (en) 474.67 175.02 P
7 F
0.13 (key) 108 161.02 P
0 F
0.05 (. If the k) 128.82 161.02 P
0.05 (e) 169.51 161.02 P
0.05 (y has an attrib) 174.66 161.02 P
0.05 (ute type other than) 242.24 161.02 P
5 F
0.13 (DCT_String) 335.1 161.02 P
0 F
0.05 (, or the k) 407.1 161.02 P
0.05 (e) 449.8 161.02 P
0.05 (y does) 454.95 161.02 P
(not e) 108 147.02 T
(xist, then the function logs a w) 131.48 147.02 T
(arning message and returns) 279.02 147.02 T
5 F
(NULL) 412.99 147.02 T
0 F
(.) 441.79 147.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "102" 102
%%Page: "103" 103
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Global Attrib) 126 736.18 T
(utes) 180.32 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (103) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(The more generic interf) 126 678.02 T
(ace to global attrib) 239.51 678.02 T
(utes allo) 328.92 678.02 T
(ws arrays of v) 368.95 678.02 T
(alues.) 436.3 678.02 T
7 10 Q
(void) 144 659.35 T
(dc_SetGlobalAttrArray \050dc, key, type, nval, values\051) 144 647.35 T
(DataChunk *dc;) 144 635.35 T
(char *key;) 144 623.35 T
(DC_ElemType type;) 144 611.35 T
(int nval;) 144 599.35 T
(void *values;) 144 587.35 T
0 12 Q
-0.19 (The additional parameters are) 126 562.02 P
7 F
-0.45 (type) 271.21 562.02 P
0 F
-0.19 (,) 300.01 562.02 P
7 F
-0.45 (nval) 305.82 562.02 P
0 F
-0.19 (, and) 334.62 562.02 P
7 F
-0.45 (values) 360.57 562.02 P
0 F
-0.19 (. The) 403.77 562.02 P
7 F
-0.45 (type) 431.06 562.02 P
0 F
-0.19 ( speci\336es) 459.86 562.02 P
0.27 (the type of the elements in the v) 126 548.02 P
0.27 (alues array) 281.27 548.02 P
0.27 (. The number of v) 333.07 548.02 P
0.27 (alues is passed in) 420.18 548.02 P
7 F
1.04 (nval) 126 534.02 P
0 F
0.43 (, and) 154.8 534.02 P
7 F
1.04 (values) 181.99 534.02 P
0 F
0.43 ( points to the array itself. The array should be an array of) 225.2 534.02 P
1.97 (elements in their nati) 126 520.02 P
1.97 (v) 232.6 520.02 P
1.97 (e form, i.e., not) 238.42 520.02 P
5 F
4.73 (DC_Element) 322.95 520.02 P
0 F
1.97 ( unions. The e) 394.95 520.02 P
1.97 (xample) 468.67 520.02 P
(belo) 126 506.02 T
(w stores an array of doubles under the k) 146.36 506.02 T
(e) 338.2 506.02 T
(y \324global_doubles\325.) 343.34 506.02 T
5 9 Q
(#define NUM\050ra\051 \050sizeof\050ra\051/\050sizeof\050\050ra\051[0]\051\051\051) 144 483.02 T
(double ddata[] = { 0.0, 1.0, 2.0, 4.0, 8.0 };) 144 472.02 T
(DataChunk *dc;) 144 461.02 T
(dc = dc_CreateDC\050DCC_Scalar\051;) 144 439.02 T
(dc->dc_Platform = plat;) 144 428.02 T
(dc_SetGlobalAttrArray \050dc, \322global_doubles\323, DCT_Double,) 144 417.02 T
(       NUM\050ddata\051, \050void *\051ddata\051;) 230.4 406.02 T
0 12 Q
(Of course, there is the opposite function for retrie) 126 381.02 T
(ving the array of v) 363.31 381.02 T
(alues.) 451.66 381.02 T
7 10 Q
(void *) 144 362.35 T
(dc_GetGlobalAttrArray \050dc, key, type, nval\051) 144 350.35 T
(DataChunk *dc;) 144 338.35 T
(char *key;) 144 326.35 T
(DC_ElemType *type;) 144 314.35 T
(int *nval;) 144 302.35 T
0 12 Q
-0.2 (In this case, the function returns a pointer to the v) 126 277.02 P
-0.2 (alues array for the gi) 362.02 277.02 P
-0.2 (v) 460.23 277.02 P
-0.2 (en) 466.05 277.02 P
7 F
-0.47 (key) 480.18 277.02 P
0 F
-0.2 (.) 501 277.02 P
0.57 (The returned pointer points to memory inside the data chunk, so it should not) 126 263.02 P
1.08 (be modi\336ed or freed, nor is it v) 126 249.02 P
1.08 (alid once the data chunk has been destro) 282.59 249.02 P
1.08 (yed.) 483.67 249.02 P
0.34 (The type of the array elements and the number of elements are returned in the) 126 235.02 P
7 F
-0.28 (type) 126 221.02 P
0 F
-0.12 ( and) 154.8 221.02 P
7 F
-0.28 (nval) 177.89 221.02 P
0 F
-0.12 ( reference parameters, respecti) 206.69 221.02 P
-0.12 (v) 352.63 221.02 P
-0.12 (ely) 358.45 221.02 P
-0.12 (. Either of) 372.34 221.02 P
7 F
-0.28 (type) 423.31 221.02 P
0 F
-0.12 ( and) 452.11 221.02 P
7 F
-0.28 (nval) 475.2 221.02 P
0 F
0.34 (can be passed as) 126 207.02 P
5 F
0.81 (NULL) 209.33 207.02 P
0 F
0.34 ( to pre) 238.13 207.02 P
0.34 (v) 269.16 207.02 P
0.34 (ent a v) 274.98 207.02 P
0.34 (alue from being returned in that parame-) 307.35 207.02 P
0.08 (ter) 126 193.02 P
0.08 (. If no attrib) 138 193.02 P
0.08 (ute e) 195.32 193.02 P
0.08 (xists with the gi) 218.21 193.02 P
0.08 (v) 294.49 193.02 P
0.08 (en k) 300.31 193.02 P
0.08 (e) 320.6 193.02 P
0.08 (y) 325.75 193.02 P
0.08 (, then the return v) 330.97 193.02 P
0.08 (alue will be) 415.97 193.02 P
5 F
0.19 (NULL) 475.2 193.02 P
0 F
(and none of the other parameters will be changed.) 126 179.02 T
0.17 (Continuing with the earlier e) 126 153.02 P
0.17 (xample, the e) 264.49 153.02 P
0.17 (xcerpt belo) 328.97 153.02 P
0.17 (w retrie) 382.49 153.02 P
0.17 (v) 419.35 153.02 P
0.17 (es and prints the) 425.17 153.02 P
(\324global_doubles\325 attrib) 126 139.02 T
(ute v) 235.42 139.02 T
(alue.) 258.78 139.02 T
5 9 Q
(double *dget;) 144 116.02 T
(DC_ElemType type;) 144 105.02 T
(int nval, i;) 144 94.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "103" 103
%%Page: "104" 104
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Attrib) 108 736.18 T
(utes) 181.82 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(104) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(dget = \050double *\051dc_GetGlobalAttrArray \050dc, \322global_doubles\323,) 126 669.02 T
(&type, &nval\051;) 241.2 658.02 T
(assert\050type == DCT_Double\051;) 126 647.02 T
(for \050i = 0; i < nval; ++i\051 printf \050\322 %lf \322, dget[i]\051;) 126 636.02 T
(printf \050\322\134n\323\051;) 126 625.02 T
0 12 Q
1.52 (Note that the older function) 108 600.02 P
5 F
3.64 (dc_GetGlobalAttr\050\051) 251.23 600.02 P
0 F
1.52 ( w) 380.83 600.02 P
1.52 (ould al) 393.89 600.02 P
1.52 (w) 428.29 600.02 P
1.52 (ays return) 436.83 600.02 P
(NULL when called with the doubles k) 108 586.02 T
(e) 291.85 586.02 T
(y:) 297 586.02 T
5 9 Q
(/* Would always return NULL since value is not a string */) 126 563.02 T
(dget = dc_GetGlobalAttr \050dc, \322global_doubles\323\051;) 126 552.02 T
2 12 Q
(8.3.2) 72.31 521.02 T
(Counting) 108 521.02 T
0 F
-0.09 (The) 108 503.02 P
5 F
-0.22 (dc_GetNGlobalAttrs\050\051) 129.57 503.02 P
0 F
-0.09 ( function returns the number of attrib) 273.57 503.02 P
-0.09 (utes, of) 450.76 503.02 P
(all types, in a data chunk.) 108 489.02 T
7 10 Q
(int) 126 470.35 T
(dc_GetNGlobalAttrs\050dc\051) 126 458.35 T
(DataChunk *dc;) 126 446.35 T
2 12 Q
(8.3.3) 72.31 415.02 T
(Remo) 108 415.02 T
(ving) 141.1 415.02 T
0 F
8.88 (An) 108 397.02 P
8.88 (y global attrib) 122.48 397.02 P
8.88 (ute can be remo) 207.34 397.02 P
8.88 (v) 310.12 397.02 P
8.88 (ed from a data chunk with) 315.94 397.02 P
5 F
(dc_RemoveGlobalAttr\050\051) 108 383.02 T
0 F
(.) 259.2 383.02 T
7 10 Q
(void) 126 364.35 T
(dc_RemoveGlobalAttr \050dc, key\051) 126 352.35 T
(DataChunk *dc;) 126 340.35 T
(char *key;) 126 328.35 T
0 12 Q
2.13 (This function remo) 108 303.02 P
2.13 (v) 204.07 303.02 P
2.13 (es the global attrib) 209.89 303.02 P
2.13 (ute of the gi) 305.02 303.02 P
2.13 (v) 368.76 303.02 P
2.13 (en) 374.58 303.02 P
7 F
5.11 (key) 391.04 303.02 P
0 F
2.13 ( from the data) 412.64 303.02 P
0.17 (chunk) 108 289.02 P
7 F
0.4 (dc) 140.49 289.02 P
0 F
0.17 (. If an attrib) 154.9 289.02 P
0.17 (ute with the gi) 211.81 289.02 P
0.17 (v) 281.01 289.02 P
0.17 (en k) 286.83 289.02 P
0.17 (e) 307.2 289.02 P
0.17 (y does not e) 312.35 289.02 P
0.17 (xist, the function has no) 370.33 289.02 P
(ef) 108 275.02 T
(fect.) 117.02 275.02 T
0.81 (The internal attrib) 108 249.02 P
0.81 (ute implementation does not actually release memory freed) 196.04 249.02 P
0.47 (by remo) 108 235.02 P
0.47 (v) 147.95 235.02 P
0.47 (ed attrib) 153.77 235.02 P
0.47 (utes, so it is not possible to reduce memory consumption by) 193.66 235.02 P
0.81 (remo) 108 221.02 P
0.81 (ving attrib) 132.48 221.02 P
0.81 (utes. Ho) 182.72 221.02 P
0.81 (we) 223.22 221.02 P
0.81 (v) 236.92 221.02 P
0.81 (er) 242.74 221.02 P
0.81 (, the memory is not dropped; it will be used for) 251.58 221.02 P
(additional attrib) 108 207.02 T
(utes.) 184.09 207.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "104" 104
%%Page: "105" 105
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Global Attrib) 126 736.18 T
(utes) 180.32 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (105) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(8.3.4) 90.31 678.02 T
(Pr) 126 678.02 T
(ocessing b) 138.43 678.02 T
(y K) 200.88 678.02 T
(e) 219.37 678.02 T
(y) 225.86 678.02 T
0 F
0.45 (When an application needs to \336nd out all of the global attrib) 126 660.02 P
0.45 (utes attached to a) 419.67 660.02 P
2.13 (data chunk, it can use) 126 646.02 P
5 F
5.11 (dc_ProcessAttrArrays\050\051) 243.3 646.02 P
0 F
2.13 ( to pass each of the) 401.7 646.02 P
(attrib) 126 632.02 T
(utes to a handler function.) 151.09 632.02 T
7 10 Q
(int) 144 613.35 T
(dc_ProcessAttrArrays \050dc, pattern, func, arg\051) 144 601.35 T
(DataChunk *dc;) 144 589.35 T
(char *pattern;) 144 577.35 T
(int \050*func\051 \050/* char *key, void *vals, int nval, DC_ElemType,) 144 565.35 T
( void *arg */\051;) 216 553.35 T
(void *arg;) 144 541.35 T
0 12 Q
0.72 (The data chunk is passed in) 126 516.02 P
7 F
1.74 (dc) 265.65 516.02 P
0 F
0.72 (, and) 280.05 516.02 P
7 F
1.74 (func) 307.83 516.02 P
0 F
0.72 ( is a function which will be called) 336.62 516.02 P
-0.15 (for each attrib) 126 502.02 P
-0.15 (ute in the data chunk. The) 192.78 502.02 P
7 F
-0.35 (arg) 319.55 502.02 P
0 F
-0.15 ( parameter is a v) 341.15 502.02 P
-0.15 (oid pointer which) 419.63 502.02 P
(will be passed to the function as follo) 126 488.02 T
(ws:) 305.35 488.02 T
7 10 Q
(\050*func\051 \050key, vals, nval, type, arg\051) 144 469.35 T
(char *key;) 144 457.35 T
(void *vals;) 144 445.35 T
(int nval;) 144 433.35 T
(DC_ElemType type;) 144 421.35 T
(void *arg;) 144 409.35 T
0 12 Q
1.35 (If) 126 384.02 P
7 F
3.24 (pattern) 138.34 384.02 P
0 F
1.35 ( is non-) 188.74 384.02 P
5 F
3.24 (NULL) 227.45 384.02 P
0 F
1.35 (, it is interpreted as a re) 256.24 384.02 P
1.35 (gular e) 376.48 384.02 P
1.35 (xpression to match) 410.64 384.02 P
0.24 (ag) 126 370.02 P
0.24 (ainst attrib) 137.27 370.02 P
0.24 (ute k) 188.27 370.02 P
0.24 (e) 212.06 370.02 P
0.24 (ys. Only those k) 217.2 370.02 P
0.24 (e) 295.81 370.02 P
0.24 (ys which match the re) 300.96 370.02 P
0.24 (gular e) 407.06 370.02 P
0.24 (xpression are) 440.11 370.02 P
-0.28 (passed on to) 126 356.02 P
7 F
-0.66 (func) 187.5 356.02 P
0 F
-0.28 (. The handler function will be called for e) 216.3 356.02 P
-0.28 (v) 413.41 356.02 P
-0.28 (ery matching glo-) 419.23 356.02 P
1.17 (bal attrib) 126 342.02 P
1.17 (ute in the data chunk until the function returns a non-zero v) 169.93 342.02 P
1.17 (alue, in) 467.5 342.02 P
11.93 (which case the non-zero return v) 126 328.02 P
11.93 (alue will be returned by) 342.3 328.02 P
5 F
13.33 (dc_ProcessAttrArrays\050\051) 126 314.02 P
0 F
5.55 (. If there are no global attrib) 284.4 314.02 P
5.55 (utes, then) 452.45 314.02 P
5 F
(dc_ProcessAttrArrays\050\051) 126 300.02 T
0 F
( has no ef) 284.4 300.02 T
(fect and returns zero.) 330.42 300.02 T
0.48 (The attributes are processed from a cop) 126 274.02 P
0.48 (y of the actual attrib) 318.04 274.02 P
0.48 (ute information in) 416.37 274.02 P
-0.17 (the data chunk. This allo) 126 260.02 P
-0.17 (ws the handler function to modify or remo) 243.34 260.02 P
-0.17 (v) 445.6 260.02 P
-0.17 (e attrib) 451.42 260.02 P
-0.17 (utes) 484.67 260.02 P
0.23 (without af) 126 246.02 P
0.23 (fecting the attrib) 174.92 246.02 P
0.23 (ute information which is being processed. The code) 254.46 246.02 P
(belo) 126 232.02 T
(w de\336nes a handler function for remo) 146.36 232.02 T
(ving attrib) 326.81 232.02 T
(utes from a data chunk.) 376.24 232.02 T
5 9 Q
(struct AttrDesc {) 144 214.02 T
(enum { Global, Field, Sample } which;) 172.8 203.02 T
(DataChunk *dc;) 172.8 192.02 T
(int sample;) 172.8 181.02 T
(FieldId field;) 172.8 170.02 T
(};) 144 159.02 T
(RemoveAttr \050key, value, nval, type, arg\051) 144 137.02 T
(char *key;) 144 126.02 T
(void *value;) 144 115.02 T
(int nval;) 144 104.02 T
(DC_ElemType type;) 144 93.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "105" 105
%%Page: "106" 106
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Attrib) 108 736.18 T
(utes) 181.82 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(106) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(void *arg;) 126 680.02 T
({) 126 669.02 T
(struct AttrDesc *ad = \050struct AttrDesc *\051arg;) 154.8 658.02 T
(switch \050ad->which\051) 154.8 636.02 T
({) 154.8 625.02 T
(   case Global:) 154.8 614.02 T
(dc_RemoveGlobalAttr \050ad->dc, key\051;) 183.6 603.02 T
(break;) 183.6 592.02 T
(   case Field:) 154.8 581.02 T
(dc_RemoveFieldAttr \050ad->dc, ad->field, key\051;) 183.6 570.02 T
(break;) 183.6 559.02 T
(   case Sample:) 154.8 548.02 T
(dc_RemoveSampleAttr \050ad->dc, ad->sample, key\051;) 183.6 537.02 T
(break;) 183.6 526.02 T
(}) 154.8 515.02 T
(return \0500\051;) 154.8 504.02 T
(}) 126 493.02 T
0 12 Q
0.75 (The code abo) 108 468.02 P
0.75 (v) 173.96 468.02 P
0.75 (e can be used with) 179.77 468.02 P
5 F
1.79 (dc_ProcessAttrArrays\050\051) 275.14 468.02 P
0 F
0.75 ( to remo) 433.55 468.02 P
0.75 (v) 474.85 468.02 P
0.75 (e) 480.67 468.02 P
(all of the global attrib) 108 454.02 T
(utes from a data chunk.) 211.75 454.02 T
5 9 Q
(AttrDesc ad;) 126 436.02 T
(DataChunk *dc;) 126 425.02 T
(/* ... */) 126 403.02 T
(ad.dc = dc;) 126 392.02 T
(ad.which = Global;) 126 381.02 T
(dc_ProcessAttrArrays \050dc, NULL, RemoveAttr, \050void *\051&ad\051;) 126 370.02 T
0 12 Q
(The older process function) 108 345.02 T
5 F
(dc_ProcessAttrs\050\051) 239.3 345.02 T
0 F
( still e) 361.7 345.02 T
(xists.) 390.86 345.02 T
7 10 Q
(int dc_ProcessAttrs \050dc, pattern, func\051) 126 326.35 T
(DataChunk *dc;) 126 314.35 T
(char *pattern;) 126 302.35 T
(int \050*func\051 \050\051;) 126 290.35 T
0 12 Q
0.83 (As before,) 108 265.02 P
7 F
2 (dc) 162.65 265.02 P
0 F
0.83 ( is the usual data chunk, and) 177.05 265.02 P
7 F
2 (func) 321.54 265.02 P
0 F
0.83 ( is a function which will be) 350.34 265.02 P
(called for each attrib) 108 251.02 T
(ute in the data chunk as follo) 206.72 251.02 T
(ws:) 345.07 251.02 T
7 10 Q
(\050*func\051 \050key, value\051) 126 232.35 T
(char *key, *value;) 126 220.35 T
0 12 Q
2.53 (The) 108 195.02 P
7 F
6.08 (pattern) 132.19 195.02 P
0 F
2.53 ( parameter) 182.59 195.02 P
2.53 (, if non-) 235.62 195.02 P
5 F
6.08 (NULL) 279.02 195.02 P
0 F
2.53 (, performs the same function as in) 307.82 195.02 P
5 F
6.96 (dc_ProcessAttrArrays\050\051) 108 181.02 P
0 F
2.9 (. Note that the handler function cannot be) 266.4 181.02 P
1.78 (passed an ar) 108 167.02 P
1.78 (gument, so an) 169.99 167.02 P
1.78 (y information besides the k) 240.37 167.02 P
1.78 (e) 378.04 167.02 P
1.78 (y and v) 383.18 167.02 P
1.78 (alue must be) 421.78 167.02 P
0.74 (passed as global v) 108 153.02 P
0.74 (ariables. Also, since the handler e) 196.92 153.02 P
0.74 (xpects string v) 362.08 153.02 P
0.74 (alues, only) 433.26 153.02 P
0.26 (attrib) 108 139.02 P
0.26 (utes with string v) 133.09 139.02 P
0.26 (alues are passed to the handler function. Attrib) 216.57 139.02 P
0.26 (utes with) 442.08 139.02 P
0.57 (non-string v) 108 125.02 P
0.57 (alues will be skipped by) 166.6 125.02 P
5 F
1.37 (dc_ProcessAttrs\050\051) 288.46 125.02 P
0 F
0.57 (. As f) 410.86 125.02 P
0.57 (ar as han-) 438.21 125.02 P
9.11 (dling the return v) 108 111.02 P
9.11 (alues from) 218.03 111.02 P
7 F
21.87 (func) 290.25 111.02 P
0 F
9.11 (,) 319.05 111.02 P
5 F
21.87 (dc_ProcessAttrs\050\051) 334.16 111.02 P
0 F
9.11 ( and) 456.56 111.02 P
5 F
(dc_ProcessAttrArrays\050\051) 108 97.02 T
0 F
( are identical.) 266.4 97.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "106" 106
%%Page: "107" 107
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Sample Attrib) 126 736.18 T
(utes) 184.33 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (107) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
2 (The) 126 678.02 P
5 F
4.8 (dc_GetGlobalAttrKeys\050\051) 149.66 678.02 P
0 F
2 ( function returns an array of all of the) 308.06 678.02 P
(global attrib) 126 664.02 T
(ute k) 184.09 664.02 T
(e) 207.64 664.02 T
(ys in a data chunk.) 212.78 664.02 T
7 10 Q
(char **) 144 645.35 T
(dc_GetGlobalAttrKeys \050dc, natts\051) 144 633.35 T
(DataChunk *dc;) 144 621.35 T
(int *natts;) 144 609.35 T
0 12 Q
1.31 (The returned memory should not be freed or modi\336ed. The memory is allo-) 126 584.02 P
-0.22 (cated internally and shared among the other attrib) 126 570.02 P
-0.22 (ute methods which return k) 362.52 570.02 P
-0.22 (e) 492.85 570.02 P
-0.22 (y) 498 570.02 P
3.91 (lists \050) 126 556.02 P
5 F
9.39 (dc_GetSampleAttrKeys\050\051) 156.25 556.02 P
0 F
3.91 ( and) 314.65 556.02 P
5 F
9.39 (dc_GetFieldAttrKeys\050\051) 345.8 556.02 P
0 F
3.91 (\051.) 497 556.02 P
1.09 (The k) 126 542.02 P
1.09 (e) 154.63 542.02 P
1.09 (y strings themselv) 159.78 542.02 P
1.09 (es actually reside inside the data chunk, so the) 249.11 542.02 P
1.09 (y are) 479.26 542.02 P
-0.13 (only v) 126 528.02 P
-0.13 (alid while the data chunk e) 155.91 528.02 P
-0.13 (xists. The reference parameter) 284.05 528.02 P
7 F
-0.31 (natts) 431.8 528.02 P
0 F
-0.13 ( returns) 467.8 528.02 P
1.01 (with the number of k) 126 514.02 P
1.01 (e) 230.56 514.02 P
1.01 (ys in the returned k) 235.71 514.02 P
1.01 (e) 332.27 514.02 P
1.01 (y array) 337.42 514.02 P
1.01 (, and the k) 371.29 514.02 P
1.01 (e) 424.18 514.02 P
1.01 (y array itself is) 429.33 514.02 P
1.94 (also terminated with a) 126 500.02 P
5 F
4.66 (NULL) 243.09 500.02 P
0 F
1.94 ( entry) 271.89 500.02 P
1.94 (, i.e.,) 300.72 500.02 P
5 F
4.66 (keys[natts] == NULL) 331.27 500.02 P
0 F
1.94 (. The) 477.4 500.02 P
7 F
-0.12 (natts) 126 486.02 P
0 F
-0.05 ( pointer can also be passed as) 162 486.02 P
5 F
-0.12 (NULL) 305.95 486.02 P
0 F
-0.05 (, in which case it is ignored and the) 334.75 486.02 P
1.56 (number of k) 126 472.02 P
1.56 (e) 187.66 472.02 P
1.56 (ys is not returned. If there are no attrib) 192.81 472.02 P
1.56 (utes present, the return) 390.01 472.02 P
(v) 126 458.02 T
(alue will be) 131.7 458.02 T
5 F
(NULL) 190.69 458.02 T
0 F
( and) 219.49 458.02 T
7 F
(natts) 242.82 458.02 T
0 F
(, if non-) 278.82 458.02 T
5 F
(NULL) 317.15 458.02 T
0 F
(, will be set to zero.) 345.95 458.02 T
(The e) 126 432.02 T
(xample belo) 152.81 432.02 T
(w prints all of the attrib) 211.5 432.02 T
(ute k) 324.25 432.02 T
(e) 347.8 432.02 T
(ys in a data chunk.) 352.94 432.02 T
5 9 Q
(char **keys;) 144 409.02 T
(int natts, i;) 144 398.02 T
(keys = dc_GetGlobalAttrKeys\050dc, &natts\051;) 144 376.02 T
(for \050i = 0; i < natts; ++i\051) 144 365.02 T
(printf \050\322   %s%c\323, keys[i], \050i+1\051%5 ? \324 \324:\325\134n\325\051;) 172.8 354.02 T
(printf \050\322\134n\323\051;) 144 343.02 T
0 12 Q
(Or) 126 318.02 T
(, the follo) 138.18 318.02 T
(wing is also possible.) 184.21 318.02 T
5 9 Q
(for \050keys = dc_GetGlobalAttrKeys\050dc, NULL\051;) 144 295.02 T
(keys && *keys; ++keys\051) 172.8 284.02 T
(printf \050\322   %s\323, *keys\051;) 172.8 273.02 T
0 12 Q
17.6 (If a k) 126 248.02 P
17.6 (e) 186.39 248.02 P
17.6 (y list must be preserv) 191.54 248.02 P
17.6 (ed be) 364.4 248.02 P
17.6 (yond calls to) 407.48 248.02 P
5 F
55.69 (dc_GetSampleAttrKeys\050\051) 126 234.02 P
0 F
23.2 (,) 284.4 234.02 P
5 F
55.69 (dc_GetFieldAttrKeys\050\051) 313.6 234.02 P
0 F
23.2 (, or) 464.8 234.02 P
5 F
2.24 (dc_GetGlobalAttrKeys\050\051) 126 220.02 P
0 F
0.94 (, or it must be preserv) 284.4 220.02 P
0.94 (ed past the destruction) 393.54 220.02 P
-0.06 (of the data chunk, then the array of k) 126 206.02 P
-0.06 (e) 302.37 206.02 P
-0.06 (y pointers and the k) 307.51 206.02 P
-0.06 (e) 401.82 206.02 P
-0.06 (y strings themselv) 406.96 206.02 P
-0.06 (es) 494 206.02 P
(must be copied by the application.) 126 192.02 T
72 149.02 558 151.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 149.02 558 151.02 R
7 X
0 0 0 1 0 0 0 K
V
72 150.02 117 150.02 2 L
0.5 H
2 Z
0 X
N
126 150.02 558 150.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(8.4) 100.32 155.02 T
(Sample Attrib) 126 155.02 T
(utes) 203.77 155.02 T
0 F
2.68 (The transparent class implements samples. Accordingly) 126 131.02 P
2.68 (, it implements the) 406.61 131.02 P
2.05 (attrib) 126 117.02 P
2.05 (utes which can be attached to a speci\336c sample. The sample attrib) 151.09 117.02 P
2.05 (ute) 489.34 117.02 P
0.73 (methods are identical to those for global attrib) 126 103.02 P
0.73 (utes e) 352.52 103.02 P
0.73 (xcept the) 380.74 103.02 P
0.73 (y tak) 424.94 103.02 P
0.73 (e one addi-) 449.22 103.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "107" 107
%%Page: "108" 108
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Attrib) 108 736.18 T
(utes) 181.82 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(108) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
3.78 (tional parameter) 108 678.02 P
3.78 (, the speci\336c sample number whose attrib) 189.61 678.02 P
3.78 (utes are to be) 411.02 678.02 P
12.27 (accessed. Also, these methods only w) 108 664.02 P
12.27 (ork for subclasses of) 350.21 664.02 P
5 F
8.62 (DCC_Transparent) 108 650.02 P
0 F
3.59 ( \050which includes the T) 216 650.02 P
3.59 (ransparent class itself\051, since) 337.26 650.02 P
(these are the only classes which ha) 108 636.02 T
(v) 275.05 636.02 T
(e samples.) 280.87 636.02 T
0.26 (At the moment, no check is performed to v) 108 610.02 P
0.26 (erify that the gi) 316.21 610.02 P
0.26 (v) 390.34 610.02 P
0.26 (en sample actually) 396.16 610.02 P
-0.05 (e) 108 596.02 P
-0.05 (xists in the data chunk. Ho) 113.15 596.02 P
-0.05 (we) 240.57 596.02 P
-0.05 (v) 254.27 596.02 P
-0.05 (er) 260.09 596.02 P
-0.05 (, future v) 268.93 596.02 P
-0.05 (ersions might perform such a check,) 312.3 596.02 P
-0.07 (so applications should only add attrib) 108 582.02 P
-0.07 (utes to samples which already e) 287.05 582.02 P
-0.07 (xist in the) 438.81 582.02 P
(data chunk.) 108 568.02 T
0.83 (As mentioned in Section) 108 542.02 P
0.83 (8.3, \322Global Attrib) 231.81 542.02 P
0.83 (utes\323, some details of the sample) 323.89 542.02 P
0.92 (attrib) 108 528.02 P
0.92 (ute methods are left out where those details are identical to the descrip-) 133.09 528.02 P
-0.13 (tions of the global methods. Refer to the global attrib) 108 514.02 P
-0.13 (utes section for the partic-) 361.22 514.02 P
(ulars of a method\325) 108 500.02 T
(s implementation and more thorough e) 194.99 500.02 T
(xamples.) 380.46 500.02 T
2 F
(8.4.1) 72.31 468.02 T
(Setting and Getting) 108 468.02 T
0 F
1.35 (The most basic sample attrib) 108 450.02 P
1.35 (ute method adds a k) 251.15 450.02 P
1.35 (e) 352.42 450.02 P
1.35 (y and v) 357.56 450.02 P
1.35 (alue pair to a data) 395.29 450.02 P
(chunk sample.) 108 436.02 T
7 10 Q
(void) 126 417.35 T
(dc_SetSampleAttrArray \050dc, sample, key, type, nval, values\051) 126 405.35 T
(DataChunk *dc;) 126 393.35 T
(int sample;) 126 381.35 T
(char *key;) 126 369.35 T
(DC_ElemType type;) 126 357.35 T
(int nval;) 126 345.35 T
(void *values;) 126 333.35 T
0 12 Q
0.45 (The tar) 108 308.02 P
0.45 (get data chunk is in) 142.56 308.02 P
7 F
1.09 (dc) 241.14 308.02 P
0 F
0.45 (, and) 255.54 308.02 P
7 F
1.09 (sample) 282.78 308.02 P
0 F
0.45 ( contains the number of the sam-) 325.98 308.02 P
0.55 (ple to which the attrib) 108 294.02 P
0.55 (ute will be added. The rest of the parameters are just as) 215.3 294.02 P
5.9 (the) 108 280.02 P
5.9 (y are for the global method) 122.48 280.02 P
5 F
14.15 (dc_SetGlobalAttrArray\050\051) 291.17 280.02 P
0 F
5.9 (. See) 456.77 280.02 P
(Section) 108 266.02 T
(8.3.) 147 266.02 T
(The other basic method retrie) 108 240.02 T
(v) 249 240.02 T
(es the v) 254.82 240.02 T
(alue of an attrib) 291.18 240.02 T
(ute.) 366.59 240.02 T
7 10 Q
(void) 126 221.35 T
(*dc_GetSampleAttrArray \050dc, sample, key, type, nval\051) 126 209.35 T
(DataChunk *dc;) 126 197.35 T
(int sample;) 126 185.35 T
(char *key;) 126 173.35 T
(DC_ElemType *type;) 126 161.35 T
(int *nval;) 126 149.35 T
0 12 Q
-0 (Ag) 108 124.02 P
-0 (ain, e) 122.6 124.02 P
-0 (xcept for the required sample number) 148.41 124.02 P
-0 (,) 328.19 124.02 P
7 F
-0.01 (sample) 334.19 124.02 P
0 F
-0 (, the rest of the param-) 377.39 124.02 P
13.43 (eters serv) 108 110.02 P
13.43 (e the same function as in the global method,) 166.9 110.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "108" 108
%%Page: "109" 109
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Sample Attrib) 126 736.18 T
(utes) 184.33 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (109) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 12 Q
1.97 (dc_GetGlobalAttrArray\050\051) 126 678.02 P
0 F
0.82 (. The return v) 291.6 678.02 P
0.82 (alue is) 359.08 678.02 P
5 F
1.97 (NULL) 394.71 678.02 P
0 F
0.82 ( if the gi) 423.51 678.02 P
0.82 (v) 466 678.02 P
0.82 (en k) 471.82 678.02 P
0.82 (e) 492.85 678.02 P
0.82 (y) 498 678.02 P
(string) 126 664.02 T
7 F
(key) 156.34 664.02 T
0 F
( could not be found for the gi) 177.94 664.02 T
(v) 317.95 664.02 T
(en sample.) 323.77 664.02 T
(The original functions for setting and getting string attrib) 126 638.02 T
(ute v) 399.74 638.02 T
(alues still e) 423.11 638.02 T
(xist.) 476.93 638.02 T
7 10 Q
(void) 144 619.35 T
(dc_SetSampleAttr \050dc, sample, key, value\051) 144 607.35 T
(DataChunk *dc;) 144 595.35 T
(int sample;) 144 583.35 T
(char *key;) 144 571.35 T
(char *value;) 144 559.35 T
(char *) 144 535.35 T
(dc_GetSampleAttr \050dc, sample, key\051) 144 523.35 T
(DataChunk *dc;) 144 511.35 T
(int sample;) 144 499.35 T
(char *value;) 144 487.35 T
0 12 Q
1.77 (The) 126 462.02 P
7 F
4.24 (dc) 149.43 462.02 P
0 F
1.77 (,) 163.83 462.02 P
7 F
4.24 (sample) 171.59 462.02 P
0 F
1.77 (, and) 214.79 462.02 P
7 F
4.24 (key) 244.66 462.02 P
0 F
1.77 ( parameters are the same as usual. The) 266.26 462.02 P
7 F
4.24 (value) 468 462.02 P
0 F
0.56 (parameter is a string v) 126 448.02 P
0.56 (alue which will be paired with the gi) 234.6 448.02 P
0.56 (v) 413.9 448.02 P
0.56 (en k) 419.72 448.02 P
0.56 (e) 440.49 448.02 P
0.56 (y) 445.64 448.02 P
0.56 (. Lik) 450.86 448.02 P
0.56 (e) 473.98 448.02 P
0.56 (wise,) 479 448.02 P
5 F
0.93 (dc_GetSampleAttr\050\051) 126 434.02 P
0 F
0.39 ( only returns string v) 255.6 434.02 P
0.39 (alues, so if) 356.85 434.02 P
7 F
0.93 (key) 412.67 434.02 P
0 F
0.39 ( does not ha) 434.27 434.02 P
0.39 (v) 492.85 434.02 P
0.39 (e) 498.67 434.02 P
0.17 (a string v) 126 420.02 P
0.17 (alue or it does not e) 170.7 420.02 P
0.17 (xist, the return v) 265.67 420.02 P
0.17 (alue will be NULL. The returned) 344.54 420.02 P
-0.22 (pointer belongs to the data chunk, so it should not be modi\336ed or freed. Also, it) 126 406.02 P
(will be in) 126 392.02 T
(v) 170.86 392.02 T
(alid once the data chunk has been destro) 176.56 392.02 T
(yed.) 370.06 392.02 T
2 F
(8.4.2) 90.31 360.02 T
(Counting) 126 360.02 T
0 F
2.18 (The) 126 342.02 P
5 F
5.24 (dc_GetNSampleAttrs\050\051) 149.84 342.02 P
0 F
2.18 ( function returns the number of attrib) 293.84 342.02 P
2.18 (utes) 484.67 342.02 P
(stored with a particular sample.) 126 328.02 T
7 10 Q
(int) 144 309.35 T
(dc_GetNSampleAttrs \050dc, sample\051) 144 297.35 T
(DataChunk *dc;) 144 285.35 T
(int sample;) 144 273.35 T
0 12 Q
1.59 (The return v) 126 248.02 P
1.59 (alue will be the number of k) 188.19 248.02 P
1.59 (e) 332.91 248.02 P
1.59 (y and v) 338.06 248.02 P
1.59 (alue pairs associated with) 376.26 248.02 P
2.81 (sample number) 126 234.02 P
7 F
6.74 (sample) 208.27 234.02 P
0 F
2.81 ( in data chunk) 251.47 234.02 P
7 F
6.74 (dc) 333.36 234.02 P
0 F
2.81 (, re) 347.76 234.02 P
2.81 (g) 365.71 234.02 P
2.81 (ardless of the type of the) 371.65 234.02 P
(attrib) 126 220.02 T
(ute v) 151.09 220.02 T
(alues.) 174.46 220.02 T
2 F
(8.4.3) 90.31 188.02 T
(Remo) 126 188.02 T
(ving) 159.1 188.02 T
0 F
(There is a single function for remo) 126 170.02 T
(ving an attrib) 292.45 170.02 T
(ute from a sample by its k) 356.21 170.02 T
(e) 480.74 170.02 T
(y) 485.89 170.02 T
(.) 491.11 170.02 T
7 10 Q
(void) 144 151.35 T
(dc_RemoveSampleAttr \050dc, sample, key\051) 144 139.35 T
(DataChunk *dc;) 144 127.35 T
(int sample;) 144 115.35 T
(char *key;) 144 103.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "109" 109
%%Page: "110" 110
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Attrib) 108 736.18 T
(utes) 181.82 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(110) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.02 (This function remo) 108 678.02 P
1.02 (v) 201.85 678.02 P
1.02 (es the attrib) 207.66 678.02 P
1.02 (ute with the gi) 265.45 678.02 P
1.02 (v) 337.2 678.02 P
1.02 (en) 343.02 678.02 P
7 F
2.44 (key) 358.37 678.02 P
0 F
1.02 ( from sample number) 379.97 678.02 P
7 F
(sample) 108 664.02 T
0 F
( of the data chunk) 151.2 664.02 T
7 F
(dc) 240.18 664.02 T
0 F
(.) 254.58 664.02 T
2 F
(8.4.4) 72.31 632.02 T
(Pr) 108 632.02 T
(ocessing By K) 120.43 632.02 T
(e) 202.94 632.02 T
(y) 209.44 632.02 T
0 F
12.06 (A sample\325) 108 614.02 P
12.06 (s attrib) 169.06 614.02 P
12.06 (utes can be processed k) 213.88 614.02 P
12.06 (e) 374.64 614.02 P
12.06 (y by k) 379.78 614.02 P
12.06 (e) 433.79 614.02 P
12.06 (y using) 438.93 614.02 P
5 F
(dc_ProcSampleAttrArrays\050\051) 108 600.02 T
0 F
(.) 288 600.02 T
7 10 Q
(int) 126 581.35 T
(dc_ProcSampleAttrArrays \050dc, sample, pattern, func, arg\051) 126 569.35 T
(DataChunk *dc;) 126 557.35 T
(int sample;) 126 545.35 T
(char *pattern;) 126 533.35 T
(int \050*func\051 \050/* char *key, void *vals, int nval,) 126 521.35 T
( DC_ElemType, void *arg */\051;) 198 509.35 T
(void *arg;) 126 497.35 T
0 12 Q
1.11 (This function tra) 108 472.02 P
1.11 (v) 189.98 472.02 P
1.11 (erses the attrib) 195.8 472.02 P
1.11 (utes for the gi) 267.77 472.02 P
1.11 (v) 337.14 472.02 P
1.11 (en sample number) 342.95 472.02 P
1.11 (,) 432.69 472.02 P
7 F
2.67 (sample) 439.8 472.02 P
0 F
1.11 (,) 483 472.02 P
-0.01 (and data chunk,) 108 458.02 P
7 F
-0.04 (dc) 186.6 458.02 P
0 F
-0.01 (. If the re) 201 458.02 P
-0.01 (gular e) 244.76 458.02 P
-0.01 (xpression) 277.55 458.02 P
7 F
-0.04 (pattern) 326.53 458.02 P
0 F
-0.01 ( is non-) 376.93 458.02 P
5 F
-0.04 (NULL) 412.9 458.02 P
0 F
-0.01 (, then the) 441.7 458.02 P
1.48 (function skips those attrib) 108 444.02 P
1.48 (utes whose k) 236.53 444.02 P
1.48 (e) 301.36 444.02 P
1.48 (ys do not match the e) 306.5 444.02 P
1.48 (xpression. F) 416.04 444.02 P
1.48 (or) 476 444.02 P
(each attrib) 108 430.02 T
(ute tra) 158.08 430.02 T
(v) 188.16 430.02 T
(ersed, the handler) 193.98 430.02 T
7 F
(func) 281.95 430.02 T
0 F
( is called with these parameters.) 310.75 430.02 T
7 10 Q
(\050*func\051 \050key, vals, nval, type, arg\051) 126 411.35 T
(char *key;) 126 399.35 T
(void *vals;) 126 387.35 T
(int nval;) 126 375.35 T
(D_ElemType type;) 126 363.35 T
(void *arg;) 126 351.35 T
0 12 Q
0.1 (The attrib) 108 326.02 P
0.1 (ute k) 154.85 326.02 P
0.1 (e) 178.49 326.02 P
0.1 (y is in) 183.64 326.02 P
7 F
0.23 (key) 216.27 326.02 P
0 F
0.1 (, and) 237.09 326.02 P
7 F
0.23 (vals) 263.61 326.02 P
0 F
0.1 ( points to the array of v) 292.42 326.02 P
0.1 (alues. The) 404.68 326.02 P
7 F
0.23 (nval) 457.2 326.02 P
0 F
0.24 (parameter holds the number of elements in the) 108 312.02 P
7 F
0.58 (vals) 335.9 312.02 P
0 F
0.24 ( array) 364.7 312.02 P
0.24 (, while) 391.81 312.02 P
7 F
0.58 (type) 427.95 312.02 P
0 F
0.24 ( holds) 456.75 312.02 P
2.12 (the type of those elements. The) 108 298.02 P
7 F
5.09 (arg) 273.71 298.02 P
0 F
2.12 ( parameter is the parameter passed to) 295.31 298.02 P
5 F
2.3 (dc_ProcSampleAttrArrays\050\051) 108 284.02 P
0 F
0.96 (. The function handler is called for each) 288 284.02 P
0.76 (attrib) 108 270.02 P
0.76 (ute until the handler returns non-zero, at which time the non-zero return) 133.09 270.02 P
8.4 (v) 108 256.02 P
8.4 (alue is returned by) 113.7 256.02 P
5 F
20.16 (dc_ProcSampleAttrArrays\050\051) 239.28 256.02 P
0 F
8.4 (. Otherwise,) 419.28 256.02 P
3.38 (d) 108 242.02 P
5 F
8.12 (c_ProcSampleAttrArrays\050\051) 114 242.02 P
0 F
3.38 ( e) 286.8 242.02 P
3.38 (xhausts the attrib) 298.33 242.02 P
3.38 (ute list and returns) 386.86 242.02 P
(zero.) 108 228.02 T
3.69 (Note that there is no backw) 108 202.02 P
3.69 (ards-compatible) 257.99 202.02 P
5 F
8.87 (dc_ProcSampleAttrs\050\051) 342 202.02 P
0 F
0.16 (function since the function ne) 108 188.02 P
0.16 (v) 250.98 188.02 P
0.16 (er e) 256.8 188.02 P
0.16 (xisted in earlier v) 274.44 188.02 P
0.16 (ersions. Where that sort of) 358.39 188.02 P
1.62 (functionality is needed, use) 108 174.02 P
5 F
3.88 (dc_ProcSampleAttrArrays\050\051) 248.79 174.02 P
0 F
1.62 ( and screen) 428.79 174.02 P
(out the attrib) 108 160.02 T
(utes whose v) 169.09 160.02 T
(alues are not strings.) 230.78 160.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "110" 110
%%Page: "111" 111
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Field Attrib) 126 736.18 T
(utes) 173.32 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (111) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
-0.02 (The) 126 678.02 P
5 F
-0.05 (dc_GetSampleAttrKeys\050\051) 147.64 678.02 P
0 F
-0.02 ( function returns a list of attrib) 306.04 678.02 P
-0.02 (ute k) 452.34 678.02 P
-0.02 (e) 475.87 678.02 P
-0.02 (ys to) 481.01 678.02 P
(an application.) 126 664.02 T
7 10 Q
(char) 144 645.35 T
(**dc_GetSampleAttrKeys \050dc, sample, natts\051) 144 633.35 T
(DataChunk *dc;) 144 621.35 T
(int sample;) 144 609.35 T
(int *natts;) 144 597.35 T
0 12 Q
2.59 (The data chunk and sample number are passed in the parameters) 126 572.02 P
7 F
6.2 (dc) 466.69 572.02 P
0 F
2.59 ( and) 481.09 572.02 P
7 F
1.46 (sample) 126 558.02 P
0 F
0.61 (, respecti) 169.2 558.02 P
0.61 (v) 212.83 558.02 P
0.61 (ely) 218.65 558.02 P
0.61 (. The) 232.53 558.02 P
7 F
1.46 (natts) 261.41 558.02 P
0 F
0.61 ( parameter) 297.41 558.02 P
0.61 (, if non-) 348.51 558.02 P
5 F
1.46 (NULL) 388.06 558.02 P
0 F
0.61 (, returns the num-) 416.86 558.02 P
1.22 (ber of attrib) 126 544.02 P
1.22 (ute k) 184.84 544.02 P
1.22 (e) 209.6 544.02 P
1.22 (ys. If there are no attrib) 214.75 544.02 P
1.22 (utes, the return v) 333.23 544.02 P
1.22 (alue is) 417.23 544.02 P
5 F
2.92 (NULL) 453.65 544.02 P
0 F
1.22 ( and) 482.45 544.02 P
7 F
4.66 (natts) 126 530.02 P
0 F
1.94 ( contains zero. Otherwise, the return v) 162 530.02 P
1.94 (alue is a pointer to internally) 356.64 530.02 P
-0.08 (allocated memory which should not be modi\336ed or freed. The pointer points to) 126 516.02 P
0.57 (an array of strings; each string points to an attrib) 126 502.02 P
0.57 (ute k) 363.88 502.02 P
0.57 (e) 388 502.02 P
0.57 (y in the data chunk, so) 393.15 502.02 P
-0.01 (the k) 126 488.02 P
-0.01 (e) 149.53 488.02 P
-0.01 (y list is only v) 154.68 488.02 P
-0.01 (alid while the data chunk e) 222.34 488.02 P
-0.01 (xists. Also, since the memory is) 351.07 488.02 P
0.8 (shared among other attrib) 126 474.02 P
0.8 (ute methods, the k) 251.13 474.02 P
0.8 (e) 341.4 474.02 P
0.8 (y list is only v) 346.55 474.02 P
0.8 (alid until the ne) 417.45 474.02 P
0.8 (xt) 494.66 474.02 P
4.8 (call to an) 126 460.02 P
4.8 (y of the other k) 179.42 460.02 P
4.8 (e) 271.84 460.02 P
4.8 (y methods:) 276.99 460.02 P
5 F
11.53 (dc_GetGlobalAttrKeys\050\051) 342.6 460.02 P
0 F
4.8 (,) 501 460.02 P
5 F
5.23 (dc_GetSampleAttrKeys\050\051) 126 446.02 P
0 F
2.18 (, or) 284.4 446.02 P
5 F
5.23 (dc_GetFieldAttrKeys\050\051) 307.75 446.02 P
0 F
2.18 (. T) 458.95 446.02 P
2.18 (o pre-) 473.5 446.02 P
-0.03 (serv) 126 432.02 P
-0.03 (e the k) 145.81 432.02 P
-0.03 (e) 177.63 432.02 P
-0.03 (y list, the application must cop) 182.78 432.02 P
-0.03 (y the array of string pointers and the) 329.87 432.02 P
(strings themselv) 126 418.02 T
(es.) 204.16 418.02 T
72 375.02 558 377.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 375.02 558 377.02 R
7 X
0 0 0 1 0 0 0 K
V
72 376.02 117 376.02 2 L
0.5 H
2 Z
0 X
N
126 376.02 558 376.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(8.5) 100.32 381.02 T
(Field Attrib) 126 381.02 T
(utes) 189.1 381.02 T
0 F
1.37 (Last b) 126 357.02 P
1.37 (ut certainly not least, \336eld attrib) 156.79 357.02 P
1.37 (utes associate v) 316.72 357.02 P
1.37 (alues with an attrib) 393.81 357.02 P
1.37 (ute) 489.34 357.02 P
0.39 (k) 126 343.02 P
0.39 (e) 131.88 343.02 P
0.39 (y for a particular \336eld of a data chunk. Since the MetData class implements) 137.03 343.02 P
0.46 (\336eld functionality) 126 329.02 P
0.46 (, it also implements \336eld attrib) 211.35 329.02 P
0.46 (utes. The \336eld attrib) 360.08 329.02 P
0.46 (ute meth-) 457.88 329.02 P
0.79 (ods are identical to those for global attrib) 126 315.02 P
0.79 (utes e) 328.91 315.02 P
0.79 (xcept the) 357.18 315.02 P
0.79 (y tak) 401.44 315.02 P
0.79 (e one additional) 425.77 315.02 P
0.7 (parameter) 126 301.02 P
0.7 (, the) 173.5 301.02 P
5 F
1.68 (FieldId) 198.56 301.02 P
0 F
0.7 ( of the \336eld whose attrib) 248.96 301.02 P
0.7 (utes will be accessed. Also,) 369.22 301.02 P
1.03 (these methods only w) 126 287.02 P
1.03 (ork for subclasses of) 233.31 287.02 P
5 F
2.48 (DCC_MetData) 345.06 287.02 P
0 F
1.03 (, since those are) 424.26 287.02 P
(the only classes which ha) 126 273.02 T
(v) 247.74 273.02 T
(e \336elds.) 253.56 273.02 T
1.95 (At the moment, no check is performed to v) 126 247.02 P
1.95 (erify that a gi) 347.74 247.02 P
1.95 (v) 417.62 247.02 P
1.95 (en \336eld actually) 423.44 247.02 P
-0.05 (e) 126 233.02 P
-0.05 (xists in the data chunk. Ho) 131.15 233.02 P
-0.05 (we) 258.58 233.02 P
-0.05 (v) 272.27 233.02 P
-0.05 (er) 278.09 233.02 P
-0.05 (, future v) 286.93 233.02 P
-0.05 (ersions might perform such a check,) 330.3 233.02 P
0.98 (so applications should only add attrib) 126 219.02 P
0.98 (utes to \336elds which already e) 310.33 219.02 P
0.98 (xist in the) 454.7 219.02 P
(data chunk.) 126 205.02 T
2.09 (As mentioned in Section) 126 179.02 P
2.09 (8.3, \322Global Attrib) 253.61 179.02 P
2.09 (utes\323, some details of the \336eld) 348.22 179.02 P
1.64 (attrib) 126 165.02 P
1.64 (ute methods are left out where those details are identical to the global) 151.09 165.02 P
0.05 (methods. Refer to the global attrib) 126 151.02 P
0.05 (utes section for the particulars of a method\325) 290.67 151.02 P
0.05 (s) 499.33 151.02 P
(implementation and more thorough e) 126 137.02 T
(xamples.) 303.8 137.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "111" 111
%%Page: "112" 112
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Attrib) 108 736.18 T
(utes) 181.82 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(112) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(8.5.1) 72.31 678.02 T
(Setting and Getting) 108 678.02 T
0 F
1.04 (The) 108 660.02 P
5 F
2.5 (dc_SetFieldAttrArray\050\051) 130.7 660.02 P
0 F
1.04 ( function performs the task of assigning) 289.1 660.02 P
(an array of elements to an attrib) 108 646.02 T
(ute k) 260.39 646.02 T
(e) 283.93 646.02 T
(y for a particular \336eld.) 289.08 646.02 T
7 10 Q
(void) 126 627.35 T
(dc_SetFieldAttrArray \050dc, field, key, type, nval, vals\051) 126 615.35 T
(DataChunk *dc;) 126 603.35 T
(FieldId field;) 126 591.35 T
(char *key;) 126 579.35 T
(DC_ElemType type;) 126 567.35 T
(int nval;) 126 555.35 T
(void *vals;) 126 543.35 T
0 12 Q
0.75 (Where) 108 518.02 P
7 F
1.81 (dc) 143.73 518.02 P
0 F
0.75 ( is the data chunk,) 158.13 518.02 P
7 F
1.81 (field) 251.89 518.02 P
0 F
0.75 ( is a) 287.89 518.02 P
5 F
1.81 (FieldId) 312.48 518.02 P
0 F
0.75 (, and) 362.88 518.02 P
7 F
1.81 (key) 390.72 518.02 P
0 F
0.75 ( is the attrib) 412.32 518.02 P
0.75 (ute) 471.34 518.02 P
1.25 (k) 108 504.02 P
1.25 (e) 113.88 504.02 P
1.25 (y) 119.03 504.02 P
1.25 (. The rest of the parameters specify the v) 124.25 504.02 P
1.25 (alue part of the attrib) 329.55 504.02 P
1.25 (ute:) 434.95 504.02 P
7 F
3 (vals) 457.2 504.02 P
0 F
1.33 (points to an array containing) 108 490.02 P
7 F
3.18 (nval) 254.95 490.02 P
0 F
1.33 ( number of elements of the gi) 283.75 490.02 P
1.33 (v) 432.73 490.02 P
1.33 (en) 438.55 490.02 P
7 F
3.18 (type) 454.2 490.02 P
0 F
1.33 (.) 483 490.02 P
0.41 (The elements are in their nati) 108 476.02 P
0.41 (v) 250.03 476.02 P
0.41 (e form rather than) 255.85 476.02 P
5 F
0.97 (DC_Element) 346.78 476.02 P
0 F
0.41 ( unions, so an) 418.78 476.02 P
(array of \337oating point v) 108 462.02 T
(alues is passed as e) 221.69 462.02 T
(xactly that, an array of \337oats.) 313.49 462.02 T
5 9 Q
(FieldId field;) 126 439.02 T
(float min, max, range[2];) 126 428.02 T
(...) 126 417.02 T
(range[0] = min = 0.0;) 126 406.02 T
(range[1] = max = 98.6;) 126 395.02 T
(dc_SetFieldAttrArray \050dc, field, \322range\323, DCT_Float, 2, range\051;) 126 384.02 T
0 12 Q
-0.3 (Attrib) 108 359.02 P
-0.3 (utes whose v) 136.43 359.02 P
-0.3 (alues are strings \050) 197.52 359.02 P
5 F
-0.71 (DCT_String) 280.94 359.02 P
0 F
-0.3 (\051 can only ha) 352.94 359.02 P
-0.3 (v) 414.13 359.02 P
-0.3 (e one element) 419.95 359.02 P
0.37 (in their array) 108 345.02 P
0.37 (, the gi) 169.94 345.02 P
0.37 (v) 203.38 345.02 P
0.37 (en string. The call belo) 209.21 345.02 P
0.37 (w f) 320.7 345.02 P
0.37 (ails with a w) 336.62 345.02 P
0.37 (arning message to) 398.61 345.02 P
(the e) 108 331.02 T
(v) 130.69 331.02 T
(ent logger) 136.51 331.02 T
(.) 184.18 331.02 T
5 9 Q
(char *names[] = { \322mike\323, \322larry\323, \322stacy\323 };) 126 308.02 T
(...) 126 297.02 T
(dc_SetFieldAttrArray \050dc, field, \322names\323, DCT_String, 3, names\051;) 126 286.02 T
0 12 Q
0.24 (The names array actually has tw) 108 261.02 P
0.24 (o dimensions: the names and the characters in) 264.03 261.02 P
0.12 (the names. The interf) 108 247.02 P
0.12 (ace does not yet possess the capability of storing this sort) 210.2 247.02 P
(of \324multi-dimensional\325 data as an attrib) 108 233.02 T
(ute.) 295.4 233.02 T
12.64 (An attrib) 108 207.02 P
12.64 (ute can be retrie) 163.4 207.02 P
12.64 (v) 277.99 207.02 P
12.64 (ed for a particular \336eld using) 283.81 207.02 P
5 F
(dc_GetFieldAttrArray\050\051) 108 193.02 T
0 F
(.) 266.4 193.02 T
7 10 Q
(void *) 126 174.35 T
(dc_GetFieldAttrArray \050dc, field, key, type, nval\051) 126 162.35 T
(DataChunk *dc;) 126 150.35 T
(FieldId field;) 126 138.35 T
(char *key;) 126 126.35 T
(DC_ElemType *type;) 126 114.35 T
(int *nval;) 126 102.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "112" 112
%%Page: "113" 113
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Field Attrib) 126 736.18 T
(utes) 173.32 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (113) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.12 (As for) 126 678.02 P
5 F
2.69 (dc_SetFieldAttrArray\050\051) 161.57 678.02 P
0 F
1.12 (,) 319.97 678.02 P
7 F
2.69 (dc) 327.09 678.02 P
0 F
1.12 ( is the data chunk,) 341.49 678.02 P
7 F
2.69 (field) 437.09 678.02 P
0 F
1.12 ( is the) 473.09 678.02 P
5 F
4.79 (FieldId) 126 664.02 P
0 F
1.99 ( of the \336eld to access, and) 176.4 664.02 P
7 F
4.79 (key) 317.67 664.02 P
0 F
1.99 ( is the k) 339.27 664.02 P
1.99 (e) 382.8 664.02 P
1.99 (y of the attrib) 387.95 664.02 P
1.99 (ute to be) 458.68 664.02 P
0.73 (retrie) 126 650.02 P
0.73 (v) 151.02 650.02 P
0.73 (ed. If no attrib) 156.84 650.02 P
0.73 (ute e) 227.43 650.02 P
0.73 (xists with the gi) 250.97 650.02 P
0.73 (v) 329.19 650.02 P
0.73 (en k) 335.01 650.02 P
0.73 (e) 355.94 650.02 P
0.73 (y) 361.09 650.02 P
0.73 (, the function returns) 366.31 650.02 P
5 F
1.74 (NULL) 472.2 650.02 P
0 F
0.73 (.) 501 650.02 P
-0.3 (Otherwise, the return v) 126 636.02 P
-0.3 (alue is a pointer to the attrib) 235.44 636.02 P
-0.3 (ute\325) 368.05 636.02 P
-0.3 (s array of v) 386.05 636.02 P
-0.3 (alues, e) 439.16 636.02 P
-0.3 (xactly) 474.67 636.02 P
2.08 (as passed to) 126 622.02 P
5 F
4.99 (dc_SetFieldAttrArray\050\051) 192.56 622.02 P
0 F
2.08 (. If) 350.96 622.02 P
7 F
4.99 (type) 372.11 622.02 P
0 F
2.08 ( and) 400.91 622.02 P
7 F
4.99 (nval) 428.39 622.02 P
0 F
2.08 ( are non-) 457.19 622.02 P
5 F
5.5 (NULL) 126 608.02 P
0 F
2.29 (, the) 154.8 608.02 P
2.29 (y will be set to the type and the number of the array elements,) 177.58 608.02 P
(respecti) 126 594.02 T
(v) 163.02 594.02 T
(ely) 168.84 594.02 T
(.) 182.72 594.02 T
(The attrib) 126 568.02 T
(ute stored abo) 172.75 568.02 T
(v) 239.89 568.02 T
(e could be retrie) 245.71 568.02 T
(v) 323.05 568.02 T
(ed as follo) 328.87 568.02 T
(ws:) 378.56 568.02 T
5 9 Q
(float *getf;) 144 545.02 T
(int nval;) 144 534.02 T
(DC_ElemType type;) 144 523.02 T
(getf = dc_GetFieldAttrArray \050dc, field, \322range\323, &type, &nval\051;) 144 501.02 T
(/* type == DCT_Float && nval == 2 && getf[0] == 0.0 && getf[1] == 98.6 */) 144 490.02 T
0 12 Q
9.75 (The original \336eld attrib) 126 465.02 P
9.75 (ute functions) 266.68 465.02 P
5 F
23.41 (dc_SetFieldAttr\050\051) 351.52 465.02 P
0 F
9.75 ( and) 473.92 465.02 P
5 F
(dc_GetFieldAttr\050\051) 126 451.02 T
0 F
( limit their operations to string types.) 248.4 451.02 T
7 10 Q
(void) 144 432.35 T
(dc_SetFieldAttr \050dc, field, key, value\051) 144 420.35 T
(DataChunk *dc;) 144 408.35 T
(FieldId field;) 144 396.35 T
(char *key;) 144 384.35 T
(char *value;) 144 372.35 T
(char *) 144 348.35 T
(dc_GetFieldAttr \050dc, field, key\051) 144 336.35 T
(DataChunk *dc;) 144 324.35 T
(FieldId field;) 144 312.35 T
(char *key;) 144 300.35 T
0 12 Q
7.17 (In f) 126 275.02 P
7.17 (act,) 150.04 275.02 P
5 F
17.21 (dc_SetFieldAttr\050\051) 177.21 275.02 P
0 F
7.17 ( is e) 299.61 275.02 P
7.17 (xactly equi) 333.1 275.02 P
7.17 (v) 392.96 275.02 P
7.17 (alent to a call to) 398.66 275.02 P
5 F
(dc_SetFieldAttrArray\050\051) 126 261.02 T
0 F
( lik) 284.4 261.02 T
(e the one belo) 299.95 261.02 T
(w) 366.64 261.02 T
(.) 374.52 261.02 T
5 9 Q
(dc_SetFieldAttrArray \050dc, field, key, DCT_String, 1, value\051;) 144 238.02 T
0 12 Q
2.23 (Lik) 126 213.02 P
2.23 (e) 142.55 213.02 P
2.23 (wise, when the attrib) 147.58 213.02 P
2.23 (ute v) 254.01 213.02 P
2.23 (alue for the gi) 279.61 213.02 P
2.23 (v) 352.98 213.02 P
2.23 (en) 358.8 213.02 P
7 F
5.35 (key) 375.36 213.02 P
0 F
2.23 ( is a string, a call to) 396.96 213.02 P
5 F
37.52 (dc_GetFieldAttr\050\051) 126 199.02 P
0 F
15.63 ( beha) 248.4 199.02 P
15.63 (v) 289.45 199.02 P
15.63 (es lik) 295.27 199.02 P
15.63 (e the follo) 336.45 199.02 P
15.63 (wing call to) 416.07 199.02 P
5 F
(dc_GetFieldAttrArray\050\051) 126 185.02 T
0 F
(.) 284.4 185.02 T
5 9 Q
(value = \050char *\051dc_GetFieldAttrArray \050dc, field, key, NULL, NULL\051;) 144 162.02 T
0 12 Q
2.62 (If the attrib) 126 137.02 P
2.62 (ute does not ha) 184.99 137.02 P
2.62 (v) 264.92 137.02 P
2.62 (e a string v) 270.74 137.02 P
2.62 (alue, or the k) 331.29 137.02 P
2.62 (e) 401.68 137.02 P
2.62 (y cannot be found,) 406.83 137.02 P
5 F
(dc_GetFieldAttr\050\051) 126 123.02 T
0 F
( returns) 248.4 123.02 T
5 F
(NULL) 287.72 123.02 T
0 F
(.) 316.52 123.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "113" 113
%%Page: "114" 114
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Attrib) 108 736.18 T
(utes) 181.82 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(114) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(8.5.2) 72.31 678.02 T
(Counting) 108 678.02 T
0 F
0.59 (The \336eld attrib) 108 660.02 P
0.59 (utes count method w) 180.26 660.02 P
0.59 (orks similarly to the count methods of the) 281.56 660.02 P
(other attrib) 108 646.02 T
(ute classes.) 160.75 646.02 T
7 10 Q
(int) 126 627.35 T
(dc_GetNFieldAttrs \050dc, field\051) 126 615.35 T
(DataChunk *dc;) 126 603.35 T
(FieldId field;) 126 591.35 T
0 12 Q
0.15 (This function returns the number of attrib) 108 566.02 P
0.15 (utes\321re) 307.98 566.02 P
0.15 (g) 348.45 566.02 P
0.15 (ardless of type\321associated) 354.39 566.02 P
(with the gi) 108 552.02 T
(v) 159.04 552.02 T
(en) 164.86 552.02 T
5 F
(FieldId) 179.18 552.02 T
7 F
(field) 232.58 552.02 T
0 F
( in the data chunk) 268.58 552.02 T
7 F
(dc) 356.9 552.02 T
0 F
(.) 371.3 552.02 T
2 F
(8.5.3) 72.31 520.02 T
(Remo) 108 520.02 T
(ving) 141.1 520.02 T
0 F
0.82 (As f) 108 502.02 P
0.82 (ar as data chunk attrib) 129.03 502.02 P
0.82 (utes are concerned, what can be added can also be) 238.04 502.02 P
0.83 (remo) 108 488.02 P
0.83 (v) 132.48 488.02 P
0.83 (ed. F) 138.3 488.02 P
0.83 (or \336eld attrib) 162.95 488.02 P
0.83 (utes,) 227.04 488.02 P
5 F
2 (dc_RemoveFieldAttr\050\051) 253.2 488.02 P
0 F
0.83 ( performs the req-) 397.2 488.02 P
(uisite remo) 108 474.02 T
(v) 161.48 474.02 T
(al task.) 167.18 474.02 T
7 10 Q
(void) 126 455.35 T
(dc_RemoveFieldAttr \050dc, field, key\051) 126 443.35 T
(DataChunk *dc;) 126 431.35 T
(FieldId field;) 126 419.35 T
(char *key;) 126 407.35 T
0 12 Q
1.59 (This function remo) 108 382.02 P
1.59 (v) 202.98 382.02 P
1.59 (es an) 208.8 382.02 P
1.59 (y attrib) 234.53 382.02 P
1.59 (ute with the gi) 270.21 382.02 P
1.59 (v) 343.66 382.02 P
1.59 (en) 349.48 382.02 P
7 F
3.8 (key) 365.4 382.02 P
0 F
1.59 ( from the \336eld with) 387 382.02 P
5 F
17.46 (FieldId) 108 368.02 P
7 F
17.46 (field) 168.68 368.02 P
0 F
7.28 ( in data chunk) 204.68 368.02 P
7 F
17.46 (dc) 304.44 368.02 P
0 F
7.28 (. If the k) 318.84 368.02 P
7.28 (e) 381.2 368.02 P
7.28 (y does not e) 386.35 368.02 P
7.28 (xist,) 465.66 368.02 P
5 F
(dc_RemoveFieldAttr\050\051) 108 354.02 T
0 F
( has no ef) 252 354.02 T
(fect.) 298.02 354.02 T
2 F
(8.5.4) 72.31 322.02 T
(Pr) 108 322.02 T
(ocessing b) 120.43 322.02 T
(y K) 182.88 322.02 T
(e) 201.37 322.02 T
(y) 207.86 322.02 T
0 F
-0.14 (Field attrib) 108 304.02 P
-0.14 (utes can also be processed one k) 160.63 304.02 P
-0.14 (e) 314.98 304.02 P
-0.14 (y at a time, either by calling a han-) 320.13 304.02 P
(dler function for each attrib) 108 290.02 T
(ute or by retrie) 239.72 290.02 T
(ving a list of k) 310.4 290.02 T
(e) 379.62 290.02 T
(ys all at once.) 384.77 290.02 T
-0.09 (The) 108 264.02 P
5 F
-0.22 (dc_ProcFieldAttrArrays\050\051) 129.57 264.02 P
0 F
-0.09 ( function tak) 302.37 264.02 P
-0.09 (es the \336rst approach, call-) 362.73 264.02 P
(ing a handler function for each attrib) 108 250.02 T
(ute.) 283.72 250.02 T
7 10 Q
(int) 126 231.35 T
(dc_ProcFieldAttrArrays \050dc, field, pattern, func, type, arg\051) 126 219.35 T
(DataChunk *dc;) 126 207.35 T
(FieldId field;) 126 195.35 T
(char *pattern;) 126 183.35 T
(int \050*func\051 \050/* char *key, void *vals, int nval,) 126 171.35 T
(   DC_ElemType, void *arg */\051;) 198 159.35 T
(void *arg;) 126 147.35 T
0 12 Q
10.21 (This function beha) 108 122.02 P
10.21 (v) 218.16 122.02 P
10.21 (es e) 223.98 122.02 P
10.21 (xactly lik) 252.33 122.02 P
10.21 (e the global attrib) 307.42 122.02 P
10.21 (ute method) 422.13 122.02 P
5 F
4.6 (dc_ProcessAttrArrays\050\051) 108 108.02 P
0 F
1.92 (, e) 266.4 108.02 P
1.92 (xcept it requires the additional parameter) 279.46 108.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "114" 114
%%Page: "115" 115
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Examples) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (115) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 12 Q
4.64 (field) 126 678.02 P
0 F
1.93 ( to specify the \336eld attrib) 162 678.02 P
1.93 (utes to be processed. See Section) 291.76 678.02 P
1.93 (8.3.4 on) 463.07 678.02 P
(page) 126 664.02 T
(105 for an e) 151.66 664.02 T
(xplanation.) 209.12 664.02 T
5.38 (The original) 126 638.02 P
5 F
12.92 (dc_ProcessFieldAttrs\050\051) 198.76 638.02 P
0 F
5.38 ( function only operates on) 357.16 638.02 P
4.61 (attrib) 126 624.02 P
4.61 (utes with string types, e) 151.09 624.02 P
4.61 (xactly lik) 283.01 624.02 P
4.61 (e its global attrib) 332.5 624.02 P
4.61 (ute counterpart) 427.08 624.02 P
5 F
(dc_ProcessFieldAttrs\050\051) 126 610.02 T
0 F
(. See Section) 284.4 610.02 T
(8.3.4 on page) 349.73 610.02 T
(105.) 417.38 610.02 T
7 10 Q
(int) 144 591.35 T
(dc_ProcessFieldAttrs \050dc, field, key, func\051) 144 579.35 T
(DataChunk *dc;) 144 567.35 T
(FieldId field;) 144 555.35 T
(char *key;) 144 543.35 T
(int \050*func\051 \050/* char *key, char *value */\051;) 144 531.35 T
0 12 Q
0.85 (The) 126 506.02 P
5 F
2.05 (dc_GetFieldAttrKeys\050\051) 148.51 506.02 P
0 F
0.85 ( function tak) 299.71 506.02 P
0.85 (es the second approach men-) 361.96 506.02 P
1.05 (tioned earlier) 126 492.02 P
1.05 (, where a list of attrib) 190.22 492.02 P
1.05 (ute k) 297.88 492.02 P
1.05 (e) 322.48 492.02 P
1.05 (ys is acquired all at once to be pro-) 327.63 492.02 P
(cessed step by step.) 126 478.02 T
7 10 Q
(char) 144 459.35 T
(**dc_GetFieldAttrKeys \050dc, field, natts\051) 144 447.35 T
(DataChunk *dc;) 144 435.35 T
(FieldId field;) 144 423.35 T
(int *natts;) 144 411.35 T
0 12 Q
0.73 (This function returns an array of k) 126 386.02 P
0.73 (e) 294.89 386.02 P
0.73 (ys for the attrib) 300.03 386.02 P
0.73 (utes in data chunk) 375.64 386.02 P
7 F
1.75 (dc) 468.54 386.02 P
0 F
0.73 ( and) 482.94 386.02 P
0.29 (the \336eld with) 126 372.02 P
5 F
0.71 (FieldId) 193.22 372.02 P
7 F
0.71 (field) 246.92 372.02 P
0 F
0.29 (. If the \336eld has no attrib) 282.92 372.02 P
0.29 (utes, the return v) 402.77 372.02 P
0.29 (alue) 484.01 372.02 P
0.35 (is) 126 358.02 P
5 F
0.85 (NULL) 137.36 358.02 P
0 F
0.35 (. If) 166.16 358.02 P
7 F
0.85 (natts) 183.85 358.02 P
0 F
0.35 ( is non-) 219.85 358.02 P
5 F
0.85 (NULL) 256.56 358.02 P
0 F
0.35 (, it will be set to the number of attrib) 285.36 358.02 P
0.35 (ute k) 464.29 358.02 P
0.35 (e) 488.18 358.02 P
0.35 (ys) 493.33 358.02 P
0.17 (in the returned array) 126 344.02 P
0.17 (. See the description of the similar global attrib) 223.37 344.02 P
0.17 (ute method) 450.16 344.02 P
5 F
(dc_GetGlobalAttrKeys\050\051) 126 330.02 T
0 F
( in Section) 284.4 330.02 T
(8.3.4 on page) 338.74 330.02 T
(105.) 406.39 330.02 T
72 287.02 558 289.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 287.02 558 289.02 R
7 X
0 0 0 1 0 0 0 K
V
72 288.02 117 288.02 2 L
0.5 H
2 Z
0 X
N
126 288.02 558 288.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(8.6) 100.32 293.02 T
(Examples) 126 293.02 T
0 F
1.97 (The section of code included in this section performs all kinds of attrib) 126 269.02 P
1.97 (ute) 489.34 269.02 P
(operations using most of the v) 126 255.02 T
(arious element types and attrib) 270.7 255.02 T
(ute methods.) 417.77 255.02 T
5 9 Q
(float data = 1.0;) 144 232.02 T
(int natts, nval, i;) 144 221.02 T
(DC_ElemType type;) 144 210.02 T
(#define NUM\050ra\051 \050sizeof\050ra\051/\050sizeof\050\050ra\051[0]\051\051\051) 144 199.02 T
(double ddata[] = { 0.0, 1.0, 2.0, 4.0, 8.0 };) 144 188.02 T
(double *dget;) 144 177.02 T
(float fdata[] = { -1.2, -3.4, -5.6, -6.7, -8.9, -10.0 };) 144 166.02 T
(float *fget;) 144 155.02 T
(unsigned char bytes[] = { 1, 3, 7, 15, 31, 63, 127, 255 };) 144 144.02 T
(unsigned char *uget;) 144 133.02 T
(char *cdata = \322array of characters\323;) 144 122.02 T
(short sdata[] = { 512, 1024, 2048, 4096, 8192, 16384, 32767 };) 144 111.02 T
(short *sget;) 144 100.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "115" 115
%%Page: "116" 116
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Attrib) 108 736.18 T
(utes) 181.82 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(116) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(dc = dc_CreateDC\050DCC_Scalar\051;) 126 669.02 T
(dc->dc_Platform = plat;) 126 658.02 T
(dc_SetGlobalAttr \050dc, \322global_key\323, \322global_value\323\051;) 126 647.02 T
(dc_SetGlobalAttrArray \050dc, \322global_doubles\323, DCT_Double,) 126 636.02 T
(       NUM\050ddata\051, \050void *\051ddata\051;) 183.6 625.02 T
(dc_SetGlobalAttrArray \050dc, \322global_floats\323, DCT_Float,) 126 614.02 T
(       NUM\050fdata\051, \050void *\051fdata\051;) 183.6 603.02 T
(dc_SetGlobalAttrArray \050dc, \322global_bytes\323, DCT_UnsignedChar,) 126 592.02 T
(       NUM\050bytes\051, \050void *\051bytes\051;) 183.6 581.02 T
(dc_SetGlobalAttrArray \050dc, \322global_shorts\323, DCT_ShortInt,) 126 570.02 T
(       NUM\050sdata\051, \050void *\051sdata\051;) 183.6 559.02 T
(dc_SetGlobalAttrArray \050dc, \322global_string\323, DCT_String,) 126 548.02 T
(       1, \322this is a global attribute string\323\051;) 183.6 537.02 T
(dc_SetGlobalAttrArray \050dc, \322global_char\323, DCT_Char,) 126 526.02 T
(       strlen\050cdata\051, cdata\051; /* no null char */) 183.6 515.02 T
(/*) 126 504.02 T
(* Get the typed arrays added above) 126 493.02 T
(*/) 126 482.02 T
(printf \050\322Double attribute: \322\051;) 126 471.02 T
(dget = \050double *\051dc_GetGlobalAttrArray \050dc, \322global_doubles\323,) 126 460.02 T
(&type, &nval\051;) 241.2 449.02 T
(for \050i = 0; i < nval; ++i\051 printf \050\322 %lf \322, dget[i]\051;) 126 438.02 T
(printf \050\322\134n\323\051;) 126 427.02 T
(printf \050\322Short attribute: \322\051;) 126 416.02 T
(sget = \050short *\051dc_GetGlobalAttrArray \050dc, \322global_shorts\323,) 126 405.02 T
(       &type, &nval\051;) 212.4 394.02 T
(for \050i = 0; i < nval; ++i\051 printf \050\322 %hd \322, sget[i]\051;) 126 383.02 T
(printf \050\322\134n\323\051;) 126 372.02 T
(field = F_Lookup \050\322temp\323\051;) 126 361.02 T
(dc_SetScalarFields \050dc, 1, &field\051;) 126 350.02 T
(dc_AddScalar \050dc, &when, 0, field, &data\051;) 126 339.02 T
(dc_SetFieldAttr \050dc, field, \322field_key\323, \322field_value\323\051;) 126 328.02 T
(dc_SetSampleAttr \050dc, 0, \322sample_key\323, \322sample_value\323\051;) 126 317.02 T
(dc_SetFieldAttrArray \050dc, field, \322field_doubles\323, DCT_Double,) 126 295.02 T
(       NUM\050ddata\051, \050void *\051ddata\051;) 183.6 284.02 T
(dc_SetFieldAttrArray \050dc, field, \322field_floats\323, DCT_Float,) 126 273.02 T
(       NUM\050fdata\051, \050void *\051fdata\051;) 183.6 262.02 T
(dc_SetFieldAttrArray \050dc, field, \322field_bytes\323, DCT_UnsignedChar,) 126 251.02 T
(       NUM\050bytes\051, \050void *\051bytes\051;) 183.6 240.02 T
(dc_SetFieldAttrArray \050dc, field, \322field_shorts\323, DCT_ShortInt,) 126 229.02 T
(       NUM\050sdata\051, \050void *\051sdata\051;) 183.6 218.02 T
(dc_SetFieldAttrArray \050dc, field, \322field_string\323, DCT_String,) 126 207.02 T
(       1, \322this is a field attribute string\323\051;) 183.6 196.02 T
(dc_SetSampleAttrArray \050dc, 0, \322sample_doubles\323, DCT_Double,) 126 185.02 T
(       NUM\050ddata\051, \050void *\051ddata\051;) 183.6 174.02 T
(dc_SetSampleAttrArray \050dc, 0, \322sample_floats\323, DCT_Float,) 126 163.02 T
(       NUM\050fdata\051, \050void *\051fdata\051;) 183.6 152.02 T
(dc_SetSampleAttrArray \050dc, 0, \322sample_bytes\323, DCT_UnsignedChar,) 126 141.02 T
(       NUM\050bytes\051, \050void *\051bytes\051;) 183.6 130.02 T
(dc_SetSampleAttrArray \050dc, 0, \322sample_shorts\323, DCT_ShortInt,) 126 119.02 T
(       NUM\050sdata\051, \050void *\051sdata\051;) 183.6 108.02 T
(dc_SetSampleAttrArray \050dc, 0, \322sample_string\323, DCT_String,) 126 97.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "116" 116
%%Page: "117" 117
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Examples) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (117) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(       1, \322this is a sample attribute string\323\051;) 201.6 680.02 T
(dc_DumpDC\050dc\051;) 144 658.02 T
0 12 Q
1.07 (When all is said and done, the output produced by) 126 633.02 P
5 F
2.57 (dc_DumpDC\050dc\051) 380.33 633.02 P
0 F
1.07 ( looks) 473.93 633.02 P
(something lik) 126 619.02 T
(e this:) 191.56 619.02 T
5 9 Q
(METDATA class, 1 fields, uniform True, uniform org True, size 4) 144 596.02 T
(Fields:  temp\050float,4\051;) 144 585.02 T
(Field Attributes:) 144 574.02 T
(        temp:    field_key=\325field_value\325;) 144 563.02 T
(field_doubles=[0.000000,1.000000,2.000000,4.000000,8.000000];) 144 552.02 T
(field_floats=[-1.200000,-3.400000,-5.600000,-6.700000,-8.900000,-10.000000];) 144 541.02 T
(field_bytes=[0x1,0x3,0x7,0xf,0x1f,0x3f,0x7f,0xff];) 144 530.02 T
(field_shorts=[512,1024,2048,4096,8192,16384,32767];) 144 519.02 T
(field_string=\325this is a field attribute string\325;) 144 508.02 T
(field_char=[a,r,r,a,y, ,o,f, ,c,h,a,r,a,c,t,e,r,s];) 144 497.02 T
(TRANSPARENT class, 1 samples, 1 allocated, next off 4, use avg: true) 144 486.02 T
(Hints: nsamples 0, sample size 4, avg 4, data 4, subclass 0) 144 475.02 T
(         0 at 1-Jan-93,0:00:00, len 4 offset 0) 144 464.02 T
(                sample_key --> \324sample_value\325) 144 453.02 T
(                sample_doubles --> 0.000000, 1.000000, 2.000000, 4.000000,) 144 442.02 T
(8.000000) 144 431.02 T
-0.33 (                sample_floats --> -1.200000, -3.400000, -5.600000, -6.700000,) 144 420.02 P
(-8.900000, -10.000000) 144 409.02 T
(                sample_bytes --> 0x1, 0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f, 0xff) 144 398.02 T
(                sample_shorts --> 512, 1024, 2048, 4096, 8192, 16384, 32767) 144 387.02 T
(                sample_string --> \324this is a sample attribute string\325) 144 376.02 T
(RAW, class \324Scalar\325, plat 4 \050t_att_types_cdf\051, data len 4, 5 ADE totaling) 144 365.02 T
(4289) 144 354.02 T
(internal class checking: enabled) 144 343.02 T
(Global attributes:) 144 332.02 T
(        global_key --> \324global_value\325) 144 321.02 T
(        global_doubles --> 0.000000, 1.000000, 2.000000, 4.000000, 8.000000) 144 310.02 T
(        global_floats --> -1.200000, -3.400000, -5.600000, -6.700000,) 144 299.02 T
(-) 144 288.02 T
(8.900000, -10.000000) 149.4 288.02 T
(        global_bytes --> 0x1, 0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f, 0xff) 144 277.02 T
(        global_shorts --> 512, 1024, 2048, 4096, 8192, 16384, 32767) 144 266.02 T
(        global_string --> \324this is a global attribute string\325) 144 255.02 T
-0.42 (        global_char --> a, r, r, a, y,  , o, f,  , c, h, a, r, a, c, t, e, r, s) 144 244.02 P
0 12 Q
0.58 (F) 126 219.02 P
0.58 (or those interested in using netCDF) 132.49 219.02 P
0.58 (, here is the netCDF header of a data \336le) 304.78 219.02 P
(created with the abo) 126 205.02 T
(v) 222.79 205.02 T
(e data chunk.) 228.61 205.02 T
5 9 Q
(netcdf t_att_types_cdf.930101.000000 {) 144 182.02 T
(dimensions:) 144 171.02 T
(        time = UNLIMITED ; // \0501 currently\051) 144 160.02 T
(variables:) 144 138.02 T
(        long base_time ;) 144 127.02 T
(                base_time:string = \3221-Jan-93,0:00:00 GMT\323 ;) 144 116.02 T
(                base_time:long_name = \322Base time in Epoch\323 ;) 144 105.02 T
(                base_time:units = \322seconds since 1970-1-1 0:00:00 0:00\323 ;) 144 94.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "117" 117
%%Page: "118" 118
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Attrib) 108 736.18 T
(utes) 181.82 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(118) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(        double time_offset\050time\051 ;) 126 680.02 T
-0.31 (                time_offset:units = \322seconds since 1993-01-01 00:00:00 0:00\323 ;) 126 669.02 P
(                time_offset:long_name = \322Time offset from base_time\323 ;) 126 658.02 T
(        float temp\050time\051 ;) 126 647.02 T
(                temp:long_name = \322temp\323 ;) 126 636.02 T
(                temp:units = \322unknown\323 ;) 126 625.02 T
(                temp:missing_value = -99999.898f ;) 126 614.02 T
(                temp:field_key = \322field_value\323 ;) 126 603.02 T
(                temp:field_doubles = 0., 1., 2., 4., 8. ;) 126 592.02 T
(                temp:field_floats = -1.2f, -3.4000001f, -5.5999999f, -) 126 581.02 T
(6.6999998f, -8.8999996f, -10.f ;) 126 570.02 T
-0.72 (                temp:field_bytes = \324\1341\325, \324\1343\325, \324\1347\325, \324\13417\325, \324\13437\325, \324?\325, \324\134177\325,) 126 559.02 P
(\324\134377\325 ;) 126 548.02 T
-0.3 (                temp:field_shorts = 512s, 1024s, 2048s, 4096s, 8192s, 16384s,) 126 537.02 P
(32767s ;) 126 526.02 T
(                temp:field_string = \322this is a field attribute string\323 ;) 126 515.02 T
(                temp:field_char = \322array of characters\323 ;) 126 504.02 T
(        float lat ;) 126 493.02 T
(                lat:long_name = \322north latitude\323 ;) 126 482.02 T
(                lat:units = \322degrees\323 ;) 126 471.02 T
(                lat:valid_range = -90.f, 90.f ;) 126 460.02 T
(        float lon ;) 126 449.02 T
(                lon:long_name = \322east longitude\323 ;) 126 438.02 T
(                lon:units = \322degrees\323 ;) 126 427.02 T
(                lon:valid_range = -180.f, 180.f ;) 126 416.02 T
(        float alt ;) 126 405.02 T
(                alt:long_name = \322altitude\323 ;) 126 394.02 T
(                alt:units = \322km above MSL\323 ;) 126 383.02 T
(// global attributes:) 126 361.02 T
(                :global_key = \322global_value\323 ;) 126 350.02 T
(                :global_doubles = 0., 1., 2., 4., 8. ;) 126 339.02 T
-0.57 (                :global_floats = -1.2f, -3.4000001f, -5.5999999f, -6.6999998f,) 126 328.02 P
(-8.8999996f, -10.f ;) 126 317.02 T
-0.07 (                :global_bytes = \324\1341\325, \324\1343\325, \324\1347\325, \324\13417\325, \324\13437\325, \324?\325, \324\134177\325,) 126 306.02 P
(\324\134377\325 ;) 126 295.02 T
(                :global_shorts = 512s, 1024s, 2048s, 4096s, 8192s, 16384s,) 126 284.02 T
(32767s ;) 126 273.02 T
(                :global_string = \322this is a global attribute string\323 ;) 126 262.02 T
(                :global_char = \322array of characters\323 ;) 126 251.02 T
(                :zeb_platform = \322t_att_types_cdf\323 ;) 126 240.02 T
(                :history = \322created by Zeb DataStore, 11-Dec-94,16:36:50,) 126 229.02 T
($RCSfile: DFA_NetCDF.c,v $ $Revision: 3.37 $\134n\323,) 126 218.02 T
(    \322\322 ;) 126 207.02 T
(}) 126 196.02 T
0 12 Q
0.97 (It is v) 108 171.02 P
0.97 (ery important to note that at present the DataStore cannot store sample) 137.09 171.02 P
0.28 (attrib) 108 157.02 P
0.28 (utes in netCDF \336les. Section) 133.09 157.02 P
0.28 (10.1, \322Field Attrib) 274.9 157.02 P
0.28 (utes and Data Files\323, dis-) 363.89 157.02 P
(cusses the particulars of \336le format limitations with re) 108 143.02 T
(g) 367.13 143.02 T
(ard to attrib) 373.07 143.02 T
(utes.) 428.82 143.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "118" 118
%%Page: "119" 119
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(In the W) 126 736.18 T
(orks) 160.46 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (119) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 672.02 558 674.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 672.02 558 674.02 R
7 X
0 0 0 1 0 0 0 K
V
72 673.02 117 673.02 2 L
0.5 H
2 Z
0 X
N
126 673.02 558 673.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(8.7) 100.32 678.02 T
(In the W) 126 678.02 T
(orks) 171.95 678.02 T
0 F
1.61 (The attributes interf) 126 654.02 P
1.61 (ace still needs some w) 224.42 654.02 P
1.61 (ork and there are a fe) 338.05 654.02 P
1.61 (w enhance-) 447.42 654.02 P
1.72 (ments under consideration. One con) 126 640.02 P
1.72 (v) 305.35 640.02 P
1.72 (enient addition w) 311.17 640.02 P
1.72 (ould be the ability to) 397.8 640.02 P
0.35 (select attrib) 126 626.02 P
0.35 (utes on the basis of type. Also, coding simple loops o) 181.77 626.02 P
0.35 (v) 441.08 626.02 P
0.35 (er attrib) 446.9 626.02 P
0.35 (utes) 484.67 626.02 P
1.86 (could be simpli\336ed with a get-\336rst, get-ne) 126 612.02 P
1.86 (xt mechanism rather than relying) 337.94 612.02 P
1.57 (solely on the processing mechanism. Lastly) 126 598.02 P
1.57 (, the lack of a \336le format which) 342.38 598.02 P
1.07 (stores both \336eld and sample attrib) 126 584.02 P
1.07 (utes has not been a critical issue for Zebra) 293.46 584.02 P
(applications; nonetheless, this shortcoming needs to be corrected.) 126 570.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "119" 119
%%Page: "120" 120
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataChunk Attrib) 108 736.18 T
(utes) 181.82 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(120) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "120" 120
%%Page: "121" 121
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (121) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 9 \245) 126 677 S
0 24 Q
-0.48 (The DataStore Interf) 252 677 S
-0.48 (ace) 440.77 677 S
0 12 Q
2.27 (This chapter de\336nes the application interf) 126 424 P
2.27 (ace to the data store. This is the) 336.84 424 P
0.59 (higher) 126 410 P
0.59 (-le) 156.42 410 P
0.59 (v) 168.78 410 P
0.59 (el interf) 174.6 410 P
0.59 (ace which uses data chunks to store and retrie) 212.73 410 P
0.59 (v) 436.43 410 P
0.59 (e data, and a) 442.25 410 P
1.84 (library of routines for communicating and e) 126 396 P
1.84 (xchanging information with the) 346.82 396 P
0.49 (data store daemon process. Applications do not need to understand the under-) 126 382 P
0.76 (lying \336le formats or daemon protocol; that information is encapsulated in the) 126 368 P
(data store interf) 126 354 T
(ace.) 201.19 354 T
1.38 (The interf) 126 328 P
1.38 (ace is implemented using data chunks as the model for describing) 174.91 328 P
0.19 (and e) 126 314 P
0.19 (xchanging data. Data chunks are introduced in Chapter) 151.67 314 P
0.19 (2. The discussion) 419.95 314 P
(in this chapter assumes an understanding of data chunks.) 126 300 T
0.97 (Some of the more fundamental information queries, such as \336nding platform) 126 274 P
2.7 (identi\336ers and names, are also discussed in the introduction in Chapter) 126 260 P
2.7 (1.) 495 260 P
0.85 (Check that chapter for information about an) 126 246 P
0.85 (y interf) 341.56 246 P
0.85 (ace routines which do not) 377.28 246 P
0.01 (seem to be discussed here. Speci\336cally) 126 232 P
0.01 (, the \336elds table routines are not de\336ned) 311.93 232 P
(in this chapter since the) 126 218 T
(y are co) 239.14 218 T
(v) 276.94 218 T
(ered thoroughly in the introduction.) 282.76 218 T
72 175 558 177 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 175 558 177 R
7 X
0 0 0 1 0 0 0 K
V
72 176 117 176 2 L
0.5 H
2 Z
0 X
N
126 176 558 176 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(9.1) 100.32 181 T
(Platf) 126 181 T
(orm Queries) 151.76 181 T
0 F
1.9 (Platforms pro) 126 157 P
1.9 (vide the foundation for cate) 193.38 157 P
1.9 (gorizing data according to source,) 333.44 157 P
0.22 (instrument, or) 126 143 P
0.22 (g) 193.33 143 P
0.22 (anization, \336le type, and so on. Consequently) 199.27 143 P
0.22 (, it is important for) 412.79 143 P
(clients to be able to retrie) 126 129 T
(v) 247.34 129 T
(e information about the a) 253.16 129 T
(v) 373.57 129 T
(ailable platforms.) 379.27 129 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "121" 121
%%Page: "122" 122
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The DataStore Interface) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(122) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(9.1.1) 72.31 678.02 T
(Simple Inf) 108 678.02 T
(ormation) 165.11 678.02 T
0 F
1.51 (A client must \336nd the) 108 660.02 P
5 F
3.63 (PlatformId) 222.57 660.02 P
0 F
1.51 ( of a platform from its name by using) 294.57 660.02 P
5 F
(ds_LookupPlatform\050\051) 108 646.02 T
0 F
(.) 244.8 646.02 T
7 10 Q
(PlatformId) 126 627.35 T
(ds_LookupPlatform\050name\051) 126 615.35 T
(char *name;) 126 603.35 T
0 12 Q
1.89 (The translation can be re) 108 578.02 P
1.89 (v) 233.9 578.02 P
1.89 (ersed with the) 239.72 578.02 P
5 F
4.54 (ds_PlatformName\050\051) 315.71 578.02 P
0 F
1.89 ( function,) 438.11 578.02 P
(which returns the name of a platform gi) 108 564.02 T
(v) 298 564.02 T
(en it\325) 303.82 564.02 T
(s identi\336er) 328.15 564.02 T
(.) 378.49 564.02 T
7 10 Q
(char *) 126 545.35 T
(ds_PlatformName\050id\051) 126 533.35 T
(PlatformId id;) 126 521.35 T
0 12 Q
1.26 (The memory occupied by the returned string belongs to the interf) 108 496.02 P
1.26 (ace library) 433.76 496.02 P
1.36 (and should not be freed or modi\336ed by the application. If) 108 482.02 P
7 F
3.27 (id) 400.29 482.02 P
0 F
1.36 ( is in) 414.69 482.02 P
1.36 (v) 440.27 482.02 P
1.36 (alid, the) 445.97 482.02 P
(function returns the string \322\050BadPlatformID\051\323.) 108 468.02 T
0.81 (A client may also wish to kno) 108 442.02 P
0.81 (w ho) 255.91 442.02 P
0.81 (w man) 280.09 442.02 P
0.81 (y platforms ha) 313.05 442.02 P
0.81 (v) 383.77 442.02 P
0.81 (e been de\336ned. The) 389.58 442.02 P
(function) 108 428.02 T
5 F
(ds_GetNPlat\050\051) 151 428.02 T
0 F
( returns the current count.) 244.6 428.02 T
7 10 Q
(int) 126 409.35 T
(ds_GetNPlat\050void\051;) 126 397.35 T
0 12 Q
2.86 (The latest v) 108 372.02 P
2.86 (ersions of the data store support dynamic platform de\336nition,) 169.52 372.02 P
1.24 (meaning the number of platforms may change o) 108 358.02 P
1.24 (v) 346.78 358.02 P
1.24 (er the life of the data store) 352.6 358.02 P
(daemon and during the operation of a data store client.) 108 344.02 T
2 F
(9.1.2) 72.31 312.02 T
(Platf) 108 312.02 T
(orm Attrib) 133.76 312.02 T
(utes) 191.52 312.02 T
0 F
0.46 (A signi\336cant characteristic of an) 108 294.02 P
0.46 (y platform is the or) 265.62 294.02 P
0.46 (g) 359.24 294.02 P
0.46 (anization of its data. The) 365.18 294.02 P
5 F
(ds_PlatformDataOrg\050\051) 108 280.02 T
0 F
( function retrie) 252 280.02 T
(v) 323.02 280.02 T
(es that characteristic.) 328.84 280.02 T
7 10 Q
(DataOrganization) 126 261.35 T
(ds_PlatformDataOrg\050pid\051) 126 249.35 T
(PlatformId pid;) 126 237.35 T
0 12 Q
0.32 (The sole parameter) 108 212.02 P
7 F
0.78 (pid) 203.94 212.02 P
0 F
0.32 ( is the platform identi\336er to query) 225.54 212.02 P
0.32 (. The return v) 388.69 212.02 P
0.32 (alue is) 454.68 212.02 P
(the enumerated data or) 108 198.02 T
(g) 217.42 198.02 T
(anization of the gi) 223.36 198.02 T
(v) 310.04 198.02 T
(en platform.) 315.86 198.02 T
-0.21 (T) 108 172.02 P
-0.21 (w) 114.37 172.02 P
-0.21 (o functions e) 122.92 172.02 P
-0.21 (xist for performing common attrib) 184.31 172.02 P
-0.21 (ute checks on platforms. The) 347.87 172.02 P
5 F
5.93 (ds_IsMobile\050\051) 108 158.02 P
0 F
2.47 ( function tests whether a platform possesses the mobile) 201.6 158.02 P
(attrib) 108 144.02 T
(ute.) 133.09 144.02 T
7 10 Q
(int) 126 125.35 T
(ds_IsMobile \050pid\051) 126 113.35 T
(PlatformId pid;) 126 101.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "122" 122
%%Page: "123" 123
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Platf) 126 736.18 T
(orm Queries) 145.32 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (123) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.62 (The return v) 126 678.02 P
0.62 (alue is non-zero if and only if the platform with identi\336er) 186.27 678.02 P
7 F
1.5 (pid) 470.77 678.02 P
0 F
0.62 ( is) 492.37 678.02 P
(mobile.) 126 664.02 T
2.05 (The second function) 126 638.02 P
5 F
4.93 (ds_IsModelPlatform\050\051) 233.14 638.02 P
0 F
2.05 ( tests whether a platform) 377.14 638.02 P
(has been \337agged as a model dataset.) 126 624.02 T
7 10 Q
(bool) 144 605.35 T
(ds_IsModelPlatform \050pid\051) 144 593.35 T
(PlatformId pid;) 144 581.35 T
0 12 Q
0.49 (This function returns non-zero \050) 126 556.02 P
5 F
1.18 (TRUE) 281.27 556.02 P
0 F
0.49 (\051 if and only if the platform with identi-) 310.07 556.02 P
0.8 (\336er) 126 542.02 P
7 F
1.91 (pid) 145.79 542.02 P
0 F
0.8 ( w) 167.39 542.02 P
0.8 (as de\336ned as a model platform, meaning the platform dataset sup-) 179.74 542.02 P
1.94 (ports both issue and forecast times. This function is often e) 126 528.02 P
1.94 (v) 428.06 528.02 P
1.94 (aluated before) 433.76 528.02 P
2.21 (calling the) 126 514.02 P
5 F
5.32 (dc_GetForecastTimes\050\051) 183.76 514.02 P
0 F
2.21 ( function, described further on in) 334.96 514.02 P
(this chapter) 126 500.02 T
(.) 181 500.02 T
2 F
(9.1.3) 90.31 468.02 T
(Platform Sear) 126 468.02 T
(c) 203.78 468.02 T
(hes) 210.34 468.02 T
0 F
2.1 (Man) 126 450.02 P
2.1 (y data store clients must deal with man) 147.82 450.02 P
2.1 (y platforms at once, especially) 349.3 450.02 P
2.42 (common utilities lik) 126 436.02 P
2.42 (e) 227.41 436.02 P
5 F
5.81 (dsdump) 238.16 436.02 P
0 F
2.42 ( and) 281.36 436.02 P
5 F
5.81 (dsdwidget) 309.53 436.02 P
0 F
2.42 ( which can display status) 374.33 436.02 P
0.31 (information for all of the platforms being managed by the data store. The data) 126 422.02 P
2.21 (store interf) 126 408.02 P
2.21 (ace currently includes three routines for searching for platforms) 180.41 408.02 P
0.07 (without resorting to requesting information on each indi) 126 394.02 P
0.07 (vidual platform identi-) 395.19 394.02 P
(\336er) 126 380.02 T
(.) 141.34 380.02 T
1 F
1.73 (NO) 126 354.02 P
1.73 (TE) 143.52 354.02 P
0 F
1.73 (: When the search functions belo) 159.53 354.02 P
1.73 (w \336rst appeared the) 325.49 354.02 P
1.73 (y were not of) 424.8 354.02 P
1.73 (\336-) 493.33 354.02 P
0.45 (cially part of the application interf) 126 340.02 P
0.45 (ace. Ho) 292.41 340.02 P
0.45 (we) 329.21 340.02 P
0.45 (v) 342.9 340.02 P
0.45 (er) 348.72 340.02 P
0.45 (, as no one has found the time) 357.56 340.02 P
0.35 (the o) 126 326.02 P
0.35 (v) 149.84 326.02 P
0.35 (erhaul the search interf) 155.66 326.02 P
0.35 (ace, these routines ha) 266.89 326.02 P
0.35 (v) 370.35 326.02 P
0.35 (e b) 376.17 326.02 P
0.35 (uilt up enough momen-) 390.61 326.02 P
0.36 (tum for a long-term e) 126 312.02 P
0.36 (xistence. In other w) 229.91 312.02 P
0.36 (ords, you can count on them remain-) 325.52 312.02 P
(ing part of the datastore library for a long time to come.) 126 298.02 T
0.69 (The \336rst search function) 126 272.02 P
5 F
1.65 (ds_SearchPlatforms\050\051) 248.73 272.02 P
0 F
0.69 ( retrie) 392.73 272.02 P
0.69 (v) 421.44 272.02 P
0.69 (es a list of plat-) 427.26 272.02 P
(form identi\336ers which match some gi) 126 258.02 T
(v) 305.35 258.02 T
(en criteria.) 311.17 258.02 T
7 10 Q
(PlatformId *) 144 239.35 T
(ds_SearchPlatforms \050regexp, nplat, alphabet, subs\051) 144 227.35 T
(char *regexp;) 144 215.35 T
(int *nplat;) 144 203.35 T
(int alphabet;) 144 191.35 T
(int subs;) 144 179.35 T
0 12 Q
1.27 (If) 126 154.02 P
7 F
3.06 (regexp) 138.27 154.02 P
0 F
1.27 ( is not) 181.47 154.02 P
5 F
3.06 (NULL) 217.63 154.02 P
0 F
1.27 (, each platform name is matched ag) 246.43 154.02 P
1.27 (ainst the re) 424.31 154.02 P
1.27 (gular) 479.34 154.02 P
1.61 (e) 126 140.02 P
1.61 (xpression to which it points. A) 131.15 140.02 P
5 F
3.86 (NULL) 291.14 140.02 P
7 F
3.86 (regexp) 324.55 140.02 P
0 F
1.61 ( matches e) 367.75 140.02 P
1.61 (v) 421.32 140.02 P
1.61 (ery platform. If) 427.14 140.02 P
7 F
0.34 (alphabet) 126 126.02 P
0 F
0.14 ( is non-zero, the function lists the platform identi\336ers in alphabeti-) 183.6 126.02 P
0.98 (cal order by name. Lastly) 126 112.02 P
0.98 (, if) 251.43 112.02 P
7 F
2.34 (subs) 269.71 112.02 P
0 F
0.98 ( is non-zero, subplatforms are included in) 298.51 112.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "123" 123
%%Page: "124" 124
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The DataStore Interface) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(124) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.54 (the search. The returned array of) 108 678.02 P
5 F
1.28 (PlatformId) 270.81 678.02 P
0 F
0.54 (\325) 342.81 678.02 P
0.54 (s must be freed by the appli-) 346.15 678.02 P
(cation. The number of identi\336ers in the array is returned in) 108 664.02 T
7 F
(nplat) 392.62 664.02 T
0 F
(.) 428.62 664.02 T
2.11 (The second function is e) 108 638.02 P
2.11 (xactly lik) 233.56 638.02 P
2.11 (e) 280.54 638.02 P
5 F
5.05 (ds_SearchPlatforms\050\051) 290.98 638.02 P
0 F
2.11 (, e) 434.98 638.02 P
2.11 (xcept it) 448.23 638.02 P
1.67 (also tells the data store daemon to actually send along the structures of the) 108 624.02 P
1.24 (selected platforms as well. This incurs a lar) 108 610.02 P
1.24 (ge amount of message traf) 324.45 610.02 P
1.24 (\336c for) 455.76 610.02 P
0.81 (searches which return numerous platforms. Ho) 108 596.02 P
0.81 (we) 336.38 596.02 P
0.81 (v) 350.07 596.02 P
0.81 (er) 355.89 596.02 P
0.81 (, if an application kno) 364.73 596.02 P
0.81 (ws) 472.67 596.02 P
0.56 (that it needs such information, it can be more ef) 108 582.02 P
0.56 (\336cient in the long run to send) 342 582.02 P
(the platform structures in groups rather than request them indi) 108 568.02 T
(vidually) 405.32 568.02 T
(.) 443.88 568.02 T
7 10 Q
(PlatformId *) 126 549.35 T
(ds_GatherPlatforms \050regexp, nplat, alphabet, subs\051) 126 537.35 T
(char *regexp;) 126 525.35 T
(int *nplat;) 126 513.35 T
(int alphabet;) 126 501.35 T
(int subs;) 126 489.35 T
0 12 Q
2.53 (The parameters are the same as for) 108 464.02 P
5 F
6.06 (ds_SearchPlatforms\050\051) 295.95 464.02 P
0 F
2.53 (, and the) 439.95 464.02 P
(returned array of) 108 450.02 T
5 F
(PlatformId) 191.63 450.02 T
0 F
(\325) 263.63 450.02 T
(s must also be freed by the application.) 266.96 450.02 T
-0.21 (Lastly) 108 424.02 P
-0.21 (, the) 137.22 424.02 P
5 F
-0.5 (ds_LookupSubplatforms\050\051) 160.47 424.02 P
0 F
-0.21 ( function returns the identi\336ers of) 326.07 424.02 P
(an) 108 410.02 T
(y subplatforms of a gi) 119.15 410.02 T
(v) 224.17 410.02 T
(en composite platform.) 229.99 410.02 T
7 10 Q
(PlatformId *) 126 391.35 T
(ds_LookupSubplatforms \050parent, nsubplat\051) 126 379.35 T
(PlatformId parent;) 126 367.35 T
(int *nsubplat;) 126 355.35 T
0 12 Q
2.14 (If there are no subplatforms of the) 108 330.02 P
7 F
5.13 (parent) 289.93 330.02 P
0 F
2.14 ( platform, the function returns) 333.13 330.02 P
5 F
2.75 (NULL) 108 316.02 P
0 F
1.15 (. Otherwise, it returns an array of identi\336ers for each subplatform, and) 136.8 316.02 P
7 F
5.3 (nsubplat) 108 302.02 P
0 F
2.21 ( will hold the number of subplatforms. The array of identi\336ers) 165.6 302.02 P
(should be freed by the application.) 108 288.02 T
0.12 (At the moment, the search functions only consider subplatforms in the historic) 108 262.02 P
0.89 (sense, i.e., subplatforms of a composite platform which do not ha) 108 248.02 P
0.89 (v) 429.94 248.02 P
0.89 (e an) 435.76 248.02 P
0.89 (y data) 456.12 248.02 P
(directories or data \336les of their o) 108 234.02 T
(wn.) 264.34 234.02 T
54 191.02 540 193.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 191.02 540 193.02 R
7 X
0 0 0 1 0 0 0 K
V
54 192.02 99 192.02 2 L
0.5 H
2 Z
0 X
N
108 192.02 540 192.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(9.2) 82.32 197.02 T
(Quer) 108 197.02 T
(ying A) 136.13 197.02 T
(v) 172.32 197.02 T
(ailab) 178.75 197.02 T
(le Data) 205.98 197.02 T
0 F
-0.17 (There will often be a need to ask the data store about the a) 108 173.02 P
-0.17 (v) 385.16 173.02 P
-0.17 (ailability of data for) 390.86 173.02 P
0.6 (a particular platform. The question of a) 108 159.02 P
0.6 (v) 299.63 159.02 P
0.6 (ailability tak) 305.33 159.02 P
0.6 (es man) 366.14 159.02 P
0.6 (y forms, the most) 400.21 159.02 P
0.93 (common being the question of the times at which data e) 108 145.02 P
0.93 (xist. Other questions) 385.13 145.02 P
0.87 (include what altitudes or what \336elds are present in a platform dataset. Model) 108 131.02 P
1.18 (datasets need to be ask) 108 117.02 P
1.18 (ed the question of forecast times: which forecasts are) 221.92 117.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "124" 124
%%Page: "125" 125
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Quer) 126 736.18 T
(ying A) 147.1 736.18 T
(v) 174.24 736.18 T
(ailab) 179.06 736.18 T
(le Data) 199.49 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (125) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
-0.17 (a) 126 678.02 P
-0.17 (v) 131.09 678.02 P
-0.17 (ailable at a particular issue time. And so on. The data store interf) 136.79 678.02 P
-0.17 (ace includes) 445.19 678.02 P
(routines which answer all of these questions.) 126 664.02 T
2 F
(9.2.1) 90.31 632.02 T
(A) 126 632.02 T
(v) 134.18 632.02 T
(ailab) 140.62 632.02 T
(le Times) 167.84 632.02 T
0 F
4.63 (T) 126 614.02 P
4.63 (o obtain a series of one more data times for a gi) 132.37 614.02 P
4.63 (v) 411.27 614.02 P
4.63 (en platform, use) 417.09 614.02 P
5 F
(ds_DataTimes\050\051) 126 600.02 T
0 F
(.) 226.8 600.02 T
7 10 Q
(int) 144 581.35 T
(ds_DataTimes \050platform, time, n, which, datatimes\051) 144 569.35 T
(PlatformId platform;) 144 557.35 T
(ZebTime *time;) 144 545.35 T
(int n;) 144 533.35 T
(TimeSpec which;) 144 521.35 T
(ZebTime *datatimes;) 144 509.35 T
0 12 Q
0.03 (Where) 126 484.02 P
7 F
0.06 (platform) 161.01 484.02 P
0 F
0.03 ( is the identi\336er of the platform of interest,) 218.6 484.02 P
7 F
0.06 (time) 426.14 484.02 P
0 F
0.03 ( is the ref-) 454.94 484.02 P
2.73 (erence time,) 126 470.02 P
7 F
6.56 (n) 193.11 470.02 P
0 F
2.73 ( is the number of times that the application is prepared to) 200.31 470.02 P
0.38 (recei) 126 456.02 P
0.38 (v) 149.02 456.02 P
0.38 (e,) 154.84 456.02 P
7 F
0.91 (which) 166.54 456.02 P
0 F
0.38 ( tells which times are of interest relati) 202.54 456.02 P
0.38 (v) 385.86 456.02 P
0.38 (e to) 391.68 456.02 P
7 F
0.91 (time) 413.1 456.02 P
0 F
0.38 ( \050see belo) 441.9 456.02 P
0.38 (w\051,) 488.34 456.02 P
0.86 (and) 126 442.02 P
7 F
2.07 (datatimes) 147.19 442.02 P
0 F
0.86 ( is an array of at least) 211.99 442.02 P
7 F
2.07 (n) 323.65 442.02 P
0 F
0.86 ( times which will hold the returned) 330.85 442.02 P
(times.) 126 428.02 T
(The) 126 402.02 T
7 F
(which) 147.66 402.02 T
0 F
( parameter is of type) 183.66 402.02 T
5 F
(TimeSpec) 285.3 402.02 T
0 F
(.) 342.9 402.02 T
5 9 Q
(typedef enum {) 144 379.02 T
(DsBefore,) 172.8 368.02 T
(/* Before the reference time) 230.4 368.02 T
(*/) 381.6 368.02 T
(DsAfter,) 172.8 357.02 T
(/* After that time) 230.4 357.02 T
(*/) 345.6 357.02 T
(DsNearest,) 172.8 346.02 T
(/* Nearest that time) 230.4 346.02 T
(*/) 345.6 346.02 T
(DsCenter,) 172.8 335.02 T
(/* Centered around the ref time) 230.4 335.02 T
(*/) 397.8 335.02 T
(} TimeSpec;) 144 324.02 T
0 12 Q
0.76 (F) 126 299.02 P
0.76 (or v) 132.49 299.02 P
0.76 (alues of) 151.95 299.02 P
5 F
1.83 (DsBefore) 194.13 299.02 P
0 F
0.76 ( and) 251.73 299.02 P
5 F
1.83 (DsAfter) 276.58 299.02 P
0 F
0.76 (,) 326.5 299.02 P
5 F
1.83 (ds_DataTimes\050\051) 333.26 299.02 P
0 F
0.76 ( will return an) 434.06 299.02 P
0.53 (array of times bounded on the appropriate end by the gi) 126 285.02 P
0.53 (v) 397.58 285.02 P
0.53 (en time v) 403.4 285.02 P
0.53 (alue, possi-) 448.81 285.02 P
0.16 (bly including the reference time if there is a data sample a) 126 271.02 P
0.16 (v) 405.82 271.02 P
0.16 (ailable at that time.) 411.52 271.02 P
5 F
2.21 (DsNearest) 126 257.02 P
0 F
0.92 ( will return the) 190.8 257.02 P
7 F
2.21 (n) 268.48 257.02 P
0 F
0.92 ( times a) 275.68 257.02 P
0.92 (v) 314.62 257.02 P
0.92 (ailable which are nearest to the gi) 320.32 257.02 P
0.92 (v) 486.85 257.02 P
0.92 (en) 492.67 257.02 P
1.45 (time, while) 126 243.02 P
5 F
3.48 (DsCenter) 185.9 243.02 P
0 F
1.45 ( will attempt to obtain an equal number of times on) 243.5 243.02 P
6.42 (either side of the gi) 126 229.02 P
6.42 (v) 244.03 229.02 P
6.42 (en time. In an) 249.85 229.02 P
6.42 (y case, the return v) 334.91 229.02 P
6.42 (alue from) 451.26 229.02 P
5 F
-0.17 (ds_DataTimes\050\051) 126 215.02 P
0 F
-0.07 ( will be the number of time v) 226.8 215.02 P
-0.07 (alues actually returned to the) 365.65 215.02 P
(application.) 126 201.02 T
1 F
5.53 (NO) 126 175.02 P
5.53 (TE) 143.52 175.02 P
0 F
5.53 (: The current implementation can only handle) 159.53 175.02 P
5 F
13.27 (DsBefore) 420.54 175.02 P
0 F
5.53 ( and) 478.14 175.02 P
5 F
-0.03 (DsAfter) 126 161.02 P
0 F
-0.01 (; more programming will be needed to mak) 176.4 161.02 P
-0.01 (e the other options w) 384.51 161.02 P
-0.01 (ork.) 485 161.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "125" 125
%%Page: "126" 126
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The DataStore Interface) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(126) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
-0.04 (It is possible to get a list of all times a) 108 678.02 P
-0.04 (v) 289.35 678.02 P
-0.04 (ailable in a gi) 295.05 678.02 P
-0.04 (v) 359.62 678.02 P
-0.04 (en observ) 365.44 678.02 P
-0.04 (ation by calling) 411.42 678.02 P
5 F
(ds_GetObsSamples\050\051) 108 664.02 T
0 F
(.) 237.6 664.02 T
7 10 Q
(int) 126 645.35 T
(ds_GetObsSamples \050pid, when, stimes, locs, max\051) 126 633.35 T
(PlatformId pid;) 126 621.35 T
(ZebTime *when, *stimes;) 126 609.35 T
(Location *locs;) 126 597.35 T
(int max;) 126 585.35 T
0 12 Q
0.21 (Where) 108 560.02 P
7 F
0.51 (pid) 143.19 560.02 P
0 F
0.21 ( is the platform of interest, and) 164.79 560.02 P
7 F
0.51 (when) 316.92 560.02 P
0 F
0.21 ( is a time within the observ) 345.71 560.02 P
0.21 (a-) 476.68 560.02 P
-0.04 (tion of interest. On return,) 108 546.02 P
7 F
-0.09 (stimes) 236.13 546.02 P
0 F
-0.04 ( will be \336lled with the times of the samples) 279.33 546.02 P
1.13 (in the gi) 108 532.02 P
1.13 (v) 149.29 532.02 P
1.13 (en observ) 155.11 532.02 P
1.13 (ation, and) 202.26 532.02 P
7 F
2.71 (locs) 254.84 532.02 P
0 F
1.13 ( will be \336lled with the locations of those) 283.64 532.02 P
1.75 (samples, for up to) 108 518.02 P
7 F
4.21 (max) 204 518.02 P
0 F
1.75 ( entries. The actual number of times returned is the) 225.6 518.02 P
(return v) 108 504.02 T
(alue of the function.) 145.36 504.02 T
0.02 (T) 108 478.02 P
0.02 (o \336nd out which observ) 114.37 478.02 P
0.02 (ations are a) 227.5 478.02 P
0.02 (v) 281.95 478.02 P
0.02 (ailable up to a gi) 287.65 478.02 P
0.02 (v) 367.44 478.02 P
0.02 (en time, possibly quali-) 373.26 478.02 P
(\336ed by an attrib) 108 464.02 T
(ute check, use) 183.42 464.02 T
5 F
(ds_GetObsTimes\050\051) 254.06 464.02 T
0 F
(.) 369.26 464.02 T
7 10 Q
(int) 126 445.35 T
(ds_GetObsTimes \050pid, when, times, ntime, attr\051) 126 433.35 T
(PlatformId pid;) 126 421.35 T
(ZebTime *when;) 126 409.35 T
(ZebTime *times;) 126 397.35 T
(int ntime;) 126 385.35 T
(char *attr;) 126 373.35 T
0 12 Q
2.15 (Where) 108 348.02 P
7 F
5.17 (pid) 145.13 348.02 P
0 F
2.15 ( is the platform of interest, and) 166.73 348.02 P
7 F
5.17 (when) 332.45 348.02 P
0 F
2.15 ( the time of interest. On) 361.25 348.02 P
0.45 (return,) 108 334.02 P
7 F
1.09 (times) 143.11 334.02 P
0 F
0.45 ( will be \336lled with up to) 179.11 334.02 P
7 F
1.09 (ntime) 300.63 334.02 P
0 F
0.45 ( observ) 336.63 334.02 P
0.45 (ation times correspond-) 371.78 334.02 P
1.37 (ing to the a) 108 320.02 P
1.37 (v) 165.53 320.02 P
1.37 (ailable data for the gi) 171.23 320.02 P
1.37 (v) 278.38 320.02 P
1.37 (en platform. If) 284.2 320.02 P
7 F
3.29 (attr) 360.96 320.02 P
0 F
1.37 ( is non-) 389.76 320.02 P
5 F
3.29 (NULL) 428.49 320.02 P
0 F
1.37 (, only) 457.3 320.02 P
3.95 (observ) 108 306.02 P
3.95 (ations which ha) 139.69 306.02 P
3.95 (v) 222.67 306.02 P
3.95 (e the gi) 228.49 306.02 P
3.95 (v) 271.42 306.02 P
3.95 (en attrib) 277.24 306.02 P
3.95 (ute\050s\051 attached to them will be) 320.61 306.02 P
-0.27 (returned. The return v) 108 292.02 P
-0.27 (alue is the number of observ) 212.18 292.02 P
-0.27 (ation times actually returned.) 346.83 292.02 P
2 F
(9.2.2) 72.31 260.02 T
(A) 108 260.02 T
(v) 116.18 260.02 T
(ailab) 122.62 260.02 T
(le Forecasts) 149.84 260.02 T
0 F
0.88 (A model dataset can contain multiple forecast times at a single issue time. A) 108 242.02 P
0.74 (data store application which needs to kno) 108 228.02 P
0.74 (w the forecasts a) 310.79 228.02 P
0.74 (v) 393.09 228.02 P
0.74 (ailable at an issue) 398.79 228.02 P
(time should use) 108 214.02 T
5 F
(ds_GetForecastTimes\050\051) 186.34 214.02 T
0 F
(.) 337.54 214.02 T
7 10 Q
(bool) 126 195.35 T
(ds_GetForecastTimes \050pid, when, times, ntimes\051) 126 183.35 T
(PlatformId pid;) 126 171.35 T
(ZebTime *when;) 126 159.35 T
(int *times, *ntimes;) 126 147.35 T
0 12 Q
2.51 (The platform and issue time of interest are passed in the) 108 122.02 P
7 F
6.03 (pid) 407.25 122.02 P
0 F
2.51 ( and) 428.85 122.02 P
7 F
6.03 (when) 457.2 122.02 P
0 F
-0.03 (parameters, respecti) 108 108.02 P
-0.03 (v) 203.63 108.02 P
-0.03 (ely) 209.45 108.02 P
-0.03 (. The) 223.34 108.02 P
7 F
-0.08 (times) 250.93 108.02 P
0 F
-0.03 ( array is \336lled with the forecast of) 286.93 108.02 P
-0.03 (fsets, in) 448.7 108.02 P
0.67 (seconds since issue time, a) 108 94.02 P
0.67 (v) 238.77 94.02 P
0.67 (ailable at the gi) 244.47 94.02 P
0.67 (v) 319.85 94.02 P
0.67 (en issue time. F) 325.67 94.02 P
0.67 (or e) 402.85 94.02 P
0.67 (xample, if an) 421.66 94.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "126" 126
%%Page: "127" 127
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Quer) 126 736.18 T
(ying A) 147.1 736.18 T
(v) 174.24 736.18 T
(ailab) 179.06 736.18 T
(le Data) 199.49 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (127) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.99 (issue time produced four forecasts: a 12-hour) 126 678.02 P
0.99 (, 24-hour) 348.71 678.02 P
0.99 (, 36-hour and 48-hour) 393.21 678.02 P
0.99 (,) 501 678.02 P
0.35 (then the) 126 664.02 P
7 F
0.83 (times) 168.02 664.02 P
0 F
0.35 ( array w) 204.02 664.02 P
0.35 (ould contain 43200, 86400, 172800, and 345600. The) 243.91 664.02 P
7 F
3.43 (times) 126 650.02 P
0 F
1.43 ( array should be lar) 162 650.02 P
1.43 (ge enough to hold the lar) 260.15 650.02 P
1.43 (gest number of forecast) 386.74 650.02 P
0.29 (times which the platform might possess at an) 126 636.02 P
0.29 (y time. If) 344.2 636.02 P
7 F
0.71 (ntimes) 392.41 636.02 P
0 F
0.29 ( is non-) 435.61 636.02 P
5 F
0.71 (NULL) 472.2 636.02 P
0 F
0.29 (,) 501 636.02 P
1.59 (then on return it will contain the number of forecast of) 126 622.02 P
1.59 (fsets copied into the) 402.9 622.02 P
7 F
(times) 126 608.02 T
0 F
( array) 162 608.02 T
(.) 188.87 608.02 T
7.88 (The platform) 126 582.02 P
7 F
18.9 (pid) 207.74 582.02 P
0 F
7.88 ( must be a model platform, meaning the call) 229.34 582.02 P
5 F
60.09 (ds_IsModelPlatform\050) 126 568.02 P
7 F
60.09 (pid) 262.8 568.02 P
5 F
60.09 (\051) 284.4 568.02 P
0 F
25.04 ( returns non-zero. Otherwise) 291.6 568.02 P
5 F
9.32 (ds_GetForecastTimes\050\051) 126 554.02 P
0 F
3.88 ( f) 277.2 554.02 P
3.88 (ails and returns f) 287.96 554.02 P
3.88 (alse \050zero\051. Lik) 379.8 554.02 P
3.88 (e) 460.42 554.02 P
3.88 (wise, it) 465.45 554.02 P
0.78 (returns f) 126 540.02 P
0.78 (alse when an error occurs or when there is no data at the gi) 166.98 540.02 P
0.78 (v) 459.07 540.02 P
0.78 (en issue) 464.89 540.02 P
(time.) 126 526.02 T
2 F
(9.2.3) 90.31 494.02 T
(A) 126 494.02 T
(v) 134.18 494.02 T
(ailab) 140.62 494.02 T
(le Altitudes) 167.84 494.02 T
0 F
0.03 (Some data sets, especially model grids, store data at multiple altitudes. Often a) 126 476.02 P
7.43 (client only w) 126 462.02 P
7.43 (ants to retrie) 203.41 462.02 P
7.43 (v) 277.96 462.02 P
7.43 (e data from a particular altitude. The) 283.78 462.02 P
5 F
1.3 (ds_GetAlts\050\051) 126 448.02 P
0 F
0.54 ( function allo) 212.4 448.02 P
0.54 (ws an application to \336nd out e) 277.18 448.02 P
0.54 (xactly what alti-) 424.92 448.02 P
(tudes are a) 126 434.02 T
(v) 177.07 434.02 T
(ailable for a particular \336eld at a particular time.) 182.77 434.02 T
7 10 Q
(bool) 144 415.35 T
(ds_GetAlts \050pid, fid, when, offset, alts, nalts, altunits\051) 144 403.35 T
(PlatformId pid;) 144 391.35 T
(FieldId fid;) 144 379.35 T
(ZebTime *when;) 144 367.35 T
(int offset;) 144 355.35 T
(float *alts;) 144 343.35 T
(int *nalts;) 144 331.35 T
(AltUnitType *altunits;) 144 319.35 T
0 12 Q
0.86 (The platform and \336eld of interest are identi\336ed in the) 126 294.02 P
7 F
2.07 (pid) 392.58 294.02 P
0 F
0.86 ( and) 414.18 294.02 P
7 F
2.07 (fid) 439.23 294.02 P
0 F
0.86 ( parame-) 460.83 294.02 P
-0.16 (ters, respecti) 126 280.02 P
-0.16 (v) 186.19 280.02 P
-0.16 (ely) 192.01 280.02 P
-0.16 (. The desired \050issue\051 time of the data is in) 205.9 280.02 P
7 F
-0.37 (when) 405.98 280.02 P
0 F
-0.16 (, and) 434.78 280.02 P
7 F
-0.37 (offset) 460.8 280.02 P
0 F
(contains the rele) 126 266.02 T
(v) 204.35 266.02 T
(ant forecast of) 210.05 266.02 T
(fset if appropriate. On return, the altitude coor-) 278.39 266.02 T
1 (dinates at the gi) 126 252.02 P
1 (v) 204.35 252.02 P
1 (en time and forecast ha) 210.17 252.02 P
1 (v) 325.22 252.02 P
1 (e been copied into the) 331.04 252.02 P
7 F
2.39 (alts) 444.33 252.02 P
0 F
1 ( array) 473.14 252.02 P
1 (,) 501 252.02 P
-0.14 (the units of the coordinates ha) 126 238.02 P
-0.14 (v) 269.38 238.02 P
-0.14 (e been stored in) 275.2 238.02 P
7 F
-0.33 (altunits) 353.3 238.02 P
0 F
-0.14 (, and the number of) 410.9 238.02 P
0.41 (altitudes in) 126 224.02 P
7 F
0.98 (alts) 182.82 224.02 P
0 F
0.41 ( is stored in) 211.62 224.02 P
7 F
0.98 (nalts) 271.92 224.02 P
0 F
0.41 (. If the function f) 307.92 224.02 P
0.41 (ails because of an error) 391.08 224.02 P
0.25 (or a lack of data, it returns zero and does not change the reference parameters.) 126 210.02 P
(Otherwise, it returns non-zero.) 126 196.02 T
2.05 (The function) 126 170.02 P
5 F
4.91 (ds_GetRgridParams\050\051) 194.75 170.02 P
0 F
2.05 ( no longer e) 331.55 170.02 P
2.05 (xists in the data store) 394.49 170.02 P
0.19 (library) 126 156.02 P
0.19 (. Since its primary use w) 157.21 156.02 P
0.19 (as to determine which heights to e) 276.7 156.02 P
0.19 (xtract from a) 441.64 156.02 P
2.11 (three-dimensional grid, it has been obsoleted by the more general function) 126 142.02 P
5 F
5.82 (ds_GetAlts\050\051) 126 128.02 P
0 F
2.43 (. Applications which still use) 212.4 128.02 P
5 F
5.82 (ds_GetRgridParams\050\051) 367.2 128.02 P
0 F
(should use) 126 114.02 T
5 F
(ds_GetAlts\050\051) 180 114.02 T
0 F
( instead.) 266.4 114.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "127" 127
%%Page: "128" 128
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The DataStore Interface) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(128) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(9.2.4) 72.31 678.02 T
(A) 108 678.02 T
(v) 116.18 678.02 T
(ailab) 122.62 678.02 T
(le Fields) 149.84 678.02 T
0 F
0.31 (An application can use) 108 660.02 P
5 F
0.75 (ds_GetFields\050\051) 221.9 660.02 P
0 F
0.31 ( to \336nd out which \336elds are a) 322.7 660.02 P
0.31 (v) 464.3 660.02 P
0.31 (ail-) 470 660.02 P
(able at a gi) 108 646.02 T
(v) 160.02 646.02 T
(en time for a particular platform.) 165.84 646.02 T
7 10 Q
(int) 126 627.35 T
(ds_GetFields \050pid, when, nfld_in_out, flist\051) 126 615.35 T
(PlatformId pid;) 126 603.35 T
(ZebTime *when;) 126 591.35 T
(int *nfld_in_out;) 126 579.35 T
(FieldId *flist;) 126 567.35 T
0 12 Q
0.34 (The set of \336elds stored in a platform\325) 108 542.02 P
0.34 (s data may be dif) 287.99 542.02 P
0.34 (ferent with time, conse-) 371.02 542.02 P
0.28 (quently this function requires a time of interest,) 108 528.02 P
7 F
0.66 (when) 341.18 528.02 P
0 F
0.28 (, as well as the platform) 369.98 528.02 P
0.39 (of interest,) 108 514.02 P
7 F
0.94 (pid) 163.11 514.02 P
0 F
0.39 (. The) 184.71 514.02 P
7 F
0.94 (flist) 213.16 514.02 P
0 F
0.39 ( parameter points to an array of) 249.16 514.02 P
5 F
0.94 (FieldId) 405.53 514.02 P
0 F
0.39 (\325) 455.93 514.02 P
0.39 (s into) 459.27 514.02 P
1.31 (which the identi\336ers of the a) 108 500.02 P
1.31 (v) 251.27 500.02 P
1.31 (ailable \336elds can copied. The) 256.97 500.02 P
7 F
3.13 (nfld_in_out) 406.8 500.02 P
0 F
1.48 (parameter is tw) 108 486.02 P
1.48 (o-w) 184.81 486.02 P
1.48 (ay) 203.35 486.02 P
1.48 (. When passed into the function, it should point to the) 213.9 486.02 P
0 (maximum number of identi\336ers which the) 108 472.02 P
7 F
0.01 (flist) 313.34 472.02 P
0 F
0 ( array can hold. On return, it) 349.34 472.02 P
0.12 (will point to the number of identi\336ers actually copied into) 108 458.02 P
7 F
0.29 (flist) 389.87 458.02 P
0 F
0.12 (. Finally) 425.87 458.02 P
0.12 (, the) 465.21 458.02 P
0.04 (function returns non-zero if it succeeds, or zero if it f) 108 444.02 P
0.04 (ails due to an error or due) 362.49 444.02 P
0.95 (to the lack of a data \336le surrounding or including the reference time. Notice,) 108 430.02 P
5 F
1.73 (ds_GetFields\050\051) 108 416.02 P
4 F
0.72 (does not) 212.52 416.02 P
0 F
0.72 ( return the number of \336elds copied into) 253.58 416.02 P
7 F
1.73 (flist) 450 416.02 P
0 F
(e) 108 402.02 T
(xcept in the) 113.15 402.02 T
7 F
(nfld_in_out) 172.14 402.02 T
0 F
( parameter) 251.34 402.02 T
(.) 301.66 402.02 T
1.71 (The e) 108 376.02 P
1.71 (xample belo) 136.52 376.02 P
1.71 (w checks for a \336eld named \322twet\323 in the platform \322pam\323) 196.93 376.02 P
1.36 (e) 108 362.02 P
1.36 (xactly 24 hours prior to the current time. It is by no means ef) 113.15 362.02 P
1.36 (\336cient, b) 422.51 362.02 P
1.36 (ut it) 465.63 362.02 P
0.05 (w) 108 348.02 P
0.05 (orks, and it mak) 116.54 348.02 P
0.05 (es the point. Be w) 193.9 348.02 P
0.05 (arned that it is not unusual for platforms to) 280.3 348.02 P
(ha) 108 334.02 T
(v) 119.09 334.02 T
(e hundreds of \336elds.) 124.91 334.02 T
5 9 Q
(/* Try to find a field in a platform while taking up as little memory) 126 311.02 T
(* possible */) 126 300.02 T
(PlatformId pam = ds_LookupPlatform \050\322pam\323\051;) 126 278.02 T
(int nfields;) 126 267.02 T
(int nmalloc;) 126 256.02 T
(FieldId *fields;) 126 245.02 T
(ZebTime when;) 126 234.02 T
(FieldId found = BadField;) 126 223.02 T
(tl_Time \050&when\051;) 126 201.02 T
(when.zt_Sec -= 24*60*60;) 126 190.02 T
(nmalloc = 10;) 126 179.02 T
(fields = \050FieldId *\051malloc \050nmalloc * sizeof\050FieldId\051\051;) 126 168.02 T
(/*) 126 157.02 T
(* Keep requesting more and more fields until we find what we\325re looking) 126 146.02 T
(* for, or until the number returned is less than the number asked for.) 126 135.02 T
(*/) 126 124.02 T
(do {) 126 113.02 T
(int i;) 154.8 102.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "128" 128
%%Page: "129" 129
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataStore Details) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (129) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(nmalloc << 1;) 172.8 680.02 T
(fields = \050FieldId *\051realloc\050fields, nmalloc * sizeof\050FieldId\051\051;) 172.8 669.02 T
(nfields = nmalloc;) 172.8 658.02 T
(if \050! ds_GetFields \050pid, &when, &nfields, fields\051\051) 172.8 647.02 T
(break;) 201.6 636.02 T
(for \050i = 0; i < nfields; ++i\051) 172.8 625.02 T
(if \050! strcmp \050F_GetName\050fields[i], \322twet\323\051\051\051) 201.6 614.02 T
({) 201.6 603.02 T
(found = fields[i];) 230.4 592.02 T
(break;) 230.4 581.02 T
(}) 201.6 570.02 T
(}) 144 559.02 T
(while \050\050found == BadField\051 && \050nfields == nmalloc\051\051;) 144 548.02 T
(free \050fields\051;) 144 537.02 T
(return \050found\051;) 144 526.02 T
72 484.02 558 486.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 484.02 558 486.02 R
7 X
0 0 0 1 0 0 0 K
V
72 485.02 117 485.02 2 L
0.5 H
2 Z
0 X
N
126 485.02 558 485.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(9.3) 100.32 490.02 T
(DataStore Details) 126 490.02 T
0 F
0.25 (No, this is not a section on the minuscule points of operation of the data store.) 126 466.02 P
-0.3 (The data store) 126 452.02 P
4 F
-0.3 (details) 196.09 452.02 P
0 F
-0.3 ( mechanism allo) 228.09 452.02 P
-0.3 (ws auxiliary information and special han-) 305.86 452.02 P
0.7 (dling requests to be passed to the data store library routines without af) 126 438.02 P
0.7 (fecting) 470.68 438.02 P
(the compatibility of e) 126 424.02 T
(xisting data store applications.) 228.82 424.02 T
2 F
(9.3.1) 90.31 392.02 T
(The Detail Structure) 126 392.02 T
0 F
1.61 (All detail information is transported in the) 126 374.02 P
5 F
3.86 (dsDetail) 342.92 374.02 P
0 F
1.61 ( structure, de\336ned in) 400.52 374.02 P
5 F
(DataStore.h) 126 360.02 T
0 F
(:) 205.2 360.02 T
5 9 Q
(typedef struct _dsDetail) 144 337.02 T
({) 144 326.02 T
(char) 172.8 315.02 T
(*dd_Name;) 230.4 315.02 T
(/* String identifier) 288 315.02 T
(*/) 401.4 315.02 T
(SValue) 172.8 304.02 T
(dd_V;) 230.4 304.02 T
(/* Associated value) 288 304.02 T
(*/) 390.6 304.02 T
(} dsDetail;) 144 293.02 T
0 12 Q
0.94 (The structure contains a name member) 126 268.02 P
0.94 (,) 316.51 268.02 P
5 F
2.26 (dd_Name) 323.45 268.02 P
0 F
0.94 (, which uniquely identi\336es) 373.85 268.02 P
0.17 (the purpose of the detail. The) 126 254.02 P
5 F
0.4 (dd_V) 270.64 254.02 P
0 F
0.17 ( member contains an) 299.44 254.02 P
0.17 (y ar) 399.4 254.02 P
0.17 (gument which the) 417.68 254.02 P
0.25 (detail requires. Some details require an ar) 126 240.02 P
0.25 (gument in the) 326.94 240.02 P
5 F
0.61 (dd_V) 396.7 240.02 P
0 F
0.25 ( member; others) 425.5 240.02 P
1.29 (ignore the ar) 126 226.02 P
1.29 (gument and tak) 189.02 226.02 P
1.29 (e ef) 265.48 226.02 P
1.29 (fect merely by their presence in an interf) 284.13 226.02 P
1.29 (ace) 488.02 226.02 P
(call.) 126 212.02 T
0.5 (Only the fetch and store functions in the data store interf) 126 186.02 P
0.5 (ace mak) 402.16 186.02 P
0.5 (e use of data) 442.19 186.02 P
1.23 (store details. The functions accept an array of detail structures, so that more) 126 172.02 P
0.51 (than one detail instruction can be speci\336ed in a single call to the interf) 126 158.02 P
0.51 (ace. So) 468.83 158.02 P
-0.04 (f) 126 144.02 P
-0.04 (ar) 129.88 144.02 P
-0.04 (, se) 138.72 144.02 P
-0.04 (v) 154.38 144.02 P
-0.04 (eral details ha) 160.2 144.02 P
-0.04 (v) 226.54 144.02 P
-0.04 (e been named and supported in the interf) 232.36 144.02 P
-0.04 (ace; man) 427.61 144.02 P
-0.04 (y more) 470.38 144.02 P
(will lik) 126 130.02 T
(ely follo) 160.22 130.02 T
(w) 200.26 130.02 T
(.) 208.14 130.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "129" 129
%%Page: "130" 130
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The DataStore Interface) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(130) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(9.3.2) 72.31 678.02 T
(Recogniz) 108 678.02 T
(ed Details) 161.46 678.02 T
0 F
0.6 (The recognized detail names ha) 108 660.02 P
0.6 (v) 262.1 660.02 P
0.6 (e been de\336ned as macros in) 267.92 660.02 P
5 F
1.43 (DataStore.h) 406.8 660.02 P
0 F
2.11 (to protect ag) 108 646.02 P
2.11 (ainst name con\337icts and misspelling errors. Some details only) 172.15 646.02 P
0.11 (ha) 108 632.02 P
0.11 (v) 119.09 632.02 P
0.11 (e an ef) 124.91 632.02 P
0.11 (fect for certain \336le formats, in which case the symbol name includes) 156.82 632.02 P
1.42 (a mnemonic indicating the format:) 108 618.02 P
5 F
3.41 (NC) 284.08 618.02 P
0 F
1.42 ( for netCDF) 298.48 618.02 P
1.42 (, and) 358.35 618.02 P
5 F
3.41 (ZN) 387.52 618.02 P
0 F
1.42 ( for Zebra nati) 401.92 618.02 P
1.42 (v) 474.85 618.02 P
1.42 (e) 480.67 618.02 P
0.44 (format. The symbols and the purpose of each detail are listed in the follo) 108 604.02 P
0.44 (wing) 462 604.02 P
(sections.) 108 590.02 T
1 F
(NetCDF details:) 108 564.02 T
0 F
-0.1 (Note that all of the netCDF details only tak) 108 538.02 P
-0.1 (e ef) 314.4 538.02 P
-0.1 (fect when a \336le is being created.) 331.65 538.02 P
1.57 (Use the) 108 524.02 P
5 F
3.78 (ds_Store) 150.47 524.02 P
0 F
1.57 ( and) 208.07 524.02 P
5 F
3.78 (ds_StoreBlocks) 234.55 524.02 P
7 F
3.78 (newfile) 339.92 524.02 P
0 F
1.57 ( parameter to force) 390.32 524.02 P
(the creation of a ne) 108 510.02 T
(w \336le.) 199.67 510.02 T
5 F
(DD_NC_TIME_FLOAT) 126 484.02 T
0 F
(Create the netCDF \336le with a \337oating point) 234 470.02 T
5 F
-1.28 (time_offset) 234 456.02 P
0 F
-0.53 ( v) 313.2 456.02 P
-0.53 (ariable rather than the def) 321.37 456.02 P
-0.53 (ault type) 442.4 456.02 P
(of double. The WINDS) 234 442.02 T
0 9.6 Q
(1) 346.64 446.82 T
0 12 Q
( softw) 351.44 442.02 T
(are requires \337oating) 380.99 442.02 T
(point times. No ar) 234 428.02 T
(gument required.) 320.45 428.02 T
5 F
(DD_NC_TIME_DOUBLE) 126 402.02 T
0 F
(Create the netCDF \336le with a) 234 388.02 T
5 F
(time_offset) 377.99 388.02 T
0 F
(v) 234 374.02 T
(ariable of type double. No ar) 239.7 374.02 T
(gument required.) 377.45 374.02 T
5 F
(DD_NC_TIME_LONG) 126 348.02 T
0 F
(Create the netCDF \336le with a) 234 334.02 T
5 F
(time_offset) 377.99 334.02 T
0 F
(v) 234 320.02 T
(ariable of type long. No ar) 239.7 320.02 T
(gument required.) 366.12 320.02 T
-0.06 (Note that the appearance of more than one of the abo) 108 294.02 P
-0.06 (v) 361.85 294.02 P
-0.06 (e details in a detail list is) 367.67 294.02 P
(not supported. The result is unde\336ned.) 108 280.02 T
5 F
(DD_NC_ONE_TIME) 126 254.02 T
0 F
(Create the netCDF \336le with a single time v) 234 240.02 T
(ariable) 439.69 240.02 T
5 F
(time) 234 226.02 T
0 F
( rather than using the def) 262.8 226.02 T
(ault) 382.32 226.02 T
5 F
(time_offset) 403.32 226.02 T
0 F
(and) 234 212.02 T
5 F
(base_time) 254.33 212.02 T
0 F
( con) 319.13 212.02 T
(v) 338.98 212.02 T
(ention. This detail can be) 344.8 212.02 T
(combined with an) 234 198.02 T
(y of the abo) 319.81 198.02 T
(v) 376.62 198.02 T
(e details which) 382.44 198.02 T
(specify the type of the time v) 234 184.02 T
(ariable. The ar) 373.68 184.02 T
(gument) 443.1 184.02 T
(is ignored.) 234 170.02 T
1 F
(ZNF details:) 108 144.02 T
54 100.98 540 130.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108.98 252 108.98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  Written by Gary Horton of the NCAR Research A) 108 94.98 T
(viation F) 299.55 94.98 T
(acility) 331.67 94.98 T
(. Direct requests to case@ncar) 353.58 94.98 T
(.ucar) 462.59 94.98 T
(.edu.) 479.83 94.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "130" 130
%%Page: "131" 131
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(DataStore Details) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (131) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 12 Q
(DD_ZN_HINT_NSAMPLES) 144 678.02 T
0 F
(Hint to the ZNF format dri) 252 664.02 T
(v) 380.03 664.02 T
(er about the projected) 385.85 664.02 T
(number of samples to be stored in the \336le. Store the) 252 650.02 T
(hint in) 252 636.02 T
5 F
(dd_V.us_v_int) 286.01 636.02 T
0 F
(.) 379.61 636.02 T
5 F
(DD_ZN_RESERVE_BLOCK) 144 610.02 T
0 F
-0.26 (Reserv) 252 596.02 P
-0.26 (e a free block in the \336le, such as for attrib) 285.14 596.02 P
-0.26 (utes) 481.93 596.02 P
(which will be added later) 252 582.02 T
(. The intended use is to) 372.65 582.02 T
(reserv) 252 568.02 T
(e space in a ZNF \336le before adding samples) 281.14 568.02 T
(which will be part of a block at the end of the \336le.) 252 554.02 T
(The size of the free block to reserv) 252 540.02 T
(e is contained in) 418.76 540.02 T
-0.04 (the inte) 252 526.02 P
-0.04 (ger member) 287.44 526.02 P
-0.04 (,) 344.57 526.02 P
5 F
-0.1 (dd_V.us_v_int) 350.53 526.02 P
0 F
-0.04 (. This detail) 444.13 526.02 P
(only has an ef) 252 512.02 T
(fect when a \336le is created.) 318.68 512.02 T
5 F
(DD_ZN_APPEND_SAMPLES) 144 486.02 T
0 F
(F) 252 472.02 T
(orce ne) 258.49 472.02 T
(w samples to be appended to the end of a) 293.17 472.02 T
(\336le, so that the) 252 458.02 T
(y will be contiguous with pre) 322.49 458.02 T
(vious) 462.52 458.02 T
(samples and will not o) 252 444.02 T
(v) 359.82 444.02 T
(erwrite an) 365.64 444.02 T
(y reserv) 413.77 444.02 T
(ed free) 451.91 444.02 T
-0.43 (blocks. This detail only needs to be present, its v) 252 430.02 P
-0.43 (alue) 481.44 430.02 P
(is ignored.) 252 416.02 T
-0.12 (The ZNF details can be used to tailor the layout and beha) 126 390.02 P
-0.12 (vior of a ZNF \336le to a) 399.39 390.02 P
3.43 (particular data set. The access speed for a particular \336le can be greatly) 126 376.02 P
(enhanced with a careful selection of ZNF details.) 126 362.02 T
0.33 (The rest of the details are rele) 126 336.02 P
0.33 (v) 270.28 336.02 P
0.33 (ant to more than one \336le type, b) 275.98 336.02 P
0.33 (ut note that not) 430.68 336.02 P
1.09 (all of the \336le format interf) 126 322.02 P
1.09 (aces ha) 256.32 322.02 P
1.09 (v) 292.16 322.02 P
1.09 (e been enhanced to support all of the for-) 297.98 322.02 P
(mats.) 126 308.02 T
1 F
(F) 126 282.02 T
(or) 133.03 282.02 T
(ecast offsets:) 144.14 282.02 T
5 F
(DD_FORECAST_OFFSET) 144 256.02 T
0 F
(Select the data at the forecast of) 252 242.02 T
(fset pro) 404.99 242.02 T
(vided in the) 441.13 242.02 T
(ar) 252 228.02 T
(gument. Set) 261.11 228.02 T
5 F
(dd_V.us_v_int) 321.44 228.02 T
0 F
( to the forecast) 415.04 228.02 T
(of) 252 214.02 T
(fset in seconds from the issue time. W) 261.7 214.02 T
(ithout this) 444.53 214.02 T
(detail, the data at the issue time is al) 252 200.02 T
(w) 425.53 200.02 T
(ays chosen.) 434.08 200.02 T
(Only model data \336le formats \050currently GRIB and) 252 186.02 T
(GrADS\051 support this detail.) 252 172.02 T
1 F
(T) 126 146.02 T
(ranslating data v) 133.12 146.02 T
(alues:) 219.67 146.02 T
5 F
(DD_FETCH_BADVAL) 144 120.02 T
0 F
-0.53 (When fetching data, the bad v) 252 106.02 P
-0.53 (alues read from the \336le) 393.01 106.02 P
(will be con) 252 92.02 T
(v) 304.85 92.02 T
(erted to the \337oat v) 310.67 92.02 T
(alue in) 397.69 92.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "131" 131
%%Page: "132" 132
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The DataStore Interface) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(132) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 12 Q
(dd_V.us_v_float) 234 678.02 T
0 F
(, and that \337oat v) 342 678.02 T
(alue will be) 419.36 678.02 T
(de\336ned as the bad v) 234 664.02 T
(alue for the fetched data chunk.) 329.02 664.02 T
1 F
(Slicing multi-dimensional arrays:) 126 638.02 T
0 F
(\322) 126 612.02 T
5 F
(DD_FETCH_ALTITUDE) 131.33 612.02 T
0 F
(Extracts the tw) 234 598.02 T
(o-dimensional, horizontal plane) 305.87 598.02 T
(closest to a gi) 234 584.02 T
(v) 299.36 584.02 T
(en altitude from a three-dimensional) 305.18 584.02 T
-0.34 (grid. The \337oating point v) 234 570.02 P
-0.34 (alue) 352.68 570.02 P
5 F
-0.81 (dd_V.us_v_float) 375.34 570.02 P
0 F
(contains the desired altitude coordinate.) 234 556.02 T
5 F
(DD_FIX_DIMENSION) 126 530.02 T
(DD_FIX_INDEX) 126 510.02 T
0 F
(These details supply \336x) 234 510.02 T
(ed dimension indices for) 347.48 510.02 T
-0.61 (slicing N-space data arrays. T) 234 496.02 P
-0.61 (w) 373.57 496.02 P
-0.61 (o details are possible,) 382.11 496.02 P
(one pair of details for each dimension to be \336x) 234 482.02 T
(ed.) 457.45 482.02 T
(The \336rst detail,) 234 468.02 T
5 F
(DD_FIX_DIMENSION) 310 468.02 T
0 F
(, contains a) 425.2 468.02 T
-0.53 (pointer to the name of the dimension to be \336x) 234 454.02 P
-0.53 (ed. The) 448.07 454.02 P
(detail immediately follo) 234 440.02 T
(wing in the detail list,) 349.03 440.02 T
5 F
(DD_FIX_INDEX) 234 426.02 T
0 F
(, contains an inte) 320.4 426.02 T
(ger inde) 401.54 426.02 T
(x to) 440.35 426.02 T
(which the dimension should be \336x) 234 412.02 T
(ed. If a) 398.82 412.02 T
5 F
-0.29 (DD_FIX_DIMENSION) 234 398.02 P
0 F
-0.12 ( detail is not succeeded by a) 349.2 398.02 P
5 F
(DD_FIX_INDEX) 234 384.02 T
0 F
(, then the inde) 320.4 384.02 T
(x of the named) 388.21 384.02 T
(dimension will be \336x) 234 370.02 T
(ed at zero by def) 335.5 370.02 T
(ault.) 415.34 370.02 T
2 F
(9.3.3) 72.31 338.02 T
(Example) 108 338.02 T
0 F
-0.13 (The piece of code belo) 108 320.02 P
-0.13 (w has been e) 216.46 320.02 P
-0.13 (xtracted from the Zebra graphics process as) 277.53 320.02 P
(an e) 108 306.02 T
(xample of using the forecast detail.) 127.48 306.02 T
5 9 Q
(dsDetail details[10];) 126 288.02 T
(int ndet = 0;) 126 277.02 T
(...) 126 266.02 T
(/*) 126 255.02 T
( * Set up the forecast offset time detail) 126 244.02 T
( */) 126 233.02 T
(details[ndet].dd_Name = DD_FORECAST_OFFSET;) 154.8 222.02 T
(details[ndet].dd_V.us_v_int = ForecastOffset;) 154.8 211.02 T
(ndet++;) 154.8 200.02 T
0 12 Q
1.83 (Notice that the name is not copied into the detail structure. The) 108 175.02 P
5 F
4.39 (dd_Name) 435.6 175.02 P
0 F
0.36 (member must merely point to a string which is v) 108 161.02 P
0.36 (alid when the detail is passed) 343.9 161.02 P
1.19 (into the interf) 108 147.02 P
1.19 (ace routine. The resulting array of details is then passed to the) 175.6 147.02 P
5 F
(ds_Fetch\050\051) 108 133.02 T
0 F
( routine, which is described in the ne) 180 133.02 T
(xt section.) 356.46 133.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "132" 132
%%Page: "133" 133
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Fetc) 126 736.18 T
(hing Data) 144.41 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (133) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 672.02 558 674.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 672.02 558 674.02 R
7 X
0 0 0 1 0 0 0 K
V
72 673.02 117 673.02 2 L
0.5 H
2 Z
0 X
N
126 673.02 558 673.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(9.4) 100.32 678.02 T
(Fetching Data) 126 678.02 T
0 F
0.57 (In the end, a data store is useless unless it pro) 126 654.02 P
0.57 (vides access to stored data. The) 349.84 654.02 P
0.48 (follo) 126 640.02 P
0.48 (wing routines e) 148.37 640.02 P
0.48 (xist for the purpose of e) 223.13 640.02 P
0.48 (xtracting data from the data store.) 339.65 640.02 P
-0.17 (See Section) 126 626.02 P
-0.17 (1.1 on page) 185.16 626.02 P
-0.17 (10 for an o) 243.48 626.02 P
-0.17 (v) 295.11 626.02 P
-0.17 (ervie) 300.93 626.02 P
-0.17 (w of the mechanics in) 324.62 626.02 P
-0.17 (v) 428.77 626.02 P
-0.17 (olv) 434.53 626.02 P
-0.17 (ed in fetch-) 449.69 626.02 P
0.58 (ing data. In particular) 126 612.02 P
0.58 (, recall that the application itself reads the data from the) 230.57 612.02 P
2.33 (data \336les using a data \336le access \050DF) 126 598.02 P
2.33 (A\051 interf) 319.07 598.02 P
2.33 (ace b) 362.93 598.02 P
2.33 (uilt into the data store) 390.01 598.02 P
(library) 126 584.02 T
(.) 157.21 584.02 T
(T) 126 558.02 T
(o read data from a single platform, use) 132.37 558.02 T
5 F
(ds_Fetch\050\051) 320.66 558.02 T
0 F
( as follo) 392.66 558.02 T
(ws:) 431.03 558.02 T
7 10 Q
(DataChunk *) 144 539.35 T
(ds_Fetch \050platform, class, begin, end, fields, nfield, details, ndet\051) 144 527.35 T
(PlatformId platform;) 144 515.35 T
(DataClass class;) 144 503.35 T
(ZebTime begin, end;) 144 491.35 T
(FieldId *fields;) 144 479.35 T
(int nfield, ndet;) 144 467.35 T
(dsDetail *details;) 144 455.35 T
0 12 Q
1.34 (Where) 126 430.02 P
7 F
3.22 (platform) 162.32 430.02 P
0 F
1.34 ( is the platform of interest,) 219.92 430.02 P
7 F
3.22 (class) 358.3 430.02 P
0 F
1.34 ( is the desired type of) 394.3 430.02 P
2.84 (data chunk to retrie) 126 416.02 P
2.84 (v) 227.2 416.02 P
2.84 (e,) 233.02 416.02 P
7 F
6.82 (begin) 247.18 416.02 P
0 F
2.84 ( and) 283.18 416.02 P
7 F
6.82 (end) 312.19 416.02 P
0 F
2.84 ( gi) 333.79 416.02 P
2.84 (v) 348.67 416.02 P
2.84 (e the time period of interest,) 354.49 416.02 P
7 F
-0.22 (fields) 126 402.02 P
0 F
-0.09 ( is a list of \336eld ID\325) 169.2 402.02 P
-0.09 (s,) 261.98 402.02 P
7 F
-0.22 (nfield) 272.56 402.02 P
0 F
-0.09 ( is the length of that list,) 315.76 402.02 P
7 F
-0.22 (details) 434.45 402.02 P
0 F
-0.09 ( is a) 484.85 402.02 P
1.48 (list of) 126 388.02 P
5 F
3.55 (dsDetail) 159.63 388.02 P
0 F
1.48 ( structures describing additional aspects of the data fetch,) 217.23 388.02 P
0.84 (and) 126 374.02 P
7 F
2.01 (ndet) 147.16 374.02 P
0 F
0.84 ( is the length of that list. If the fetch is successful, the return v) 175.96 374.02 P
0.84 (alue) 484.01 374.02 P
0.23 (will be a data chunk containing the data which matched the request; otherwise) 126 360.02 P
(the return v) 126 346.02 T
(alue is) 181.02 346.02 T
5 F
(NULL) 215.02 346.02 T
0 F
(.) 243.82 346.02 T
0.81 (The) 126 320.02 P
7 F
1.93 (details) 148.46 320.02 P
0 F
0.81 ( ar) 198.87 320.02 P
0.81 (gument is a means by which additional information may be) 211.78 320.02 P
0.04 (passed into the fetch request. Section) 126 306.02 P
0.04 (9.3 co) 307.16 306.02 P
0.04 (v) 336.35 306.02 P
0.04 (ers the details mechanism and the) 342.17 306.02 P
(recognized detail options.) 126 292.02 T
0.86 (F) 126 266.02 P
0.86 (or some platforms it mak) 132.49 266.02 P
0.86 (es sense to combine a number of samples together) 256.48 266.02 P
1.49 (into a single observ) 126 252.02 P
1.49 (ation. F) 223.82 252.02 P
1.49 (or e) 261.8 252.02 P
1.49 (xample, a sounding returns man) 281.44 252.02 P
1.49 (y time-series) 440.86 252.02 P
1.22 (v) 126 238.02 P
1.22 (alues, b) 131.7 238.02 P
1.22 (ut the) 169.34 238.02 P
1.22 (y mak) 197.38 238.02 P
1.22 (e up a single observ) 228.14 238.02 P
1.22 (ation. T) 328.02 238.02 P
1.22 (o free the application of the) 365.61 238.02 P
-0.07 (need to \336gure out the proper be) 126 224.02 P
-0.07 (gin and end times for this case, a separate inter-) 276.03 224.02 P
(f) 126 210.02 T
(ace has been pro) 129.88 210.02 T
(vided:) 209.33 210.02 T
7 10 Q
(DataChunk *) 144 191.35 T
(ds_FetchObs \050platform, class, when, fields, nfield, details, ndet\051) 144 179.35 T
(PlatformId platform;) 144 167.35 T
(DataClass class;) 144 155.35 T
(ZebTime when;) 144 143.35 T
(FieldId *fields;) 144 131.35 T
(int nfield, ndet;) 144 119.35 T
(dsDetail *details;) 144 107.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "133" 133
%%Page: "134" 134
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The DataStore Interface) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(134) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.84 (Here the parameters all ha) 108 678.02 P
0.84 (v) 237.06 678.02 P
0.84 (e the same meaning as for) 242.88 678.02 P
5 F
2.01 (ds_Fetch\050\051) 375.87 678.02 P
0 F
0.84 (, abo) 447.87 678.02 P
0.84 (v) 471.85 678.02 P
0.84 (e,) 477.67 678.02 P
4.69 (with the e) 108 664.02 P
4.69 (xception of) 164.53 664.02 P
7 F
11.25 (when) 231.23 664.02 P
0 F
4.69 (. Instead of using a be) 260.03 664.02 P
4.69 (gin and end time,) 388.61 664.02 P
5 F
2.95 (ds_FetchObs\050\051) 108 650.02 P
0 F
1.23 ( will \336nd the \336rst observ) 201.6 650.02 P
1.23 (ation at or before the gi) 325.12 650.02 P
1.23 (v) 443.29 650.02 P
1.23 (en time) 449.11 650.02 P
(\050) 108 636.02 T
7 F
(when) 112 636.02 T
0 F
(\051, and return all of the data associated with that observ) 140.8 636.02 T
(ation.) 400.78 636.02 T
-0.15 (Both) 108 610.02 P
5 F
-0.37 (ds_Fetch\050\051) 134.19 610.02 P
0 F
-0.15 ( and) 206.19 610.02 P
5 F
-0.37 (ds_FetchObs\050\051) 229.21 610.02 P
0 F
-0.15 ( will return) 322.81 610.02 P
5 F
-0.37 (NULL) 378.68 610.02 P
0 F
-0.15 ( if the) 407.48 610.02 P
-0.15 (y are com-) 434.99 610.02 P
(pletely unable to satisfy the gi) 108 596.02 T
(v) 252.02 596.02 T
(en request.) 257.84 596.02 T
54 553.02 540 555.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 553.02 540 555.02 R
7 X
0 0 0 1 0 0 0 K
V
54 554.02 99 554.02 2 L
0.5 H
2 Z
0 X
N
108 554.02 540 554.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(9.5) 82.32 559.02 T
(Application Noti\336cations) 108 559.02 T
0 F
0.49 (Real time processes will often need to be informed when a particular piece of) 108 535.02 P
1.43 (data becomes a) 108 521.02 P
1.43 (v) 183.93 521.02 P
1.43 (ailable. F) 189.63 521.02 P
1.43 (or e) 235.54 521.02 P
1.43 (xample, a graphics process may w) 255.12 521.02 P
1.43 (ant to kno) 426.77 521.02 P
1.43 (w) 477.34 521.02 P
0.58 (when a ne) 108 507.02 P
0.58 (w sounding arri) 157.52 507.02 P
0.58 (v) 233.71 507.02 P
0.58 (es and the display needs to be replotted; or a dual-) 239.53 507.02 P
0.12 (doppler analysis process may need to be informed of the arri) 108 493.02 P
0.12 (v) 399.49 493.02 P
0.12 (al of a ne) 405.2 493.02 P
0.12 (w radar) 449.57 493.02 P
(grid so that the ne) 108 479.02 T
(xt analysis can be calculated.) 193.81 479.02 T
1.22 (The data store application interf) 108 453.02 P
1.22 (ace pro) 266.05 453.02 P
1.22 (vides the means for an application to) 302.06 453.02 P
1.24 (request to be noti\336ed when data for a particular platform arri) 108 439.02 P
1.24 (v) 411.38 439.02 P
1.24 (es. The actual) 417.2 439.02 P
-0.16 (noti\336cation will be deli) 108 425.02 P
-0.16 (v) 218.88 425.02 P
-0.16 (ered by the data store daemon through the interprocess) 224.7 425.02 P
(communication mechanism.) 108 411.02 T
2.12 (T) 108 385.02 P
2.12 (o request noti\336cation for a) 114.37 385.02 P
2.12 (v) 249.25 385.02 P
2.12 (ailable data, use) 254.95 385.02 P
5 F
5.08 (ds_RequestNotify\050\051) 341.29 385.02 P
0 F
2.12 ( as) 470.89 385.02 P
(follo) 108 371.02 T
(ws:) 130.37 371.02 T
7 10 Q
(ds_RequestNotify \050platform, param, func\051) 126 352.35 T
(PlatformId platform;) 126 340.35 T
(int param;) 126 328.35 T
(void \050*func\051 \050\051;) 126 316.35 T
0 12 Q
2.87 (Where) 108 291.02 P
7 F
6.89 (platform) 145.85 291.02 P
0 F
2.87 ( is the ID of the platform of interest. When ne) 203.45 291.02 P
2.87 (w data) 451.47 291.02 P
(becomes a) 108 277.02 T
(v) 158.08 277.02 T
(ailable for) 163.78 277.02 T
7 F
(platform) 215.76 277.02 T
0 F
(, the gi) 273.36 277.02 T
(v) 306.06 277.02 T
(en) 311.88 277.02 T
7 F
(func) 326.21 277.02 T
0 F
( will be called as:) 355.01 277.02 T
7 10 Q
(\050*func\051 \050platform, param, when, nsample, ucode\051) 126 258.35 T
(PlatformId platform;) 126 246.35 T
(int param, nsample;) 126 234.35 T
(ZebTime *when;) 126 222.35 T
(UpdCode ucode;) 126 210.35 T
0 12 Q
1.05 (Where) 108 185.02 P
7 F
2.53 (platform) 144.04 185.02 P
0 F
1.05 ( is the platform for which data is a) 201.63 185.02 P
1.05 (v) 374.48 185.02 P
1.05 (ailable,) 380.17 185.02 P
7 F
2.53 (param) 419.22 185.02 P
0 F
1.05 ( is the) 455.22 185.02 P
1.04 (same v) 108 171.02 P
1.04 (alue that w) 142.4 171.02 P
1.04 (as passed to) 197.01 171.02 P
5 F
2.49 (ds_RequestNotify\050\051) 260.45 171.02 P
0 F
1.04 (,) 390.05 171.02 P
7 F
2.49 (when) 397.09 171.02 P
0 F
1.04 ( is the latest) 425.89 171.02 P
0.07 (time for which data has been added, and) 108 157.02 P
7 F
0.17 (nsample) 304.84 157.02 P
0 F
0.07 ( is the number of ne) 355.24 157.02 P
0.07 (w sam-) 450.94 157.02 P
(ples of data.) 108 143.02 T
0.73 (The) 108 117.02 P
7 F
1.75 (ucode) 130.39 117.02 P
0 F
0.73 ( parameter is a update code identifying ho) 166.39 117.02 P
0.73 (w the data were added.) 372.8 117.02 P
(The) 108 103.02 T
5 F
(UpdCode) 129.66 103.02 T
0 F
( enumerated type is de\336ned in) 180.06 103.02 T
5 F
(DataStore.h) 327.37 103.02 T
0 F
(:) 406.57 103.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "134" 134
%%Page: "135" 135
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Storing Data) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (135) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(typedef enum) 144 680.02 T
({) 144 669.02 T
(UpdOverwrite,) 172.8 658.02 T
(/* Only overwrote existing data) 259.2 658.02 T
(*/) 432 658.02 T
(UpdInsert,) 172.8 647.02 T
(/* Inserted new data in middle) 259.2 647.02 T
(*/) 432 647.02 T
(UpdAppend) 172.8 636.02 T
(/* New data at the end) 259.2 636.02 T
(*/) 432 636.02 T
(} UpdCode;) 144 625.02 T
0 12 Q
1.66 (If) 126 600.02 P
7 F
3.98 (ucode) 138.65 600.02 P
0 F
1.66 ( is) 174.65 600.02 P
5 F
3.98 (UpdAppend) 191.97 600.02 P
0 F
1.66 (, then ne) 256.77 600.02 P
1.66 (w data has been added at the end of the) 300.79 600.02 P
0 (e) 126 586.02 P
0 (xisting time range; a v) 131.15 586.02 P
0 (alue of) 238.19 586.02 P
5 F
0.01 (UpdInsert) 274.19 586.02 P
0 F
0 ( means ne) 338.99 586.02 P
0 (w data has been inserted) 386.68 586.02 P
0.25 (within the e) 126 572.02 P
0.25 (xisting data set, and) 182.99 572.02 P
5 F
0.61 (UpdOverwrite) 282.32 572.02 P
0 F
0.25 ( means that no ne) 368.72 572.02 P
0.25 (w samples) 453.42 572.02 P
(ha) 126 558.02 T
(v) 137.09 558.02 T
(e been added, b) 142.91 558.02 T
(ut that e) 217.31 558.02 T
(xisting data has been o) 255.79 558.02 T
(v) 364.93 558.02 T
(erwritten.) 370.75 558.02 T
11.94 (Data a) 126 532.02 P
11.94 (v) 168.68 532.02 P
11.94 (ailable noti\336cations will continue until cancelled with) 174.38 532.02 P
5 F
(ds_CancelNotify\050\051) 126 518.02 T
0 F
(.) 248.4 518.02 T
7 10 Q
(void) 144 499.35 T
(ds_CancelNotify \050\051;) 144 487.35 T
0 12 Q
2.23 (Calling this function will cancel an) 126 462.02 P
2.23 (y and all noti\336cations requested by the) 305.3 462.02 P
(application.) 126 448.02 T
72 405.02 558 407.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 405.02 558 407.02 R
7 X
0 0 0 1 0 0 0 K
V
72 406.02 117 406.02 2 L
0.5 H
2 Z
0 X
N
126 406.02 558 406.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(9.6) 100.32 411.02 T
(Storing Data) 126 411.02 T
0 F
0.03 (Finally) 126 387.02 P
0.03 (, none of the abo) 159.23 387.02 P
0.03 (v) 239.5 387.02 P
0.03 (e is useful if there is not a mechanism for putting data) 245.32 387.02 P
(into the data store.) 126 373.02 T
2 F
(9.6.1) 90.31 341.02 T
(Sample b) 126 341.02 T
(y Sample) 179.11 341.02 T
0 F
(T) 126 323.02 T
(o add a data chunk to the data store, use) 132.37 323.02 T
5 F
(ds_Store\050\051) 326.66 323.02 T
0 F
( as follo) 398.66 323.02 T
(ws:) 437.03 323.02 T
7 10 Q
(int) 144 304.35 T
(ds_Store \050dc, newfile, details, ndet\051) 144 292.35 T
(DataChunk *dc;) 144 280.35 T
(bool newfile;) 144 268.35 T
(dsDetail *details;) 144 256.35 T
(int ndet;) 144 244.35 T
0 12 Q
1.89 (Where) 126 219.02 P
7 F
4.54 (dc) 162.87 219.02 P
0 F
1.89 ( is a data chunk containing the data to be inserted,) 177.27 219.02 P
7 F
4.54 (newfile) 440.7 219.02 P
0 F
1.89 ( is) 491.1 219.02 P
5 F
1.91 (TRUE) 126 205.02 P
0 F
0.79 ( if the application wishes to force the data store to create a ne) 154.8 205.02 P
0.79 (w \336le for) 458.42 205.02 P
2.26 (this data, and) 126 191.02 P
7 F
5.42 (details) 199.44 191.02 P
0 F
2.26 ( and) 249.84 191.02 P
7 F
5.42 (ndet) 277.68 191.02 P
0 F
2.26 ( are the detail mechanism described in) 306.48 191.02 P
0.84 (Section) 126 177.02 P
0.84 (9.3. The) 165 177.02 P
7 F
2.02 (newfile) 209.34 177.02 P
0 F
0.84 ( parameter allo) 259.74 177.02 P
0.84 (ws observ) 333.1 177.02 P
0.84 (ations to be delimited by) 381.97 177.02 P
(\336le boundaries for platforms such as soundings.) 126 163.02 T
0.62 (The) 126 137.02 P
5 F
1.48 (ds_Store\050\051) 148.27 137.02 P
0 F
0.62 ( routine operates by storing one sample at a time from the) 220.27 137.02 P
0.76 (data chunk. F) 126 123.02 P
0.76 (or each sample, it asks the daemon where the sample should be) 192.34 123.02 P
0.5 (written, and then writes the sample to a \336le. The result is a great deal of mes-) 126 109.02 P
0.65 (sage traf) 126 95.02 P
0.65 (\336c and system load, and the inef) 167.33 95.02 P
0.65 (\336cienc) 325.94 95.02 P
0.65 (y is compounded for data sets) 357.75 95.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "135" 135
%%Page: "136" 136
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The DataStore Interface) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(136) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.65 (with thousands of samples. The more recent) 108 678.02 P
5 F
1.55 (ds_StoreBlocks\050\051) 327.16 678.02 P
0 F
0.65 ( function) 442.36 678.02 P
(mentioned in Section) 108 664.02 T
(9.6.2 of) 213 664.02 T
(fers a more ef) 249.7 664.02 T
(\336cient alternati) 315.7 664.02 T
(v) 387.72 664.02 T
(e.) 393.54 664.02 T
-0.18 (The old limitation where) 108 638.02 P
5 F
-0.44 (ds_PutData\050\051) 229.26 638.02 P
0 F
-0.18 ( could only append data to the data-) 315.65 638.02 P
-0.17 (base has been remo) 108 624.02 P
-0.17 (v) 200.94 624.02 P
-0.17 (ed. F) 206.76 624.02 P
-0.17 (or each sample in the data chunk,) 230.41 624.02 P
5 F
-0.41 (ds_Store\050\051) 392.5 624.02 P
0 F
-0.17 ( will) 464.5 624.02 P
2.33 (either o) 108 610.02 P
2.33 (v) 146.47 610.02 P
2.33 (erwrite an e) 152.29 610.02 P
2.33 (xisting datum or store an additional \336eld if the times) 213.4 610.02 P
0.32 (match e) 108 596.02 P
0.32 (xactly) 145.79 596.02 P
0.32 (, or it will insert the data accordingly) 174.34 596.02 P
0.32 (. The usual case of append-) 353.11 596.02 P
(ing data is equi) 108 582.02 T
(v) 180.7 582.02 T
(alent to inserting samples at the end of a data \336le.) 186.4 582.02 T
0.49 (Unfortunately) 108 556.02 P
0.49 (, the netCDF \336le format does not lend itself readily to the inser-) 174.54 556.02 P
-0.01 (tion of data between e) 108 542.02 P
-0.01 (xisting data points, or to the addition of \336elds; thus these) 213.75 542.02 P
0.25 (operations are not currently supported for this \336le type. Such an addition must) 108 528.02 P
1.83 (w) 108 514.02 P
1.83 (ait until the need for insertion is strong enough to justify the inef) 116.54 514.02 P
1.83 (\336cienc) 448.19 514.02 P
1.83 (y) 480 514.02 P
(in) 108 500.02 T
(v) 116.86 500.02 T
(olv) 122.62 500.02 T
(ed.) 137.77 500.02 T
2 F
(9.6.2) 72.31 468.02 T
(Bloc) 108 468.02 T
(ks) 133.76 468.02 T
0 F
0.26 (The data store interf) 108 450.02 P
0.26 (ace also includes a function storing data as) 205.65 450.02 P
4 F
0.26 (bloc) 415.73 450.02 P
0.26 (ks) 436.15 450.02 P
0 F
0.26 ( of sam-) 446.15 450.02 P
0.48 (ples. Storing samples as blocks allo) 108 436.02 P
0.48 (ws the data store library to tak) 280.77 436.02 P
0.48 (e adv) 428.84 436.02 P
0.48 (antage) 454.68 436.02 P
0.9 (of the \336le-format-speci\336c optimizations which are possible. F) 108 422.02 P
0.9 (or e) 410.07 422.02 P
0.9 (xample, the) 429.11 422.02 P
0.47 (netCDF interf) 108 408.02 P
0.47 (ace allo) 175.34 408.02 P
0.47 (ws \322h) 212.49 408.02 P
0.47 (yperslab\323 writes of data. If a series of samples can) 240.55 408.02 P
0.22 (be assembled into a block in chronological order) 108 394.02 P
0.22 (, then the) 342.68 394.02 P
0.22 (y can be written to a) 387.26 394.02 P
(netCDF \336le in one write call.) 108 380.02 T
0.5 (Often a data chunk consists of thousands of samples which are in chronologi-) 108 354.02 P
-0 (cal order and are to be stored in a single \336le. At the v) 108 340.02 P
-0 (ery least, each data chunk) 362.39 340.02 P
0.04 (follo) 108 326.02 P
0.04 (ws the pre) 130.37 326.02 P
0.04 (vious without o) 179.48 326.02 P
0.04 (v) 254.06 326.02 P
0.04 (erlap. A) 259.88 326.02 P
4 F
0.04 (bloc) 301.62 326.02 P
0.04 (k) 322.05 326.02 P
0 F
0.04 ( is a set of samples in chronolog-) 327.37 326.02 P
0.37 (ical order which do not o) 108 312.02 P
0.37 (v) 229.97 312.02 P
0.37 (erlap an) 235.79 312.02 P
0.37 (y samples pre) 274.29 312.02 P
0.37 (viously stored in e) 340.71 312.02 P
0.37 (xisting data) 429.96 312.02 P
0.31 (\336les. Thus a block can be written to a ne) 108 298.02 P
0.31 (w data \336le or appended to an e) 304.41 298.02 P
0.31 (xisting) 453.32 298.02 P
1.64 (one without concern for con\337icts or the necessity of insertions. Data chunk) 108 284.02 P
1.54 (samples which e) 108 270.02 P
1.54 (xactly o) 190.23 270.02 P
1.54 (v) 229.92 270.02 P
1.54 (erwrite e) 235.74 270.02 P
1.54 (xisting samples can be assembled into an) 279.42 270.02 P
0.28 (o) 108 256.02 P
0.28 (v) 113.82 256.02 P
0.28 (erwrite block, where the block of samples can o) 119.64 256.02 P
0.28 (v) 351.28 256.02 P
0.28 (erwrite the e) 357.1 256.02 P
0.28 (xisting data in) 417.44 256.02 P
(a single write call.) 108 242.02 T
7.41 (The) 108 216.02 P
5 F
17.78 (ds_StoreBlocks\050\051) 137.07 216.02 P
0 F
7.41 ( routine accepts the same parameters as) 252.27 216.02 P
5 F
-0.07 (ds_Store\050\051) 108 202.02 P
0 F
-0.03 (, b) 180 202.02 P
-0.03 (ut it operates by trying to detect blocks of samples in the data) 191.73 202.02 P
0.34 (chunk. The tw) 108 188.02 P
0.34 (o functions are interchangeable with re) 177.55 188.02 P
0.34 (g) 366.04 188.02 P
0.34 (ard to functionality; the) 371.98 188.02 P
(only dif) 108 174.02 T
(ference is the underlying storage algorithm.) 145.37 174.02 T
7 10 Q
(bool) 126 155.35 T
(ds_StoreBlocks \050dc, newfile, details, ndetail\051) 126 143.35 T
(DataChunk *dc;) 126 131.35 T
(bool newfile;) 126 119.35 T
(dsDetail *details;) 126 107.35 T
(int ndetail;) 126 95.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "136" 136
%%Page: "137" 137
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Deleting Data) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (137) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
-0.27 (Be) 126 678.02 P
-0.27 (ginning with the \336rst sample in the data chunk,) 139.15 678.02 P
5 F
-0.64 (ds_StoreBlocks\050\051) 365.4 678.02 P
0 F
-0.27 ( tries) 480.6 678.02 P
-0.04 (to b) 126 664.02 P
-0.04 (uild a block from consecuti) 144.06 664.02 P
-0.04 (v) 274.94 664.02 P
-0.04 (e samples. It assembles as man) 280.76 664.02 P
-0.04 (y chronological) 429.05 664.02 P
1.53 (and consecuti) 126 650.02 P
1.53 (v) 192.88 650.02 P
1.53 (e samples as will \336t into the remaining space in the \336le, and) 198.7 650.02 P
0.28 (writes the samples in a single call to the data \336le access interf) 126 636.02 P
0.28 (ace. Single sam-) 424.47 636.02 P
0.82 (ples which could not be assembled into a block are written indi) 126 622.02 P
0.82 (vidually as in) 437.69 622.02 P
5 F
2.63 (ds_Store\050\051) 126 608.02 P
0 F
1.1 (. Ho) 198 608.02 P
1.1 (we) 219.46 608.02 P
1.1 (v) 233.15 608.02 P
1.1 (er) 238.97 608.02 P
1.1 (, noti\336cation messages to the data store are held of) 247.82 608.02 P
1.1 (f) 500 608.02 P
1.09 (until the whole data chunk is written. Ev) 126 594.02 P
1.09 (en if the entire data chunk is stored) 328.09 594.02 P
(one sample at a time, there will still be a sa) 126 580.02 T
(vings in message traf) 332.74 580.02 T
(\336c.) 434.09 580.02 T
72 537.02 558 539.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 537.02 558 539.02 R
7 X
0 0 0 1 0 0 0 K
V
72 538.02 117 538.02 2 L
0.5 H
2 Z
0 X
N
126 538.02 558 538.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(9.7) 100.32 543.02 T
(Deleting Data) 126 543.02 T
0 F
-0.02 (Lastly) 126 519.02 P
-0.02 (, the data store interf) 155.22 519.02 P
-0.02 (ace also supports operations for deleting data. W) 254 519.02 P
-0.02 (ith-) 487.33 519.02 P
0.51 (out belaboring the point, these functions should be used with caution to a) 126 505.02 P
0.51 (v) 482.9 505.02 P
0.51 (oid) 488.66 505.02 P
(the untimely death of an) 126 491.02 T
(y dearly lo) 242.47 491.02 T
(v) 293.62 491.02 T
(ed data.) 299.44 491.02 T
1.64 (The) 126 465.02 P
5 F
3.95 (ds_DeleteData) 149.3 465.02 P
0 F
1.64 ( function deletes all of a platform\325) 242.9 465.02 P
1.64 (s data \336les which) 416.08 465.02 P
(end at or before a gi) 126 451.02 T
(v) 222 451.02 T
(en time.) 227.82 451.02 T
7 10 Q
(void) 144 432.35 T
(ds_DeleteData \050platform, zaptime\051) 144 420.35 T
(PlatformId platform;) 144 408.35 T
(ZebTime *zaptime;) 144 396.35 T
0 12 Q
0.17 (Calling this function sends a message to the data store daemon which contains) 126 371.02 P
1.27 (the) 126 357.02 P
7 F
3.04 (platform) 144.93 357.02 P
0 F
1.27 ( and) 202.53 357.02 P
7 F
3.04 (zaptime) 228.39 357.02 P
0 F
1.27 ( parameters. The daemon actually selects and) 278.79 357.02 P
0.34 (remo) 126 343.02 P
0.34 (v) 150.48 343.02 P
0.34 (es the data \336les. Data cannot be partially deleted from a \336le; only entire) 156.3 343.02 P
0.82 (\336les can be deleted, and only if the last sample in the \336le occurs at or before) 126 329.02 P
7 F
(zaptime) 126 315.02 T
0 F
(.) 176.4 315.02 T
0.12 (A second routine,) 126 289.02 P
5 F
0.29 (ds_DeleteObs) 214.34 289.02 P
0 F
0.12 (, can be used to speci\336cally select a single) 300.74 289.02 P
(\336le for deletion.) 126 275.02 T
7 10 Q
(void) 144 256.35 T
(ds_DeleteObs \050platform, zaptime\051) 144 244.35 T
(PlatformId platform;) 144 232.35 T
(ZebTime *zaptime;) 144 220.35 T
0 12 Q
0.69 (Rather than deleting) 126 195.02 P
4 F
0.69 (all) 228.4 195.02 P
0 F
0.69 ( \336les before) 241.07 195.02 P
7 F
1.66 (zaptime) 302.81 195.02 P
0 F
0.69 (, this routine tells the datastore) 353.21 195.02 P
0.32 (daemon to delete e) 126 181.02 P
0.32 (xactly one \336le which) 217.1 181.02 P
4 F
0.32 (contains) 321.72 181.02 P
0 F
0.32 ( that time. The daemon looks) 362.39 181.02 P
0.23 (for a \336le in the gi) 126 167.02 P
0.23 (v) 209.86 167.02 P
0.23 (en) 215.68 167.02 P
7 F
0.56 (platform) 230.24 167.02 P
0 F
0.23 ( which both be) 287.84 167.02 P
0.23 (gins after) 359.35 167.02 P
7 F
0.56 (zaptime) 407.81 167.02 P
0 F
0.23 ( and ends) 458.21 167.02 P
0.28 (before) 126 153.02 P
7 F
0.68 (zaptime) 159.93 153.02 P
0 F
0.28 (, inclusi) 210.33 153.02 P
0.28 (v) 248.32 153.02 P
0.28 (ely) 254.14 153.02 P
0.28 (. If no such \336le e) 268.02 153.02 P
0.28 (xists, the function has no ef) 349.91 153.02 P
0.28 (fect.) 483.01 153.02 P
(If such a \336le is found, then that \336le, and only that \336le, will be deleted.) 126 139.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "137" 137
%%Page: "138" 138
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The DataStore Interface) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(138) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "138" 138
%%Page: "139" 139
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (139) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 10 \245) 126 677 S
0 24 Q
-0.48 (Data File Access) 252 677 S
0 12 Q
-0.03 (This chapter will e) 126 424 P
-0.03 (v) 215.27 424 P
-0.03 (entually contain information on the data \336le access le) 221.09 424 P
-0.03 (v) 476.55 424 P
-0.03 (el of) 482.37 424 P
1.88 (the data store application library) 126 410 P
1.88 (. F) 288.03 410 P
1.88 (or no) 302.39 410 P
1.88 (w) 328.96 410 P
1.88 (, it includes some format-speci\336c) 336.85 410 P
(notes and concerns, especially re) 126 396 T
(g) 283.44 396 T
(arding data chunk attrib) 289.38 396 T
(utes.) 403.45 396 T
72 353 558 355 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 353 558 355 R
7 X
0 0 0 1 0 0 0 K
V
72 354 117 354 2 L
0.5 H
2 Z
0 X
N
126 354 558 354 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(10.1) 93.65 359 T
(Field Attrib) 126 359 T
(utes and Data Files) 189.1 359 T
0 F
-0.28 (A DataStore application needs to be able to remember and distinguish all of the) 126 335 P
0.51 (\336elds it uses. By design, the interf) 126 321 P
0.51 (ace tries to enforce some consistenc) 292.3 321 P
0.51 (y in the) 466.97 321 P
1.84 (names and identi\336ers of the \336elds. Therefore, \336elds must be de\336ned in the) 126 307 P
0.61 (\324\336elds table\325. The DataStore interf) 126 293 P
0.61 (ace includes an interf) 293.27 293 P
0.61 (ace to the \336elds table,) 397.26 293 P
0.45 (allo) 126 279 P
0.45 (wing a \336eld to be assigned a name, units, and a description. This interf) 143.7 279 P
0.45 (ace) 488.02 279 P
(is documented in Section) 126 265 T
(1.3,  \322The Fields T) 250 265 T
(able\323, on page) 339.7 265 T
(13.) 411.67 265 T
1.05 (Due to the limitations of the v) 126 239 P
1.05 (arious \336le formats which Zebra supports, \336eld) 276.03 239 P
0.8 (attrib) 126 225 P
0.8 (utes are not stored consistently between \336le formats. In f) 151.09 225 P
0.8 (act, only Zebra) 430.1 225 P
(nati) 126 211 T
(v) 143.7 211 T
(e \336les and netCDF \336les can hold \336eld attrib) 149.52 211 T
(ute information.) 358.61 211 T
2 F
(10.1.1) 83.64 179 T
(Bad Values) 126 179 T
0 F
-0.15 (In the current DataStore design, a bad v) 126 161 P
-0.15 (alue \337ag is a \337oating-point v) 315.24 161 P
-0.15 (alue which) 451.83 161 P
1.37 (indicates bad or missing data for a particular data point \050or \324element\325\051. This) 126 147 P
1.34 (information is critical to the correct interpretation of the data, so this \337ag is) 126 133 P
0.04 (handled e) 126 119 P
0.04 (xplicitly when written to a data \336le, as opposed to being stored in the) 172.18 119 P
1.08 (same manner as an) 126 105 P
1.08 (y other attrib) 220.04 105 P
1.08 (utes. In netCDF \336les, the \337ag is written as a) 283.95 105 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "139" 139
%%Page: "140" 140
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Data File Access) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(140) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.6 (\337oating-point v) 108 678.02 P
0.6 (ariable attrib) 182.64 678.02 P
0.6 (ute under the con) 243.99 678.02 P
0.6 (v) 328.29 678.02 P
0.6 (entional name \324missing_v) 334.11 678.02 P
0.6 (alue\325.) 459.01 678.02 P
0.47 (This can be a source of confusion since Zebra actually interprets this attrib) 108 664.02 P
0.47 (ute) 471.34 664.02 P
0.65 (as either a missing v) 108 650.02 P
0.65 (alue or a bad v) 208.27 650.02 P
0.65 (alue. The reason for this is historical: as a) 281.2 650.02 P
0.1 (visualization tool the ef) 108 636.02 P
0.1 (fects of either missing or bad data on a plot representa-) 221.01 636.02 P
0.39 (tion are the same. Lik) 108 622.02 P
0.39 (e) 213.75 622.02 P
0.39 (wise, there is no con) 218.78 622.02 P
0.39 (v) 318.18 622.02 P
0.39 (entional attrib) 324 622.02 P
0.39 (ute name for a \324bad) 391.14 622.02 P
1.03 (or missing\325 v) 108 608.02 P
1.03 (alue, so the use of \324missing_v) 173.09 608.02 P
1.03 (alue\325 seemed the most reasonable) 320.59 608.02 P
(and compatible approach.) 108 594.02 T
0.17 (At the moment, a single bad v) 108 574.02 P
0.17 (alue \337ag is associated with an entire data chunk,) 253.03 574.02 P
-0.22 (meaning e) 108 560.02 P
-0.22 (v) 157.13 560.02 P
-0.22 (ery \336eld in a data chunk shares the same bad v) 162.95 560.02 P
-0.22 (alue. In netCDF \336les,) 383.68 560.02 P
0.3 (the bad v) 108 546.02 P
0.3 (alue \337ag is associated with indi) 152.29 546.02 P
0.3 (vidual \336elds as a v) 303.79 546.02 P
0.3 (ariable attrib) 394 546.02 P
0.3 (ute. In) 455.04 546.02 P
0.11 (Zebra nati) 108 532.02 P
0.11 (v) 156.8 532.02 P
0.11 (e \336les, the bad v) 162.62 532.02 P
0.11 (alue \337ag is also stored indi) 241.09 532.02 P
0.11 (vidually with each \336eld.) 369.67 532.02 P
0.94 (Consequently) 108 518.02 P
0.94 (, it is possible for the \336elds in a netCDF or ZNF \336le to possess) 173.22 518.02 P
-0.15 (dif) 108 504.02 P
-0.15 (ferent bad v) 121.03 504.02 P
-0.15 (alue \337ags. T) 177.74 504.02 P
-0.15 (o enforce consistenc) 235.46 504.02 P
-0.15 (y when reading \336elds into a sin-) 332.94 504.02 P
0.63 (gle data chunk, the netCDF and ZNF access dri) 108 490.02 P
0.63 (v) 340.36 490.02 P
0.63 (ers con) 346.18 490.02 P
0.63 (v) 380.65 490.02 P
0.63 (ert the bad v) 386.47 490.02 P
0.63 (alues of) 447.71 490.02 P
0.49 (each \336eld to the single bad v) 108 476.02 P
0.49 (alue shared by the whole data chunk. An e) 247.96 476.02 P
0.49 (xplicit) 455.33 476.02 P
0.59 (bad v) 108 462.02 P
0.59 (alue for the data chunk can be speci\336ed as a DataStore detail, otherwise) 134.62 462.02 P
(the data chunk gets a def) 108 448.02 T
(ault bad v) 226.85 448.02 T
(alue \337ag of 99999.9.) 273.88 448.02 T
2 F
(10.1.2) 65.64 416.02 T
(Fields T) 108 416.02 T
(ab) 152.39 416.02 T
(le Attrib) 166.27 416.02 T
(utes) 211.37 416.02 T
0 F
0.55 (The netCDF dri) 108 398.02 P
0.55 (v) 184.79 398.02 P
0.55 (er also gi) 190.61 398.02 P
0.55 (v) 235.39 398.02 P
0.55 (es special treatment to the \336elds table declarations) 241.21 398.02 P
1.09 (of units and description. The units and description de\336ned with a \336eld name) 108 384.02 P
2.69 (become the \322units\323 and \322long_name\323 v) 108 370.02 P
2.69 (ariable attrib) 309.46 370.02 P
2.69 (utes in a netCDF \336le.) 372.89 370.02 P
2.68 (Zebra e) 108 356.02 P
2.68 (xpects \050indeed, enforces\051 these attrib) 146.82 356.02 P
2.68 (utes to be consistent with the) 333.59 356.02 P
0.66 (\336eld\325) 108 342.02 P
0.66 (s de\336nition in the \336eld table, re) 132.67 342.02 P
0.66 (g) 286.12 342.02 P
0.66 (ardless of what platform is being stored) 292.06 342.02 P
0.89 (\050because, by design, the \336eld de\336nition should be platform-independent\051. All) 108 328.02 P
0.29 (other attrib) 108 314.02 P
0.29 (utes come from the \336eld attrib) 161.05 314.02 P
0.29 (utes of the DataChunk, which can be) 307.27 314.02 P
(re-de\336ned as often as necessary) 108 300.02 T
(.) 259.16 300.02 T
-0.2 (The use of a \336eld\325) 108 274.02 P
-0.2 (s description as its \322long_name\323 attrib) 193.86 274.02 P
-0.2 (ute is perhaps mislead-) 376.28 274.02 P
0.57 (ing. The con) 108 260.02 P
0.57 (v) 168.99 260.02 P
0.57 (entional \322long_name\323 attrib) 174.81 260.02 P
0.57 (ute is meant to hold a more descrip-) 309.69 260.02 P
0.04 (ti) 108 246.02 P
0.04 (v) 114.37 246.02 P
0.04 (e name than the mnemonic and often abbre) 120.19 246.02 P
0.04 (viated v) 327.11 246.02 P
0.04 (ariable name; ho) 365.18 246.02 P
0.04 (we) 444.93 246.02 P
0.04 (v) 458.63 246.02 P
0.04 (er) 464.45 246.02 P
0.04 (, it) 473.29 246.02 P
0.98 (is not meant to hold a full description, only a name suitable for uses such as) 108 232.02 P
0.65 (labelling a plot. Lik) 108 218.02 P
0.65 (e) 204.51 218.02 P
0.65 (wise, a Zebra \336eld description is not meant to be a para-) 209.54 218.02 P
1.09 (graph on the \336eld\325) 108 204.02 P
1.09 (s source and deri) 198.93 204.02 P
1.09 (v) 282.88 204.02 P
1.09 (ation. The purposes of the \322long_name\323) 288.58 204.02 P
0.17 (con) 108 190.02 P
0.17 (v) 124.85 190.02 P
0.17 (ention and the \336eld table description were deemed similar enough to w) 130.67 190.02 P
0.17 (ar-) 472.68 190.02 P
(rant using the description information as the netCDF v) 108 176.02 T
(ariable\325) 369.68 176.02 T
(s long name.) 405.67 176.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "140" 140
%%Page: "141" 141
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (141) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 11 \245) 126 677 S
0 24 Q
-0.48 (The Ingest Routines) 252 677 S
0 12 Q
1.36 (The DataStore library contains functions for simplifying the de) 126 424 P
1.36 (v) 439.17 424 P
1.36 (elopment of) 444.98 424 P
0 (ingest modules. Ingest programs usually must perform a common set of opera-) 126 410 P
0.54 (tions, such as command-line parsing and deb) 126 396 P
0.54 (ugging. Often it is v) 344.63 396 P
0.54 (ery useful to) 442.94 396 P
0.13 (run independent of other Zebra processes, when the primary concern is simply) 126 382 P
-0.26 (reading and understanding a particular \336le format. Lik) 126 368 P
-0.26 (e) 384.69 368 P
-0.26 (wise, it is useful to ha) 389.72 368 P
-0.26 (v) 492.85 368 P
-0.26 (e) 498.67 368 P
-0 (lots of deb) 126 354 P
-0 (ugging information a) 176.42 354 P
-0 (v) 277.5 354 P
-0 (ailable during de) 283.2 354 P
-0 (v) 363.54 354 P
-0 (elopment, while during pro-) 369.36 354 P
0.22 (duction this information w) 126 340 P
0.22 (ould only bog do) 254.21 340 P
0.22 (wn the system. The ingest routines) 336.24 340 P
(of the DataStore library try to supply this type of utility) 126 326 T
(.) 391.21 326 T
72 283 558 285 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 283 558 285 R
7 X
0 0 0 1 0 0 0 K
V
72 284 117 284 2 L
0.5 H
2 Z
0 X
N
126 284 558 284 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(11.1) 93.65 289 T
(Using the Interface) 126 289 T
0 F
3.73 (A DataStore client which uses the ingest routines must include the \336le) 126 265 P
5 F
(ingest.h) 126 251 T
0 F
(.) 183.6 251 T
5 9 Q
(#include <ingest.h>) 144 228 T
0 12 Q
0.58 (The) 126 203 P
5 F
1.39 (ingest.h) 148.24 203 P
0 F
0.58 ( header \336le automatically includes a number of common sys-) 205.84 203 P
0.09 (tem and Zebra header \336les. These \336les) 126 189 P
4 F
0.09 (do not) 314.61 189 P
0 F
0.09 ( need to be included in the ingest) 345.03 189 P
(program\325) 126 175 T
(s source \336le since the) 169.99 175 T
(y are included by) 272.46 175 T
5 F
(ingest.h) 358.44 175 T
0 F
(.) 416.04 175 T
5 9 Q
(# include <stdio.h>) 144 152 T
(# include <ctype.h>) 144 141 T
(# include <ui_error.h>) 144 130 T
(# include \322defs.h\323) 144 119 T
(# include \322message.h\323) 144 108 T
(# include \322timer.h\323) 144 97 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "141" 141
%%Page: "142" 142
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Ing) 108 736.18 T
(est Routines) 140.09 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(142) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(# include \322DataStore.h\323) 126 680.02 T
(# include \322DataChunk.h\323) 126 669.02 T
(# include \322ds_fields.h\323) 126 658.02 T
0 12 Q
1.37 (A program which utilizes the ingest routines usually performs the follo) 108 633.02 P
1.37 (wing) 462 633.02 P
(steps. Each of the routines mentioned is e) 108 619.02 T
(xplained further belo) 307.13 619.02 T
(w) 407.47 619.02 T
(.) 415.36 619.02 T
1 F
(1.) 111.6 599.02 T
0 F
(P) 126 599.02 T
(arse the command-line options with) 132.49 599.02 T
5 F
(IngestParseOptions\050\051) 307.48 599.02 T
0 F
(. This) 451.48 599.02 T
(function detects a speci\336c set of options on the command line, con\336gures) 126 585.02 T
(the ingest library routines accordingly) 126 571.02 T
(, and then remo) 307.86 571.02 T
(v) 382.33 571.02 T
(es the options from) 388.15 571.02 T
(the ar) 126 557.02 T
(gument array) 152.77 557.02 T
(.) 215.64 557.02 T
1 F
(2.) 111.6 540.02 T
0 F
(Call) 126 540.02 T
5 F
(IngestUsage\050\051) 149 540.02 T
0 F
( from the application\325) 242.6 540.02 T
(s usage function. This) 346.26 540.02 T
-0.17 (ensures that the user sees the options a) 126 526.02 P
-0.17 (v) 309.51 526.02 P
-0.17 (ailable from the library interf) 315.21 526.02 P
-0.17 (ace as) 454.37 526.02 P
-0.4 (well as the application-speci\336c options. Alternati) 126 512.02 P
-0.4 (v) 358.99 512.02 P
-0.4 (ely) 364.81 512.02 P
-0.4 (, if the application has) 378.7 512.02 P
(no usage function, just pass) 126 498.02 T
5 F
(IngestUsage\050\051) 261.32 498.02 T
0 F
( to) 354.92 498.02 T
5 F
(IngestParseOp-) 370.26 498.02 T
(tions\050\051) 126 484.02 T
0 F
( as the usage function. The application\325) 176.4 484.02 T
(s usage function should) 364.7 484.02 T
-0.21 (tak) 126 470.02 P
-0.21 (e one ar) 140.54 470.02 P
-0.21 (gument, the name of the program \050usually passed as) 177.88 470.02 P
5 F
-0.51 (argv[0]) 428.6 470.02 P
0 F
-0.21 (\051.) 479 470.02 P
1 F
(3.) 111.6 453.02 T
0 F
(Call) 126 453.02 T
5 F
(IngestInitialize\050\051) 149 453.02 T
0 F
(. This initializes the message connection) 278.6 453.02 T
(and the DataStore library unless these ha) 126 439.02 T
(v) 321.72 439.02 T
(e been disabled by the applica-) 327.54 439.02 T
(tion or the command-line options \050such as when testing in a stand-alone) 126 425.02 T
(mode\051.) 126 411.02 T
1 F
(4.) 111.6 394.02 T
0 F
(Lastly) 126 394.02 T
(, use) 155.22 394.02 T
5 F
(IngestLog\050\051) 180.22 394.02 T
0 F
( rather than) 259.42 394.02 T
5 F
(msg_ELog\050\051) 317.06 394.02 T
0 F
( to log messages.) 389.06 394.02 T
(Ev) 126 380.02 T
(ent logging is based on the message logging pro) 139.15 380.02 T
(vided by the Zebra) 369.62 380.02 T
(library; see the) 126 366.02 T
4 F
(Zebr) 200.32 366.02 T
(a Libr) 222.8 366.02 T
(ary Interface Manual) 252.3 366.02 T
0 F
( for information.) 354.95 366.02 T
2 F
(11.1.1) 65.64 334.02 T
(P) 108 334.02 T
(ar) 115.64 334.02 T
(sing Options) 126.8 334.02 T
0 F
0.42 (The ingest interf) 108 316.02 P
0.42 (ace recognizes se) 188.04 316.02 P
0.42 (v) 271.87 316.02 P
0.42 (eral command-line options for determining) 277.69 316.02 P
-0.04 (the deb) 108 302.02 P
-0.04 (ug state and log message mask. These options af) 142.71 302.02 P
-0.04 (fect the beha) 375.09 302.02 P
-0.04 (vior of the) 436.08 302.02 P
0.55 (interf) 108 288.02 P
0.55 (ace library routines and set se) 133.87 288.02 P
0.55 (v) 278.64 288.02 P
0.55 (eral public v) 284.45 288.02 P
0.55 (ariables. [See Section) 345.25 288.02 P
0.55 (11.2.2,) 453 288.02 P
(\322Public V) 108 274.02 T
(ariables.) 154.33 274.02 T
(\323]) 193.81 274.02 T
5 9 Q
(-blow,-chunks) 126 256.02 T
(Dump data chunks when stored) 241.2 256.02 T
(-noel) 126 245.02 T
(Don\325t send to EventLogger) 241.2 245.02 T
(-dryrun,-dry,-test) 126 234.02 T
(Don\325t connect to other processes, e.g. the DataStore) 241.2 234.02 T
(-log all|e|p|c|d|i|v) 126 223.02 T
(Set the messages which get echoed to the terminal) 241.2 223.02 T
(The default is emergencies only.) 241.2 212.02 T
(all: all messages; same as -log epcdiv) 270 201.02 T
(e:   emergencies) 270 190.02 T
(p:   problems) 270 179.02 T
(c:   clients) 270 168.02 T
(d:   debugging) 270 157.02 T
(i:   information) 270 146.02 T
(v:   development debugging) 270 135.02 T
(-name) 126 124.02 T
(Print the program name in log messages to the terminal) 241.2 124.02 T
(-help, -h) 126 113.02 T
(Show this help information) 241.2 113.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "142" 142
%%Page: "143" 143
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Using the Interface) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (143) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(The te) 126 678.02 T
(xt abo) 156.14 678.02 T
(v) 185.63 678.02 T
(e is printed by the) 191.45 678.02 T
5 F
(IngestUsage\050\051) 280.44 678.02 T
0 F
( function, described belo) 374.04 678.02 T
(w) 492.38 678.02 T
(.) 500.27 678.02 T
0.39 (Ordinarily) 126 652.02 P
0.39 (, an application \336rst calls) 175.21 652.02 P
5 F
0.94 (IngestParseOptions\050\051) 300.5 652.02 P
0 F
0.39 ( to parse the) 444.5 652.02 P
1.73 (ingest options on the command line and remo) 126 638.02 P
1.73 (v) 356.93 638.02 P
1.73 (e them. Calling the function) 362.75 638.02 P
2.3 (\336rst, before connecting to the message handler or DataStore, allo) 126 624.02 P
2.3 (ws usage) 458.04 624.02 P
-0.08 (information to be displayed by the help option without the start-up o) 126 610.02 P
-0.08 (v) 453.28 610.02 P
-0.08 (erhead of) 459.1 610.02 P
0.02 (establishing connections. More importantly) 126 596.02 P
0.02 (, if the command-line options spec-) 333.93 596.02 P
7.44 (ify \324dry run\325 mode, the connections will not be attempted when) 126 582.02 P
5 F
59.47 (IngestInitialize\050\051) 126 568.02 P
0 F
24.78 ( is called. The interf) 255.6 568.02 P
24.78 (ace to) 450.9 568.02 P
5 F
(IngestParseOptions\050\051) 126 554.02 T
0 F
( follo) 270 554.02 T
(ws.) 295.37 554.02 T
7 10 Q
(void) 144 535.35 T
(IngestParseOptions\050argc, argv, usage\051) 144 523.35 T
(int *argc;) 144 511.35 T
(char *argv[];) 144 499.35 T
(void \050*usage\051\050/* char *prog_name */\051;) 144 487.35 T
0 12 Q
0.32 (The parameters) 126 462.02 P
7 F
0.78 (argc) 203.95 462.02 P
0 F
0.32 ( and) 232.75 462.02 P
7 F
0.78 (argv) 256.73 462.02 P
0 F
0.32 ( correspond to the v) 285.53 462.02 P
0.32 (alues passed to) 381.84 462.02 P
5 F
0.78 (main\050\051) 457.8 462.02 P
0 F
0.32 (.) 501 462.02 P
0.42 (Note that) 126 448.02 P
7 F
1.01 (argc) 174.17 448.02 P
0 F
0.42 ( is passed by reference, since the number of ar) 202.97 448.02 P
0.42 (guments left on) 428.49 448.02 P
0.63 (the command line may ha) 126 434.02 P
0.63 (v) 252.26 434.02 P
0.63 (e changed when the function returns. Lik) 258.08 434.02 P
0.63 (e) 458.68 434.02 P
0.63 (wise the) 463.71 434.02 P
0.5 (ar) 126 420.02 P
0.5 (gument array) 135.11 420.02 P
7 F
1.2 (argv) 202.76 420.02 P
0 F
0.5 ( may change also. The) 231.56 420.02 P
7 F
1.2 (usage) 344.7 420.02 P
0 F
0.5 ( parameter is the applica-) 380.7 420.02 P
-0.12 (tion\325) 126 406.02 P
-0.12 (s usage function, which will be called when) 148.01 406.02 P
5 F
-0.29 (IngestParseOptions\050\051) 360 406.02 P
0 F
-0.14 (detects the) 126 392.02 P
5 F
-0.35 (-h) 179.7 392.02 P
0 F
-0.14 ( or) 194.1 392.02 P
5 F
-0.35 (-help) 209.8 392.02 P
0 F
-0.14 ( option on the command line. If the application has no) 245.8 392.02 P
1.35 (usage function, pass the) 126 378.02 P
5 F
3.23 (IngestUsage\050\051) 249.04 378.02 P
0 F
1.35 ( function instead. Otherwise, the) 342.64 378.02 P
1.34 (application\325) 126 364.02 P
1.34 (s usage function should call) 182.66 364.02 P
5 F
3.22 (IngestUsage\050\051) 325.7 364.02 P
0 F
1.34 ( itself so that the) 419.3 364.02 P
(ingest library options will be listed along with the application\325) 126 350.02 T
(s o) 424.33 350.02 T
(wn options.) 437.7 350.02 T
7 10 Q
(void) 144 331.35 T
(IngestUsage\050void\051;) 144 319.35 T
0 12 Q
0.09 (F) 126 294.02 P
0.09 (or e) 132.49 294.02 P
0.09 (xample, if an ingest program has no command-line options, and hence no) 150.73 294.02 P
(usage function, call) 126 280.02 T
5 F
(IngestParseOptions\050\051) 222.65 280.02 T
0 F
( as follo) 366.65 280.02 T
(ws:) 405.01 280.02 T
5 9 Q
(main\050argc, argv\051) 144 257.02 T
(int argc;) 144 246.02 T
(char *argv[];) 144 235.02 T
({) 144 224.02 T
(IngestParseOptions\050&argc, argv, IngestUsage\051;) 172.8 213.02 T
(/* ... */) 172.8 202.02 T
0 12 Q
0.42 (If) 126 177.02 P
7 F
1.02 (usage) 137.42 177.02 P
0 F
0.42 ( is passed to) 173.42 177.02 P
5 F
1.02 (IngestParseOptions\050\051) 236.44 177.02 P
0 F
0.42 ( as) 380.44 177.02 P
5 F
1.02 (NULL) 397.29 177.02 P
0 F
0.42 (, no usage func-) 426.08 177.02 P
4.92 (tion will be called and the library help option will be disabled. See) 126 163.02 P
-0.23 (Section) 126 149.02 P
-0.23 (11.3 for an e) 165 149.02 P
-0.23 (xample which includes an application-speci\336c usage func-) 224.78 149.02 P
(tion.) 126 135.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "143" 143
%%Page: "144" 144
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Ing) 108 736.18 T
(est Routines) 140.09 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(144) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.2 (The) 108 678.02 P
5 F
0.49 (IngestRemoveOptions\050\051) 129.86 678.02 P
0 F
0.2 ( function can be used by the application to) 281.06 678.02 P
(remo) 108 664.02 T
(v) 132.48 664.02 T
(e its o) 138.3 664.02 T
(wn options from the command line.) 166.67 664.02 T
7 10 Q
(void) 126 645.35 T
(IngestRemoveOptions\050argc, argv, i, n\051) 126 633.35 T
(int *argc;) 126 621.35 T
(char *argv[];) 126 609.35 T
(int i;) 126 597.35 T
(/* position to start removing args from */) 198 597.35 T
(int n;) 126 585.35 T
(/* number of args to remove */) 198 585.35 T
0 12 Q
-0.29 (This function remo) 108 560.02 P
-0.29 (v) 199.24 560.02 P
-0.29 (es) 205.06 560.02 P
7 F
-0.69 (n) 217.77 560.02 P
0 F
-0.29 ( ar) 224.97 560.02 P
-0.29 (guments from the) 236.79 560.02 P
7 F
-0.69 (argv) 323.59 560.02 P
0 F
-0.29 ( array) 352.39 560.02 P
-0.29 (, be) 378.98 560.02 P
-0.29 (ginning at inde) 395.84 560.02 P
-0.29 (x) 467.09 560.02 P
7 F
-0.69 (i) 475.8 560.02 P
0 F
-0.29 (.) 483 560.02 P
0.64 (The options are remo) 108 546.02 P
0.64 (v) 212.05 546.02 P
0.64 (ed by sliding the pointers at the end of the) 217.87 546.02 P
7 F
1.53 (argv) 428.91 546.02 P
0 F
0.64 ( array) 457.71 546.02 P
1.26 (to) 108 532.02 P
1.26 (w) 117.04 532.02 P
1.26 (ards the \336rst position being remo) 125.58 532.02 P
1.26 (v) 290.02 532.02 P
1.26 (ed. The number of options remo) 295.84 532.02 P
1.26 (v) 456.59 532.02 P
1.26 (ed is) 462.41 532.02 P
0.37 (subtracted from) 108 518.02 P
7 F
0.89 (argc) 187.39 518.02 P
0 F
0.37 (. See Section) 216.19 518.02 P
0.37 (11.3 for an e) 282.26 518.02 P
0.37 (xample of using this function) 343.85 518.02 P
(to parse application-speci\336c command-line options.) 108 504.02 T
2 F
(11.1.2) 65.64 472.02 T
(Initializing the Interface) 108 472.02 T
0 F
2.32 (The) 108 454.02 P
5 F
5.56 (IngestInitialize\050\051) 131.98 454.02 P
0 F
2.32 ( function mak) 261.58 454.02 P
2.32 (es connections to the message) 332.75 454.02 P
1.79 (handler and DataStore daemon according to the options found on the com-) 108 440.02 P
(mand-line.) 108 426.02 T
7 10 Q
(void) 126 407.35 T
(IngestInitialize\050name\051) 126 395.35 T
(char *name;) 126 383.35 T
(/* Message name of this ingest module */) 198 383.35 T
0 12 Q
2.7 (If the) 108 358.02 P
5 F
6.47 (test) 142.05 358.02 P
0 F
2.7 ( or) 170.85 358.02 P
5 F
6.47 (dryrun) 192.24 358.02 P
0 F
2.7 ( options are present, the connections will not be) 235.44 358.02 P
3.52 (attempted. Otherwise,) 108 344.02 P
5 F
8.44 (IngestInitialize\050\051) 223.68 344.02 P
0 F
3.52 ( connects to the message) 353.28 344.02 P
0.09 (handler with) 108 330.02 P
5 F
0.21 (msg_connect\050\051) 171.5 330.02 P
0 F
0.09 ( using) 265.1 330.02 P
7 F
0.21 (name) 297.28 330.02 P
0 F
0.09 ( as the process name. It also calls) 326.08 330.02 P
5 F
(usy_init\050\051) 108 316.02 T
0 F
( and \336nally calls) 180 316.02 T
5 F
(ds_Initialize\050\051) 262 316.02 T
0 F
(.) 370 316.02 T
5 F
1.57 (IngestInitialize\050\051) 108 290.02 P
0 F
0.65 ( also installs a def) 237.6 290.02 P
0.65 (ault message handler which han-) 326.09 290.02 P
0.75 (dles) 108 276.02 P
5 F
1.81 (MH_SHUTDOWN) 131.09 276.02 P
0 F
0.75 ( messages. This handler can be o) 210.29 276.02 P
0.75 (v) 372.27 276.02 P
0.75 (erridden by de\336ning a) 378.09 276.02 P
-0.03 (dif) 108 262.02 P
-0.03 (ferent protocol handler through the standard message library functions. [See) 121.03 262.02 P
(the) 108 248.02 T
4 F
(Zebr) 125.66 248.02 T
(a Libr) 148.15 248.02 T
(ary) 177.65 248.02 T
0 F
( manual.]) 193.64 248.02 T
2 F
(11.1.3) 65.64 216.02 T
(Log) 108 216.02 T
(ging Messa) 129.88 216.02 T
(g) 195.11 216.02 T
(es) 202.56 216.02 T
0 F
0.46 (The) 108 198.02 P
5 F
1.11 (IngestLog\050\051) 130.12 198.02 P
0 F
0.46 ( function allo) 209.32 198.02 P
0.46 (ws messages to be directed to) 273.94 198.02 P
5 F
1.11 (stdout) 422.01 198.02 P
0 F
0.46 ( and) 465.21 198.02 P
0.66 (relayed to the Ev) 108 184.02 P
0.66 (entLogger) 191.45 184.02 P
0.66 (. The log messages can be screened with the com-) 240.11 184.02 P
0.48 (mand line) 108 170.02 P
5 F
1.15 (log) 159.62 170.02 P
0 F
0.48 ( option, noted in Section) 181.22 170.02 P
0.48 (11.1.1, \322P) 303.8 170.02 P
0.48 (arsing Options.) 352.1 170.02 P
0.48 (\323) 425.07 170.02 P
0.48 (When run-) 433.87 170.02 P
1.88 (ning in) 108 156.02 P
5 F
4.51 (DryRun) 148.43 156.02 P
0 F
1.88 ( mode,) 191.63 156.02 P
1.88 (I) 231.06 156.02 P
5 F
4.51 (ngestLog\050\051) 235.06 156.02 P
0 F
1.88 ( logs messages to) 307.06 156.02 P
5 F
4.51 (stdout) 401.25 156.02 P
0 F
1.88 ( without) 444.45 156.02 P
(trying to relay them to the Ev) 108 142.02 T
(entLogger) 249.14 142.02 T
(.) 297.8 142.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "144" 144
%%Page: "145" 145
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Ing) 126 736.18 T
(est Interface) 158.09 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (145) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(11.1.4) 83.64 678.02 T
(DataStore Interface) 126 678.02 T
0 F
-0.1 (Calls to) 126 660.02 P
5 F
-0.23 (ds_Store\050\051) 165.82 660.02 P
0 F
-0.1 ( and) 237.82 660.02 P
5 F
-0.23 (ds_LookupPlatform\050\051) 260.95 660.02 P
0 F
-0.1 ( are de\336ned as macros) 397.75 660.02 P
0.29 (in) 126 646.02 P
5 F
0.69 (ingest.h.) 138.62 646.02 P
0 F
0.29 (The macros call shado) 211.32 646.02 P
0.29 (w functions implemented internally in) 319.52 646.02 P
3.71 (the library) 126 632.02 P
3.71 (. When the DataStore is connected, the shado) 178.59 632.02 P
3.71 (w functions log) 421.91 632.02 P
5 F
(ds_Store\050\051) 126 618.02 T
0 F
( and) 198 618.02 T
5 F
(ds_StoreBlocks\050\051) 221.33 618.02 T
0 F
( calls and f) 336.53 618.02 T
(ailures.) 388.73 618.02 T
-0.11 (When) 126 592.02 P
5 F
-0.26 (DryRun) 157.55 592.02 P
0 F
-0.11 ( mode is in ef) 200.75 592.02 P
-0.11 (fect, the) 265.34 592.02 P
5 F
-0.26 (ds_Store\050\051) 306.77 592.02 P
0 F
-0.11 ( functions do nothing, and) 378.77 592.02 P
5 F
0.45 (ds_LookupPlatform\050\051) 126 578.02 P
0 F
0.19 ( al) 262.8 578.02 P
0.19 (w) 274.53 578.02 P
0.19 (ays returns a platform identi\336er of zero. Also,) 283.07 578.02 P
5 F
2.57 (ds_LookupPlatform\050\051) 126 564.02 P
0 F
1.07 ( will log a message when it is returning a \324f) 262.8 564.02 P
1.07 (alse\325) 481.34 564.02 P
(identi\336er: \322DryRun: Calls to ds_LookupPlatform will return 0\323.) 126 550.02 T
72 507.02 558 509.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 507.02 558 509.02 R
7 X
0 0 0 1 0 0 0 K
V
72 508.02 117 508.02 2 L
0.5 H
2 Z
0 X
N
126 508.02 558 508.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(11.2) 93.65 513.02 T
(The Ing) 126 513.02 T
(est Interface) 168.79 513.02 T
0 F
0.89 (Besides the general functions outlined abo) 126 489.02 P
0.89 (v) 333.9 489.02 P
0.89 (e, the ingest library interf) 339.72 489.02 P
0.89 (ace also) 464.8 489.02 P
(includes se) 126 475.02 T
(v) 178.69 475.02 T
(eral public v) 184.51 475.02 T
(ariables and macros.) 244.2 475.02 T
2 F
(11.2.1) 83.64 443.02 T
(De) 126 443.02 T
(velopment Log Messa) 141.16 443.02 T
(g) 266.4 443.02 T
(es) 273.85 443.02 T
0 F
0.12 (The ingest header \336le de\336nes an e) 126 425.02 P
0.12 (v) 289.71 425.02 P
0.12 (ent logger mask for messages that will nor-) 295.53 425.02 P
0.58 (mally only be useful while a program is under de) 126 411.02 P
0.58 (v) 366.54 411.02 P
0.58 (elopment, i.e., being run in) 372.36 411.02 P
5 F
(DryRun) 126 397.02 T
0 F
( mode.) 169.2 397.02 T
5 9 Q
(#define EF_DEVELOP \0500x400\051) 144 374.02 T
0 12 Q
0.53 (If a message is passed to) 126 349.02 P
5 F
1.26 (IngestLog\050\051) 250.46 349.02 P
0 F
0.53 ( with only the de) 329.66 349.02 P
0.53 (v) 412.13 349.02 P
0.53 (elopment \337ag set,) 417.95 349.02 P
0.4 (the message will be written to) 126 335.02 P
5 F
0.97 (stdout) 275.07 335.02 P
0 F
0.4 ( according to the) 318.27 335.02 P
5 F
0.97 (IngestLogFlags) 403.2 335.02 P
0 F
-0.16 (mask \050described in Section) 126 321.02 P
-0.16 (11.2.2\051 just lik) 258.18 321.02 P
-0.16 (e an) 327.76 321.02 P
-0.16 (y other e) 347.08 321.02 P
-0.16 (v) 388.45 321.02 P
-0.16 (ent message. Ho) 394.27 321.02 P
-0.16 (we) 472.64 321.02 P
-0.16 (v) 486.34 321.02 P
-0.16 (er) 492.16 321.02 P
-0.16 (,) 501 321.02 P
0.41 (messages with only) 126 307.02 P
5 F
0.99 (EF_DEVELOP) 224.24 307.02 P
0 F
0.41 ( set will not be relayed to the Ev) 296.24 307.02 P
0.41 (entLogger) 454.68 307.02 P
1.03 (re) 126 293.02 P
1.03 (g) 135.14 293.02 P
1.03 (ardless of the v) 141.08 293.02 P
1.03 (alue of) 216.86 293.02 P
5 F
2.48 (NoEventLogger) 254.92 293.02 P
0 F
1.03 ( \050described belo) 348.52 293.02 P
1.03 (w\051. The goal of) 426.92 293.02 P
1.68 (this \337ag is to allo) 126 279.02 P
1.68 (w v) 215.09 279.02 P
1.68 (oluminous output when deb) 234.19 279.02 P
1.68 (ugging and running stand-) 372.65 279.02 P
0.47 (alone, i.e., during de) 126 265.02 P
0.47 (v) 225.42 265.02 P
0.47 (elopment, b) 231.24 265.02 P
0.47 (ut restrict such deb) 288.13 265.02 P
0.47 (ugging output when mes-) 380.27 265.02 P
0.03 (sages are actually being sent to the Ev) 126 251.02 P
0.03 (entLogger) 309.02 251.02 P
0.03 (, such as during normal opera-) 357.86 251.02 P
(tions. This reduces clutter in the Ev) 126 237.02 T
(entLogger) 296.14 237.02 T
(.) 344.8 237.02 T
2 F
(11.2.2) 83.64 205.02 T
(Pub) 126 205.02 T
(lic V) 148.55 205.02 T
(ariab) 172.51 205.02 T
(les) 201.07 205.02 T
0 F
-0.13 (Se) 126 187.02 P
-0.13 (v) 137.7 187.02 P
-0.13 (eral ingest library \337ags are a) 143.52 187.02 P
-0.13 (v) 278.91 187.02 P
-0.13 (ailable publicly so that ingest modules can set) 284.61 187.02 P
(and test their deb) 126 173.02 T
(ug state.) 208.08 173.02 T
5 9 Q
(extern int   IngestLogFlags;) 144 150.02 T
(extern short NoDataStore;) 144 139.02 T
(extern short NoMessageHandler;) 144 128.02 T
(extern short NoEventLogger;) 144 117.02 T
(extern short DryRun;) 144 106.02 T
(extern short DumpDataChunks;) 144 95.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "145" 145
%%Page: "146" 146
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Ing) 108 736.18 T
(est Routines) 140.09 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(146) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(extern short ShowIngestName;) 126 680.02 T
5 12 Q
0.1 (IngestLogFlags) 108 655.02 P
0 F
0.04 ( holds the bitwise) 208.8 655.02 P
5 F
0.1 (or) 296.31 655.02 P
0 F
0.04 ( of the log message types which will) 310.71 655.02 P
3.13 (be printed to) 108 641.02 P
5 F
7.52 (stdout) 181.07 641.02 P
0 F
3.13 ( by the) 224.26 641.02 P
5 F
7.52 (IngestLog\050\051) 269.33 641.02 P
0 F
3.13 ( function.) 348.53 641.02 P
5 F
7.52 (NoDataStore) 403.8 641.02 P
0 F
3.13 (,) 483 641.02 P
5 F
0.6 (NoMessageHandler) 108 627.02 P
0 F
0.25 (, and) 222.72 627.02 P
5 F
0.6 (NoEventLogger) 249.55 627.02 P
0 F
0.25 ( are non-zero when the corre-) 343.15 627.02 P
0.67 (sponding process is not running. F) 108 613.02 P
0.67 (or e) 276.52 613.02 P
0.67 (xample, an application can run without) 295.33 613.02 P
0.49 (connecting to the DataStore daemon by setting) 108 599.02 P
5 F
1.16 (NoDataStore) 339.03 599.02 P
0 F
0.49 ( to a non-zero) 418.23 599.02 P
4.93 (v) 108 585.02 P
4.93 (alue) 113.7 585.02 P
4 F
4.93 (befor) 141.62 585.02 P
4.93 (e) 166.51 585.02 P
0 F
4.93 ( calling) 171.84 585.02 P
5 F
11.83 (IngestInitialize\050\051) 220.36 585.02 P
0 F
4.93 (. An application can test) 349.96 585.02 P
5 F
-0.34 (IngestLogFlags) 108 571.02 P
0 F
-0.14 ( to \336nd out which messages are being logged according to) 208.8 571.02 P
8.55 (command-line options. Con) 108 557.02 P
8.55 (v) 258.28 557.02 P
8.55 (ersely) 264.1 557.02 P
8.55 (, the application can change the) 291.98 557.02 P
5 F
0.7 (IngestLogFlags) 108 543.02 P
0 F
0.29 ( mask to directly af) 208.8 543.02 P
0.29 (fect the set of messages which will be) 302.32 543.02 P
(logged.) 108 529.02 T
2.71 (The global \337ags are set by) 108 503.02 P
5 F
6.5 (IngestParseOptions\050\051) 253.56 503.02 P
0 F
2.71 ( according to the) 397.56 503.02 P
1.38 (options present on the command-line. Therefore, after parsing the command) 108 489.02 P
1.23 (line, an ingest process can determine if it is running without a DataStore by) 108 475.02 P
-0.12 (testing the v) 108 461.02 P
-0.12 (alue of) 166.12 461.02 P
5 F
-0.3 (NoDataStore) 201.86 461.02 P
0 F
-0.12 (. T) 281.06 461.02 P
-0.12 (esting the ingest \337ags is necessary when) 293.43 461.02 P
1.95 (using DataStore interf) 108 447.02 P
1.95 (ace functions which are not intercepted by the ingest) 217.77 447.02 P
1.38 (interf) 108 433.02 P
1.38 (ace. F) 133.87 433.02 P
1.38 (or e) 163.73 433.02 P
1.38 (xample, calls to) 183.26 433.02 P
5 F
3.32 (ds_PlatformName\050\051) 266.07 433.02 P
0 F
1.38 ( must be trapped in) 388.47 433.02 P
(case the ingest module is running stand-alone, as in the method sho) 108 419.02 T
(wn belo) 431 419.02 T
(w) 469.03 419.02 T
(.) 476.92 419.02 T
5 9 Q
(# define PlatformName\050pid\051 \050\050NoDataStore\051?\323platname\323:ds_PlatformName\050pid\051\051) 126 396.02 T
2 12 Q
(11.2.3) 65.64 365.02 T
(Pub) 108 365.02 T
(lic Macr) 130.55 365.02 T
(os) 175 365.02 T
0 F
-0.28 (The) 108 347.02 P
5 F
-0.66 (ingest.h) 129.38 347.02 P
0 F
-0.28 ( header \336le de\336nes se) 186.98 347.02 P
-0.28 (v) 288.89 347.02 P
-0.28 (eral macros which allo) 294.71 347.02 P
-0.28 (w ingest modules) 402.55 347.02 P
0.11 (to set their def) 108 333.02 P
0.11 (ault deb) 177.19 333.02 P
0.11 (ug state e) 215.38 333.02 P
0.11 (xplicitly) 260.74 333.02 P
0.11 (. It may be easier to \336x the deb) 299.97 333.02 P
0.11 (ug state) 448.9 333.02 P
0.75 (within the source \336le during de) 108 319.02 P
0.75 (v) 261.1 319.02 P
0.75 (elopment rather than cro) 266.92 319.02 P
0.75 (wding the command) 386.51 319.02 P
(line with deb) 108 305.02 T
(ug options. All of the macros are called without an) 170.42 305.02 T
(y ar) 413.54 305.02 T
(guments.) 431.65 305.02 T
5 F
(IngestShowName\050\051) 126 279.02 T
0 F
4.34 (Pre\336x log messages with the ingest process) 252 279.02 P
(name.) 252 265.02 T
5 F
(IngestSetNoMessageHandler\050\051) 126 239.02 T
0 F
5.56 (Run without a message handler by setting) 252 225.02 P
5 F
(NoMessageHandler) 252 211.02 T
0 F
( to true.) 367.2 211.02 T
5 F
(IngestSetNoEventLogger\050\051) 126 185.02 T
0 F
7.97 (Run without an e) 252 171.02 P
7.97 (v) 357.94 171.02 P
7.97 (ent logger by setting) 363.76 171.02 P
5 F
(NoEventLogger) 252 157.02 T
0 F
( to true.) 345.6 157.02 T
5 F
(IngestSetNoDataStore\050\051) 126 131.02 T
0 F
1.16 (Run without initializing the DataStore interf) 252 117.02 P
1.16 (ace) 470.02 117.02 P
-0.14 (or connection by setting) 252 103.02 P
5 F
-0.34 (NoDataStore) 370.09 103.02 P
0 F
-0.14 ( to true.) 449.29 103.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "146" 146
%%Page: "147" 147
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Example) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (147) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 12 Q
(IngestSetDryRun\050\051) 144 678.02 T
0 F
12.34 (Run completely stand-alone by setting) 270 678.02 P
5 F
12.9 (NoMessageHandler) 270 664.02 P
0 F
5.38 (,) 384.72 664.02 P
5 F
12.9 (NoDataStore) 396.1 664.02 P
0 F
5.38 (, and) 475.3 664.02 P
5 F
(NoEventLogger) 270 650.02 T
0 F
( to true.) 363.6 650.02 T
0.11 (These macros can be called at the be) 126 624.02 P
0.11 (ginning of an ingest program to preset the) 302.23 624.02 P
0.33 (deb) 126 610.02 P
0.33 (ug beha) 143.09 610.02 P
0.33 (vior) 180.84 610.02 P
0.33 (. While de) 199.51 610.02 P
0.33 (v) 249.52 610.02 P
0.33 (eloping an ingest program, the follo) 255.34 610.02 P
0.33 (wing line at the) 428.68 610.02 P
(be) 126 596.02 T
(ginning of the program will al) 137.15 596.02 T
(w) 281.35 596.02 T
(ays force stand-alone mode.) 289.9 596.02 T
5 9 Q
(main\050\051) 144 573.02 T
({) 144 562.02 T
(IngestSetDryRun\050\051;) 172.8 551.02 T
(/* ... */) 172.8 529.02 T
0 12 Q
-0.05 (The header \336le also de\336nes the macro) 126 504.02 P
5 F
-0.12 (streq\050\051) 310.59 504.02 P
0 F
-0.05 ( as a con) 360.99 504.02 P
-0.05 (v) 402.01 504.02 P
-0.05 (enient test for string) 407.83 504.02 P
(equality:) 126 490.02 T
5 9 Q
(# ifndef streq) 144 467.02 T
(# define streq\050a,b\051 \050strcmp\050\050a\051,\050b\051\051 == 0\051) 144 456.02 T
(# endif) 144 445.02 T
72 403.02 558 405.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 403.02 558 405.02 R
7 X
0 0 0 1 0 0 0 K
V
72 404.02 117 404.02 2 L
0.5 H
2 Z
0 X
N
126 404.02 558 404.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(11.3) 93.65 409.02 T
(Example) 126 409.02 T
0 F
0.82 (This section contains an e) 126 385.02 P
0.82 (xample of using the ingest interf) 253.08 385.02 P
0.82 (ace tak) 412.7 385.02 P
0.82 (en from the) 447.04 385.02 P
5 F
8.31 (class_ingest) 126 371.02 P
0 F
3.46 ( program. The source \336le \336rst includes the) 212.4 371.02 P
5 F
8.31 (ingest.h) 446.4 371.02 P
0 F
(header \336le.) 126 357.02 T
5 9 Q
(#include <ingest.h>) 144 339.02 T
0 12 Q
(The be) 126 314.02 T
(ginning of the) 158.81 314.02 T
5 F
(main\050\051) 229.14 314.02 T
0 F
( function looks lik) 272.34 314.02 T
(e this:) 359.89 314.02 T
5 9 Q
(int main \050argc, argv\051) 144 296.02 T
(int argc;) 172.8 285.02 T
(char **argv;) 172.8 274.02 T
({) 144 263.02 T
(/*) 144 252.02 T
( * Get our command-line options, setting appropriate global variables) 144 241.02 T
( * Only the file name and the names of the fields should remain) 144 230.02 T
( */) 144 219.02 T
(ParseCommandLineOptions\050&argc, argv\051;) 172.8 208.02 T
(if \050argc < 2\051) 172.8 197.02 T
(/* Need a file name arg */) 243 197.02 T
({) 172.8 186.02 T
(printf\050\322%s: need a file name\134n\323,argv[0]\051;) 201.6 175.02 T
(Usage\050argv[0]\051;) 201.6 164.02 T
(exit\050PROBLEM\051;) 201.6 153.02 T
(}) 172.8 142.02 T
(/* ... */) 172.8 120.02 T
(/*) 144 98.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "147" 147
%%Page: "148" 148
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Ing) 108 736.18 T
(est Routines) 140.09 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(148) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
( * Initialize usy, message, DataStore, and fields all at once) 126 680.02 T
( */) 126 669.02 T
(IngestInitialize\050INGEST_NAME\051;) 154.8 658.02 T
0 12 Q
0.25 (The) 108 622.02 P
5 F
0.6 (main\050\051) 129.91 622.02 P
0 F
0.25 ( function calls the function) 173.11 622.02 P
5 F
0.6 (ParseCommandLineOptions\050\051) 306 622.02 P
0 F
2.28 (which is sho) 108 608.02 P
2.28 (wn belo) 172.27 608.02 P
2.28 (w) 212.58 608.02 P
2.28 (. The ingest library options are remo) 220.46 608.02 P
2.28 (v) 408.96 608.02 P
2.28 (ed \336rst before) 414.78 608.02 P
3.02 (checking for the application\325) 108 594.02 P
3.02 (s command-line options. F) 254.71 594.02 P
3.02 (or this reason, the) 391.61 594.02 P
(application\325) 108 580.02 T
(s options must be dif) 164.66 580.02 T
(ferent from the library options.) 264.37 580.02 T
5 9 Q
(/* ParseCommandLineOptions --------------------------------------------) 126 562.02 T
( *    Set global variables from command-line options, leaving only) 126 551.02 T
( *    the expected file and field names in the arg list) 126 540.02 T
( */) 126 529.02 T
(static void) 126 518.02 T
(ParseCommandLineOptions\050argc, argv\051) 126 507.02 T
(int *argc;) 154.8 496.02 T
(char *argv[];) 154.8 485.02 T
({) 126 474.02 T
(int i, j;) 154.8 463.02 T
(/*) 126 441.02 T
( * First parse any of the general ingest options) 126 430.02 T
( */) 126 419.02 T
(IngestParseOptions\050argc, argv, Usage\051;) 154.8 408.02 T
(/*) 126 386.02 T
( * Now check for any of our own debug flags on the command line) 126 375.02 T
( */) 126 364.02 T
(i = 1;) 154.8 353.02 T
(while \050i < *argc\051) 154.8 342.02 T
({) 154.8 331.02 T
(if \050streq\050argv[i],\323-show\323\051 ||) 183.6 320.02 T
( streq\050argv[i],\323-s\323\051\051) 212.4 309.02 T
({) 183.6 298.02 T
(   DumpDataChunk = \050char\0511;) 183.6 287.02 T
(   IngestRemoveOptions\050argc, argv, i, 1\051;) 183.6 276.02 T
(}) 183.6 265.02 T
(else if \050streq\050argv[i],\323-fields\323\051\051) 183.6 254.02 T
({) 183.6 243.02 T
(   JustShowFields = \050char\0511;) 183.6 232.02 T
(   IngestRemoveOptions\050argc, argv, i, 1\051;) 183.6 221.02 T
(}) 183.6 210.02 T
(else if \050! strncmp \050argv[i], \322-t\323, 2\051\051) 183.6 199.02 T
({) 183.6 188.02 T
(   Tfilename = strdup \050argv[i+1]\051;) 183.6 177.02 T
(   IngestRemoveOptions \050argc, argv, i, 2\051;) 183.6 166.02 T
(}) 183.6 155.02 T
(else if \050! strncmp \050argv[i], \322-q\323, 2\051\051) 183.6 144.02 T
({) 183.6 133.02 T
(   QualThresh = atof \050argv[i+1]\051;) 183.6 122.02 T
(   IngestRemoveOptions \050argc, argv, i, 2\051;) 183.6 111.02 T
(}) 183.6 100.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "148" 148
%%Page: "149" 149
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Example) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Data Store Interface Man) 126 60.29 T
(ual) 260.18 60.29 T
2 10 Q
-2.78 (149) 541.32 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(else) 201.6 680.02 T
(   ++i;) 201.6 669.02 T
(}) 172.8 658.02 T
(}) 144 647.02 T
0 12 Q
1.78 (The) 126 622.02 P
5 F
4.28 (Usage\050\051) 149.45 622.02 P
0 F
1.78 ( function which is passed to) 199.85 622.02 P
5 F
4.28 (IngestParseOptions\050\051) 347.21 622.02 P
0 F
1.78 ( is) 491.21 622.02 P
(de\336ned belo) 126 608.02 T
(w) 184.69 608.02 T
(.) 192.58 608.02 T
5 9 Q
(static void) 144 590.02 T
(Usage\050prog\051) 144 579.02 T
(char *prog;) 172.8 568.02 T
({) 144 557.02 T
(printf \050\322Usage: %s [options] <file> <fields>\134n\323,prog\051;) 172.8 546.02 T
(printf \050\322       %s -fields <file>\134n\323,prog\051;) 172.8 535.02 T
(printf \050\322       %s -help\134n\323,prog\051;) 172.8 524.02 T
(printf \050\322\134nOptions:\134n\323\051;) 172.8 513.02 T
(printf \050\322   -show, -s) 172.8 502.02 T
(Dump data chunk as it\325s built\134n\323\051;) 286.2 502.02 T
(printf \050\322   -fields) 172.8 491.02 T
(Describe the sounding file\134n\323\051;) 275.4 491.02 T
(printf \050\322   -trans <tfile>) 172.8 480.02 T
(Use the site/platform translations in) 313.2 480.02 T
(\324tfile\325\134n\323\051;) 144 469.02 T
(printf \050\322   -q <qval>) 172.8 458.02 T
(Set pressure quality threshold\134n\323\051;) 286.2 458.02 T
(printf \050\322\134n\323\051;) 172.8 447.02 T
(IngestUsage\050\051;) 172.8 436.02 T
(printf \050\322\134nExamples:\134n\323\051;) 172.8 425.02 T
(printf \050\322   %s -show -log pd i7282220.dpk pres temp rh\134n\323, prog\051;) 172.8 414.02 T
(printf \050\322   %s -fields i7282220.dpk\134n\134n\323, prog\051;) 172.8 403.02 T
(}) 144 392.02 T
0 12 Q
10.28 (The) 126 367.02 P
5 F
24.67 (class_ingest) 157.94 367.02 P
0 F
10.28 ( options are listed \336rst, follo) 244.34 367.02 P
10.28 (wed by the) 430.78 367.02 P
5 F
3.77 (IngestUsage\050\051) 126 353.02 P
0 F
1.57 ( options, follo) 219.6 353.02 P
1.57 (wed \336nally by e) 289.45 353.02 P
1.57 (xamples which include the) 370.97 353.02 P
(use of the common ingest options.) 126 339.02 T
11.4 (After all of the options ha) 126 313.02 P
11.4 (v) 306.41 313.02 P
11.4 (e been handled,) 312.23 313.02 P
5 F
27.36 (main\050\051) 424.4 313.02 P
0 F
11.4 ( calls) 467.6 313.02 P
5 F
-0.38 (IngestInitialize\050\051) 126 299.02 P
0 F
-0.16 ( with the name of the ingest process. No) 255.6 299.02 P
-0.16 (w the appli-) 446.99 299.02 P
0.2 (cation can be) 126 285.02 P
0.2 (gin processing data without kno) 189.53 285.02 P
0.2 (wing whether it has actually con-) 343.36 285.02 P
2.37 (nected to the message process and DataStore daemon. All of the message) 126 271.02 P
0.48 (logging is done through) 126 257.02 P
5 F
1.14 (IngestLog\050\051) 245.24 257.02 P
0 F
0.48 (. The) 324.44 257.02 P
5 F
1.14 (msg_ELog\050\051) 353.06 257.02 P
0 F
0.48 ( function cannot) 425.06 257.02 P
0.66 (be used since it requires a message handler connection and will f) 126 243.02 P
0.66 (ail when the) 444.03 243.02 P
0.92 (application is run without connections.) 126 229.02 P
5 F
2.22 (IngestLog\050\051) 319.94 229.02 P
0 F
0.92 ( tak) 399.14 229.02 P
0.92 (es care of screen-) 417.61 229.02 P
1.96 (ing messages by type, echoing them to) 126 215.02 P
5 F
4.7 (stdout) 328.36 215.02 P
0 F
1.96 (, and relaying them to the) 371.56 215.02 P
(Ev) 126 201.02 T
(entLogger when possible.) 139.15 201.02 T
21.16 (All calls to) 126 175.02 P
5 F
50.79 (ds_Store\050\051) 245.15 175.02 P
0 F
21.16 (,) 317.15 175.02 P
5 F
50.79 (ds_StoreBlocks\050\051) 344.31 175.02 P
0 F
21.16 (, and) 459.51 175.02 P
5 F
2.97 (ds_LookupPlatform\050\051) 126 161.02 P
0 F
1.24 ( will actually go through the ingest library inter-) 262.8 161.02 P
0.11 (f) 126 147.02 P
0.11 (ace. The library functions return appropriate v) 129.88 147.02 P
0.11 (alues when the DataStore is not) 351.82 147.02 P
0.44 (connected; otherwise, the) 126 133.02 P
0.44 (y check for error returns and log a message when an) 249.01 133.02 P
(error occurs.) 126 119.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "149" 149
%%Page: "150" 150
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Ing) 108 736.18 T
(est Routines) 140.09 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(150) 54 60.29 T
2 8 Q
(The Zebra Data Store Interface Man) 108 60.29 T
(ual) 242.18 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "150" 150
%%Page: "151" 151
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(A) 72 681.98 T
0 F
(altitude detail) 72 672.98 T
(132) 125.75 672.98 T
(altitudes) 72 662.98 T
(17) 107 662.98 T
(a) 81 652.98 T
(v) 84.82 652.98 T
(ailability) 89.09 652.98 T
(127) 125.6 652.98 T
(def) 81 642.98 T
(ault units) 92.4 642.98 T
(35) 130.16 642.98 T
(e) 81 632.98 T
(xtracting via detail) 84.86 632.98 T
(132) 156.85 632.98 T
(units interf) 81 622.98 T
(ace) 120.16 622.98 T
(17) 136.65 622.98 T
5 12 Q
(AltUnitType) 72 612.98 T
0 9 Q
( type) 151.2 612.98 T
(17, 35) 173.45 612.98 T
(attrib) 72 602.98 T
(utes) 90.82 602.98 T
(class methods) 81 592.98 T
(101) 135.75 592.98 T
(e) 81 582.98 T
(xamples) 84.86 582.98 T
(115) 119.36 582.98 T
(future plans) 81 572.98 T
(119) 128.24 572.98 T
5 12 Q
(AU_kmMSL) 72 562.98 T
0 9 Q
( def) 129.6 562.98 T
(ault altitude units) 143.25 562.98 T
(35) 210.26 562.98 T
(a) 72 552.98 T
(v) 75.82 552.98 T
(ailable data inquiries) 80.09 552.98 T
(124) 159.58 552.98 T
(a) 72 542.98 T
(v) 75.82 542.98 T
(ailable data times) 80.09 542.98 T
(125) 147.58 542.98 T
2 F
(B) 72 523.98 T
0 F
(bad v) 72 514.98 T
(alue \337ag) 91.52 514.98 T
(retrie) 81 504.98 T
(ving from metdata) 99.76 504.98 T
(45) 170.76 504.98 T
(storing in \336le formats) 81 494.98 T
(139) 163.25 494.98 T
(bad v) 72 484.98 T
(alues) 91.52 484.98 T
(44) 114.52 484.98 T
(bad_v) 72 474.98 T
(alue_\337ag) 93.77 474.98 T
(def) 81 464.98 T
(ault) 92.4 464.98 T
(45) 110.4 464.98 T
(global attrib) 81 454.98 T
(ute) 124.57 454.98 T
(45) 140.07 454.98 T
5 12 Q
(BadField) 72 444.98 T
0 9 Q
( symbol) 129.6 444.98 T
(15) 162.85 444.98 T
5 12 Q
(BadPlatform) 72 434.98 T
0 9 Q
( symbol) 151.2 434.98 T
(37) 184.46 434.98 T
(badv) 72 424.98 T
(al detail) 89.27 424.98 T
(131) 122.52 424.98 T
(blocks) 72 414.98 T
(136) 100 414.98 T
(e) 81 404.98 T
(xplanation) 84.86 404.98 T
(136) 127.36 404.98 T
(storing) 81 394.98 T
(136) 110.5 394.98 T
(boundary class) 72 384.98 T
(39) 130.24 384.98 T
(adding boundaries) 81 374.98 T
(39) 151.74 374.98 T
(retrie) 81 364.98 T
(ving boundaries) 99.76 364.98 T
(40) 162.01 364.98 T
2 F
(C) 72 345.98 T
0 F
(class) 72 336.98 T
(23) 94 336.98 T
(de\336nition) 81 326.98 T
(24) 120.01 326.98 T
(class hierarch) 72 316.98 T
(y) 121.18 316.98 T
(25) 130.18 316.98 T
(chart) 81 306.98 T
(26) 103.49 306.98 T
(clients) 72 296.98 T
(9) 100 296.98 T
(command-line options) 72 286.98 T
(remo) 81 276.98 T
(ving ingest options) 99.36 276.98 T
(144) 172.37 276.98 T
(coordinate v) 72 266.98 T
(ariables) 116.51 266.98 T
(55, 57) 149 266.98 T
(e) 81 256.98 T
(xample in nspace) 84.86 256.98 T
(72) 151.85 256.98 T
(e) 81 246.98 T
(xplanation) 84.86 246.98 T
(57) 127.36 246.98 T
(in netCDF) 81 236.98 T
(70) 123.25 236.98 T
2 F
(D) 72 217.98 T
0 F
(daemon) 72 208.98 T
(9, 10) 104.99 208.98 T
(data a) 72 198.98 T
(v) 93.06 198.98 T
(ailable noti\336cations) 97.33 198.98 T
(cancelling) 81 188.98 T
(135) 122.49 188.98 T
(handler interf) 81 178.98 T
(ace) 129.65 178.98 T
(134) 146.13 178.98 T
(data chunks) 72 168.98 T
(23) 119.24 168.98 T
(attrib) 81 158.98 T
(utes) 99.82 158.98 T
(99) 118.82 158.98 T
(boundary class) 81 148.98 T
(39) 139.24 148.98 T
(chart of class hierarch) 81 138.98 T
(y) 160.17 138.98 T
(26) 169.17 138.98 T
(class hierarch) 81 128.98 T
(y) 130.18 128.98 T
(25) 139.18 128.98 T
(class symbols) 81 118.98 T
(27) 135.25 118.98 T
(classes) 81 108.98 T
(23) 110.49 108.98 T
(deb) 81 98.98 T
(ugging) 93.82 98.98 T
(29) 123.32 98.98 T
(design moti) 333 681.98 T
(v) 375.03 681.98 T
(ation) 379.3 681.98 T
(25) 401.8 681.98 T
(design shortf) 333 671.98 T
(alls) 379.66 671.98 T
(27) 396.66 671.98 T
(ef) 333 661.98 T
(\336cienc) 339.77 661.98 T
(y) 363.63 661.98 T
(27) 372.63 661.98 T
(e) 333 651.98 T
(xample of nspace \336eld types) 336.86 651.98 T
(93) 443.84 651.98 T
(\336eld types) 333 641.98 T
(90) 374.75 641.98 T
(image class) 333 631.98 T
(53) 379.24 631.98 T
(implementation notes) 333 621.98 T
(27) 415.25 621.98 T
(ir) 333 611.98 T
(grid class) 338.34 611.98 T
(49) 377.08 611.98 T
(location class) 333 601.98 T
(40) 386.24 601.98 T
(metdata class) 333 591.98 T
(41) 385.74 591.98 T
(methods) 333 581.98 T
(25) 368 581.98 T
(nspace class) 333 571.98 T
(55) 381.73 571.98 T
(pri) 333 561.98 T
(v) 342.77 561.98 T
(ate access) 347.05 561.98 T
(30) 387.28 561.98 T
(ra) 333 551.98 T
(w class) 339.86 551.98 T
(30) 370.6 551.98 T
(r) 333 541.98 T
(grid class) 335.83 541.98 T
(51) 374.58 541.98 T
(scalar class) 333 531.98 T
(45) 378.23 531.98 T
(setting \336eld types) 333 521.98 T
(90, 91) 401 521.98 T
(setting the platform) 333 511.98 T
(28) 408 511.98 T
(size of \336eld type) 333 501.98 T
(92) 397.24 501.98 T
(storing) 333 491.98 T
(135) 362.5 491.98 T
(storing typed \336elds) 333 481.98 T
(92) 406.5 481.98 T
(transparent class) 333 471.98 T
(31) 397.23 471.98 T
(data \336le access \050DF) 324 461.98 T
(A\051) 394.07 461.98 T
(9, 133) 408.06 461.98 T
(data model) 324 451.98 T
(23) 368.24 451.98 T
(data space) 324 441.98 T
(11) 365.73 441.98 T
(data store) 324 431.98 T
(9) 363.24 431.98 T
(application noti\336cations) 333 421.98 T
(134) 424.25 421.98 T
(a) 333 411.98 T
(v) 336.82 411.98 T
(ailable altitudes) 341.09 411.98 T
(127) 402.34 411.98 T
(a) 333 401.98 T
(v) 336.82 401.98 T
(ailable \336elds) 341.09 401.98 T
(128) 391.34 401.98 T
(cancelling noti\336cations) 333 391.98 T
(135) 421.24 391.98 T
(daemon) 333 381.98 T
(9, 10) 365.99 381.98 T
(data a) 333 371.98 T
(v) 354.06 371.98 T
(ailability) 358.33 371.98 T
(124) 394.84 371.98 T
(details mechanism) 333 361.98 T
(129) 404.24 361.98 T
(e) 333 351.98 T
(xample client start-up) 336.86 351.98 T
(20) 419.85 351.98 T
(fetching data) 333 341.98 T
(133) 384.24 341.98 T
(fetching observ) 333 331.98 T
(ations) 388.51 331.98 T
(133) 414.51 331.98 T
(forecast of) 333 321.98 T
(fsets) 371.01 321.98 T
(126) 392 321.98 T
(inquiring data times) 333 311.98 T
(125) 409.5 311.98 T
(library) 333 301.98 T
(10) 361.49 301.98 T
(looking up platform names) 333 291.98 T
(122) 434.74 291.98 T
(number of platforms) 333 281.98 T
(122) 411.49 281.98 T
(observ) 333 271.98 T
(ation times) 356.77 271.98 T
(126) 401.02 271.98 T
(o) 333 261.98 T
(v) 337.36 261.98 T
(ervie) 341.73 261.98 T
(w of interf) 359.5 261.98 T
(ace) 397.39 261.98 T
(22) 413.88 261.98 T
(platform or) 333 251.98 T
(g) 373.58 251.98 T
(anization) 378.04 251.98 T
(122) 415.53 251.98 T
(requesting noti\336cations) 333 241.98 T
(134) 421.75 241.98 T
(storing) 333 231.98 T
(135) 362.5 231.98 T
(storing by blocks) 333 221.98 T
(136) 399.5 221.98 T
(times of observ) 333 211.98 T
(ations) 388.27 211.98 T
(126) 414.27 211.98 T
(data times) 324 201.98 T
(125) 365.25 201.98 T
5 12 Q
(DataChunk) 324 191.98 T
0 9 Q
( structure) 388.8 191.98 T
(public access) 333 181.98 T
(28, 30) 385.24 181.98 T
5 12 Q
(DataChunk) 324 171.98 T
0 9 Q
( type) 388.8 171.98 T
(28) 411.05 171.98 T
5 12 Q
(DataChunk.h) 324 161.98 T
0 9 Q
( \336le) 403.2 161.98 T
(19) 421.45 161.98 T
5 12 Q
(DataClass) 324 151.98 T
0 9 Q
( type) 388.8 151.98 T
(27) 411.05 151.98 T
5 12 Q
(DataOrganization) 324 141.98 T
0 9 Q
(retrie) 333 131.98 T
(ving for a platform) 351.77 131.98 T
(122) 424.5 131.98 T
5 12 Q
(DataOrganization) 324 121.98 T
0 9 Q
( type) 439.2 121.98 T
(18) 461.45 121.98 T
5 12 Q
(DataPtr) 324 111.98 T
0 9 Q
( type) 374.4 111.98 T
(28) 396.65 111.98 T
5 12 Q
(DataStore.h) 324 101.98 T
0 9 Q
( \336le) 403.2 101.98 T
(18, 19, 28, 61, 70, 87, 129) 421.45 101.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "151" 151
%%Page: "152" 152
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(de\336ned detail names) 63 681.98 T
(130) 141.49 681.98 T
(update code de\336nition) 63 671.98 T
(134) 147.49 671.98 T
3 12 Q
(dc_AddMData) 54 661.98 T
0 9 Q
( function) 130.03 661.98 T
(43) 166.78 661.98 T
3 12 Q
(dc_AddMultScalar) 54 651.98 T
0 9 Q
( function) 151.37 651.98 T
(46) 188.12 651.98 T
3 12 Q
(dc_AddSample) 54 641.98 T
0 9 Q
( function) 135.37 641.98 T
(32) 172.12 641.98 T
3 12 Q
(dc_AddScalar) 54 631.98 T
0 9 Q
( function) 128.7 631.98 T
(46) 165.45 631.98 T
3 12 Q
(dc_AdjustSample) 54 621.98 T
0 9 Q
( function) 147.37 621.98 T
(32) 184.12 621.98 T
3 12 Q
(dc_BndAdd) 54 611.98 T
0 9 Q
( function) 116.04 611.98 T
(39) 152.79 611.98 T
3 12 Q
(dc_BndGet) 54 601.98 T
0 9 Q
( function) 114.04 601.98 T
(40) 150.78 601.98 T
3 12 Q
(dc_Class) 54 591.98 T
0 9 Q
( function) 103.34 591.98 T
(29) 140.09 591.98 T
3 12 Q
(dc_CreateDC) 54 581.98 T
0 9 Q
( function) 126.68 581.98 T
(28) 163.43 581.98 T
5 12 Q
(dc_Data) 54 571.98 T
(DataChunk) 106.65 571.98 T
0 9 Q
( member) 171.45 571.98 T
(31) 207.69 571.98 T
5 12 Q
(dc_DataLen) 54 561.98 T
(DataChunk) 128.25 561.98 T
0 9 Q
( member) 193.05 561.98 T
(31) 229.29 561.98 T
3 12 Q
(dc_Destro) 54 551.98 T
(yDC) 108.32 551.98 T
0 9 Q
( function) 131.65 551.98 T
(29) 168.4 551.98 T
3 12 Q
(dc_DumpDC) 54 541.98 T
0 9 Q
( function) 122.68 541.98 T
(29) 159.42 541.98 T
3 12 Q
(dc_DumpDC) 54 531.98 T
0 9 Q
(, output for attrib) 122.68 531.98 T
(ute arrays) 183.99 531.98 T
(117) 223.73 531.98 T
5 12 Q
(DC_Element) 54 521.98 T
0 9 Q
( type) 126 521.98 T
(88) 148.25 521.98 T
5 12 Q
(DC_ElemType) 54 511.98 T
0 9 Q
( type) 133.2 511.98 T
(87) 155.45 511.98 T
3 12 Q
(DC_ElemT) 54 501.98 T
(ypeMaxSiz) 111.23 501.98 T
(e) 169.73 501.98 T
0 9 Q
( macro) 176.4 501.98 T
(89) 205.64 501.98 T
3 12 Q
(dc_GetBadv) 54 491.98 T
(al) 119.74 491.98 T
0 9 Q
( function) 129.07 491.98 T
(45) 165.82 491.98 T
3 12 Q
(dc_GetFieldAttr) 54 481.98 T
0 9 Q
( function) 137.36 481.98 T
(113) 174.11 481.98 T
3 12 Q
(dc_GetFieldAttrArr) 54 471.98 T
(a) 153.24 471.98 T
(y) 159.55 471.98 T
0 9 Q
( function) 165.55 471.98 T
(112) 202.3 471.98 T
3 12 Q
(dc_GetFieldAttrK) 54 461.98 T
(e) 144.89 461.98 T
(ys) 151.32 461.98 T
0 9 Q
( function) 163.32 461.98 T
(115) 200.07 461.98 T
3 12 Q
(dc_GetFields) 54 451.98 T
0 9 Q
( function) 124.69 451.98 T
(43) 161.44 451.98 T
3 12 Q
(dc_GetGlobalAttr) 54 441.98 T
0 9 Q
( function) 146.04 441.98 T
(102) 182.79 441.98 T
3 12 Q
(dc_GetGlobalAttrArr) 54 431.98 T
(a) 161.92 431.98 T
(y) 168.23 431.98 T
0 9 Q
( function) 174.23 431.98 T
(103) 210.98 431.98 T
3 12 Q
(dc_GetGlobalAttrK) 54 421.98 T
(e) 153.56 421.98 T
(ys) 160 421.98 T
0 9 Q
( function) 172 421.98 T
(107) 208.74 421.98 T
3 12 Q
(dc_GetLoc) 54 411.98 T
0 9 Q
( function) 112.03 411.98 T
(35) 148.78 411.98 T
3 12 Q
(dc_GetLocAltUnits) 54 401.98 T
0 9 Q
( function) 153.37 401.98 T
(36) 190.12 401.98 T
3 12 Q
(dc_GetMData) 54 391.98 T
0 9 Q
( function) 128.03 391.98 T
(44) 164.77 391.98 T
3 12 Q
(dc_GetNField) 54 381.98 T
0 9 Q
( function) 127.36 381.98 T
(43) 164.1 381.98 T
3 12 Q
(dc_GetNFieldAttrs) 54 371.98 T
0 9 Q
( function) 152.03 371.98 T
(114) 188.77 371.98 T
3 12 Q
(dc_GetNGlobalAttrs) 54 361.98 T
0 9 Q
( function) 160.7 361.98 T
(104) 197.45 361.98 T
3 12 Q
(dc_GetNSample) 54 351.98 T
0 9 Q
( function) 142.03 351.98 T
(33) 178.78 351.98 T
3 12 Q
(dc_GetNSampleAttrs) 54 341.98 T
0 9 Q
( function) 166.7 341.98 T
(109) 203.45 341.98 T
3 12 Q
(dc_GetPlat) 54 331.98 T
0 9 Q
( function) 113.36 331.98 T
(36) 150.11 331.98 T
3 12 Q
(dc_GetSample) 54 321.98 T
0 9 Q
( function) 133.37 321.98 T
(33) 170.12 321.98 T
3 12 Q
(dc_GetSampleAttr) 54 311.98 T
0 9 Q
( function) 152.04 311.98 T
(109) 188.79 311.98 T
3 12 Q
(dc_GetSampleAttrArr) 54 301.98 T
(a) 167.92 301.98 T
(y) 174.23 301.98 T
0 9 Q
( function) 180.23 301.98 T
(108) 216.98 301.98 T
3 12 Q
(dc_GetSampleAttrK) 54 291.98 T
(e) 159.56 291.98 T
(ys) 166 291.98 T
0 9 Q
( function) 178 291.98 T
(111) 214.74 291.98 T
3 12 Q
(dc_GetScalar) 54 281.98 T
0 9 Q
( function) 126.7 281.98 T
(46) 163.44 281.98 T
3 12 Q
(dc_GetScalarData) 54 271.98 T
0 9 Q
( function) 152.04 271.98 T
(47) 188.79 271.98 T
3 12 Q
(dc_GetTime) 54 261.98 T
0 9 Q
( function) 119.35 261.98 T
(33) 156.1 261.98 T
3 12 Q
(dc_ImgAddImage) 54 251.98 T
0 9 Q
( function) 148.04 251.98 T
(53) 184.79 251.98 T
3 12 Q
(dc_ImgGetImage) 54 241.98 T
0 9 Q
( function) 146.04 241.98 T
(54) 182.79 241.98 T
3 12 Q
(dc_ImgSetup) 54 231.98 T
0 9 Q
( function) 124.7 231.98 T
(53) 161.45 231.98 T
3 12 Q
(dc_IRAddGr) 54 221.98 T
(id) 120.2 221.98 T
0 9 Q
( function) 129.54 221.98 T
(51) 166.29 221.98 T
3 12 Q
(dc_IRGetGr) 54 211.98 T
(id) 118.2 211.98 T
0 9 Q
( function) 127.54 211.98 T
(51) 164.28 211.98 T
3 12 Q
(dc_IRGetNPlatf) 54 201.98 T
(or) 137 201.98 T
(m) 147.97 201.98 T
0 9 Q
( function) 157.97 201.98 T
(50) 194.71 201.98 T
3 12 Q
(dc_IRGetPlatf) 54 191.98 T
(or) 128.34 191.98 T
(ms) 139.31 191.98 T
0 9 Q
( function) 155.3 191.98 T
(50) 192.05 191.98 T
3 12 Q
(dc_IRSetup) 54 181.98 T
0 9 Q
( function) 116.7 181.98 T
(50) 153.45 181.98 T
3 12 Q
(dc_IsSubClassOf) 54 171.98 T
0 9 Q
( function) 146.7 171.98 T
(29) 183.45 171.98 T
3 12 Q
(dc_LocAdd) 54 161.98 T
0 9 Q
( function) 114.04 161.98 T
(40) 150.78 161.98 T
3 12 Q
(dc_LocGet) 54 151.98 T
0 9 Q
( function) 112.03 151.98 T
(40) 148.78 151.98 T
5 12 Q
(DC_MaxDimension) 54 141.98 T
0 9 Q
( symbol) 162 141.98 T
(61) 195.26 141.98 T
5 12 Q
(DC_MaxDimName) 54 131.98 T
0 9 Q
( symbol) 147.6 131.98 T
(61) 180.85 131.98 T
5 12 Q
(DC_MaxField) 54 121.98 T
0 9 Q
( symbol) 133.2 121.98 T
(61) 166.46 121.98 T
3 12 Q
(dc_NSAddMultSamples) 54 111.98 T
0 9 Q
( function) 180.71 111.98 T
(68) 217.46 111.98 T
3 12 Q
(dc_NSAddSample) 54 101.98 T
0 9 Q
( function) 152.04 101.98 T
(68) 188.79 101.98 T
3 12 Q
(dc_NSAddStatic) 306 681.98 T
0 9 Q
( function) 393.37 681.98 T
(68) 430.12 681.98 T
3 12 Q
(dc_NSAllo) 306 671.98 T
(wRede\336ne) 361.84 671.98 T
0 9 Q
( function) 418.52 671.98 T
(64) 455.27 671.98 T
3 12 Q
(dc_NSDe\336neComplete) 306 661.98 T
0 9 Q
( function) 428.04 661.98 T
(64) 464.79 661.98 T
3 12 Q
(dc_NSDe\336neDimension) 306 651.98 T
0 9 Q
( function) 433.37 651.98 T
(63) 470.11 651.98 T
3 12 Q
(dc_NSDe\336neField) 306 641.98 T
0 9 Q
( function) 402.7 641.98 T
(62) 439.44 641.98 T
3 12 Q
(dc_NSDe\336neIsComplete) 306 631.98 T
0 9 Q
( function) 437.38 631.98 T
(64) 474.12 631.98 T
3 12 Q
(dc_NSDe\336neV) 306 621.98 T
(ar) 383.86 621.98 T
(iab) 394.7 621.98 T
(le) 410.47 621.98 T
0 9 Q
( function) 419.81 621.98 T
(63) 456.55 621.98 T
3 12 Q
(dc_NSGetAllDimensions) 306 611.98 T
0 9 Q
( function) 437.36 611.98 T
(65) 474.11 611.98 T
3 12 Q
(dc_NSGetAllV) 306 601.98 T
(ar) 381.85 601.98 T
(iab) 392.7 601.98 T
(les) 408.47 601.98 T
0 9 Q
( function) 423.8 601.98 T
(65) 460.55 601.98 T
3 12 Q
(dc_NSGetDimension) 306 591.98 T
0 9 Q
( function) 418.03 591.98 T
(66) 454.78 591.98 T
3 12 Q
(dc_NSGetField) 306 581.98 T
0 9 Q
( function) 387.36 581.98 T
(66) 424.11 581.98 T
3 12 Q
(dc_NSGetSample) 306 571.98 T
0 9 Q
( function) 402.04 571.98 T
(69) 438.78 571.98 T
3 12 Q
(dc_NSGetStatic) 306 561.98 T
0 9 Q
( function) 391.37 561.98 T
(70) 428.11 561.98 T
3 12 Q
(dc_NSGetV) 306 551.98 T
(ar) 368.52 551.98 T
(iab) 379.37 551.98 T
(le) 395.14 551.98 T
0 9 Q
( function) 404.47 551.98 T
(67) 441.22 551.98 T
3 12 Q
(dc_NSIsStatic) 306 541.98 T
0 9 Q
( function) 381.36 541.98 T
(67) 418.11 541.98 T
5 12 Q
(dc_Platform) 306 531.98 T
0 9 Q
( data chunk public member) 385.2 531.98 T
(28) 487.68 531.98 T
5 12 Q
(dc_Platform) 306 521.98 T
0 9 Q
( data chunk structure member) 385.2 521.98 T
(30) 496.67 521.98 T
3 12 Q
(dc_ProcessAttrArr) 306 511.98 T
(a) 403.24 511.98 T
(ys) 409.55 511.98 T
0 9 Q
( function) 421.55 511.98 T
(105) 458.3 511.98 T
3 12 Q
(dc_ProcessAttrs) 306 501.98 T
0 9 Q
( function) 393.36 501.98 T
(106) 430.11 501.98 T
3 12 Q
(dc_ProcessFieldAttrs) 306 491.98 T
0 9 Q
( function) 419.36 491.98 T
(115) 456.11 491.98 T
3 12 Q
(dc_ProcFieldAttrArr) 306 481.98 T
(a) 410.57 481.98 T
(ys) 416.88 481.98 T
0 9 Q
( function) 428.88 481.98 T
(114) 465.63 481.98 T
3 12 Q
(dc_ProcSampleAttrArr) 306 471.98 T
(a) 425.24 471.98 T
(ys) 431.56 471.98 T
0 9 Q
( function) 443.56 471.98 T
(110) 480.3 471.98 T
3 12 Q
(dc_Remo) 306 461.98 T
(v) 357.17 461.98 T
(eFieldAttr) 362.87 461.98 T
0 9 Q
( function) 414.22 461.98 T
(114) 450.96 461.98 T
3 12 Q
(dc_Remo) 306 451.98 T
(v) 357.17 451.98 T
(eGlobalAttr) 362.87 451.98 T
0 9 Q
( function) 422.89 451.98 T
(104) 459.64 451.98 T
3 12 Q
(dc_Remo) 306 441.98 T
(v) 357.17 441.98 T
(eSampleAttr) 362.87 441.98 T
0 9 Q
( function) 428.89 441.98 T
(109) 465.64 441.98 T
3 12 Q
(dc_RGAddGr) 306 431.98 T
(id) 378.2 431.98 T
0 9 Q
( function) 387.54 431.98 T
(52) 424.29 431.98 T
3 12 Q
(dc_RGGetGr) 306 421.98 T
(id) 376.2 421.98 T
0 9 Q
( function) 385.54 421.98 T
(52) 422.28 421.98 T
3 12 Q
(dc_RGSetup) 306 411.98 T
0 9 Q
( function) 374.7 411.98 T
(52) 411.45 411.98 T
3 12 Q
(dc_SetBadv) 306 401.98 T
(al) 370.4 401.98 T
0 9 Q
( function) 379.74 401.98 T
(44) 416.49 401.98 T
3 12 Q
(dc_SetFieldAttr) 306 391.98 T
0 9 Q
( function) 388.03 391.98 T
(113) 424.78 391.98 T
3 12 Q
(dc_SetFieldAttrArr) 306 381.98 T
(a) 403.91 381.98 T
(y) 410.22 381.98 T
0 9 Q
( function) 416.22 381.98 T
(112) 452.97 381.98 T
3 12 Q
(dc_SetFieldT) 306 371.98 T
(ypes) 375.25 371.98 T
0 9 Q
( function) 400.6 371.98 T
(91) 437.34 371.98 T
3 12 Q
(dc_SetGlobalAttr) 306 361.98 T
0 9 Q
( function) 396.71 361.98 T
(102) 433.45 361.98 T
3 12 Q
(dc_SetGlobalAttrArr) 306 351.98 T
(a) 412.58 351.98 T
(y) 418.9 351.98 T
0 9 Q
( function) 424.9 351.98 T
(103) 461.64 351.98 T
3 12 Q
(dc_SetLoc) 306 341.98 T
0 9 Q
( function) 362.7 341.98 T
(34) 399.45 341.98 T
3 12 Q
(dc_SetLocAltUnits) 306 331.98 T
0 9 Q
( function) 404.04 331.98 T
(35) 440.79 331.98 T
3 12 Q
(dc_SetMLoc) 306 321.98 T
0 9 Q
( function) 372.7 321.98 T
(34) 409.44 321.98 T
3 12 Q
(dc_SetPlat) 306 311.98 T
0 9 Q
( function) 364.03 311.98 T
(36) 400.78 311.98 T
3 12 Q
(dc_SetSampleAttr) 306 301.98 T
0 9 Q
( function) 402.71 301.98 T
(109) 439.45 301.98 T
3 12 Q
(dc_SetSampleAttrArr) 306 291.98 T
(a) 418.58 291.98 T
(y) 424.9 291.98 T
0 9 Q
( function) 430.9 291.98 T
(108) 467.64 291.98 T
3 12 Q
(dc_SetScalarFields) 306 281.98 T
0 9 Q
( function) 409.37 281.98 T
(45) 446.11 281.98 T
3 12 Q
(dc_SetStaticLoc) 306 271.98 T
0 9 Q
( function) 392.71 271.98 T
(34) 429.46 271.98 T
3 12 Q
(dc_SetTime) 306 261.98 T
0 9 Q
( function) 370.02 261.98 T
(33) 406.77 261.98 T
3 12 Q
(dc_SetT) 306 251.98 T
(ype) 349.25 251.98 T
0 9 Q
( function) 368.59 251.98 T
(91) 405.34 251.98 T
3 12 Q
(dc_SetupFields) 306 241.98 T
0 9 Q
( function) 388.7 241.98 T
(42) 425.45 241.98 T
3 12 Q
(dc_SetupUnif) 306 231.98 T
(or) 377.68 231.98 T
(mFields) 388.64 231.98 T
0 9 Q
( function) 430.64 231.98 T
(42) 467.39 231.98 T
3 12 Q
(dc_Siz) 306 221.98 T
(eOf) 341.83 221.98 T
0 9 Q
( function) 361.18 221.98 T
(92) 397.92 221.98 T
3 12 Q
(dc_Siz) 306 211.98 T
(eOfT) 341.83 211.98 T
(ype) 367.07 211.98 T
0 9 Q
( macro) 386.41 211.98 T
(89) 415.65 211.98 T
3 12 Q
(dc_Sor) 306 201.98 T
(tSamples) 344.5 201.98 T
0 9 Q
( function) 394.51 201.98 T
(33) 431.26 201.98 T
3 12 Q
(dc_SuperClass) 306 191.98 T
0 9 Q
( function) 387.36 191.98 T
(30) 424.11 191.98 T
3 12 Q
(dc_T) 306 181.98 T
(ype) 331.24 181.98 T
0 9 Q
( function) 350.58 181.98 T
(92) 387.33 181.98 T
3 12 Q
(dc_T) 306 171.98 T
(ypeName) 331.24 171.98 T
0 9 Q
( macro) 382.58 171.98 T
(89) 411.83 171.98 T
5 12 Q
(DCC_Boundary) 306 161.98 T
0 9 Q
( symbol) 392.4 161.98 T
(27, 39) 425.65 161.98 T
5 12 Q
(DCC_Image) 306 151.98 T
0 9 Q
( symbol) 370.8 151.98 T
(27, 53) 404.05 151.98 T
5 12 Q
(DCC_IRGrid) 306 141.98 T
0 9 Q
( symbol) 378 141.98 T
(27, 49) 411.26 141.98 T
5 12 Q
(DCC_Location) 306 131.98 T
0 9 Q
( symbol) 392.4 131.98 T
(27, 40) 425.65 131.98 T
5 12 Q
(DCC_MetData) 306 121.98 T
0 9 Q
( symbol) 385.2 121.98 T
(27, 41) 418.45 121.98 T
5 12 Q
(DCC_None) 306 111.98 T
0 9 Q
( symbol) 363.6 111.98 T
(27) 396.86 111.98 T
5 12 Q
(DCC_NSpace) 306 101.98 T
0 9 Q
( symbol) 378 101.98 T
(27, 55) 411.26 101.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "152" 152
%%Page: "153" 153
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(DCC_Raw) 72 681.98 T
0 9 Q
( symbol) 122.4 681.98 T
(27, 30) 155.65 681.98 T
5 12 Q
(DCC_RGrid) 72 671.98 T
0 9 Q
( symbol) 136.8 671.98 T
(27, 51) 170.05 671.98 T
5 12 Q
(DCC_Scalar) 72 661.98 T
0 9 Q
( symbol) 144 661.98 T
(27, 41, 45) 177.26 661.98 T
5 12 Q
(DCC_Tranparent) 72 651.98 T
0 9 Q
( symbol) 172.8 651.98 T
(27) 206.05 651.98 T
5 12 Q
(DCC_Transparent) 72 641.98 T
0 9 Q
( symbol) 180 641.98 T
(31) 213.26 641.98 T
5 12 Q
(DCT_String) 72 631.98 T
0 9 Q
( element type) 144 631.98 T
(dif) 81 621.98 T
(ference from) 90.77 621.98 T
5 12 Q
(DCT_Char) 139.25 621.98 T
0 9 Q
(88) 201.35 621.98 T
5 12 Q
(DD_FORECAST_OFFSET) 72 611.98 T
0 9 Q
( detail) 201.6 611.98 T
(131) 228.35 611.98 T
5 12 Q
(dd_Name) 72 601.98 T
(dsDetail) 124.65 601.98 T
0 9 Q
( member) 182.25 601.98 T
(129) 218.49 601.98 T
5 12 Q
(DD_NC_TIME_DOUBLE) 72 591.98 T
0 9 Q
( detail) 194.4 591.98 T
(130) 221.15 591.98 T
5 12 Q
(DD_NC_TIME_FLOAT) 72 581.98 T
0 9 Q
( detail) 187.2 581.98 T
(130) 213.95 581.98 T
5 12 Q
(dd_V) 72 571.98 T
(dsDetail) 103.05 571.98 T
0 9 Q
( member) 160.65 571.98 T
(129) 196.89 571.98 T
5 12 Q
(DD_ZN_APPEND_SAMPLES) 72 561.98 T
0 9 Q
( detail) 216 561.98 T
(131) 242.75 561.98 T
5 12 Q
(DD_ZN_HINT_NSAMPLES) 72 551.98 T
0 9 Q
( detail) 208.8 551.98 T
(131) 235.55 551.98 T
5 12 Q
(DD_ZN_RESERVE_BLOCK) 72 541.98 T
0 9 Q
( detail) 208.8 541.98 T
(131) 235.55 541.98 T
5 12 Q
(defs.h) 72 531.98 T
0 9 Q
( \336le) 115.2 531.98 T
(18) 133.45 531.98 T
(details) 72 521.98 T
(129) 100 521.98 T
(dimension v) 72 511.98 T
(ariables) 116.03 511.98 T
(55) 148.52 511.98 T
(dimensions) 72 501.98 T
(57) 117.5 501.98 T
5 12 Q
(ds.config) 72 491.98 T
0 9 Q
( \336le) 136.8 491.98 T
(11) 155.05 491.98 T
3 12 Q
(ds_CancelNotify) 72 481.98 T
0 9 Q
( function) 159.36 481.98 T
(135) 196.11 481.98 T
3 12 Q
(ds_DataTimes) 72 471.98 T
0 9 Q
( function) 149.35 471.98 T
(125) 186.1 471.98 T
3 12 Q
(ds_F) 72 461.98 T
(etch) 98.32 461.98 T
0 9 Q
( function) 121 461.98 T
(133) 157.74 461.98 T
3 12 Q
(ds_F) 72 451.98 T
(etchObs) 98.32 451.98 T
0 9 Q
( function) 143 451.98 T
(133) 179.75 451.98 T
3 12 Q
(ds_GatherPlatf) 72 441.98 T
(or) 151.68 441.98 T
(ms) 162.65 441.98 T
0 9 Q
( function) 178.64 441.98 T
(124) 215.39 441.98 T
3 12 Q
(ds_GetAlts) 72 431.98 T
0 9 Q
( function) 130.69 431.98 T
(127) 167.44 431.98 T
3 12 Q
(ds_GetFields) 72 421.98 T
0 9 Q
( function) 142.69 421.98 T
(128) 179.44 421.98 T
3 12 Q
(ds_GetF) 72 411.98 T
(orecastTimes) 117.66 411.98 T
0 9 Q
( function) 189.67 411.98 T
(126) 226.42 411.98 T
3 12 Q
(ds_GetNPlat) 72 401.98 T
0 9 Q
( function) 140.03 401.98 T
(13, 122) 176.77 401.98 T
3 12 Q
(ds_GetObsSamples) 72 391.98 T
0 9 Q
( function) 179.38 391.98 T
(126) 216.12 391.98 T
3 12 Q
(ds_GetObsTimes) 72 381.98 T
0 9 Q
( function) 165.36 381.98 T
(126) 202.11 381.98 T
3 12 Q
(ds_GetRg) 72 371.98 T
(r) 125.9 371.98 T
(idP) 130.08 371.98 T
(ar) 146.94 371.98 T
(ams) 157.49 371.98 T
0 9 Q
( obsolete function) 180.16 371.98 T
(remo) 81 361.98 T
(v) 99.36 361.98 T
(al from library) 103.64 361.98 T
(127) 160.62 361.98 T
3 12 Q
(ds_Initializ) 72 351.98 T
(e) 127.84 351.98 T
0 9 Q
( function) 134.51 351.98 T
(13, 20, 144) 171.26 351.98 T
3 12 Q
(ds_IsMobile) 72 341.98 T
0 9 Q
( function) 136.02 341.98 T
(122) 172.77 341.98 T
3 12 Q
(ds_IsModelPlatf) 72 331.98 T
(or) 157.01 331.98 T
(m) 167.98 331.98 T
0 9 Q
( function) 177.97 331.98 T
(123) 214.72 331.98 T
(ds_LookupPlatform) 72 321.98 T
(12) 148.5 321.98 T
3 12 Q
(ds_LookupPlatf) 72 311.98 T
(or) 154.36 311.98 T
(m) 165.32 311.98 T
0 9 Q
( function) 175.32 311.98 T
(12, 122) 212.07 311.98 T
3 12 Q
(ds_LookupSubplatf) 72 301.98 T
(or) 174.37 301.98 T
(ms) 185.34 301.98 T
0 9 Q
( function) 201.34 301.98 T
(124) 238.08 301.98 T
3 12 Q
(ds_Platf) 72 291.98 T
(or) 115 291.98 T
(mDataOrg) 125.96 291.98 T
0 9 Q
( function) 181.31 291.98 T
(122) 218.05 291.98 T
3 12 Q
(ds_Platf) 72 281.98 T
(or) 115 281.98 T
(mName) 125.96 281.98 T
0 9 Q
( function) 167.96 281.98 T
(13, 122) 204.71 281.98 T
3 12 Q
(ds_RequestNotify) 72 271.98 T
0 9 Q
( function) 166.7 271.98 T
(134) 203.45 271.98 T
3 12 Q
(ds_SearchPlatf) 72 261.98 T
(or) 153.01 261.98 T
(ms) 163.98 261.98 T
0 9 Q
( function) 179.98 261.98 T
(123) 216.72 261.98 T
3 12 Q
(ds_Store) 72 251.98 T
0 9 Q
( function) 120.02 251.98 T
(135) 156.77 251.98 T
3 12 Q
(ds_StoreBloc) 72 241.98 T
(ks) 143.12 241.98 T
0 9 Q
( function) 155.12 241.98 T
(136) 191.87 241.98 T
5 12 Q
(DsAfter) 72 231.98 T
0 9 Q
( symbol) 122.4 231.98 T
(125) 155.65 231.98 T
5 12 Q
(DsBefore) 72 221.98 T
0 9 Q
( symbol) 129.6 221.98 T
(125) 162.85 221.98 T
5 12 Q
(DsCenter) 72 211.98 T
0 9 Q
( symbol) 129.6 211.98 T
(125) 162.85 211.98 T
5 12 Q
(dsDetail) 72 201.98 T
0 9 Q
( structure) 129.6 201.98 T
(129) 167.84 201.98 T
5 12 Q
(dsdump) 72 191.98 T
0 9 Q
( client) 115.2 191.98 T
(123) 141.95 191.98 T
5 12 Q
(dsdwidget) 72 181.98 T
0 9 Q
( client) 136.8 181.98 T
(123) 163.55 181.98 T
5 12 Q
(DsNearest) 72 171.98 T
0 9 Q
( symbol) 136.8 171.98 T
(125) 170.05 171.98 T
2 F
(E) 72 152.98 T
5 12 Q
(EF_DEVELOP) 72 143.98 T
0 9 Q
( ingest log mask) 144 143.98 T
(145) 207.25 143.98 T
(elements) 72 133.98 T
(41, 87) 108.5 133.98 T
(maximum type size) 81 123.98 T
(89) 156 123.98 T
(size of element type) 81 113.98 T
(89) 157.73 113.98 T
(type names) 81 103.98 T
(89) 126.24 103.98 T
(utility routines) 81 93.98 T
(89) 138.26 93.98 T
(encapsulation, of an object) 324 681.98 T
(24) 424.98 681.98 T
2 F
(F) 324 662.98 T
3 12 Q
(F_Alias) 324 653.98 T
0 9 Q
( function) 364.01 653.98 T
(14) 400.76 653.98 T
3 12 Q
(F_Declared) 324 643.98 T
0 9 Q
( function) 386.02 643.98 T
(14) 422.76 643.98 T
3 12 Q
(F_DeclareField) 324 633.98 T
0 9 Q
( function) 405.35 633.98 T
(13) 442.1 633.98 T
3 12 Q
(F_GetDesc) 324 623.98 T
0 9 Q
( function) 384.68 623.98 T
(15) 421.43 623.98 T
3 12 Q
(F_GetName) 324 613.98 T
0 9 Q
( function) 389.35 613.98 T
(15) 426.1 613.98 T
3 12 Q
(F_GetUnits) 324 603.98 T
0 9 Q
( function) 384.68 603.98 T
(15) 421.43 603.98 T
3 12 Q
(F_Init) 324 593.98 T
0 9 Q
( function) 354.01 593.98 T
(13) 390.76 593.98 T
3 12 Q
(F_Lookup) 324 583.98 T
0 9 Q
( function) 377.36 583.98 T
(14) 414.11 583.98 T
(fetching data) 324 573.98 T
(133) 375.24 573.98 T
(fetching observ) 324 563.98 T
(ations) 379.51 563.98 T
(133) 405.51 563.98 T
(\336eld attrib) 324 553.98 T
(utes) 361.07 553.98 T
(100, 111) 380.07 553.98 T
(counting) 333 543.98 T
(114) 369 543.98 T
(getting) 333 533.98 T
(112) 362.5 533.98 T
(getting strings) 333 523.98 T
(113) 388.76 523.98 T
(listing k) 333 513.98 T
(e) 362.17 513.98 T
(ys) 366.03 513.98 T
(115) 378.53 513.98 T
(processing by k) 333 503.98 T
(e) 389.4 503.98 T
(y) 393.26 503.98 T
(114) 402.26 503.98 T
(processing strings only) 333 493.98 T
(115) 420.5 493.98 T
(remo) 333 483.98 T
(ving) 351.36 483.98 T
(114) 371.86 483.98 T
(retrie) 333 473.98 T
(ving an array of \337oats) 351.77 473.98 T
(113) 435.25 473.98 T
(setting) 333 463.98 T
(112) 361.5 463.98 T
(setting an array of \337oats) 333 453.98 T
(112) 424.48 453.98 T
(setting strings) 333 443.98 T
(113) 387.76 443.98 T
(\336eld types) 324 433.98 T
(e) 333 423.98 T
(xample) 336.86 423.98 T
(91) 367.86 423.98 T
5 12 Q
(FieldId) 324 413.98 T
0 9 Q
( type) 374.4 413.98 T
(13) 396.65 413.98 T
(\336elds) 324 403.98 T
(10) 348 403.98 T
(a) 333 393.98 T
(v) 336.82 393.98 T
(ailability) 341.09 393.98 T
(128) 377.6 393.98 T
(e) 333 383.98 T
(xample of \336nding a) 336.86 383.98 T
(v) 406.93 383.98 T
(ailable \336elds) 411.2 383.98 T
(128) 461.45 383.98 T
(in metdata class) 333 373.98 T
(41) 394.99 373.98 T
(independent of platforms) 333 363.98 T
(11) 427.99 363.98 T
(rules of thumb) 333 353.98 T
(15) 390 353.98 T
(static) 333 343.98 T
(57, 58) 356.5 343.98 T
(\336elds table) 324 333.98 T
(13, 16) 367.75 333.98 T
(\336eld attrib) 333 323.98 T
(utes in \336le formats) 370.07 323.98 T
(139) 441.82 323.98 T
(\336letype) 324 313.98 T
(12) 355.5 313.98 T
(forecast time) 324 303.98 T
(126) 375.24 303.98 T
(\336nding a) 333 293.98 T
(v) 364.57 293.98 T
(ailable of) 368.85 293.98 T
(fsets) 402.36 293.98 T
(126) 423.36 293.98 T
2 F
(G) 324 274.98 T
0 F
(global attrib) 324 265.98 T
(utes) 367.57 265.98 T
(100, 102) 386.57 265.98 T
(counting) 333 255.98 T
(104) 369 255.98 T
(e) 333 245.98 T
(xample of an array of doubles) 336.86 245.98 T
(103) 449.08 245.98 T
(e) 333 235.98 T
(xample of listing k) 336.86 235.98 T
(e) 404.52 235.98 T
(ys) 408.38 235.98 T
(107) 420.89 235.98 T
(e) 333 225.98 T
(xample of remo) 336.86 225.98 T
(ving with process function) 393.71 225.98 T
(105) 493.96 225.98 T
(getting) 333 215.98 T
(103) 362.5 215.98 T
(getting strings) 333 205.98 T
(102) 388.76 205.98 T
(listing k) 333 195.98 T
(e) 362.17 195.98 T
(ys) 366.03 195.98 T
(107) 378.53 195.98 T
(processing by k) 333 185.98 T
(e) 389.4 185.98 T
(y) 393.26 185.98 T
(105) 402.26 185.98 T
(processing strings only) 333 175.98 T
(106) 420.5 175.98 T
(remo) 333 165.98 T
(ving) 351.36 165.98 T
(104) 371.86 165.98 T
(setting) 333 155.98 T
(103) 361.5 155.98 T
(setting strings) 333 145.98 T
(102) 387.76 145.98 T
(GrADS \336le format) 324 135.98 T
(131) 395.99 135.98 T
(GRIB \336le format) 324 125.98 T
(131) 390 125.98 T
2 F
(H) 324 106.98 T
0 F
(h) 324 97.98 T
(yperslabs) 328.45 97.98 T
(85, 136) 366.95 97.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "153" 153
%%Page: "154" 154
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(I) 54 681.98 T
0 F
(image class) 54 672.98 T
(53) 100.24 672.98 T
(adding images) 63 662.98 T
(53) 119.75 662.98 T
(retrie) 63 652.98 T
(ving images) 81.76 652.98 T
(54) 130.01 652.98 T
(setup) 63 642.98 T
(53) 86.5 642.98 T
(Imak) 54 632.98 T
(e) 72.4 632.98 T
(21) 80.9 632.98 T
(Imak) 54 622.98 T
(e\336le) 72.4 622.98 T
(e) 63 612.98 T
(xample) 66.86 612.98 T
(21) 97.86 612.98 T
(ingest) 54 602.98 T
(b) 63 592.98 T
(uilt-in comamnd-line options) 67.32 592.98 T
(142) 176.82 592.98 T
(current log mask) 63 582.98 T
(145) 127.99 582.98 T
(de) 63 572.98 T
(v) 71.27 572.98 T
(elopment log messages) 75.64 572.98 T
(145) 163.63 572.98 T
(e) 63 562.98 T
(xample) 66.86 562.98 T
(147) 97.86 562.98 T
(initializing) 63 552.98 T
(144) 106.51 552.98 T
(logging messages) 63 542.98 T
(144) 131.25 542.98 T
(parsing options) 63 532.98 T
(143) 122.75 532.98 T
(usage function) 63 522.98 T
(143) 120.24 522.98 T
(ingest routines) 54 512.98 T
(141) 111.25 512.98 T
(remo) 63 502.98 T
(ving options) 81.36 502.98 T
(144) 130.62 502.98 T
(steps to using) 63 492.98 T
(142) 116.5 492.98 T
5 12 Q
(ingest.h) 54 482.98 T
0 9 Q
( header \336le) 111.6 482.98 T
(141) 156.09 482.98 T
3 12 Q
(IngestInitializ) 54 472.98 T
(e) 123.18 472.98 T
0 9 Q
( function) 129.85 472.98 T
(144) 166.6 472.98 T
3 12 Q
(IngestLog) 54 462.98 T
0 9 Q
( function) 106.7 462.98 T
(144) 143.45 462.98 T
5 12 Q
(IngestLogFlags) 54 452.98 T
0 9 Q
( mask v) 154.8 452.98 T
(ariable) 182.57 452.98 T
(145) 211.56 452.98 T
3 12 Q
(IngestP) 54 442.98 T
(arseOptions) 94.21 442.98 T
0 9 Q
( function) 158.9 442.98 T
(143) 195.65 442.98 T
3 12 Q
(IngestRemo) 54 432.98 T
(v) 118.51 432.98 T
(eOptions) 124.21 432.98 T
0 9 Q
( function) 172.24 432.98 T
(144) 208.98 432.98 T
3 12 Q
(IngestSetDr) 54 422.98 T
(yRun) 117.72 422.98 T
0 9 Q
( macro) 145.73 422.98 T
(147) 174.97 422.98 T
3 12 Q
(IngestSetNoDataStore) 54 412.98 T
0 9 Q
( macro) 174.06 412.98 T
(146) 203.3 412.98 T
3 12 Q
(IngestSetNoEv) 54 402.98 T
(entLogger) 133.74 402.98 T
0 9 Q
( macro) 187.78 402.98 T
(146) 217.02 402.98 T
3 12 Q
(IngestSetNoMessageHandler) 54 392.98 T
0 9 Q
( macro) 210.73 392.98 T
(146) 239.97 392.98 T
3 12 Q
(IngestSho) 54 382.98 T
(wName) 107.86 382.98 T
0 9 Q
( macro) 148.52 382.98 T
(146) 177.76 382.98 T
3 12 Q
(IngestUsage) 54 372.98 T
0 9 Q
( function) 121.37 372.98 T
(143) 158.12 372.98 T
(inherit, from data chunk class) 54 362.98 T
(24) 165.23 362.98 T
(ir) 54 352.98 T
(grid class) 59.34 352.98 T
(49) 98.08 352.98 T
(adding grids) 63 342.98 T
(51, 52) 112.25 342.98 T
(getting grids) 63 332.98 T
(51) 112.75 332.98 T
(listing platforms) 63 322.98 T
(50) 126.76 322.98 T
(number of platforms) 63 312.98 T
(50) 141.49 312.98 T
(retrie) 63 302.98 T
(ving grids) 81.76 302.98 T
(52) 122.52 302.98 T
(setup) 63 292.98 T
(50, 52) 86.5 292.98 T
(issue time) 54 282.98 T
(126) 94.75 282.98 T
2 F
(K) 54 263.98 T
0 F
(k) 54 254.98 T
(e) 58.41 254.98 T
(y) 62.27 254.98 T
(, attrib) 66.19 254.98 T
(ute) 89.5 254.98 T
(100) 105 254.98 T
2 F
(L) 54 235.98 T
5 12 Q
(libZeb.a) 54 226.98 T
0 9 Q
(, Zebra library) 111.6 226.98 T
(10) 167.83 226.98 T
5 12 Q
(libZebDS.a) 54 216.98 T
0 9 Q
(, data store library) 126 216.98 T
(10) 195.98 216.98 T
(location class) 54 206.98 T
(40) 107.24 206.98 T
(adding locations) 63 196.98 T
(40) 126.75 196.98 T
(retrie) 63 186.98 T
(ving locations) 81.76 186.98 T
(40) 137.02 186.98 T
5 12 Q
(Location) 54 176.98 T
0 9 Q
( type) 111.6 176.98 T
(17, 35) 133.85 176.98 T
(logging ingest messages) 54 166.98 T
(144) 146 166.98 T
2 F
(M) 54 147.98 T
0 F
(message manager) 54 138.98 T
(12) 122.23 138.98 T
(metdata class) 54 128.98 T
(41) 106.74 128.98 T
(adding data) 63 118.98 T
(43) 109.24 118.98 T
(bad v) 63 108.98 T
(alue \337ag) 82.52 108.98 T
(44) 117.76 108.98 T
(element types) 63 98.98 T
(90) 117.24 98.98 T
(e) 315 681.98 T
(xample of setting \336eld types) 318.86 681.98 T
(91) 425.36 681.98 T
(e) 315 671.98 T
(xample with nspace \336eld types) 318.86 671.98 T
(93) 434.35 671.98 T
(\336eld attrib) 315 661.98 T
(utes) 352.07 661.98 T
(111) 371.07 661.98 T
(\336eld types method) 315 651.98 T
(91) 386 651.98 T
(\336eld\325) 315 641.98 T
(s element size) 333.5 641.98 T
(92) 388.49 641.98 T
(getting data) 315 631.98 T
(44) 361.75 631.98 T
(getting \336eld type) 315 621.98 T
(92) 380.5 621.98 T
(getting the bad v) 315 611.98 T
(alue \337ag) 375.02 611.98 T
(45) 410.27 611.98 T
(listing \336elds) 315 601.98 T
(43) 363.76 601.98 T
(setting \336eld types) 315 591.98 T
(90) 383 591.98 T
(setting \336elds) 315 581.98 T
(42) 365.26 581.98 T
(setting nspace \336eld types) 315 571.98 T
(92) 409.74 571.98 T
(setting the type of a \336eld) 315 561.98 T
(91) 408.74 561.98 T
(setup) 315 551.98 T
(42) 338.5 551.98 T
(storing typed \336elds) 315 541.98 T
(92) 388.5 541.98 T
(typed \336eld e) 315 531.98 T
(xample) 359.36 531.98 T
(92) 390.36 531.98 T
(method) 306 521.98 T
(25) 337.5 521.98 T
(of a data chunk class) 315 511.98 T
(25) 394.48 511.98 T
5 12 Q
(MH_SHUTDOWN) 306 501.98 T
0 9 Q
( message) 385.2 501.98 T
(144) 422.44 501.98 T
(missing v) 306 491.98 T
(alues) 340.53 491.98 T
(44) 363.53 491.98 T
(mobile platforms) 306 481.98 T
(122) 372.25 481.98 T
(model platforms) 306 471.98 T
(123) 369.75 471.98 T
(\336nding a) 315 461.98 T
(v) 346.57 461.98 T
(ailable altitudes) 350.85 461.98 T
(127) 412.09 461.98 T
(getting forecast of) 315 451.98 T
(fsets) 380.26 451.98 T
(126) 401.26 451.98 T
3 12 Q
(msg_connect) 306 441.98 T
0 9 Q
( function) 377.36 441.98 T
(20, 144) 414.11 441.98 T
2 F
(N) 306 422.98 T
0 F
(netCDF) 306 413.98 T
(55, 70, 117) 339 413.98 T
(and non-string data chunk attrib) 315 403.98 T
(utes) 429.8 403.98 T
(100) 448.8 403.98 T
(bad v) 315 393.98 T
(alue \337ags) 334.52 393.98 T
(139) 373.27 393.98 T
(data model) 315 383.98 T
(93) 359.24 383.98 T
(inserting samples) 315 373.98 T
(136) 382.25 373.98 T
(long_name \336eld attrib) 315 363.98 T
(ute) 394.32 363.98 T
(140) 409.82 363.98 T
(units attrib) 315 353.98 T
(ute) 353.57 353.98 T
(140) 369.07 353.98 T
(netCDF) 306 343.98 T
(, \336le format) 333.78 343.98 T
(12) 380.53 343.98 T
5 12 Q
(netcdf.h) 306 333.98 T
0 9 Q
( \336le) 363.6 333.98 T
(70) 381.85 333.98 T
(NetXfr) 306 323.98 T
(11) 335.99 323.98 T
5 12 Q
(NetXfr) 306 313.98 T
0 9 Q
( client) 349.2 313.98 T
(31) 375.95 313.98 T
(noti\336cations) 306 303.98 T
(134) 355.01 303.98 T
(nspace class) 306 293.98 T
(55) 354.73 293.98 T
(adding data) 315 283.98 T
(68) 361.24 283.98 T
(adding multiple samples) 315 273.98 T
(68) 407.5 273.98 T
(adding static data) 315 263.98 T
(68) 382.49 263.98 T
(changes in 4.0) 315 253.98 T
(56) 371.24 253.98 T
(changes in 4.1) 315 243.98 T
(56) 371.24 243.98 T
(closing the de\336nition) 315 233.98 T
(64) 395.51 233.98 T
(de\336ning a \336eld) 315 223.98 T
(62, 63) 373.5 223.98 T
(de\336ning dimensions) 315 213.98 T
(59, 63) 392.26 213.98 T
(e) 315 203.98 T
(xample of using \336eld types) 318.86 203.98 T
(93) 420.86 203.98 T
(e) 315 193.98 T
(xamples) 318.86 193.98 T
(71) 353.36 193.98 T
(\336elds with zero dimensions) 315 183.98 T
(79) 418.25 183.98 T
(getting dimension information) 315 173.98 T
(66) 429 173.98 T
(getting \336eld information) 315 163.98 T
(66, 67) 407.5 163.98 T
(guidelines) 315 153.98 T
(59) 356.5 153.98 T
(implementation) 315 143.98 T
(84) 376 143.98 T
(inquiring about dimensions) 315 133.98 T
(65) 418.01 133.98 T
(inquiring about \336elds) 315 123.98 T
(65) 396.5 123.98 T
(mixing static and sampled data) 315 113.98 T
(76) 430.99 113.98 T
(quick reference) 315 103.98 T
(85) 375.22 103.98 T
(rede\336ning) 315 93.98 T
(64) 355.99 93.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "154" 154
%%Page: "155" 155
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(retrie) 81 681.98 T
(ving a sample) 99.76 681.98 T
(69) 154.26 681.98 T
(retrie) 81 671.98 T
(ving information) 99.76 671.98 T
(60) 165.01 671.98 T
(retrie) 81 661.98 T
(ving static data) 99.76 661.98 T
(70) 158.76 661.98 T
(setting \336eld types) 81 651.98 T
(92) 149 651.98 T
(static \336eld e) 81 641.98 T
(xample) 124.36 641.98 T
(75) 155.36 641.98 T
(storage in netCDF) 81 631.98 T
(70) 151.5 631.98 T
(testing for static) 81 621.98 T
(67) 143.5 621.98 T
(using metdata methods) 81 611.98 T
(60) 168.5 611.98 T
(N-Space class, implementation) 72 601.98 T
(84) 188.24 601.98 T
5 12 Q
(nspace) 72 591.98 T
0 9 Q
( or) 115.2 591.98 T
(g) 124.79 591.98 T
(anization) 129.24 591.98 T
(56) 166.73 591.98 T
2 F
(O) 72 572.98 T
0 F
(object-oriented, data chunks) 72 563.98 T
(24) 178.23 563.98 T
(objects) 72 553.98 T
(24) 102 553.98 T
(observ) 72 543.98 T
(ation times) 95.77 543.98 T
(126) 140.02 543.98 T
(observ) 72 533.98 T
(ations, fetching) 95.77 533.98 T
(133) 155.76 533.98 T
5 12 Q
(OrgScalar) 72 523.98 T
0 9 Q
( or) 136.8 523.98 T
(g) 146.38 523.98 T
(anization) 150.84 523.98 T
(45) 188.33 523.98 T
2 F
(P) 72 504.98 T
0 F
(platform) 72 495.98 T
(10) 107.5 495.98 T
(e) 81 485.98 T
(xample de\336nition) 84.86 485.98 T
(11) 152.61 485.98 T
(platform attrib) 72 475.98 T
(utes) 124.07 475.98 T
(122) 143.06 475.98 T
(mobile) 81 465.98 T
(122) 110.5 465.98 T
(model) 81 455.98 T
(123) 108 455.98 T
(platform data or) 72 445.98 T
(g) 129.82 445.98 T
(anization) 134.28 445.98 T
(122) 171.77 445.98 T
(platform searches) 72 435.98 T
(123) 140.23 435.98 T
5 12 Q
(PlatformId) 72 425.98 T
0 9 Q
(\336nding from a platform name) 81 415.98 T
(122) 191.99 415.98 T
(translating to platform name) 81 405.98 T
(122) 187.74 405.98 T
5 12 Q
(PlatformId) 72 395.98 T
0 9 Q
( type) 144 395.98 T
(11) 166.25 395.98 T
2 F
(R) 72 376.98 T
0 F
(ra) 72 367.98 T
(w class) 78.86 367.98 T
(30) 109.6 367.98 T
(global attrib) 81 357.98 T
(utes) 124.57 357.98 T
(102) 143.57 357.98 T
(remo) 72 347.98 T
(ving command-line options) 90.36 347.98 T
(144) 193.86 347.98 T
(r) 72 337.98 T
(grid class) 74.83 337.98 T
(51) 113.58 337.98 T
5 12 Q
(RGrid) 72 327.98 T
0 9 Q
( type) 108 327.98 T
(18) 130.25 327.98 T
(ro) 72 317.98 T
(w-major) 79.27 317.98 T
(60) 114.26 317.98 T
2 F
(S) 72 298.98 T
0 F
(sample attrib) 72 289.98 T
(utes) 118.57 289.98 T
(100, 107) 137.57 289.98 T
(counting) 81 279.98 T
(109) 117 279.98 T
(getting) 81 269.98 T
(108) 110.5 269.98 T
(getting strings) 81 259.98 T
(109) 136.76 259.98 T
(listing k) 81 249.98 T
(e) 110.17 249.98 T
(ys) 114.03 249.98 T
(111) 126.53 249.98 T
(processing by k) 81 239.98 T
(e) 137.4 239.98 T
(y) 141.26 239.98 T
(110) 150.26 239.98 T
(remo) 81 229.98 T
(ving) 99.36 229.98 T
(109) 119.86 229.98 T
(setting) 81 219.98 T
(108) 109.5 219.98 T
(setting strings) 81 209.98 T
(109) 135.76 209.98 T
(sample blocks) 72 199.98 T
(136) 127.75 199.98 T
(storing) 81 189.98 T
(136) 110.5 189.98 T
(sample locations) 72 179.98 T
(34) 136.75 179.98 T
(sample times) 72 169.98 T
(33) 123.75 169.98 T
(retrie) 81 159.98 T
(ving) 99.76 159.98 T
(33) 120.27 159.98 T
(setting) 81 149.98 T
(33) 109.5 149.98 T
(samples) 72 139.98 T
(10) 105.5 139.98 T
(and platforms) 81 129.98 T
(36) 135.24 129.98 T
(sorting) 81 119.98 T
(33) 110.5 119.98 T
(samples, transparent class) 72 109.98 T
(31) 169.73 109.98 T
(scalar class) 72 99.98 T
(45) 117.23 99.98 T
(adding data) 333 681.98 T
(46) 379.24 681.98 T
(adding multiple samples) 333 671.98 T
(46) 425.5 671.98 T
(retrie) 333 661.98 T
(ving data) 351.77 661.98 T
(47) 389.51 661.98 T
(retrie) 333 651.98 T
(ving \337oat data) 351.77 651.98 T
(46) 407.76 651.98 T
(setting \336elds) 333 641.98 T
(45) 383.26 641.98 T
5 12 Q
(scalar) 324 631.98 T
0 9 Q
( or) 367.2 631.98 T
(g) 376.79 631.98 T
(anization) 381.24 631.98 T
(56) 418.73 631.98 T
(scale and of) 324 621.98 T
(fset compression, e) 366.76 621.98 T
(xample) 435.86 621.98 T
(18) 466.86 621.98 T
5 12 Q
(ScaleInfo) 324 611.98 T
0 9 Q
( type) 388.8 611.98 T
(18) 411.05 611.98 T
(searching for subplatforms) 324 601.98 T
(124) 424.98 601.98 T
5 12 Q
(sizeof) 324 591.98 T
0 9 Q
( operator) 367.2 591.98 T
(89) 403.94 591.98 T
(specifying time relations) 324 581.98 T
(125) 417.49 581.98 T
(state, of an object) 324 571.98 T
(24) 391.99 571.98 T
(static \336elds) 324 561.98 T
(57, 58) 369.25 561.98 T
(between data \336les) 333 551.98 T
(85) 401.98 551.98 T
(e) 333 541.98 T
(xample in nspace) 336.86 541.98 T
(75) 403.85 541.98 T
(storing data) 324 531.98 T
(135) 370.75 531.98 T
3 12 Q
(streq) 324 521.98 T
0 9 Q
( macro) 350.68 521.98 T
(147) 379.92 521.98 T
(subclass) 324 511.98 T
(25) 358.5 511.98 T
(subplatforms) 324 501.98 T
(searches) 333 491.98 T
(124) 367.98 491.98 T
(superclass) 324 481.98 T
(25) 365.49 481.98 T
2 F
(T) 324 462.98 T
5 12 Q
(time_offset) 324 453.98 T
0 9 Q
( netCDF v) 403.2 453.98 T
(ariable) 440.48 453.98 T
(130) 469.47 453.98 T
(times of observ) 324 443.98 T
(ations) 379.27 443.98 T
(126) 405.27 443.98 T
5 12 Q
(TimeSpec) 324 433.98 T
0 9 Q
( type) 381.6 433.98 T
(125) 403.85 433.98 T
(transparent class) 324 423.98 T
(31) 388.23 423.98 T
(altitude units) 333 413.98 T
(35) 384.26 413.98 T
(limits) 333 403.98 T
(32) 358.01 403.98 T
(mobile locations) 333 393.98 T
(34) 397.25 393.98 T
(multiple platforms) 333 383.98 T
(36) 404.25 383.98 T
(sample attrib) 333 373.98 T
(utes) 379.57 373.98 T
(107) 398.57 373.98 T
(sample locations) 333 363.98 T
(34) 397.75 363.98 T
(sample times) 333 353.98 T
(33) 384.75 353.98 T
(setting platforms) 333 343.98 T
(36) 398.25 343.98 T
(sorting samples) 333 333.98 T
(33) 393.75 333.98 T
(static locations) 333 323.98 T
(34) 391.25 323.98 T
2 F
(U) 324 304.98 T
0 F
(udunits) 324 295.98 T
(16) 355.01 295.98 T
3 12 Q
(ui_init) 324 285.98 T
0 9 Q
( function) 355.34 285.98 T
(20) 392.09 285.98 T
5 12 Q
(UpdAppend) 324 275.98 T
0 9 Q
( symbol) 388.8 275.98 T
(135) 422.05 275.98 T
5 12 Q
(UpdCode) 324 265.98 T
0 9 Q
( type) 374.4 265.98 T
(134) 396.65 265.98 T
5 12 Q
(UpdInsert) 324 255.98 T
0 9 Q
( symbol) 388.8 255.98 T
(135) 422.05 255.98 T
5 12 Q
(UpdOverwrite) 324 245.98 T
0 9 Q
( symbol) 410.4 245.98 T
(135) 443.65 245.98 T
3 12 Q
(usy_init) 324 235.98 T
0 9 Q
( function) 364.68 235.98 T
(20, 144) 401.43 235.98 T
2 F
(V) 324 216.98 T
0 F
(v) 324 207.98 T
(alue, attrib) 328.27 207.98 T
(ute) 366.59 207.98 T
(100) 382.09 207.98 T
2 F
(Z) 324 188.98 T
0 F
(Zebra nati) 324 179.98 T
(v) 360.51 179.98 T
(e format \050ZNF\051) 364.88 179.98 T
(12) 424.86 179.98 T
5 12 Q
(ZebTime) 324 169.98 T
0 9 Q
( type) 374.4 169.98 T
(16) 396.65 169.98 T
(zmkmf) 324 159.98 T
(21) 354 159.98 T
(ZNF) 324 149.98 T
(, Zebra nati) 340.28 149.98 T
(v) 381.29 149.98 T
(e format) 385.66 149.98 T
(12) 420.4 149.98 T
(compatibilty with ne) 333 139.98 T
(w attrib) 407.28 139.98 T
(utes) 434.84 139.98 T
(100) 453.84 139.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "155" 155
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 155
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Helvetica-Bold
%%+ Helvetica
%%+ Times-Italic
%%+ Courier
%%+ Symbol
%%+ Courier-Bold
%%+ Courier-Oblique
%%+ Bookman-Demi
%%EOF
