%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 25 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Helvetica-Bold FMFONTDEFINE
3 0 /Helvetica FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /Courier-Oblique FMFONTDEFINE
6 0 /Times-Italic FMFONTDEFINE
7 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 756 558 756 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 72 558 72 2 L
0.5 H
2 Z
N
0 30 Q
-0.31 (The Zebra Library Interf) 207 664 S
-0.31 (ace) 494.97 664 S
-0.31 (Manual) 207 628 S
1 18 Q
(Gary Granger) 207 560 T
(J) 207 540 T
(onathan Corbet) 215.73 540 T
2 10 Q
(National Center f) 207 149.33 T
(or Atmospheric Resear) 286.81 149.33 T
(c) 396.64 149.33 T
(h) 402.1 149.33 T
(Resear) 207 137.33 T
(c) 240.15 137.33 T
(h Data Pr) 245.61 137.33 T
(ogram) 289.31 137.33 T
(Zeb V) 207 125.33 T
(er) 233.73 125.33 T
(sion 4.2 \321 Jan) 243.03 125.33 T
(uar) 312.96 125.33 T
(y 1996) 328.62 125.33 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(Cop) 72 679.98 T
(yright \050C\051 1987-1993 by UCAR) 91.88 679.98 T
(Uni) 72 666.98 T
(v) 89.7 666.98 T
(ersity Corporation for Atmospheric) 95.52 666.98 T
(Research All rights reserv) 72 653.98 T
(ed) 196.79 653.98 T
(No part of this w) 72 627.98 T
(ork co) 153.2 627.98 T
(v) 183.35 627.98 T
(ered by the cop) 189.17 627.98 T
(yrights) 262.69 627.98 T
-0.38 (herein may be reproduced or used in an) 72 614.98 P
-0.38 (y form or) 258.8 614.98 P
(by an) 72 601.98 T
(y means \321 graphic, electronic, or) 98.15 601.98 T
(mechanical, including photocop) 72 588.98 T
(ying, recording,) 225.53 588.98 T
(taping, or information storage and retrie) 72 575.98 T
(v) 263.66 575.98 T
(al) 269.36 575.98 T
(systems \321 without permission of the cop) 72 562.98 T
(yright) 271.21 562.98 T
(o) 72 549.98 T
(wner) 77.7 549.98 T
(.) 101.03 549.98 T
(This softw) 72 523.98 T
(are and an) 122.88 523.98 T
(y accompan) 172.01 523.98 T
(ying written) 229.48 523.98 T
(materials are pro) 72 510.98 T
(vided \322as is\323 without w) 152.46 510.98 T
(arranty) 265 510.98 T
(of an) 72 497.98 T
(y kind. UCAR e) 96.14 497.98 T
(xpressly disclaims all) 173.96 497.98 T
-0.52 (w) 72 484.98 P
-0.52 (arranties of an) 80.54 484.98 P
-0.52 (y kind, either e) 147.97 484.98 P
-0.52 (xpress or implied,) 218.22 484.98 P
(including b) 72 471.98 T
(ut not limited to the implied) 126.1 471.98 T
(w) 72 458.98 T
(arranties of merchantibility and \336tness for a) 80.54 458.98 T
(particular purpose. UCAR does not indemnify) 72 445.98 T
(an) 72 432.98 T
(y infringement of cop) 83.15 432.98 T
(yright, patent, or) 187.34 432.98 T
(trademark through use or modi\336cation of this) 72 419.98 T
(softw) 72 406.98 T
(are. UCAR does not pro) 98.54 406.98 T
(vide maintenance) 214.68 406.98 T
(or updates for its softw) 72 393.98 T
(are.) 182.53 393.98 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(\245 CHAPTER 1 \245) 72 678.65 T
(The Interprocess) 207 678.65 T
(Communication) 207 662.65 T
(Interf) 207 646.65 T
(ace) 237.95 646.65 T
(5) 270.6 646.65 T
0 10 Q
(1.1) 185.5 629.32 T
(The IPC Interf) 207 629.32 T
(ace) 265.22 629.32 T
(5) 288.54 629.32 T
3 8 Q
(1.1.1) 207 616.65 T
(Basic Functions) 230.98 616.65 T
(7) 295.44 616.65 T
(1.1.2) 207 606.65 T
(Intercepting Speci\336c) 230.98 606.65 T
(Protocols) 230.98 598.65 T
(9) 272.32 598.65 T
(1.1.3) 207 588.65 T
(Looking f) 230.98 588.65 T
(or Speci\336c) 263.2 588.65 T
(Messages) 230.98 580.65 T
(10) 275.43 580.65 T
(1.1.4) 207 570.65 T
(Netw) 230.98 570.65 T
(or) 249.12 570.65 T
(k Broadcast) 256.35 570.65 T
(Suppor) 230.98 562.65 T
(t) 257.09 562.65 T
(10) 267.31 562.65 T
(1.1.5) 207 552.65 T
(Ev) 230.98 552.65 T
(ent Logging) 240.11 552.65 T
(11) 289.92 552.65 T
(1.1.6) 207 542.65 T
(Message Ev) 230.98 542.65 T
(ent) 274.79 542.65 T
(Dispatching) 230.98 534.65 T
(12) 280.77 534.65 T
0 10 Q
(1.2) 185.5 521.32 T
(The Message Handler) 207 521.32 T
(Protocol) 207 509.32 T
(14) 250.89 509.32 T
3 8 Q
(1.2.1) 207 496.65 T
(Initialization) 230.98 496.65 T
(Handshak) 230.98 488.65 T
(e) 266.83 488.65 T
(15) 279.28 488.65 T
(1.2.2) 207 478.65 T
(Death) 230.98 478.65 T
(15) 260.32 478.65 T
(1.2.3) 207 468.65 T
(Client Ev) 230.98 468.65 T
(ents) 262.78 468.65 T
(16) 285.9 468.65 T
0 10 Q
(1.3) 185.5 455.32 T
(The Command) 207 455.32 T
(Protocol) 207 443.32 T
(17) 250.89 443.32 T
0 14 Q
(\245 CHAPTER 2 \245) 72 406.65 T
(Matters of) 207 406.65 T
(T) 207 390.65 T
(iming) 215.06 390.65 T
(19) 261.74 390.65 T
0 10 Q
(2.1) 185.5 373.32 T
(Finding the T) 207 373.32 T
(ime) 261.1 373.32 T
(19) 286.1 373.32 T
(2.2) 185.5 357.32 T
(T) 207 357.32 T
(ranslating T) 212.76 357.32 T
(ime) 260.46 357.32 T
(20) 285.46 357.32 T
(2.3) 185.5 341.32 T
(Comparing T) 207 341.32 T
(ime) 260.26 341.32 T
(24) 285.26 341.32 T
(2.4) 185.5 325.32 T
(Decoding Periods of) 207 325.32 T
(T) 207 313.32 T
(ime) 212.76 313.32 T
(24) 237.76 313.32 T
(2.5) 185.5 297.32 T
(The T) 207 297.32 T
(imer Module) 230.81 297.32 T
(25) 292.75 297.32 T
(2.6) 185.5 281.32 T
(Getting the Current) 207 281.32 T
(T) 207 269.32 T
(ime) 212.76 269.32 T
(25) 237.76 269.32 T
(2.7) 185.5 253.32 T
(Requesting T) 207 253.32 T
(imer) 260.26 253.32 T
(Ev) 207 241.32 T
(ents) 217.96 241.32 T
(25) 244.07 241.32 T
3 8 Q
(2.7.1) 207 228.65 T
(Specifying Timer) 230.98 228.65 T
(Ev) 230.98 220.65 T
(ents) 240.11 220.65 T
(26) 263.23 220.65 T
(2.7.2) 207 210.65 T
(Ev) 230.98 210.65 T
(ents f) 240.11 210.65 T
(or Changing) 259.44 210.65 T
(Times) 230.98 202.65 T
(27) 260.75 202.65 T
0 10 Q
(2.8) 185.5 189.32 T
(Cancelling T) 207 189.32 T
(imer) 258.59 189.32 T
(Ev) 207 177.32 T
(ents) 217.96 177.32 T
(27) 244.07 177.32 T
0 14 Q
(\245 CHAPTER 3 \245) 72 140.65 T
(Geograph) 207 140.65 T
(y) 262.13 140.65 T
(29) 283.13 140.65 T
0 10 Q
(3.1) 185.5 123.32 T
(Locations) 207 123.32 T
(29) 256.44 123.32 T
(3.2) 185.5 107.32 T
(Re) 207 107.32 T
(gular Grids) 217.96 107.32 T
(29) 273.23 107.32 T
(3.3) 437.5 681.32 T
(Scales and Of) 459 681.32 T
(fsets) 514.29 681.32 T
(30) 542.62 681.32 T
(3.4) 437.5 665.32 T
(Altitudes) 459 665.32 T
(31) 505.67 665.32 T
(3.5) 437.5 649.32 T
(Con) 459 649.32 T
(v) 475.27 649.32 T
(erting Between) 480.12 649.32 T
(Coordinate) 459 637.32 T
(Systems) 459 625.32 T
(33) 502.34 625.32 T
0 14 Q
(\245 CHAPTER 4 \245) 324 588.65 T
-0.27 (The Plot Descrip-) 459 588.65 P
(tion Library) 459 572.65 T
(35) 540.27 572.65 T
0 10 Q
(4.1) 437.5 555.32 T
(Preliminaries) 459 555.32 T
(35) 522.33 555.32 T
(4.2) 437.5 539.32 T
-0.24 (Loading and Con) 459 539.32 P
-0.24 (v) 527.56 539.32 P
-0.24 (erting) 532.41 539.32 P
(Plot Descriptions) 459 527.32 T
(37) 538.17 527.32 T
(4.3) 437.5 511.32 T
(Operations on PD) 459 511.32 T
(Components) 459 499.32 T
(38) 519.56 499.32 T
(4.4) 437.5 483.32 T
(Accessing Information) 459 483.32 T
(W) 459 471.32 T
(ithin Plot) 468.04 471.32 T
(Descriptions) 459 459.32 T
(40) 519.55 459.32 T
(4.5) 437.5 443.32 T
(Cop) 459 443.32 T
(ying Plot) 475.57 443.32 T
(Descriptions) 459 431.32 T
(42) 519.55 431.32 T
(4.6) 437.5 415.32 T
(Auxiliary Plot Descrip-) 459 415.32 T
(tion T) 459 403.32 T
(able) 482.37 403.32 T
(42) 509.03 403.32 T
0 14 Q
(\245 CHAPTER 5 \245) 324 366.65 T
(The Graphics) 459 366.65 T
(W) 459 350.65 T
(idget) 471.66 350.65 T
(45) 513.66 350.65 T
0 10 Q
(5.1) 437.5 333.32 T
(Description) 459 333.32 T
(45) 515.66 333.32 T
(5.2) 437.5 317.32 T
(Using a Graphics) 459 317.32 T
(W) 459 305.32 T
(idget) 468.04 305.32 T
(45) 498.04 305.32 T
3 8 Q
(5.2.1) 459 292.65 T
(Creating a Gr) 482.98 292.65 T
(aphics) 530.91 292.65 T
(Widget) 482.98 284.65 T
(45) 515.87 284.65 T
(5.2.2) 459 274.65 T
(Setting Resources) 482.98 274.65 T
(F) 482.98 266.65 T
(or a Gr) 487.62 266.65 T
(aphics) 512.44 266.65 T
(Widget) 482.98 258.65 T
(47) 515.87 258.65 T
(5.2.3) 459 248.65 T
(Destro) 482.98 248.65 T
(ying a Gr) 506.3 248.65 T
(aph-) 538.67 248.65 T
(ics Widget) 482.98 240.65 T
(47) 527.87 240.65 T
0 10 Q
(5.3) 437.5 227.32 T
(Con) 459 227.32 T
(v) 475.27 227.32 T
(enience) 480.12 227.32 T
(Routines) 459 215.32 T
(47) 504.56 215.32 T
3 8 Q
(5.3.1) 459 202.65 T
(Inf) 482.98 202.65 T
(or) 491.63 202.65 T
(mational) 498.94 202.65 T
(Routines) 482.98 194.65 T
(48) 522.54 194.65 T
(5.3.2) 459 184.65 T
(Pixmap) 482.98 184.65 T
(Oper) 482.98 176.65 T
(ations) 500.68 176.65 T
(48) 530.02 176.65 T
(5.3.3) 459 166.65 T
(Shared Memor) 482.98 166.65 T
(y) 536.12 166.65 T
(Routines) 482.98 158.65 T
(50) 522.54 158.65 T
0 14 Q
(\245 CHAPTER 6 \245) 324 124.65 T
(Sound) 459 124.65 T
(53) 508.78 124.65 T
0 10 Q
(6.1) 437.5 107.32 T
(Playing Audio) 459 107.32 T
(Files) 459 95.32 T
(53) 488.45 95.32 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(\245 CHAPTER 7 \245) 54 678.65 T
(Direct Image) 189 678.65 T
(T) 189 662.65 T
(ransfer) 197.06 662.65 T
(55) 249.93 662.65 T
0 10 Q
(7.1) 167.5 645.32 T
(Description) 189 645.32 T
(55) 245.66 645.32 T
(7.2) 167.5 629.32 T
(Attaching to Image) 189 629.32 T
(T) 189 617.32 T
(ransfer Se) 194.76 617.32 T
(gments) 234.87 617.32 T
(56) 273.76 617.32 T
(7.3) 167.5 601.32 T
(Detaching From Image) 189 601.32 T
(Se) 189 589.32 T
(gments) 198.85 589.32 T
(56) 237.74 589.32 T
(7.4) 167.5 573.32 T
(Producer Interf) 189 573.32 T
(ace) 249.71 573.32 T
(57) 273.03 573.32 T
(7.5) 167.5 557.32 T
-0.04 (Consumer Interf) 189 557.32 P
-0.04 (ace) 254.68 557.32 P
-0.04 (58) 278 557.32 P
(7.6) 167.5 541.32 T
(Miscellaneous) 189 541.32 T
(Calls) 189 529.32 T
(59) 219.56 529.32 T
0 14 Q
(\245 CHAPTER 8 \245) 54 492.65 T
(General) 189 492.65 T
(Utilities) 189 476.65 T
(61) 248.12 476.65 T
0 10 Q
(8.1) 167.5 459.32 T
(Con\336guration) 189 459.32 T
(V) 189 447.32 T
(ariables) 195.11 447.32 T
(61) 236.21 447.32 T
3 8 Q
(8.1.1) 189 434.65 T
(Director) 212.98 434.65 T
(y P) 241.22 434.65 T
(aths) 252.46 434.65 T
(61) 275.58 434.65 T
(8.1.2) 189 424.65 T
(UI Con\336gur) 212.98 424.65 T
(ation) 253.35 424.65 T
(V) 212.98 416.65 T
(ar) 217.75 416.65 T
(iab) 224.98 416.65 T
(les) 235.5 416.65 T
(62) 253.72 416.65 T
0 10 Q
(8.2) 167.5 403.32 T
(File Searching) 189 403.32 T
(63) 257.05 403.32 T
(8.3) 167.5 387.32 T
(List P) 189 387.32 T
(arsing) 212.47 387.32 T
(64) 246.91 387.32 T
(8.4) 167.5 371.32 T
(Re) 189 371.32 T
(gular) 199.96 371.32 T
(Expressions) 189 359.32 T
(64) 247.33 359.32 T
(8.5) 167.5 343.32 T
(Run Length) 189 343.32 T
(Encoding) 189 331.32 T
(64) 237.33 331.32 T
3 8 Q
(8.5.1) 189 318.65 T
(Routines) 212.98 318.65 T
(65) 252.54 318.65 T
(8.5.2) 189 308.65 T
(Encoded Data) 212.98 308.65 T
(F) 212.98 300.65 T
(or) 217.62 300.65 T
(mat) 224.94 300.65 T
(65) 246.27 300.65 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (5) 552.44 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 1 \245) 126 677 S
0 24 Q
-0.48 (The Interprocess) 252 677 S
-0.48 (Communication Interf) 252 647 S
-0.48 (ace) 456.15 647 S
0 12 Q
0.38 (This chapter describes the interprocess communication \050IPC\051 module. Current) 126 424 P
2.09 (capabilities include communication between arbitrary pairs of processes by) 126 410 P
0.75 (name, reliable broadcast to process groups, and a basic e) 126 396 P
0.75 (v) 404.03 396 P
0.75 (ent logging mecha-) 409.85 396 P
1.7 (nism. The IPC system also supports multi-host broadcasting using the User) 126 382 P
(Datagram Protocol \050UDP\051.) 126 368 T
0.63 (The enhancements in v) 126 342 P
0.63 (ersion 4.2 include connectionless e) 238.7 342 P
0.63 (v) 408.58 342 P
0.63 (ent logging, appli-) 414.4 342 P
-0.04 (cation-modi\336able print and send e) 126 328 P
-0.04 (v) 289.54 328 P
-0.04 (ent masks, a) 295.36 328 P
4 F
-0.09 (msg_disconnect) 357.24 328 P
0 F
-0.04 ( function,) 458.04 328 P
1.53 (and polling by protocol. These are described in the rele) 126 314 P
1.53 (v) 404.05 314 P
1.53 (ant sections of this) 409.76 314 P
(chapter) 126 300 T
(.) 160.66 300 T
72 257 558 259 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 257 558 259 R
7 X
0 0 0 1 0 0 0 K
V
72 258 117 258 2 L
0.5 H
2 Z
0 X
N
126 258 558 258 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(1.1) 100.32 263 T
(The IPC Interface) 126 263 T
0 F
-0.03 (All modules using the messaging system must ha) 126 239 P
-0.03 (v) 361.92 239 P
-0.03 (e the follo) 367.74 239 P
-0.03 (wing include lines) 416.05 239 P
(at the head of the \336le:) 126 225 T
4 9 Q
(# include <defs.h>) 144 202 T
(# include <message.h>) 144 191 T
0 12 Q
0.41 (Interprocess communication in Zebra is based on the messaging model\321each) 126 166 P
2.07 (communication between a pair of processes consists of an atomic message) 126 152 P
0.15 (passed from one to the other) 126 138 P
0.15 (. A message is simply an array of bytes and a pro-) 262.4 138 P
0.92 (tocol code. The protocol code tells the recei) 126 124 P
0.92 (ving process ho) 342.07 124 P
0.92 (w to interpret the) 418.93 124 P
(data found within the message.) 126 110 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Interpr) 108 736.18 T
(ocess Comm) 154.83 736.18 T
(unication Interface) 210.66 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(6) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(Currently) 108 678.02 T
(, the follo) 153.22 678.02 T
(wing protocol codes ha) 199.25 678.02 T
(v) 310.66 678.02 T
(e been de\336ned in) 316.48 678.02 T
4 F
(message.h) 401.12 678.02 T
0 F
(:) 465.92 678.02 T
4 F
(MT_MESSAGE) 126 652.02 T
0 F
1.23 (The protocol understood by the messaging sys-) 252 652.02 P
2.38 (tem itself. This protocol is described in detail) 252 638.02 P
(belo) 252 624.02 T
(w) 272.36 624.02 T
(.) 280.25 624.02 T
4 F
(MT_DISPLAYMGR) 126 598.02 T
0 F
(The display manager protocol.) 252 598.02 T
4 F
(MT_LOG) 126 572.02 T
0 F
(The e) 252 572.02 T
(v) 278.69 572.02 T
(ent logger protocol.) 284.51 572.02 T
4 F
(MT_ELOG) 126 546.02 T
0 F
(Extended e) 252 546.02 T
(v) 305.35 546.02 T
(ent logging.) 311.17 546.02 T
4 F
(MT_DATASTORE) 126 520.02 T
0 F
(The data store daemon protocol.) 252 520.02 T
4 F
(MT_TIMER) 126 494.02 T
0 F
(The FCC timing system.) 252 494.02 T
4 F
(MT_SOUND) 126 468.02 T
0 F
(The sound generation subsystem.) 252 468.02 T
4 F
(MT_DATASTORE) 126 442.02 T
0 F
(The data store subsystem.) 252 442.02 T
4 F
(MT_IMAGEXFR) 126 416.02 T
0 F
(The direct image transfer mechanism.) 252 416.02 T
4 F
(MT_NETXFR) 126 390.02 T
0 F
(The data store netw) 252 390.02 T
(ork transfer module.) 346.19 390.02 T
4 F
(MT_ACINGEST) 126 364.02 T
0 F
(The F) 252 364.02 T
(AA aircraft ingest module.) 279.44 364.02 T
4 F
(MT_SLDATA) 126 338.02 T
0 F
(Serial line data ingest protocol.) 252 338.02 T
4 F
(MT_QUERY) 126 312.02 T
0 F
(General status query) 252 312.02 T
(, used by) 349.86 312.02 T
4 F
(zquery) 395.86 312.02 T
0 F
(.) 438.28 312.02 T
4 F
(MT_COMMAND) 126 286.02 T
0 F
(UI command e) 252 286.02 T
(x) 323.14 286.02 T
(ecution protocol, used by zrun.) 328.96 286.02 T
4 F
(MT_PDMON) 126 260.02 T
0 F
(The plot description monitor protocol.) 252 260.02 T
4 F
(MT_PBOUNDS) 126 234.02 T
0 F
(Plotting bounds e) 252 234.02 T
(xchange protocol.) 335.83 234.02 T
4 F
(MT_MTAP) 126 208.02 T
0 F
(The message tap protocol, used by mtap.) 252 208.02 T
4 F
(MT_FINISH) 126 182.02 T
0 F
(Generic \322clean up and e) 252 182.02 T
(xit\323 protocol.) 367.1 182.02 T
-0.11 (W) 108 156.02 P
-0.11 (ith the e) 118.85 156.02 P
-0.11 (xception of) 157.12 156.02 P
4 F
-0.26 ( MT_MESSAGE) 211.34 156.02 P
0 F
-0.11 (,) 290.28 156.02 P
4 F
-0.26 ( MT_LOG) 293.28 156.02 P
0 F
-0.11 (,) 343.42 156.02 P
4 F
-0.26 ( MT_ELOG) 346.42 156.02 P
0 F
-0.11 (, and) 403.77 156.02 P
4 F
-0.26 ( MT_MTAP) 426.99 156.02 P
0 F
-0.11 (,) 483 156.02 P
0.41 (the IPC system kno) 108 142.02 P
0.41 (ws nothing about the protocols implemented by the rest of) 202.62 142.02 P
(Zebra. It simply mo) 108 128.02 T
(v) 203.15 128.02 T
(es messages from one process to another) 208.97 128.02 T
(.) 403.6 128.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The IPC Interface) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (7) 552.44 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.95 (Each process is kno) 126 678.02 P
0.95 (wn to the IPC system by name. F) 223.53 678.02 P
0.95 (or e) 389.34 678.02 P
0.95 (xample, the display) 408.44 678.02 P
-0.07 (manager may identify itself as) 126 664.02 P
4 F
-0.17 (DisplayMgr) 273.94 664.02 P
0 F
-0.07 (, and all messages to that process) 345.46 664.02 P
-0.29 (will use that name. Processes on remote hosts may be addressed with the f) 126 650.02 P
-0.29 (amil-) 478.67 650.02 P
2.09 (iar @ notation. F) 126 636.02 P
2.09 (or e) 213.81 636.02 P
2.09 (xample, the display manager running on host) 234.05 636.02 P
5 F
5.02 (zorba) 468 636.02 P
0 F
(w) 126 622.02 T
(ould be reachable as) 134.54 622.02 T
4 F
(DisplayMgr@zorba) 235.18 622.02 T
0 F
(.) 350.38 622.02 T
1.95 (Processes may also join) 126 596.02 P
6 F
1.95 (pr) 251.13 596.02 P
1.95 (ocess gr) 261.26 596.02 P
1.95 (oups) 302.33 596.02 P
0 F
1.95 (, which are addressed by name. By) 325 596.02 P
2.82 (def) 126 582.02 P
2.82 (ault, e) 141.2 582.02 P
2.82 (v) 173.05 582.02 P
2.82 (ery process on the local host is a member of the group called) 178.87 582.02 P
4 F
2.46 (everybody) 126 568.02 P
0 F
1.03 (; messages sent to) 190.8 568.02 P
4 F
2.46 (everybody) 284.23 568.02 P
0 F
1.03 ( will reach e) 349.03 568.02 P
1.03 (v) 410.79 568.02 P
1.03 (ery process in the) 416.61 568.02 P
0.03 (system. F) 126 554.02 P
0.03 (or e) 171.86 554.02 P
0.03 (xample, if Zebra is being shut do) 190.04 554.02 P
0.03 (wn, an appropriate message sent) 348.24 554.02 P
(to) 126 540.02 T
4 F
(everybody) 138.34 540.02 T
0 F
( could cause all processes to clean up and e) 203.14 540.02 T
(xit.) 410.57 540.02 T
2 F
(1.1.1) 90.31 508.02 T
(Basic Functions) 126 508.02 T
0 F
-0.15 (On start-up, each process must mak) 126 490.02 P
-0.15 (e a connection to the message handler) 296.42 490.02 P
-0.15 (. This) 476.82 490.02 P
(connection is created by) 126 476.02 T
4 F
(msg_connect\050\051) 245.3 476.02 T
0 F
(, as follo) 338.9 476.02 T
(ws:) 380.27 476.02 T
7 10 Q
(msg_connect \050handler, name\051) 144 457.35 T
(int \050*handler\051 \050\051;) 144 445.35 T
(char *name;) 144 433.35 T
0 12 Q
1.59 (Where) 126 408.02 P
7 F
3.81 (handler) 162.57 408.02 P
0 F
1.59 ( is a function which is to be called to deal with incoming) 212.97 408.02 P
0.86 (messages, and) 126 394.02 P
7 F
2.06 (name) 199.37 394.02 P
0 F
0.86 ( is the name by which the process is to be kno) 228.17 394.02 P
0.86 (wn to the) 457.62 394.02 P
1.05 (system. This function creates a UNIX sock) 126 380.02 P
1.05 (et and establishes a connection to) 338.45 380.02 P
0.32 (the message manager process. The message manager sock) 126 366.02 P
0.32 (et has a name in the) 407.4 366.02 P
0.15 (UNIX \336lesystem namespace, allo) 126 352.02 P
0.15 (wing client processes to name the sock) 287.45 352.02 P
0.15 (et and) 474.86 352.02 P
0.29 (connect to the message manager) 126 338.02 P
0.29 (. Usually) 281.79 338.02 P
0.29 (, the message manager and its clients) 324.63 338.02 P
0.52 (use a def) 126 324.02 P
0.52 (ault name which w) 169.56 324.02 P
0.52 (as compiled into the message manager e) 261.98 324.02 P
0.52 (x) 458.2 324.02 P
0.52 (ecutable) 464.02 324.02 P
2.73 (and the library) 126 310.02 P
2.73 (. \050See the) 200.67 310.02 P
6 F
2.73 (Zebr) 256.85 310.02 P
2.73 (a Installation Manual) 279.34 310.02 P
0 F
2.73 ( for information about) 389.48 310.02 P
-0.09 (changing this def) 126 296.02 P
-0.09 (ault name.\051 Ho) 208.36 296.02 P
-0.09 (we) 279.53 296.02 P
-0.09 (v) 293.22 296.02 P
-0.09 (er) 299.04 296.02 P
-0.09 (, the sock) 307.88 296.02 P
-0.09 (et name can also be speci\336ed at) 353.24 296.02 P
2.03 (run-time through the en) 126 282.02 P
2.03 (vironment v) 245.26 282.02 P
2.03 (ariable) 305.32 282.02 P
4 F
4.87 (ZEB_SOCKET) 343 282.02 P
0 F
2.03 (. F) 414.11 282.02 P
2.03 (or the message) 428.63 282.02 P
2.34 (process and a client to connect, both must be run with the same v) 126 268.02 P
2.34 (alue of) 468.68 268.02 P
4 F
3.11 (ZEB_SOCKET) 126 254.02 P
0 F
1.3 (. Multiple Zebra sessions can be run on the same machine by) 197.11 254.02 P
2.38 (running each set of Zebra processes under a unique sock) 126 240.02 P
2.38 (et name. See the) 418.21 240.02 P
6 F
1.65 (Advanced User\325) 126 226.02 P
1.65 (s Manual) 204.81 226.02 P
0 F
1.65 ( for more information on using the) 251.46 226.02 P
4 F
3.96 (ZEB_SOCKET) 432 226.02 P
0 F
(v) 126 212.02 T
(ariable.) 131.7 212.02 T
0.2 (T) 126 186.02 P
0.2 (o aw) 132.37 186.02 P
0.2 (ait the deli) 155.45 186.02 P
0.2 (v) 206.21 186.02 P
0.2 (ery of a message, a process will call) 212.03 186.02 P
4 F
0.49 (msg_await\050\051) 389.27 186.02 P
0 F
0.2 (, which) 468.47 186.02 P
(tak) 126 172.02 T
(es no parameters.) 140.54 172.02 T
7 10 Q
(int msg_await \050\051) 144 153.35 T
0 12 Q
0.56 (This function will simply block until a message arri) 126 128.02 P
0.56 (v) 378.18 128.02 P
0.56 (es or something happens) 384 128.02 P
1.39 (on another \336le descriptor of interest to the process \050see Section) 126 114.02 P
1.39 (1.1.6\051. If an) 444.89 114.02 P
1.05 (error occurs while w) 126 100.02 P
1.05 (aiting for \336le descriptor acti) 228.01 100.02 P
1.05 (vity) 365.91 100.02 P
1.05 (, the function returns -1.) 383.8 100.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Interpr) 108 736.18 T
(ocess Comm) 154.83 736.18 T
(unication Interface) 210.66 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(8) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.6 (Otherwise) 108 678.02 P
4 F
3.83 (msg_await\050\051) 161.91 678.02 P
0 F
1.6 ( will return on an) 241.12 678.02 P
1.6 (y non-zero v) 329.97 678.02 P
1.6 (alue returned from) 393.51 678.02 P
2.07 (one of the message handlers. Ordinarily) 108 664.02 P
2.07 (, all of the message handlers in an) 308.87 664.02 P
(application al) 108 650.02 T
(w) 172.87 650.02 T
(ays return 0, and) 181.42 650.02 T
4 F
(msg_await\050\051) 264.4 650.02 T
0 F
( ne) 343.6 650.02 T
(v) 357.62 650.02 T
(er returns.) 363.44 650.02 T
(When a message arri) 108 624.02 T
(v) 208 624.02 T
(es, the) 213.82 624.02 T
7 F
(handler) 247.48 624.02 T
0 F
( function is called as follo) 297.88 624.02 T
(ws:) 421.9 624.02 T
7 10 Q
(\050*handler\051 \050msg\051) 126 605.35 T
(struct message *msg;) 126 593.35 T
0 12 Q
(Where) 108 568.02 T
7 F
(msg) 142.98 568.02 T
0 F
( is a pointer to the) 164.58 568.02 T
4 F
(message) 253.91 568.02 T
0 F
( structure:) 304.31 568.02 T
4 9 Q
(struct message) 126 545.02 T
({) 126 534.02 T
(char m_from[MAX_NAME_LEN];) 154.8 523.02 T
(/* Who it\325s from */) 300.6 523.02 T
(char) 154.8 512.02 T
(m_to[MAX_NAME_LEN];) 183.6 512.02 T
(/* Who it\325s going to */) 286.2 512.02 T
(int) 154.8 501.02 T
(m_proto;) 183.6 501.02 T
(/* Message protocols */) 270 501.02 T
(int) 154.8 490.02 T
(m_seq;) 183.6 490.02 T
(/* Sequence number */) 270 490.02 T
(short) 154.8 479.02 T
(m_flags;) 183.6 479.02 T
(/* Flag field */) 270 479.02 T
(short) 154.8 468.02 T
(m_len;) 183.6 468.02 T
(/* Message length */) 270 468.02 T
(char) 154.8 457.02 T
(*m_data;) 183.6 457.02 T
(/* data pointer */) 270 457.02 T
(};) 126 446.02 T
0 12 Q
1.11 (The) 108 421.02 P
4 F
2.65 (m_from) 130.77 421.02 P
0 F
1.11 ( \336eld names the sender of the message; in) 173.97 421.02 P
4 F
2.65 (m_to) 386.89 421.02 P
0 F
1.11 ( will be found) 415.69 421.02 P
1.43 (either the name of the recei) 108 407.02 P
1.43 (ving process, or the name of a process group of) 245.82 407.02 P
3 (which the recei) 108 393.02 P
3 (ving process is a member) 187.01 393.02 P
3 (. The protocol code is found in) 320.34 393.02 P
4 F
2.42 (m_proto) 108 379.02 P
0 F
1.01 (;) 158.4 379.02 P
4 F
2.42 (m_seq) 165.74 379.02 P
0 F
1.01 ( is a simple sequence number) 201.74 379.02 P
1.01 (. If this message w) 347.11 379.02 P
1.01 (as broad-) 440.67 379.02 P
0.15 (cast to a process group, the) 108 365.02 P
4 F
0.35 (MF_BROADCAST) 241.85 365.02 P
0 F
0.15 ( \337ag will be set in the) 328.25 365.02 P
4 F
0.35 (m_flags) 435.6 365.02 P
0 F
-0.19 (\336eld. Finally) 108 351.02 P
-0.19 (,) 168.38 351.02 P
4 F
-0.45 (m_len) 174.19 351.02 P
0 F
-0.19 ( gi) 210.19 351.02 P
-0.19 (v) 222.04 351.02 P
-0.19 (es the length of the message data, and) 227.86 351.02 P
4 F
-0.45 (m_data) 410.65 351.02 P
0 F
-0.19 ( points) 453.85 351.02 P
0.57 (to the data itself. If the recei) 108 337.02 P
0.57 (ving process wishes to mak) 246.07 337.02 P
0.57 (e use of the data after) 380.2 337.02 P
(the handler returns, it must mak) 108 323.02 T
(e a cop) 260.53 323.02 T
(y of that data.) 294.4 323.02 T
(T) 108 297.02 T
(o send a message, a process in) 114.37 297.02 T
(v) 259.52 297.02 T
(ok) 265.28 297.02 T
(es) 277.16 297.02 T
4 F
(msg_send\050\051) 290.16 297.02 T
0 F
( as follo) 362.16 297.02 T
(ws:) 400.52 297.02 T
7 10 Q
(msg_send \050to, proto, broadcast, data, len\051) 126 278.35 T
(char *to, *data;) 126 266.35 T
(int protocol, broadcast, len;) 126 254.35 T
0 12 Q
0.74 (Where) 108 229.02 P
7 F
1.78 (to) 143.72 229.02 P
0 F
0.74 ( is the name of the destination process or process group,) 158.12 229.02 P
7 F
1.78 (proto) 438.25 229.02 P
0 F
0.74 ( is) 474.25 229.02 P
1.92 (the protocol code,) 108 215.02 P
7 F
4.61 (broadcast) 203.08 215.02 P
0 F
1.92 ( is true if and only if the message is to be) 267.88 215.02 P
-0.23 (broadcast to a process group,) 108 201.02 P
7 F
-0.55 (data) 249.48 201.02 P
0 F
-0.23 ( is the data to be sent, and) 278.28 201.02 P
7 F
-0.55 (len) 403.42 201.02 P
0 F
-0.23 ( is the length) 425.02 201.02 P
(of that data.) 108 187.02 T
1.95 (Message deli) 108 161.02 P
1.95 (v) 172.64 161.02 P
1.95 (ery is asynchronous\321there is no guarantee that all processes) 178.46 161.02 P
(ha) 108 147.02 T
(v) 119.09 147.02 T
(e recei) 124.91 147.02 T
(v) 156.25 147.02 T
(ed a message by the time) 162.07 147.02 T
4 F
(msg_send\050\051) 285.38 147.02 T
0 F
( returns to the caller) 357.38 147.02 T
(.) 452.7 147.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The IPC Interface) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (9) 552.44 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(T) 126 678.02 T
(o join a process group, a process calls) 132.37 678.02 T
4 F
(msg_join\050\051) 316.67 678.02 T
0 F
( as follo) 388.67 678.02 T
(ws:) 427.03 678.02 T
7 10 Q
(msg_join \050group\051) 144 659.35 T
(char *group;) 144 647.35 T
0 12 Q
1.29 (Where) 126 622.02 P
7 F
3.1 (group) 162.27 622.02 P
0 F
1.29 ( is the name of the group to be joined. If this group does not) 198.27 622.02 P
0.56 (e) 126 608.02 P
0.56 (xist, it will be created with the calling process as the only member) 131.15 608.02 P
0.56 (. Untested) 454.78 608.02 P
0.57 (feature: it is also possible to join groups on remote machines, by specifying a) 126 594.02 P
(group name in the) 126 580.02 T
4 F
(name@host) 215.99 580.02 T
0 F
( notation.) 280.79 580.02 T
1.58 (Similarly) 126 554.02 P
1.58 (, a process can remo) 169.9 554.02 P
1.58 (v) 273.66 554.02 P
1.58 (e itself from a group it has joined by calling) 279.48 554.02 P
4 F
(msg_quit\050\051) 126 540.02 T
0 F
(:) 198 540.02 T
7 10 Q
(msg_quit \050group\051) 144 521.35 T
(char *group;) 144 509.35 T
0 12 Q
1.55 (Where) 126 484.02 P
7 F
3.72 (group) 162.53 484.02 P
0 F
1.55 ( is the name of the group to quit. The process will then stop) 198.53 484.02 P
(recei) 126 470.02 T
(ving messages directed to the speci\336ed group.) 149.02 470.02 T
0.98 (One last function allo) 126 444.02 P
0.98 (ws an application to cut all ties with the message man-) 232.28 444.02 P
(ager and free the resources used by the connection.) 126 430.02 T
7 10 Q
(void) 144 411.35 T
(msg_disconnect \050\051) 144 399.35 T
0 12 Q
1.22 (This function essentially resets the IPC interf) 126 374.02 P
1.22 (ace to its initialized b) 349.83 374.02 P
1.22 (ut uncon-) 457.12 374.02 P
0.61 (nected state. It closes the message sock) 126 360.02 P
0.61 (et \336le descriptor) 317.84 360.02 P
0.61 (, frees all messages in) 396.58 360.02 P
0.01 (the message queue, and resets all of the protocol and \336le descriptor handlers to) 126 346.02 P
1.88 (their def) 126 332.02 P
1.88 (aults. It is not necessary to call this function before an application) 168.08 332.02 P
1.05 (e) 126 318.02 P
1.05 (xits. This function is intended for applications which need to free resources) 131.15 318.02 P
0.09 (before continuing without the Zebra IPC, fork children which will not be shar-) 126 304.02 P
-0.16 (ing \336le descriptors, or perhaps reconnect to the message handler under a dif) 126 290.02 P
-0.16 (fer-) 486.68 290.02 P
(ent name.) 126 276.02 T
2 F
(1.1.2) 90.31 244.02 T
(Inter) 126 244.02 T
(cepting Speci\336c Pr) 151.76 244.02 T
(otocols) 259.56 244.02 T
0 F
0.22 (The function) 126 226.02 P
4 F
0.52 (msg_AddProtoHandler\050\051) 191.09 226.02 P
0 F
0.22 ( may be used to add a handler for) 342.29 226.02 P
(a speci\336c protocol as follo) 126 212.02 T
(ws:) 252.35 212.02 T
7 10 Q
(void msg_AddProtoHandler \050proto, handler\051) 144 193.35 T
(int proto;) 144 181.35 T
(int \050*handler\051 \050\051;) 144 169.35 T
0 12 Q
0.28 (Where) 126 144.02 P
7 F
0.66 (proto) 161.26 144.02 P
0 F
0.28 ( is the protocol of interest, and) 197.26 144.02 P
7 F
0.66 (handler) 348.5 144.02 P
0 F
0.28 ( is the function which) 398.9 144.02 P
0.05 (will be called for all messages with that protocol. The primary purpose for this) 126 130.02 P
0.39 (function is to allo) 126 116.02 P
0.39 (w speci\336c protocol access libraries \050e.g., data store or timer\051) 211.21 116.02 P
(to recei) 126 102.02 T
(v) 161.35 102.02 T
(e their messages without the need for special code in the application.) 167.17 102.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Interpr) 108 736.18 T
(ocess Comm) 154.83 736.18 T
(unication Interface) 210.66 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(10) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(1.1.3) 72.31 678.02 T
(Looking f) 108 678.02 T
(or Speci\336c Messa) 161.76 678.02 T
(g) 263.02 678.02 T
(es) 270.47 678.02 T
0 F
1.6 (On occasion, an application will need to w) 108 660.02 P
1.6 (ait for a speci\336c message before) 323.72 660.02 P
(continuing. The function) 108 646.02 T
4 F
(msg_Search\050\051) 229.99 646.02 T
0 F
( can be used for this purpose:) 316.39 646.02 T
7 10 Q
(int msg_Search \050proto, handler, param\051) 126 627.35 T
(int proto;) 126 615.35 T
(int \050*handler\051 \050\051;) 126 603.35 T
(void *param;) 126 591.35 T
0 12 Q
2.75 (The) 108 566.02 P
4 F
6.59 (msg_Search\050\051) 132.41 566.02 P
0 F
2.75 ( function will call the) 218.81 566.02 P
7 F
6.59 (handler) 338.2 566.02 P
0 F
2.75 ( function for e) 388.6 566.02 P
2.75 (v) 464.86 566.02 P
2.75 (ery) 470.68 566.02 P
0.94 (incoming message with the indicated protocol, until the handler returns zero.) 108 552.02 P
0.23 (All messages with a dif) 108 538.02 P
0.23 (ferent protocol, or for which the handler returns a non-) 221.29 538.02 P
-0.01 (zero v) 108 524.02 P
-0.01 (alue, will be queued and deli) 137.34 524.02 P
-0.01 (v) 274.96 524.02 P
-0.01 (ered to the application later) 280.78 524.02 P
-0.01 (. The handler is) 411.38 524.02 P
(called as:) 108 510.02 T
7 10 Q
(\050*handler\051 \050msg, param\051) 126 491.35 T
(struct message *msg;) 126 479.35 T
(void *param;) 126 467.35 T
0 12 Q
0.2 (Where) 108 442.02 P
7 F
0.49 (msg) 143.18 442.02 P
0 F
0.2 ( is the incoming message, and) 164.78 442.02 P
7 F
0.49 (param) 312.99 442.02 P
0 F
0.2 ( is the same parameter v) 348.99 442.02 P
0.2 (alue) 466.01 442.02 P
(that w) 108 428.02 T
(as passed to) 137.54 428.02 T
4 F
(msg_Search\050\051) 197.87 428.02 T
0 F
(.) 284.27 428.02 T
(The) 108 402.02 T
4 F
(msg_Search\050\051) 129.66 402.02 T
0 F
( handler should return one of these three v) 216.06 402.02 T
(alues:) 418.38 402.02 T
4 F
(MSG_DONE) 126 376.02 T
0 F
1.72 (The search is o) 252 376.02 P
1.72 (v) 329.3 376.02 P
1.72 (er) 335.12 376.02 P
1.72 (. The e) 343.79 376.02 P
1.72 (xpected message w) 380.04 376.02 P
1.72 (as) 476 376.02 P
(found and consumed.) 252 362.02 T
4 F
(MSG_CONSUMED) 126 336.02 T
0 F
3.31 (The message w) 252 336.02 P
3.31 (as consumed and can be dis-) 332.48 336.02 P
(carded, b) 252 322.02 T
(ut continue searching.) 295.74 322.02 T
4 F
(MSG_ENQUEUE) 126 296.02 T
0 F
0.92 (Hold this message in the queue to be processed) 252 296.02 P
(later) 252 282.02 T
(. K) 272.66 282.02 T
(eep searching.) 287.03 282.02 T
1 F
0.41 (Note) 108 256.02 P
0 F
0.41 (: The message structure passed to the handler will cease to e) 131.99 256.02 P
0.41 (xist after the) 425.2 256.02 P
0.38 (handler returns. If an application needs to sa) 108 242.02 P
0.38 (v) 323.03 242.02 P
0.38 (e information from the message,) 328.85 242.02 P
(it must cop) 108 228.02 T
(y the message structure and data into its o) 161.22 228.02 T
(wn storage space.) 361.56 228.02 T
2 F
(1.1.4) 72.31 196.02 T
(Netw) 108 196.02 T
(ork Br) 136.43 196.02 T
(oadcast Suppor) 171.53 196.02 T
(t) 262.45 196.02 T
0 F
0.79 (The message subsystem pro) 108 178.02 P
0.79 (vides basic support for the use of netw) 244.51 178.02 P
0.79 (ork broad-) 434.89 178.02 P
0.04 (cast protocols. It is up to the process using the follo) 108 164.02 P
0.04 (wing routines to do its o) 355.09 164.02 P
0.04 (wn) 471.34 164.02 P
(checking for dropped messages, corrupted data, and so on.) 108 150.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The IPC Interface) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (11) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.01 (T) 126 678.02 P
0.01 (o send or recei) 132.37 678.02 P
0.01 (v) 202.42 678.02 P
0.01 (e broadcast messages on a particular port, a process must \336rst) 208.24 678.02 P
(call) 126 664.02 T
4 F
(msg_BCSetup\050\051) 146.33 664.02 T
0 F
( as follo) 239.93 664.02 T
(ws:) 278.29 664.02 T
7 10 Q
(int msg_BCSetup \050address, port, handler\051) 144 645.35 T
(int address, port, \050*handler\051 \050\051;) 144 633.35 T
0 12 Q
-0.29 (Where) 126 608.02 P
7 F
-0.7 (address) 160.69 608.02 P
0 F
-0.29 ( is the Internet Protocol broadcast to use,) 211.09 608.02 P
7 F
-0.7 (port) 407.74 608.02 P
0 F
-0.29 ( is the number) 436.54 608.02 P
1.57 (of the port of interest, and) 126 594.02 P
7 F
3.77 (handler) 263.07 594.02 P
0 F
1.57 ( is a handler routine to be called with) 313.46 594.02 P
-0.18 (incoming broadcast data. If a process is only interested in recei) 126 580.02 P
-0.18 (ving broadcasts,) 426.19 580.02 P
0.62 (the address may be passed as zero. The return v) 126 566.02 P
0.62 (alue, on successful setup, is a) 359.91 566.02 P
1.47 (nonne) 126 552.02 P
1.47 (g) 155.15 552.02 P
1.47 (ati) 161.09 552.02 P
1.47 (v) 172.79 552.02 P
1.47 (e) 178.61 552.02 P
6 F
1.47 (connection number) 188.41 552.02 P
0 F
1.47 ( \050the \336le descriptor of the broadcast sock) 282.2 552.02 P
1.47 (et\051;) 488 552.02 P
(otherwise the return v) 126 538.02 T
(alue is less than zero.) 230.68 538.02 T
-0.18 (When incoming broadcast pack) 126 512.02 P
-0.18 (ets are recei) 276.98 512.02 P
-0.18 (v) 333.62 512.02 P
-0.18 (ed, the handler process is called as) 339.44 512.02 P
(declared belo) 126 498.02 T
(w) 190.01 498.02 T
(.) 197.89 498.02 T
7 10 Q
(\050*handler\051 \050port, data, len\051) 144 479.35 T
(int port, len;) 144 467.35 T
(char *data;) 144 455.35 T
0 12 Q
1.32 (Where) 126 430.02 P
7 F
3.16 (port) 162.29 430.02 P
0 F
1.32 ( is the port the data arri) 191.1 430.02 P
1.32 (v) 310 430.02 P
1.32 (ed on,) 315.82 430.02 P
7 F
3.16 (data) 350.77 430.02 P
0 F
1.32 ( is the actual pack) 379.57 430.02 P
1.32 (et, and) 470.69 430.02 P
7 F
0.62 (len) 126 416.02 P
0 F
0.26 ( is the length of that pack) 147.6 416.02 P
0.26 (et. P) 270.35 416.02 P
0.26 (ack) 291.76 416.02 P
0.26 (et data is in static storage, and should be) 308.3 416.02 P
(copied if the application w) 126 402.02 T
(ants it to last be) 253.86 402.02 T
(yond the return of handler process.) 329.02 402.02 T
(T) 126 376.02 T
(o send a broadcast pack) 132.37 376.02 T
(et:) 246.22 376.02 T
7 10 Q
(void msg_BCast \050conn, data, len\051) 144 357.35 T
(int conn, len;) 144 345.35 T
(char *data;) 144 333.35 T
0 12 Q
10.16 (Where) 126 308.02 P
7 F
24.38 (conn) 171.14 308.02 P
0 F
10.16 ( is the connection number number returned from) 199.94 308.02 P
4 F
0.54 (msg_BCSetup\050\051) 126 294.02 P
0 F
0.22 (,) 219.6 294.02 P
7 F
0.54 (data) 225.82 294.02 P
0 F
0.22 ( is the information to be sent, and) 254.62 294.02 P
7 F
0.54 (len) 420.06 294.02 P
0 F
0.22 ( is the length) 441.66 294.02 P
-0.26 (of that information. Due to the w) 126 280.02 P
-0.26 (ay in which UDP broadcast w) 282.64 280.02 P
-0.26 (orks, an applica-) 424.87 280.02 P
0.12 (tion sending broadcast messages should be prepared to recei) 126 266.02 P
0.12 (v) 415.95 266.02 P
0.12 (e those messages) 421.77 266.02 P
(back by w) 126 252.02 T
(ay of the handler function.) 175.2 252.02 T
2 F
(1.1.5) 90.31 220.02 T
(Event Log) 126 220.02 T
(ging) 183.89 220.02 T
0 F
0.67 (The e) 126 202.02 P
0.67 (xtended e) 153.48 202.02 P
0.67 (v) 200.16 202.02 P
0.67 (ent logger is no) 205.98 202.02 P
0.67 (w standard within the Zebra IPC system. The) 282.02 202.02 P
(logging interf) 126 188.02 T
(ace is) 191.54 188.02 T
4 F
(msg_ELog\050\051) 221.53 188.02 T
0 F
(:) 293.53 188.02 T
7 10 Q
(msg_ELog \050type, fmt, ...\051) 144 169.35 T
(int type;) 144 157.35 T
(char *fmt;) 144 145.35 T
0 12 Q
1.98 (Where) 126 120.02 P
7 F
4.76 (type) 162.96 120.02 P
0 F
1.98 ( is a message type and the follo) 191.76 120.02 P
1.98 (wing ar) 355.65 120.02 P
1.98 (guments are the usual) 393.74 120.02 P
4 F
0.79 (printf\050\051) 126 106.02 P
0 F
0.33 (-) 183.6 106.02 P
0.33 (style format and ar) 187.6 106.02 P
0.33 (guments. The e) 278.68 106.02 P
0.33 (vent types for logged messages) 352.7 106.02 P
(are described belo) 126 92.02 T
(w:) 213 92.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Interpr) 108 736.18 T
(ocess Comm) 154.83 736.18 T
(unication Interface) 210.66 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(12) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 12 Q
(EF_DEBUG) 126 678.02 T
0 F
1.32 (Messages for deb) 252 678.02 P
1.32 (ugging purposes only\321not of) 338.38 678.02 P
(interest to actual production users of the system.) 252 664.02 T
4 F
(EF_INFO) 126 638.02 T
0 F
1.56 (Informational messages that may be of interest) 252 638.02 P
(to a user) 252 624.02 T
(, b) 292.18 624.02 T
(ut which do not indicate problems.) 303.94 624.02 T
4 F
(EF_PROBLEM) 126 598.02 T
0 F
(Reco) 252 598.02 T
(v) 276.48 598.02 T
(erable problems.) 282.3 598.02 T
4 F
(EF_EMERGENCY) 126 572.02 T
0 F
5.02 (Non-reco) 252 572.02 P
5.02 (v) 297.13 572.02 P
5.02 (erable problems, which in general) 302.95 572.02 P
(cause the application to e) 252 558.02 T
(xit.) 373.13 558.02 T
2 F
(1.1.6) 72.31 526.02 T
(Messa) 108 526.02 T
(g) 144.56 526.02 T
(e Event Dispatc) 152.02 526.02 T
(hing) 241.26 526.02 T
0 F
-0.17 (A typical Zebra process will be reacting to e) 108 508.02 P
-0.17 (v) 318.91 508.02 P
-0.17 (ents from se) 324.73 508.02 P
-0.17 (v) 382.74 508.02 P
-0.17 (eral sources, such as) 388.56 508.02 P
1.85 (the IPC system, the X serv) 108 494.02 P
1.85 (er) 245.07 494.02 P
1.85 (, or an e) 253.91 494.02 P
1.85 (xternal data source. It is necessary to) 297.94 494.02 P
2.67 (implement a mechanism by which processes can deal with these multiple) 108 480.02 P
0.68 (sources in a rational w) 108 466.02 P
0.68 (ay) 218.58 466.02 P
0.68 (. The IPC library includes such a mechanism, b) 229.13 466.02 P
0.68 (ut its) 461.64 466.02 P
0.5 (use is not required. A programmer may choose to implement a dif) 108 452.02 P
0.5 (ferent input) 429.84 452.02 P
(multiple) 108 438.02 T
(xing system than the one presented here.) 147.83 438.02 T
0.08 (T) 108 412.02 P
0.08 (o use the IPC dispatcher) 114.37 412.02 P
0.08 (, it is necessary only to specify the \336le descriptors on) 230.87 412.02 P
0.31 (which acti) 108 398.02 P
0.31 (vity is e) 157.67 398.02 P
0.31 (xpected. The function) 196.12 398.02 P
4 F
0.75 (msg_add_fd\050\051) 305.04 398.02 P
0 F
0.31 ( adds a \336le descrip-) 391.43 398.02 P
0.49 (tor to the list of descriptors which the IPC dispatch functions will monitor for) 108 384.02 P
(acti) 108 370.02 T
(vity) 125.03 370.02 T
(.) 142.92 370.02 T
7 10 Q
(msg_add_fd \050fd, handler\051) 126 351.35 T
(int fd, \050*handler\051 \050\051;) 126 339.35 T
0 12 Q
0.61 (The open \336le descriptor is) 108 314.02 P
7 F
1.46 (fd) 239.36 314.02 P
0 F
0.61 (, and) 253.76 314.02 P
7 F
1.46 (handler) 281.31 314.02 P
0 F
0.61 ( is a function which is prepared) 331.71 314.02 P
-0.23 (to deal with input on that \336le descriptor) 108 300.02 P
-0.23 (. When there is data a) 295.4 300.02 P
-0.23 (v) 397.99 300.02 P
-0.23 (ailable on the \336le) 403.69 300.02 P
0.12 (descriptor) 108 286.02 P
0.12 (, the handler will be called with) 155.51 286.02 P
7 F
0.29 (fd) 310.99 286.02 P
0 F
0.12 ( as a parameter) 325.39 286.02 P
0.12 (. T) 397.39 286.02 P
0.12 (o stop w) 409.88 286.02 P
0.12 (atching) 450.67 286.02 P
(a \336le descriptor) 108 272.02 T
(, use) 182.17 272.02 T
4 F
(msg_delete_fd\050\051) 207.17 272.02 T
0 F
(.) 315.17 272.02 T
7 10 Q
(void msg_delete_fd \050fd\051) 126 253.35 T
(int fd;) 126 241.35 T
0 12 Q
2.59 (T) 108 216.02 P
2.59 (o be) 114.37 216.02 P
2.59 (gin dispatching messages, the process calls) 137.11 216.02 P
4 F
6.21 (msg_await\050\051) 362.29 216.02 P
0 F
2.59 ( with no) 441.48 216.02 P
-0.09 (parameters. Input e) 108 202.02 P
-0.09 (v) 199.82 202.02 P
-0.09 (ents will be dispatched until \0501\051 the connection to the mes-) 205.64 202.02 P
1.2 (sage handler is brok) 108 188.02 P
1.2 (en, or \0502\051 one of the handler routines returns a non-zero) 207.78 188.02 P
2.87 (v) 108 174.02 P
2.87 (alue. In the latter case, the v) 113.7 174.02 P
2.87 (alue returned is also the return v) 265.25 174.02 P
2.87 (alue from) 436.81 174.02 P
4 F
(msg_await\050\051) 108 160.02 T
0 F
(.) 187.2 160.02 T
0.25 (If a separate dispatching mechanism is to be implemented, an application may) 108 134.02 P
-0.27 (obtain the \336le descriptor for the message handler connection with this function:) 108 120.02 P
7 10 Q
(int msg_get_fd\050\051) 126 101.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The IPC Interface) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (13) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(F) 126 678.02 T
(or e) 132.49 678.02 T
(xample,) 150.64 678.02 T
4 9 Q
(int msg_fd = msg_get_fd \050\051;) 144 655.02 T
0 12 Q
0.4 (The return v) 126 630.02 P
0.4 (alue of) 185.82 630.02 P
4 F
0.96 (msg_get_fd\050\051) 222.61 630.02 P
0 F
0.4 ( is the \336le descriptor) 309.01 630.02 P
0.4 (. When) 407.94 630.02 P
4 F
0.96 (select\050\051) 446.4 630.02 P
0 F
7.25 (indicates that a read may be performed on) 126 616.02 P
4 F
17.41 (msg_fd) 388.63 616.02 P
0 F
7.25 (, the routine) 431.83 616.02 P
4 F
4.63 (msg_incoming\050\051) 126 602.02 P
0 F
1.93 ( should be called with) 226.8 602.02 P
4 F
4.63 (msg_fd) 344.77 602.02 P
0 F
1.93 ( as the only parameter) 387.97 602.02 P
1.93 (.) 501 602.02 P
0.49 (One message will then be dispatched, and the return v) 126 588.02 P
0.49 (alue of the handler rou-) 389.4 588.02 P
5.47 (tine \050as passed to) 126 574.02 P
4 F
13.14 (msg_connect\050\051) 233.22 574.02 P
0 F
5.47 (\051 will be the return v) 326.82 574.02 P
5.47 (alue from) 452.2 574.02 P
4 F
(msg_incoming\050\051) 126 560.02 T
0 F
(.) 226.8 560.02 T
-0.06 (If your application calls) 126 534.02 P
4 F
-0.16 (msg_Search\050\051) 243.05 534.02 P
0 F
-0.06 (, it may lea) 329.45 534.02 P
-0.06 (v) 382.34 534.02 P
-0.06 (e unprocessed messages) 388.16 534.02 P
0.62 (in the message queue. T) 126 520.02 P
0.62 (o mak) 243.18 520.02 P
0.62 (e sure that these messages get dispatched prop-) 273.35 520.02 P
(erly) 126 506.02 T
(, you should call) 143.88 506.02 T
4 F
(msg_DispatchQueued\050\051) 226.21 506.02 T
0 F
(.) 370.21 506.02 T
7 10 Q
(void) 144 487.35 T
(msg_DispatchQueued \050\051;) 144 475.35 T
0 12 Q
(before blocking on a) 126 450.02 T
4 F
(select\050\051) 227.98 450.02 T
0 F
( call.) 285.58 450.02 T
6.41 (The re) 126 424.02 P
6.41 (gistered set of \336le descriptors may also be polled with the) 163.22 424.02 P
4 F
(msg_poll\050\051) 126 410.02 T
0 F
( function.) 198 410.02 T
7 10 Q
(int msg_poll\050timeout\051) 144 391.35 T
(int timeout; /* seconds */) 144 379.35 T
0 12 Q
-0.11 (First,) 126 354.02 P
4 F
-0.26 (msg_poll\050\051) 153.9 354.02 P
0 F
-0.11 ( checks the message queue for an) 225.9 354.02 P
-0.11 (y pending messages, and) 385.01 354.02 P
0.42 (then polls the message \336le descriptor and an) 126 340.02 P
0.42 (y other descriptors added through) 341.03 340.02 P
4 F
2.08 (msg_add_fd\050\051) 126 326.02 P
0 F
0.87 (. The) 212.4 326.02 P
7 F
2.08 (timeout) 241.79 326.02 P
0 F
0.87 ( parameter speci\336es the number of seconds) 292.19 326.02 P
0.57 (to block in a) 126 312.02 P
4 F
1.37 (select\050\051) 190.94 312.02 P
0 F
0.57 ( call w) 248.54 312.02 P
0.57 (aiting for \336le descriptor acti) 281.55 312.02 P
0.57 (vity) 417.51 312.02 P
0.57 (. As soon as a) 435.4 312.02 P
-0.05 (message is found, either on the queue or w) 126 298.02 P
-0.05 (aiting to be read, the message is dis-) 330.4 298.02 P
1.28 (patched. Message handler messages are dispatched via) 126 284.02 P
4 F
3.07 (msg_incoming\050\051) 400.2 284.02 P
0 F
1.28 (,) 501 284.02 P
0.14 (and the rest are dispatched via the \336le descriptor\325) 126 270.02 P
0.14 (s speci\336ed handler) 362.44 270.02 P
0.14 (. After dis-) 451.39 270.02 P
0.59 (patching a single message from an) 126 256.02 P
0.59 (y of the descriptors,) 294.41 256.02 P
4 F
1.42 (msg_poll\050\051) 395.09 256.02 P
0 F
0.59 ( returns) 467.09 256.02 P
4.88 (with the v) 126 242.02 P
4.88 (alue returned by the function handling the message. If the) 183.46 242.02 P
4 F
2.43 (select\050\051) 126 228.02 P
0 F
1.01 ( times out,) 183.6 228.02 P
4 F
2.43 (msg_poll\050\051) 239.98 228.02 P
0 F
1.01 ( returns) 311.98 228.02 P
4 F
2.43 (MSG_TIMEOUT) 353.33 228.02 P
0 F
1.01 (. This function) 431.64 228.02 P
-0.29 (is useful for checking for messages occasionally during intense processing, and) 126 214.02 P
(for detecting periods of inacti) 126 200.02 T
(vity) 267.67 200.02 T
(, as in the e) 285.56 200.02 T
(xample belo) 339.71 200.02 T
(w) 398.4 200.02 T
(.) 406.28 200.02 T
4 9 Q
(while \050msg_poll\0500\051 != MSG_TIMEOUT\051) 144 177.02 T
(/* handle pending messages*/;) 172.8 166.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Interpr) 108 736.18 T
(ocess Comm) 154.83 736.18 T
(unication Interface) 210.66 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(14) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.28 (Sometimes an application is only prepared to handle messages from a particu-) 108 678.02 P
-0.06 (lar set of protocols. The) 108 664.02 P
4 F
-0.15 (msg_PollProto\050\051) 225 664.02 P
0 F
-0.06 ( function handles this case well.) 333 664.02 P
7 10 Q
(int) 126 645.35 T
(msg_PollProto \050timeout, nproto, protolist\051) 126 633.35 T
(int timeout;) 126 621.35 T
(/* seconds */) 234 621.35 T
(int nproto;) 126 609.35 T
(/* number of protocols in proto array */) 234 609.35 T
(int *protolist;) 126 597.35 T
(/* array of protocols to handle */) 234 597.35 T
0 12 Q
1.54 (It is similar to) 108 572.02 P
4 F
3.7 (msg_poll\050\051) 184.17 572.02 P
0 F
1.54 ( e) 256.17 572.02 P
1.54 (xcept it will not try to handle an) 265.86 572.02 P
1.54 (y messages) 430.13 572.02 P
4.26 (which are not in the speci\336ed array of protocols,) 108 558.02 P
7 F
10.22 (protolist) 381.62 558.02 P
0 F
4.26 (, where) 446.42 558.02 P
7 F
0.3 (protolist) 108 544.02 P
0 F
0.12 ( has) 172.8 544.02 P
7 F
0.3 (nproto) 195.05 544.02 P
0 F
0.12 ( members. If no quali\336ed messages can be found in) 238.25 544.02 P
0.72 (the queue, then the function blocks in a select call for) 108 530.02 P
7 F
1.72 (timeout) 375.17 530.02 P
0 F
0.72 ( seconds. At) 425.57 530.02 P
2.3 (most one function is handled, and either) 108 516.02 P
4 F
5.52 (msg_PollProto\050\051) 319.41 516.02 P
0 F
2.3 ( returns the) 427.41 516.02 P
(v) 108 502.02 T
(alue returned by the handler \050usually zero\051, or it returns) 113.7 502.02 T
4 F
(MSG_TIMEOUT) 382.63 502.02 T
0 F
(.) 460.94 502.02 T
0.73 (As an e) 108 476.02 P
0.73 (xample, the data store daemon uses the code belo) 145.27 476.02 P
0.73 (w to handle most of) 387.75 476.02 P
(the protocols besides its o) 108 462.02 T
(wn while it is b) 231.7 462.02 T
(usy scanning data directories.) 305.46 462.02 T
4 9 Q
(static int ScanProto[] =) 126 439.02 T
({) 126 428.02 T
(MT_MESSAGE, MT_ELOG, MT_PING, MT_CPING, MT_QUERY, MT_MTAP, MT_FINISH) 154.8 417.02 T
(};) 126 406.02 T
(static int NProto = sizeof \050ScanProto\051 / sizeof \050ScanProto[0]\051;) 126 395.02 T
(/* ... */) 126 373.02 T
(/*) 154.8 362.02 T
( * Check and handle any pending messages except ds protocol) 154.8 351.02 T
( */) 154.8 340.02 T
(while \050msg_PollProto \0500, NProto, ScanProto\051 != MSG_TIMEOUT\051) 183.6 329.02 T
(/* handle messages besides our own */ ;) 212.4 318.02 T
0 12 Q
3.75 (If) 108 293.02 P
4 F
9 (msg_PollProto\050\051) 122.74 293.02 P
0 F
3.75 ( is called with either) 230.74 293.02 P
7 F
9 (nproto) 349.82 293.02 P
0 F
3.75 ( equal to zero or) 393.02 293.02 P
7 F
14.12 (protolist) 108 279.02 P
0 F
5.88 ( equal to) 172.8 279.02 P
4 F
14.12 (NULL) 234.78 279.02 P
0 F
5.88 (, it will perform e) 263.58 279.02 P
5.88 (xactly lik) 371.26 279.02 P
5.88 (e a call to) 422.03 279.02 P
4 F
(msg_poll\050\051) 108 265.02 T
0 F
(.) 180 265.02 T
54 222.02 540 224.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 222.02 540 224.02 R
7 X
0 0 0 1 0 0 0 K
V
54 223.02 99 223.02 2 L
0.5 H
2 Z
0 X
N
108 223.02 540 223.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(1.2) 82.32 228.02 T
(The Messa) 108 228.02 T
(g) 169.24 228.02 T
(e Handler Pr) 176.69 228.02 T
(otocol) 247.14 228.02 T
0 F
0.94 (This section documents the protocol understood by the message handler pro-) 108 204.02 P
0.25 (cess itself. Most messages in this protocol are handled by the interf) 108 190.02 P
0.25 (ace library) 432.56 190.02 P
0.25 (,) 483 190.02 P
2.26 (so client processes need not w) 108 176.02 P
2.26 (orry about them or the underlying protocol.) 264.14 176.02 P
1.74 (Ho) 108 162.02 P
1.74 (we) 122.36 162.02 P
1.74 (v) 136.06 162.02 P
1.74 (er) 141.88 162.02 P
1.74 (, all clients should deal with the) 150.72 162.02 P
4 F
4.18 (MH_SHUTDOWN) 318.25 162.02 P
0 F
1.74 ( message type, as) 397.45 162.02 P
(mentioned belo) 108 148.02 T
(w) 182.03 148.02 T
(.) 189.91 148.02 T
1.51 (All messages passed to and from the message handler are represented by C) 108 122.02 P
0.92 (structures. The actual structure used depends on the type of the message, b) 108 108.02 P
0.92 (ut) 476.66 108.02 P
(e) 108 94.02 T
(v) 113.03 94.02 T
(ery message can be initially e) 118.85 94.02 T
(xamined as an) 260.3 94.02 T
4 F
(mh_template) 331.96 94.02 T
0 F
( structure:) 411.16 94.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Messa) 126 736.18 T
(g) 171.93 736.18 T
(e Handler Pr) 177.52 736.18 T
(otocol) 230.35 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (15) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(struct mh_template) 144 680.02 T
({) 144 669.02 T
(int mh_type; /* The message type */) 172.8 658.02 T
(};) 144 647.02 T
0 12 Q
-0.17 (The) 126 622.02 P
4 F
-0.4 (mh_type) 147.49 622.02 P
0 F
-0.17 ( \336eld contains a code identifying the type of the message, which) 197.89 622.02 P
0.29 (can be used to determine the proper structure to use in dealing with the rest of) 126 608.02 P
(the message.) 126 594.02 T
2 F
(1.2.1) 90.31 562.02 T
(Initialization Handshake) 126 562.02 T
0 F
0.86 (When a connection is made to the message handler) 126 544.02 P
0.86 (, usually through a call to) 377.7 544.02 P
4 F
7.01 (msg_connect\050\051) 126 530.02 P
0 F
2.92 (, the connecting process recei) 219.6 530.02 P
2.92 (v) 372.6 530.02 P
2.92 (es as its \336rst message a) 378.42 530.02 P
(greeting with a message type of) 126 516.02 T
4 F
(MH_GREETING) 281.3 516.02 T
0 F
( and the follo) 360.5 516.02 T
(wing format:) 423.86 516.02 T
4 9 Q
(struct mh_greeting) 144 493.02 T
({) 144 482.02 T
(int mh_type; /* == MH_GREETING */) 172.8 471.02 T
(char mh_version[20]; /* Server version */) 172.8 460.02 T
(};) 144 449.02 T
0 12 Q
0.34 (The) 126 424.02 P
4 F
0.81 (mh_version) 148 424.02 P
0 F
0.34 ( \336eld of this structure holds a string identifying the current) 220 424.02 P
-0.23 (v) 126 410.02 P
-0.23 (ersion of the message handler) 131.82 410.02 P
-0.23 (. If this string does not match the) 272.86 410.02 P
4 F
-0.56 (MH_VERSION) 432 410.02 P
0 F
-0.23 (compiled into the connecting process, the connecting process should be recom-) 126 396.02 P
(piled.) 126 382.02 T
-0.12 (As the \336rst order of b) 126 356.02 P
-0.12 (usiness, a connecting process is e) 228.16 356.02 P
-0.12 (xpected to identify itself) 387.36 356.02 P
(by sending a) 126 342.02 T
4 F
(MH_IDENTIFY) 189.66 342.02 T
0 F
( message to the handler:) 268.86 342.02 T
4 9 Q
(struct mh_ident) 144 319.02 T
({) 144 308.02 T
(int mh_type; /* == MH_IDENTIFY */) 172.8 297.02 T
(char mh_name[MAX_NAME_LEN]; /* The name */) 172.8 286.02 T
(};) 144 275.02 T
0 12 Q
(Where) 126 250.02 T
4 F
(mh_name) 160.98 250.02 T
0 F
( is the name by which this process is to be kno) 211.38 250.02 T
(wn.) 434.06 250.02 T
3.69 (A process may join one or more process groups by sending) 126 224.02 P
4 F
8.87 (MH_JOIN) 453.6 224.02 P
0 F
1.34 (requests. The format of this request is identical to) 126 210.02 P
4 F
3.21 (MH_IDENTIFY) 378.67 210.02 P
0 F
1.34 (, with the) 456.33 210.02 P
(name of the desired group stored in the) 126 196.02 T
4 F
(mh_name) 316.63 196.02 T
0 F
( \336eld.) 367.03 196.02 T
2 F
(1.2.2) 90.31 164.02 T
(Death) 126 164.02 T
0 F
0.57 (A process may cause the message handler to e) 126 146.02 P
0.57 (xit by sending a) 352.3 146.02 P
4 F
1.36 (MH_DIE) 433.9 146.02 P
0 F
0.57 ( mes-) 477.1 146.02 P
1.49 (sage. This message carries no other data. Programmers should be careful in) 126 132.02 P
0.37 (their use of this request, since the results could be considered rather antisocial) 126 118.02 P
(at the wrong time.) 126 104.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Interpr) 108 736.18 T
(ocess Comm) 154.83 736.18 T
(unication Interface) 210.66 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(16) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
7.07 (When the message handler shuts do) 108 678.02 P
7.07 (wn, all processes are sent an) 314.69 678.02 P
4 F
4.49 (MH_SHUTDOWN) 108 664.02 P
0 F
1.87 ( message. The connection will be brok) 187.2 664.02 P
1.87 (en shortly thereafter) 383.28 664.02 P
1.87 (.) 483 664.02 P
1.75 (Most processes will deal with) 108 650.02 P
4 F
4.2 (MH_SHUTDOWN) 262.4 650.02 P
0 F
1.75 ( by cleaning up and shutting) 341.6 650.02 P
(do) 108 636.02 T
(wn.) 119.7 636.02 T
0.96 (If a process tries to send a message after recei) 108 610.02 P
0.96 (ving a shutdo) 335.97 610.02 P
0.96 (wn order) 402.26 610.02 P
0.96 (, it risks) 445.73 610.02 P
0.34 (crashing on a pipe error since the message handler connection may already be) 108 596.02 P
0.07 (brok) 108 582.02 P
0.07 (en. The IPC library interf) 129.88 582.02 P
0.07 (ace detects) 251.68 582.02 P
4 F
0.17 (MH_SHUTDOWN) 307.12 582.02 P
0 F
0.07 ( messages internally) 386.32 582.02 P
0.07 (,) 483 582.02 P
1.01 (and will not allo) 108 568.02 P
1.01 (w an) 189.07 568.02 P
1.01 (y messages to be written once a shutdo) 212.9 568.02 P
1.01 (wn message has) 406.66 568.02 P
1.14 (been detected. Instead, an error will be printed to standard output. Log mes-) 108 554.02 P
-0.22 (sages sent via) 108 540.02 P
4 F
-0.53 (msg_ELog\050\051) 176.33 540.02 P
0 F
-0.22 ( will also be printed to standard output rather than) 248.33 540.02 P
0.62 (written to the message handler connection. In general, a process should try to) 108 526.02 P
(a) 108 512.02 T
(v) 113.09 512.02 T
(oid sending an) 118.85 512.02 T
(y IPC messages after recei) 188.66 512.02 T
(ving a shutdo) 315.66 512.02 T
(wn order) 380.03 512.02 T
(.) 422.35 512.02 T
2 F
(1.2.3) 72.31 480.02 T
(Client Events) 108 480.02 T
0 F
1.01 (There is a hook in the message handler for processes which are interested in) 108 462.02 P
0.55 (learning about the actions of other processes. Such nosy processes can satisfy) 108 448.02 P
-0.25 (their curiosities by joining the \322Client Ev) 108 434.02 P
-0.25 (ents\323 group. Thereafter) 304.3 434.02 P
-0.25 (, the) 414.94 434.02 P
-0.25 (y will start) 435.17 434.02 P
(recei) 108 420.02 T
(ving) 131.02 420.02 T
4 F
(MH_CLIENT) 155.35 420.02 T
0 F
( messages, which all ha) 220.15 420.02 T
(v) 332.89 420.02 T
(e the follo) 338.71 420.02 T
(wing structure:) 387.07 420.02 T
4 9 Q
(struct mh_client) 126 397.02 T
({) 126 386.02 T
(int mh_type;) 154.8 375.02 T
(/* == MH_CLIENT */) 270 375.02 T
(int mh_evtype;) 154.8 364.02 T
(/* The client event type */) 270 364.02 T
(char mh_client[MAX_NAME_LEN];) 154.8 353.02 T
(/* Client */) 311.4 353.02 T
(char mh_group[MAX_NAME_LEN];) 154.8 342.02 T
(/* Group name, when appl */) 306 342.02 T
(};) 126 331.02 T
0 12 Q
0.79 (The) 108 306.02 P
4 F
1.9 (mh_evtype) 130.45 306.02 P
0 F
0.79 ( \336eld contains a code identifying the speci\336c e) 195.25 306.02 P
0.79 (v) 423.93 306.02 P
0.79 (ent that has) 429.75 306.02 P
6.2 (occurred,) 108 292.02 P
4 F
14.89 (mh_client) 162.18 292.02 P
0 F
6.2 ( al) 226.98 292.02 P
6.2 (w) 244.73 292.02 P
6.2 (ays contains the name of the client, and) 253.27 292.02 P
4 F
(mh_group) 108 278.02 T
0 F
( contains a related group name when appropriate.) 165.6 278.02 T
0.52 (When a ne) 108 252.02 P
0.52 (w client connects and identi\336es itself, the message handler informs) 160.05 252.02 P
3.2 (interested processes with a) 108 238.02 P
4 F
7.68 (MH_CLIENT) 252.1 238.02 P
0 F
3.2 ( message and a) 316.9 238.02 P
4 F
7.68 (mh_evtype) 405.01 238.02 P
0 F
3.2 ( of) 469.8 238.02 P
4 F
1.56 (MH_CE_CONNECT) 108 224.02 P
0 F
0.65 (. The) 200.71 224.02 P
4 F
1.56 (mh_client) 229.67 224.02 P
0 F
0.65 ( \336eld contains the name of the ne) 294.47 224.02 P
0.65 (w cli-) 457.69 224.02 P
5.37 (ent. If the ne) 108 210.02 P
5.37 (w process later disconnects, the message handler sends) 184.46 210.02 P
4 F
(MH_CE_DISCONNECT) 108 196.02 T
0 F
( to all of the processes in the client e) 223.2 196.02 T
(v) 397.87 196.02 T
(ents group.) 403.69 196.02 T
1.47 (Whene) 108 170.02 P
1.47 (v) 141.68 170.02 P
1.47 (er a process joins a ne) 147.5 170.02 P
1.47 (w group, processes in the client e) 260.2 170.02 P
1.47 (v) 428.38 170.02 P
1.47 (ents group) 434.2 170.02 P
-0.17 (recei) 108 156.02 P
-0.17 (v) 131.02 156.02 P
-0.17 (e) 136.84 156.02 P
4 F
-0.41 (a MH_CLIENT) 144.99 156.02 P
0 F
-0.17 (message with a) 230.57 156.02 P
4 F
-0.41 (mh_evtype) 306.38 156.02 P
0 F
-0.17 ( \336eld of) 371.18 156.02 P
4 F
-0.41 (MH_CE_JOIN) 411 156.02 P
0 F
-0.17 (.) 483 156.02 P
(The) 108 142.02 T
4 F
(mh_group) 129.66 142.02 T
0 F
( \336eld holds the name of the joined group.) 187.26 142.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Command Pr) 126 736.18 T
(otocol) 200.33 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (17) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 672.02 558 674.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 672.02 558 674.02 R
7 X
0 0 0 1 0 0 0 K
V
72 673.02 117 673.02 2 L
0.5 H
2 Z
0 X
N
126 673.02 558 673.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(1.3) 100.32 678.02 T
(The Command Pr) 126 678.02 T
(otocol) 225.11 678.02 T
0 F
2.15 (The command protocol \050) 126 654.02 P
4 F
5.16 (MT_COMMAND) 251.43 654.02 P
0 F
2.15 (\051 allo) 323.43 654.02 P
2.15 (ws processes to send UI com-) 350.28 654.02 P
0 (mands to one another for e) 126 640.02 P
0 (x) 254.13 640.02 P
0 (ecution. Accordingly) 259.95 640.02 P
0 (, the library interf) 360.49 640.02 P
0 (ace includes) 445.02 640.02 P
1.12 (one function for sending a command to a process for e) 126 626.02 P
1.12 (x) 398.3 626.02 P
1.12 (ecution, and another) 404.12 626.02 P
(function for recei) 126 612.02 T
(ving and e) 209 612.02 T
(x) 258.82 612.02 T
(ecuting commands.) 264.64 612.02 T
(A process sends a command to another process using) 126 586.02 T
4 F
(cp_Exec\050\051) 384.29 586.02 T
0 F
(.) 449.09 586.02 T
7 10 Q
(void) 144 567.35 T
(cp_Exec \050process, command\051) 144 555.35 T
(char *process, *command;) 144 543.35 T
0 12 Q
2.6 (This function tells the process named) 126 518.02 P
7 F
6.24 (process) 323.58 518.02 P
0 F
2.6 ( to e) 373.98 518.02 P
2.6 (x) 399.67 518.02 P
2.6 (ecute the command) 405.49 518.02 P
(string in) 126 504.02 T
7 F
(command) 168.67 504.02 T
0 F
(.) 219.07 504.02 T
-0.23 (Con) 126 478.02 P
-0.23 (v) 145.52 478.02 P
-0.23 (ersely) 151.34 478.02 P
-0.23 (, a process can prepare itself to recei) 179.22 478.02 P
-0.23 (v) 351.9 478.02 P
-0.23 (e command protocol messages) 357.72 478.02 P
(using) 126 464.02 T
4 F
(cp_SetupCmdProto\050\051) 155 464.02 T
0 F
(.) 284.6 464.02 T
7 10 Q
(void) 144 445.35 T
(cp_SetupCmdProto \050\051) 144 433.35 T
0 12 Q
0.61 (This function installs a handler for the) 126 408.02 P
4 F
1.46 (MT_COMMAND) 316.57 408.02 P
0 F
0.61 ( protocol, using the call) 388.57 408.02 P
(sho) 126 394.02 T
(wn belo) 142.37 394.02 T
(w) 180.4 394.02 T
(.) 188.28 394.02 T
4 9 Q
(msg_AddProtoHandler \050MT_COMMAND, cp_RunCommand\051;) 144 371.02 T
0 12 Q
0.65 (The pri) 126 346.02 P
0.65 (v) 161.34 346.02 P
0.65 (ate function) 167.04 346.02 P
4 F
1.56 (cp_RunCommand\050\051) 228.33 346.02 P
0 F
0.65 ( simply calls) 336.33 346.02 P
4 F
1.56 (ui_perform\050\051) 401.95 346.02 P
0 F
0.65 ( on) 488.35 346.02 P
0.63 (the command string recei) 126 332.02 P
0.63 (v) 249.25 332.02 P
0.63 (ed in the message. Naturally) 255.07 332.02 P
0.63 (, a program should not) 393.14 332.02 P
1.48 (call) 126 318.02 P
4 F
3.54 (cp_SetupCmdProto\050\051) 147.8 318.02 P
0 F
1.48 ( unless it has also called) 277.4 318.02 P
4 F
3.54 (ui_init\050\051) 404.92 318.02 P
0 F
1.48 ( and is) 469.72 318.02 P
(actually prepared to perform UI commands.) 126 304.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Interpr) 108 736.18 T
(ocess Comm) 154.83 736.18 T
(unication Interface) 210.66 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(18) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (19) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 2 \245) 126 677 S
0 24 Q
-0.48 (Matters of T) 252 677 S
-0.48 (iming) 365.38 677 S
0 12 Q
-0.09 (There are tw) 126 424 P
-0.09 (o main f) 186.33 424 P
-0.09 (acilities in the library interf) 226.01 424 P
-0.09 (ace for handling time: the time) 356.83 424 P
(type and utility functions, and the timer module. This chapter describes both.) 126 410 T
72 367 558 369 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 367 558 369 R
7 X
0 0 0 1 0 0 0 K
V
72 368 117 368 2 L
0.5 H
2 Z
0 X
N
126 368 558 368 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(2.1) 100.32 373 T
(Finding the Time) 126 373 T
0 F
(The Zebra system uses the uni) 126 349 T
(v) 271.34 349 T
(ersal) 277.16 349 T
4 F
(ZebTime) 302.82 349 T
0 F
( structure to specify times.) 353.22 349 T
4 9 Q
(typedef struct _ZebTime {) 144 326 T
(long) 172.8 315 T
(zt_Sec;) 201.6 315 T
(/* Seconds since 1/1/70) 288 315 T
(*/) 412.2 315 T
(long) 172.8 304 T
(zt_MicroSec;) 201.6 304 T
(/* Additional microseconds) 288 304 T
(*/) 433.8 304 T
(} ZebTime;) 144 293 T
0 12 Q
0.43 (The) 126 268 P
4 F
1.04 (zt_Sec) 148.09 268 P
0 F
0.43 ( \336eld holds the number seconds since the epoch, 1 January 1970) 191.29 268 P
7.93 (GMT) 126 254 P
7.93 (, making it compatible with the system type) 151.78 254 P
4 F
19.03 (time_t) 428.21 254 P
0 F
7.93 (. The) 471.41 254 P
4 F
0.71 (zt_MicroSec) 126 240 P
0 F
0.3 ( \336eld holds an additional number of microseconds be) 205.2 240 P
0.3 (yond the) 462.04 240 P
0.73 (time contained in) 126 226 P
4 F
1.74 (zt_Sec) 214.5 226 P
0 F
0.73 (. At present, the library interf) 257.7 226 P
0.73 (ace does not actually) 401.52 226 P
1.26 (check or restrict the v) 126 212 P
1.26 (alue of) 234.69 212 P
4 F
3.01 (zt_MicroSec) 273.19 212 P
0 F
1.26 (, though some macros will not) 352.39 212 P
0.25 (w) 126 198 P
0.25 (ork correctly unless the microsecond \336eld f) 134.54 198 P
0.25 (alls within the range 0 - 999,999.) 343.87 198 P
0.56 (T) 126 184 P
0.56 (o be safe, applications should try to k) 132.37 184 P
0.56 (eep microseconds within 0 to 999,999,) 315.52 184 P
0.02 (in case that range is enforced in future iterations of the interf) 126 170 P
0.02 (ace. Lastly) 417.05 170 P
0.02 (, just to) 468.28 170 P
0.95 (be sure there is no question, note that times stored in the) 126 156 P
4 F
2.28 (ZebTime) 410.38 156 P
0 F
0.95 ( type are) 460.78 156 P
1.25 (GMT times by de\336nition. It is not necessary \050and indeed meaningless\051 for a) 126 142 P
0.44 (timezone to be associated with a) 126 128 P
4 F
1.06 (ZebTime) 287.28 128 P
0 F
0.44 (. Consequently) 337.68 128 P
0.44 (, local times should) 409.34 128 P
(\336rst be con) 126 114 T
(v) 178.85 114 T
(erted to GMT before being stored in) 184.67 114 T
4 F
(ZebTime) 361.63 114 T
0 F
( structures.) 412.03 114 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Matter) 108 736.18 T
(s of Timing) 134.87 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(20) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.37 (The) 108 678.02 P
4 F
0.88 (defs.h) 130.03 678.02 P
0 F
0.37 ( \336le contains the de\336nition of the) 173.23 678.02 P
4 F
0.88 (ZebTime) 337.45 678.02 P
0 F
0.37 ( type as well as pro-) 387.86 678.02 P
0.86 (totypes for the) 108 664.02 P
4 F
2.07 (ZebTime) 182.91 664.02 P
0 F
0.86 ( utility functions described in this chapter) 233.31 664.02 P
0.86 (. Applica-) 437.15 664.02 P
(tions should include this \336le with the follo) 108 650.02 T
(wing line.) 310.72 650.02 T
4 F
(#include <defs.h>) 212.4 624.02 T
0 F
0.49 (The) 108 598.02 P
4 F
1.17 (ZebTime) 130.15 598.02 P
0 F
0.49 ( structure replaces a time type used in much earlier v) 180.55 598.02 P
0.49 (ersions of) 438.52 598.02 P
2.07 (the library) 108 584.02 P
2.07 (. Since the replacement, the library has used the) 158.95 584.02 P
4 F
4.97 (ZebTime) 409.86 584.02 P
0 F
2.07 ( type) 460.27 584.02 P
1.29 (e) 108 570.02 P
1.29 (xtensi) 113.15 570.02 P
1.29 (v) 141.52 570.02 P
1.29 (ely and almost e) 147.34 570.02 P
1.29 (xclusi) 229.36 570.02 P
1.29 (v) 257.72 570.02 P
1.29 (ely) 263.54 570.02 P
1.29 (. The library still pro) 277.43 570.02 P
1.29 (vides limited support) 382.08 570.02 P
0.63 (for the original time type, b) 108 556.02 P
0.63 (ut the) 242.89 556.02 P
4 F
1.51 (ZebTime) 274.15 556.02 P
0 F
0.63 ( type and its corresponding func-) 324.55 556.02 P
(tions should be used whene) 108 542.02 T
(v) 239.69 542.02 T
(er possible.) 245.51 542.02 T
0.72 (Also, Zebra no longer uses the) 108 516.02 P
4 F
1.72 (time) 261.95 516.02 P
0 F
0.72 ( type as an equi) 290.75 516.02 P
0.72 (v) 367.98 516.02 P
0.72 (alent of the) 373.67 516.02 P
4 F
1.72 (date) 432.82 516.02 P
0 F
0.72 ( type) 461.62 516.02 P
0.7 (found in the RDSS UI library) 108 502.02 P
0.7 (.  Do not use) 252.38 502.02 P
4 F
1.68 (time) 319.88 502.02 P
0 F
0.7 ( in an) 348.68 502.02 P
0.7 (y applications, since it) 376.57 502.02 P
1.23 (con\337icts with other names used by the Zebra interf) 108 488.02 P
1.23 (ace.  If you must use the) 361.66 488.02 P
4 F
2.93 (date) 108 474.02 P
0 F
1.22 ( type rather than) 136.8 474.02 P
4 F
2.93 (ZebTime) 223 474.02 P
0 F
1.22 (, use the) 273.4 474.02 P
4 F
2.93 (UItime) 319.73 474.02 P
0 F
1.22 ( type.) 362.93 474.02 P
4 F
2.93 (UItime) 399.27 474.02 P
0 F
1.22 ( replaces) 442.46 474.02 P
0.82 (the original type de\336nition of) 108 460.02 P
4 F
1.97 (time) 255.76 460.02 P
0 F
0.82 (; it is equi) 284.56 460.02 P
0.82 (v) 334.4 460.02 P
0.82 (alent to the RDSS) 340.1 460.02 P
4 F
1.97 (date) 432.72 460.02 P
0 F
0.82 ( type) 461.52 460.02 P
(and also less ambiguous.) 108 446.02 T
54 403.02 540 405.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 403.02 540 405.02 R
7 X
0 0 0 1 0 0 0 K
V
54 404.02 99 404.02 2 L
0.5 H
2 Z
0 X
N
108 404.02 540 404.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(2.2) 82.32 409.02 T
(T) 108 409.02 T
(ranslating Time) 114.37 409.02 T
0 F
3.28 (In some situations, it is useful to be able to easily con) 108 385.02 P
3.28 (v) 400.3 385.02 P
3.28 (ert between the) 406.12 385.02 P
4 F
-0.58 (ZebTime) 108 371.02 P
0 F
-0.24 ( format, the) 158.4 371.02 P
4 F
-0.58 (UItime) 216.34 371.02 P
0 F
-0.24 ( format, and the formats used by the Unix oper-) 259.54 371.02 P
0.06 (ating system. Certain operations, such as simple time arithmetic, are more eas-) 108 357.02 P
1.38 (ily performed in the nati) 108 343.02 P
1.38 (v) 229.87 343.02 P
1.38 (e format. Other library routines con) 235.69 343.02 P
1.38 (v) 412.74 343.02 P
1.38 (ert) 418.56 343.02 P
4 F
3.31 (ZebTime) 435.6 343.02 P
0 F
1 (times to ASCII strings, split a time into date and time components, and con-) 108 329.02 P
(v) 108 315.02 T
(ersely assemble a) 113.82 315.02 T
4 F
(ZebTime) 200.8 315.02 T
0 F
( from date and time components.) 251.2 315.02 T
2.18 (Note that the) 108 289.02 P
4 F
5.24 (ZebTime) 179.54 289.02 P
0 F
2.18 ( type supports microsecond resolution, while other) 229.94 289.02 P
-0.16 (time types, such as) 108 275.02 P
4 F
-0.38 (UItime) 201.03 275.02 P
0 F
-0.16 ( and the system time type) 244.23 275.02 P
4 F
-0.38 (time_t) 368.61 275.02 P
0 F
-0.16 (, only support a) 411.81 275.02 P
1.17 (resolution of seconds. In other w) 108 261.02 P
1.17 (ords, con) 271.06 261.02 P
1.17 (v) 315.75 261.02 P
1.17 (erting) 321.57 261.02 P
4 F
2.82 (ZebTime) 353.74 261.02 P
0 F
1.17 ( times into other) 404.14 261.02 P
(formats will result in a loss of precision and possibly also accurac) 108 247.02 T
(y) 423.44 247.02 T
(.) 428.66 247.02 T
4.23 (The function) 108 221.02 P
4 F
10.16 (TC_ZtToSys\050\051) 181.12 221.02 P
0 F
4.23 ( con) 267.52 221.02 P
4.23 (v) 291.61 221.02 P
4.23 (erts) 297.43 221.02 P
4 F
10.16 (ZebTime) 321.99 221.02 P
0 F
4.23 ( to system time type) 372.39 221.02 P
4 F
(time_t) 108 207.02 T
0 F
(, which is equi) 151.2 207.02 T
(v) 220.9 207.02 T
(alent to type) 226.6 207.02 T
4 F
(long) 288.92 207.02 T
0 F
(.) 317.72 207.02 T
7 10 Q
(long) 126 188.35 T
(TC_ZtToSys \050zt\051) 126 176.35 T
(const ZebTime *zt;) 126 164.35 T
0 12 Q
-0.2 (The parameter) 108 139.02 P
7 F
-0.48 (zt) 180.24 139.02 P
0 F
-0.2 ( points to the) 194.64 139.02 P
4 F
-0.48 (ZebTime) 259.18 139.02 P
0 F
-0.2 ( structure to be con) 309.58 139.02 P
-0.2 (v) 400.28 139.02 P
-0.2 (erted. The return) 406.1 139.02 P
(v) 108 125.02 T
(alue is the system time within one second of the) 113.7 125.02 T
4 F
(ZebTime) 347.02 125.02 T
0 F
(.) 397.42 125.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(T) 126 736.18 T
(ranslating Time) 130.78 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (21) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(A second function does the re) 126 678.02 T
(v) 268.67 678.02 T
(erse, con) 274.49 678.02 T
(v) 316.66 678.02 T
(erting system time to) 322.48 678.02 T
4 F
(ZebTime) 426.48 678.02 T
0 F
(.) 476.88 678.02 T
7 10 Q
(void) 144 659.35 T
(TC_SysToZt \050sys, zt\051) 144 647.35 T
(long sys;) 144 635.35 T
(ZebTime *zt;) 144 623.35 T
0 12 Q
0 (The) 126 598.02 P
4 F
0.01 (TC_SysToZt\050\051) 147.66 598.02 P
0 F
0 ( function con) 234.06 598.02 P
0 (v) 296.92 598.02 P
0 (erts the system time in the parameter) 302.73 598.02 P
7 F
0.01 (sys) 482.4 598.02 P
0 F
(and stores the result in the) 126 584.02 T
4 F
(ZebTime) 254.65 584.02 T
0 F
( structure pointed to by) 305.05 584.02 T
7 F
(zt) 419.38 584.02 T
0 F
(.) 433.78 584.02 T
(T) 126 558.02 T
(o con) 132.37 558.02 T
(v) 158.22 558.02 T
(ert) 164.04 558.02 T
4 F
(UItime) 179.7 558.02 T
0 F
( to system format, use the) 222.9 558.02 T
4 F
(TC_FccToSys\050\051) 349.22 558.02 T
0 F
( function.) 442.82 558.02 T
7 10 Q
(long) 144 539.35 T
(TC_FccToSys \050fcc\051) 144 527.35 T
(UItime *fcc;) 144 515.35 T
0 12 Q
0.72 (Where) 126 490.02 P
7 F
1.72 (fcc) 161.7 490.02 P
0 F
0.72 ( is a pointer to a) 183.3 490.02 P
4 F
1.72 (UItime) 267.59 490.02 P
0 F
0.72 ( structure. The) 310.79 490.02 P
4 F
1.72 (UItime) 385.59 490.02 P
0 F
0.72 ( type is equi) 428.79 490.02 P
0.72 (v) 488.98 490.02 P
0.72 (a-) 494.68 490.02 P
-0.23 (lent to the original time format) 126 476.02 P
4 F
-0.56 (time) 275.27 476.02 P
0 F
-0.23 ( and the RDSS UI library type) 304.07 476.02 P
4 F
-0.56 (date) 450.77 476.02 P
0 F
-0.23 (. The) 479.57 476.02 P
0.23 (return v) 126 462.02 P
0.23 (alue will be the system format equi) 163.59 462.02 P
0.23 (v) 333.35 462.02 P
0.23 (alent of that time, in the same for-) 339.05 462.02 P
(mat as the standard type) 126 448.02 T
4 F
(time_t) 244.98 448.02 T
0 F
(.) 288.18 448.02 T
4 F
(TC_SysToFcc\050\051) 126 422.02 T
0 F
(con) 226.8 422.02 T
(v) 243.65 422.02 T
(erts system time to) 249.47 422.02 T
4 F
(UItime) 342.8 422.02 T
0 F
(:) 386 422.02 T
7 10 Q
(void) 144 403.35 T
(TC_SysToFcc \050sys, fcc\051) 144 391.35 T
(long sys;) 144 379.35 T
(UItime *fcc) 144 367.35 T
0 12 Q
-0.15 (Where) 126 342.02 P
7 F
-0.35 (sys) 160.83 342.02 P
0 F
-0.15 ( is a time in system format. The con) 182.43 342.02 P
-0.15 (v) 353.09 342.02 P
-0.15 (erted type will be stored in the) 358.91 342.02 P
(location pointed to by) 126 328.02 T
7 F
(fcc) 234 328.02 T
0 F
(.) 255.6 328.02 T
(T) 126 308.02 T
(imes can be translated into te) 132.91 308.02 T
(xt using the) 272.38 308.02 T
4 F
(TC_EncodeTime\050\051) 331.38 308.02 T
0 F
( function.) 439.38 308.02 T
7 10 Q
(void) 144 289.35 T
(TC_EncodeTime \050zt, format, dest\051) 144 277.35 T
(const ZebTime *zt;) 144 265.35 T
(TimePrintFormat format;) 144 253.35 T
(char *dest;) 144 241.35 T
0 12 Q
0.38 (The time in) 126 216.02 P
7 F
0.91 (zt) 185.47 216.02 P
0 F
0.38 ( is written into) 199.87 216.02 P
7 F
0.91 (dest) 274.05 216.02 P
0 F
0.38 ( according to the format in) 302.85 216.02 P
7 F
0.91 (format) 435.76 216.02 P
0 F
0.38 (. The) 478.96 216.02 P
-0.22 (b) 126 202.02 P
-0.22 (uf) 131.76 202.02 P
-0.22 (fer at) 141.46 202.02 P
7 F
-0.54 (dest) 168.99 202.02 P
0 F
-0.22 ( must be lar) 197.79 202.02 P
-0.22 (ge enough to contain the translated te) 253.23 202.02 P
-0.22 (xt string; a safe) 431.02 202.02 P
0.15 (size is 80 characters. Upon return,) 126 188.02 P
7 F
0.35 (dest) 293.5 188.02 P
0 F
0.15 ( contains a null-terminated string rep-) 322.3 188.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Matter) 108 736.18 T
(s of Timing) 134.87 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(22) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.07 (resenting the gi) 108 678.02 P
0.07 (v) 181.83 678.02 P
0.07 (en time. The) 187.65 678.02 P
4 F
0.17 (TimePrintFormat) 251.19 678.02 P
0 F
0.07 ( type, de\336ned in) 359.19 678.02 P
4 F
0.17 (defs.h) 439.8 678.02 P
0 F
0.07 (,) 483 678.02 P
(enumerates the possible formats for the translation.) 108 664.02 T
7 10 Q
(typedef enum) 126 645.35 T
({) 126 633.35 T
(TC_DateOnly,) 162 621.35 T
(/* Only the date part) 270 621.35 T
(*/) 450 621.35 T
(TC_TimeOnly,) 162 609.35 T
(/* Only the time part) 270 609.35 T
(*/) 450 609.35 T
(TC_Full,) 162 597.35 T
(/* The whole works) 270 597.35 T
(*/) 450 597.35 T
(TC_FullUSec) 162 585.35 T
(/* Full with microseconds) 270 585.35 T
(*/) 450 585.35 T
(} TimePrintFormat;) 126 573.35 T
0 12 Q
0.57 (As an e) 108 548.02 P
0.57 (xample, passing the time \32412:34:56.7 GMT on 14 September 1994\325 to) 144.95 548.02 P
4 F
1.12 (TC_EncodeTime\050\051) 108 534.02 P
0 F
0.47 ( writes one of the follo) 216 534.02 P
0.47 (wing strings into) 327.01 534.02 P
7 F
1.12 (dest) 412.08 534.02 P
0 F
0.47 (, depend-) 440.88 534.02 P
(ing upon the) 108 520.02 T
7 F
(format) 171 520.02 T
0 F
( parameter .) 214.2 520.02 T
4 F
(TC_DateOnly) 126 494.02 T
0 F
(14-Sep-94) 234 494.02 T
4 F
(TC_TimeOnly) 126 474.02 T
0 F
(12:34:56) 234 474.02 T
4 F
(TC_Full) 126 454.02 T
0 F
(14-Sep-94,12:34:56) 234 454.02 T
4 F
(TC_FullUSec) 126 434.02 T
0 F
(14-Sep-94,12:34:56.700000) 234 434.02 T
1.74 (If an encoded time string is only needed temporarily) 108 408.02 P
1.74 (, the) 372.45 408.02 P
4 F
4.18 (TC_AscTime\050\051) 399.6 408.02 P
0 F
0.6 (function can be more con) 108 394.02 P
0.6 (v) 231.9 394.02 P
0.6 (enient than) 237.72 394.02 P
4 F
1.45 (TC_EncodeTime\050\051) 294.92 394.02 P
0 F
0.6 ( since it does not) 402.92 394.02 P
(need to be passed a pointer to memory) 108 380.02 T
(.) 292.19 380.02 T
7 10 Q
(const char *) 126 361.35 T
(TC_AscTime \050zt, format\051) 126 349.35 T
(const ZebTime *zt;) 126 337.35 T
(int format;) 126 325.35 T
0 12 Q
0.81 (The parameters are e) 108 300.02 P
0.81 (xactly the same as for) 210.54 300.02 P
4 F
1.95 (TC_EncodeTime\050\051) 322.24 300.02 P
0 F
0.81 (, e) 430.24 300.02 P
0.81 (xcept for) 442.2 300.02 P
-0.27 (the absence of) 108 286.02 P
7 F
-0.64 (dest) 178.84 286.02 P
0 F
-0.27 (. The returned pointer to a string belongs to the library and) 207.64 286.02 P
-0.3 (should not be freed, and the string is only v) 108 272.02 P
-0.3 (alid until the ne) 312.98 272.02 P
-0.3 (xt call. This function) 386.9 272.02 P
2.26 (is the) 108 258.02 P
4 F
5.43 (ZebTime) 141.19 258.02 P
0 F
2.26 ( equi) 191.59 258.02 P
2.26 (v) 217.21 258.02 P
2.26 (alent to the) 222.91 258.02 P
4 F
5.43 (asctime\050\051) 286.02 258.02 P
0 F
2.26 ( C library function, e) 350.83 258.02 P
2.26 (xcept) 460.01 258.02 P
0.59 (there is no trailing ne) 108 244.02 P
0.59 (wline appended to the string. Be careful about passing a) 212.05 244.02 P
1.18 (call to) 108 230.02 P
4 F
2.84 (TC_AscTime\050\051) 143.03 230.02 P
0 F
1.18 ( as more than one ar) 229.43 230.02 P
1.18 (gument to a function, since the) 332.1 230.02 P
(second e) 108 216.02 T
(v) 149.35 216.02 T
(aluation will in) 155.05 216.02 T
(v) 227.24 216.02 T
(alidate the \336rst.) 232.94 216.02 T
0.74 (Con) 108 190.02 P
0.74 (v) 127.52 190.02 P
0.74 (erse to the encoding functions,) 133.34 190.02 P
4 F
1.79 (TC_DecodeTime\050\051) 287.04 190.02 P
0 F
0.74 ( tries to translate a) 395.04 190.02 P
(string into a) 108 176.02 T
4 F
(ZebTime) 168.34 176.02 T
0 F
(.) 218.74 176.02 T
7 10 Q
(bool) 126 157.35 T
(TC_DecodeTime \050string, zt\051) 126 145.35 T
(const char) 126 133.35 T
(*string;) 186 133.35 T
(ZebTime) 126 121.35 T
(*zt;) 198 121.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(T) 126 736.18 T
(ranslating Time) 130.78 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (23) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.25 (The string to translate is passed in) 126 678.02 P
7 F
0.59 (string) 294.04 678.02 P
0 F
0.25 (, and) 337.24 678.02 P
7 F
0.59 (zt) 364.05 678.02 P
0 F
0.25 ( points to the space which) 378.45 678.02 P
0.51 (will hold the translated) 126 664.02 P
4 F
1.23 (ZebTime) 241.37 664.02 P
0 F
0.51 (. The function attempts to decode the string) 291.77 664.02 P
(by interpreting it in this form:) 126 650.02 T
4 F
(dd-mmm-{yy|yyyy},hh:mm:ss.uuuuuu) 230.4 624.02 T
0 F
1.33 (At the v) 126 598.02 P
1.33 (ery least, the \336rst three \336elds\321day) 167.15 598.02 P
1.33 (, month, and year\321must be suc-) 341.02 598.02 P
1 (cessfully decoded for the translation to succeed. The month abbre) 126 584.02 P
1 (viation can) 450 584.02 P
0.35 (be a mix of upper and lo) 126 570.02 P
0.35 (wer case, b) 245.11 570.02 P
0.35 (ut if the \336rst three letters do not match the) 299.21 570.02 P
1.22 (name of a month, the translation f) 126 556.02 P
1.22 (ails. All of the other \336elds\321hour) 295.51 556.02 P
1.22 (, minute,) 460.45 556.02 P
0.7 (second, and microsecond\321def) 126 542.02 P
0.7 (ault to zero unless the) 275.58 542.02 P
0.7 (y could be read from the) 382.86 542.02 P
0.22 (string in the form abo) 126 528.02 P
0.22 (v) 230.69 528.02 P
0.22 (e. If present, the hour should f) 236.51 528.02 P
0.22 (all into the range 0 to 23.) 382.35 528.02 P
0.51 (The function succeeds as long as the month, day) 126 514.02 P
0.51 (, and year can be decoded, in) 361.63 514.02 P
0.02 (which case it stores the translated time into) 126 500.02 P
7 F
0.05 (zt) 336.15 500.02 P
0 F
0.02 ( and returns a non-zero v) 350.55 500.02 P
0.02 (alue. If) 469.99 500.02 P
5.23 (the translation f) 126 486.02 P
5.23 (ails,) 211.67 486.02 P
4 F
12.56 (TC_DecodeTime\050\051) 239.57 486.02 P
0 F
5.23 ( returns zero and lea) 347.57 486.02 P
5.23 (v) 465.55 486.02 P
5.23 (es) 471.37 486.02 P
7 F
12.56 (zt) 489.6 486.02 P
0 F
(unchanged.) 126 472.02 T
0.47 (The) 126 446.02 P
4 F
1.12 (TC_ZtSplit\050\051) 148.13 446.02 P
0 F
0.47 ( function splits a) 234.53 446.02 P
4 F
1.12 (ZebTime) 319.06 446.02 P
0 F
0.47 ( into the f) 369.46 446.02 P
0.47 (amiliar time com-) 417.07 446.02 P
(ponents.) 126 432.02 T
7 10 Q
(void) 144 413.35 T
(TC_ZtSplit \050zt, year, month, day, hour, minute, second, microsec\051) 144 401.35 T
(const ZebTime *zt;) 144 389.35 T
(int *year, *month, *day, *hour, *minute, *second, *microsec;) 144 377.35 T
0 12 Q
1.75 (The) 126 352.02 P
7 F
4.2 (zt) 149.41 352.02 P
0 F
1.75 ( parameter points to the) 163.81 352.02 P
4 F
4.2 (ZebTime) 288.88 352.02 P
0 F
1.75 ( structure to be split. An) 339.28 352.02 P
1.75 (y of the) 463.84 352.02 P
2.22 (other parameters may be passed as) 126 338.02 P
4 F
5.34 (NULL) 308.63 338.02 P
0 F
2.22 (, in which case no v) 337.43 338.02 P
2.22 (alue will be) 443.56 338.02 P
-0.13 (returned for that component. V) 126 324.02 P
-0.13 (alues for the rest of the components are returned) 273.11 324.02 P
(in the ranges noted belo) 126 310.02 T
(w) 240.35 310.02 T
(.) 248.23 310.02 T
7 F
(year) 230.4 290.02 T
4 F
(0 - 99) 316.8 290.02 T
7 F
(month) 230.4 276.02 T
4 F
(1 - 12) 316.8 276.02 T
7 F
(day) 230.4 262.02 T
4 F
(1 - 31) 316.8 262.02 T
7 F
(hour) 230.4 248.02 T
4 F
(0 - 23) 316.8 248.02 T
7 F
(minute) 230.4 234.02 T
4 F
(0 - 59) 316.8 234.02 T
7 F
(second) 230.4 220.02 T
4 F
(0 - 59) 316.8 220.02 T
7 F
(microsec) 230.4 206.02 T
4 F
(0 - 999,999) 316.8 206.02 T
0 F
6.55 (Since one lik) 126 180.02 P
6.55 (es to be able to put together what one tak) 201.65 180.02 P
6.55 (es apart,) 457.46 180.02 P
4 F
(TC_ZtSplit\050\051) 126 166.02 T
0 F
( has a counterpart called) 212.4 166.02 T
4 F
(TC_ZtAssemble\050\051) 332.03 166.02 T
0 F
(.) 440.03 166.02 T
7 10 Q
(void) 144 147.35 T
(TC_ZtAssemble \050zt, year, month, day, hour, minute, second, microsec\051) 144 135.35 T
(ZebTime *zt;) 144 123.35 T
(int year, month, day, hour, minute, second, microsec;) 144 111.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 23
%%Page: "24" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Matter) 108 736.18 T
(s of Timing) 134.87 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(24) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 12 Q
0.41 (TC_ZtAssemble\050\051) 108 678.02 P
0 F
0.17 ( assembles the time components and stores the resulting) 216 678.02 P
4 F
2.07 (ZebTime) 108 664.02 P
0 F
0.86 ( into) 158.4 664.02 P
7 F
2.07 (zt) 184.8 664.02 P
0 F
0.86 (. Each of the components should f) 199.2 664.02 P
0.86 (all into the ranges listed) 367.89 664.02 P
0.84 (abo) 108 650.02 P
0.84 (v) 125.15 650.02 P
0.84 (e for) 130.97 650.02 P
4 F
2.01 (TC_ZtSplit\050\051) 157.97 650.02 P
0 F
0.84 (, e) 244.37 650.02 P
0.84 (xcept for the year) 256.35 650.02 P
0.84 (. The year will be interpreted) 342.51 650.02 P
-0.03 (correctly if it f) 108 636.02 P
-0.03 (alls in either of the ranges 0 - 100 and 1900 - 1999. The v) 177.44 636.02 P
-0.03 (alue of) 453.04 636.02 P
7 F
(microsec) 108 622.02 T
0 F
( is not actually check) 165.6 622.02 T
(ed; instead, it is copied as is into) 266.8 622.02 T
7 F
(zt) 425.8 622.02 T
0 F
(.) 440.2 622.02 T
54 579.02 540 581.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 579.02 540 581.02 R
7 X
0 0 0 1 0 0 0 K
V
54 580.02 99 580.02 2 L
0.5 H
2 Z
0 X
N
108 580.02 540 580.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(2.3) 82.32 585.02 T
(Comparing Time) 108 585.02 T
0 F
4.39 (The library header \336le) 108 561.02 P
4 F
10.52 (defs.h) 235.51 561.02 P
0 F
4.39 ( contains a fe) 278.71 561.02 P
4.39 (w macros for comparing) 355.21 561.02 P
4 F
(ZebTime) 108 547.02 T
0 F
( structures:) 158.4 547.02 T
4 F
(TC_Less) 214.39 547.02 T
0 F
(,) 264.79 547.02 T
4 F
(TC_LessEq) 270.79 547.02 T
0 F
(, and) 335.59 547.02 T
4 F
(TC_Eq) 361.92 547.02 T
0 F
(.) 397.92 547.02 T
4 9 Q
(# define TC_Less\050t1,t2\051) 126 524.02 T
(\134) 255.6 524.02 T
(\050\050\050t1\051.zt_Sec == \050t2\051.zt_Sec\051 ?) 154.8 513.02 T
(\134) 327.6 513.02 T
(\050\050t1\051.zt_MicroSec < \050t2\051.zt_MicroSec\051 :) 183.6 502.02 T
(\134) 394.2 502.02 T
(\050\050t1\051.zt_Sec < \050t2\051.zt_Sec\051\051) 183.6 491.02 T
(# define TC_LessEq\050t1,t2\051) 126 469.02 T
(\134) 270 469.02 T
(\050\050\050t1\051.zt_Sec == \050t2\051.zt_Sec\051 ?) 154.8 458.02 T
(\134) 327.6 458.02 T
(\050\050t1\051.zt_MicroSec <= \050t2\051.zt_MicroSec\051 :) 183.6 447.02 T
(\134) 399.6 447.02 T
(\050\050t1\051.zt_Sec <= \050t2\051.zt_Sec\051\051) 183.6 436.02 T
(# define TC_Eq\050t1,t2\051 \050\050\050t1\051.zt_Sec == \050t2\051.zt_Sec\051 && \134) 126 414.02 T
(\050\050t1\051.zt_MicroSec == \050t2\051.zt_MicroSec\051\051) 212.4 403.02 T
0 12 Q
0.88 (In all three macros, the parameters) 108 378.02 P
7 F
2.11 (t1) 282.21 378.02 P
0 F
0.88 ( and) 296.61 378.02 P
7 F
2.11 (t2) 321.69 378.02 P
0 F
0.88 ( are) 336.09 378.02 P
4 F
2.11 (ZebTime) 358.5 378.02 P
0 F
0.88 ( v) 408.9 378.02 P
0.88 (ariables. Note) 418.48 378.02 P
0.05 (that) 108 364.02 P
7 F
0.11 (t1) 129.04 364.02 P
0 F
0.05 ( and) 143.45 364.02 P
7 F
0.11 (t2) 166.86 364.02 P
0 F
0.05 ( are not pointers to) 181.26 364.02 P
4 F
0.11 (ZebTime) 274.48 364.02 P
0 F
0.05 ( structures, and the) 324.88 364.02 P
0.05 (y may be e) 415.48 364.02 P
0.05 (v) 467.64 364.02 P
0.05 (al-) 473.34 364.02 P
(uated more than once in the e) 108 350.02 T
(xpanded e) 249.12 350.02 T
(xpression.) 297.92 350.02 T
0.44 (More importantly) 108 324.02 P
0.44 (, note that these macros assume the microseconds \336eld to be) 192.65 324.02 P
-0.22 (less than a whole second \050less than one million\051. If that assumption is not v) 108 310.02 P
-0.22 (alid,) 465 310.02 P
(the comparisons are indeterminate.) 108 296.02 T
54 253.02 540 255.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 253.02 540 255.02 R
7 X
0 0 0 1 0 0 0 K
V
54 254.02 99 254.02 2 L
0.5 H
2 Z
0 X
N
108 254.02 540 254.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(2.4) 82.32 259.02 T
(Decoding P) 108 259.02 T
(eriods of Time) 173.65 259.02 T
0 F
2.11 (The routine) 108 235.02 P
4 F
5.06 (InterpDTime\050\051) 170.88 235.02 P
0 F
2.11 ( may be used to interpret simple delta time) 264.48 235.02 P
0.97 (speci\336cations, as may be used for triggers or time interv) 108 221.02 P
0.97 (als. The time format) 385.76 221.02 P
1.13 (understood is simply an inte) 108 207.02 P
1.13 (ger) 247.69 207.02 P
1.13 (, optionally follo) 262.53 207.02 P
1.13 (wed by a single letter) 344.84 207.02 P
1.13 (, either) 451.54 207.02 P
2.23 (\322s\323 \050seconds\051, \322m\323 \050minutes\051, \322h\323 \050hours\051, or \322d\323 \050days\051. If no quali\336er is) 108 193.02 P
(present, the delta time is interpreted as seconds.) 108 179.02 T
4 F
(InterpDTime\050\051) 108 153.02 T
0 F
( is called as:) 201.6 153.02 T
7 10 Q
(int) 126 134.35 T
(InterpDTime \050dtime\051) 126 122.35 T
(char *dtime;) 126 110.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 24
%%Page: "25" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Timer Module) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (25) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.46 (Where) 126 678.02 P
1 10 Q
0.39 (dtime) 161.44 678.02 P
0 12 Q
0.46 ( is a delta time in the abo) 185.88 678.02 P
0.46 (v) 309.28 678.02 P
0.46 (e format. The return v) 315.1 678.02 P
0.46 (alue is the actual) 422.29 678.02 P
0.54 (delta time, in seconds. If the gi) 126 664.02 P
0.54 (v) 276.91 664.02 P
0.54 (en delta time could not be interpreted, zero is) 282.73 664.02 P
(returned.) 126 650.02 T
72 607.02 558 609.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 607.02 558 609.02 R
7 X
0 0 0 1 0 0 0 K
V
72 608.02 117 608.02 2 L
0.5 H
2 Z
0 X
N
126 608.02 558 608.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(2.5) 100.32 613.02 T
(The Timer Module) 126 613.02 T
0 F
-0.29 (The timer module runs as a separate process, and k) 126 589.02 P
-0.29 (eeps track of all time-related) 367.87 589.02 P
0.68 (issues in the system. The rest of this chapter describes the library interf) 126 575.02 P
0.68 (ace to) 475 575.02 P
(the timer system.) 126 561.02 T
(T) 126 535.02 T
(o use the timer library routines, you must include the timer header \336le:) 132.37 535.02 T
4 9 Q
(# include <timer.h>) 144 512.02 T
72 470.02 558 472.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 470.02 558 472.02 R
7 X
0 0 0 1 0 0 0 K
V
72 471.02 117 471.02 2 L
0.5 H
2 Z
0 X
N
126 471.02 558 471.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(2.6) 100.32 476.02 T
(Getting the Current Time) 126 476.02 T
0 F
(T) 126 452.02 T
(o obtain the current system time, simply call:) 132.37 452.02 T
7 10 Q
(void) 144 433.35 T
(tl_Time \050zt\051) 144 421.35 T
(ZebTime *zt;) 144 409.35 T
0 12 Q
0.47 (The system time, to the nearest second, is copied into the) 126 384.02 P
4 F
1.13 (ZebTime) 408.14 384.02 P
0 F
0.47 ( structure) 458.54 384.02 P
(referenced by) 126 370.02 T
7 F
(zt) 194.63 370.02 T
0 F
(.) 209.03 370.02 T
(An older function returns a) 126 344.02 T
4 F
(UItime) 258.97 344.02 T
0 F
(.) 302.17 344.02 T
7 10 Q
(tl_GetTime \050t\051) 144 325.35 T
(UItime *t;) 144 313.35 T
0 12 Q
(On return, *) 126 288.02 T
7 F
(t) 184.32 288.02 T
0 F
( contains the current time.) 191.52 288.02 T
72 245.02 558 247.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 245.02 558 247.02 R
7 X
0 0 0 1 0 0 0 K
V
72 246.02 117 246.02 2 L
0.5 H
2 Z
0 X
N
126 246.02 558 246.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(2.7) 100.32 251.02 T
(Requesting Timer Events) 126 251.02 T
0 F
0.95 (The main purpose of the timer module is to inform processes when a certain) 126 227.02 P
0 (time has arri) 126 213.02 P
0 (v) 185.69 213.02 P
0 (ed. These noti\336cations can be requested in an absolute or relati) 191.51 213.02 P
0 (v) 492.85 213.02 P
0 (e) 498.67 213.02 P
(sense, and may be optionally repeated.) 126 199.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 25
%%Page: "26" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Matter) 108 736.18 T
(s of Timing) 134.87 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(26) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(2.7.1) 72.31 678.02 T
(Specifying Timer Events) 108 678.02 T
0 F
(T) 108 660.02 T
(o request a relati) 114.37 660.02 T
(v) 193.72 660.02 T
(e timer e) 199.54 660.02 T
(v) 241.22 660.02 T
(ent, use:) 247.04 660.02 T
7 10 Q
(int) 126 641.35 T
(tl_RelativeReq \050func, param, delay, incr\051) 126 629.35 T
(void \050*func\051 \050\051;) 126 617.35 T
(void *param;) 126 605.35 T
(int delay, incr;) 126 593.35 T
0 12 Q
(F) 108 568.02 T
(or absolute timer e) 114.49 568.02 T
(v) 203.84 568.02 T
(ents, use:) 209.66 568.02 T
7 10 Q
(int) 126 549.35 T
(tl_AbsoluteReq \050func, param, when, incr\051) 126 537.35 T
(void \050*func\051 \050\051;) 126 525.35 T
(void *param;) 126 513.35 T
(ZebTime *when;) 126 501.35 T
(int incr;) 126 489.35 T
0 12 Q
2.19 (In either case,) 108 464.02 P
7 F
5.25 (func) 184.53 464.02 P
0 F
2.19 ( is a function to be called after the time has elapsed,) 213.33 464.02 P
7 F
0.15 (param) 108 450.02 P
0 F
0.06 ( is a parameter to pass to that function, and) 144 450.02 P
7 F
0.15 (incr) 353.6 450.02 P
0 F
0.06 ( is the repeat interv) 382.4 450.02 P
0.06 (al.) 474.34 450.02 P
0.25 (F) 108 436.02 P
0.25 (or relati) 114.49 436.02 P
0.25 (v) 152.09 436.02 P
0.25 (e e) 157.91 436.02 P
0.25 (v) 171.51 436.02 P
0.25 (ents,) 177.33 436.02 P
7 F
0.59 (delay) 202.91 436.02 P
0 F
0.25 ( is the period of time to pass before the noti\336cation) 238.91 436.02 P
1.35 (occurs. F) 108 422.02 P
1.35 (or absolute e) 153.16 422.02 P
1.35 (v) 216.88 422.02 P
1.35 (ents,) 222.7 422.02 P
7 F
3.24 (when) 249.38 422.02 P
0 F
1.35 ( is the time at which the noti\336cation is to) 278.18 422.02 P
(happen.) 108 408.02 T
1.72 (Both) 108 382.02 P
7 F
4.13 (delay) 136.06 382.02 P
0 F
1.72 ( and) 172.06 382.02 P
7 F
4.13 (incr) 198.83 382.02 P
0 F
1.72 ( are represented in fractional seconds; to obtain the) 227.63 382.02 P
2.58 (right v) 108 368.02 P
2.58 (alue, multiply the time period of interest by the prede\336ned symbol) 141.94 368.02 P
4 F
(INCFRAC) 108 354.02 T
0 F
(. This mechanism allo) 158.4 354.02 T
(ws sub-second interv) 264.1 354.02 T
(als to be speci\336ed.) 365.11 354.02 T
-0.02 (If) 108 328.02 P
7 F
-0.04 (incr) 118.97 328.02 P
0 F
-0.02 ( is zero, then the e) 147.77 328.02 P
-0.02 (v) 234.7 328.02 P
-0.02 (ent will only occur once.  Otherwise timer noti\336ca-) 240.52 328.02 P
(tions will occur e) 108 314.02 T
(v) 190.69 314.02 T
(ery) 196.51 314.02 T
4 F
(incr/INCFRAC) 214.84 314.02 T
0 F
( seconds until the e) 301.24 314.02 T
(v) 392.93 314.02 T
(ent is cancelled.) 398.75 314.02 T
0.02 (F) 108 288.02 P
0.02 (or both types of e) 114.49 288.02 P
0.02 (v) 198.28 288.02 P
0.02 (ents, the return v) 204.1 288.02 P
0.02 (alue will be an inte) 284.52 288.02 P
0.02 (ger slot number) 375.76 288.02 P
0.02 (, which) 450.65 288.02 P
(may be used to cancel the e) 108 274.02 T
(v) 239.66 274.02 T
(ent later) 245.48 274.02 T
(. \050See Section) 283.81 274.02 T
(2.8 on page) 353.14 274.02 T
(27.\051) 411.79 274.02 T
(When a timer e) 108 248.02 T
(v) 181.34 248.02 T
(ent occurs, the gi) 187.16 248.02 T
(v) 268.85 248.02 T
(en function will be called as:) 274.67 248.02 T
7 10 Q
(\050*func\051 \050zt, param\051) 126 229.35 T
(ZebTime *zt;) 126 217.35 T
(void *param;) 126 205.35 T
0 12 Q
-0.16 (where) 108 180.02 P
7 F
-0.38 (zt) 140.16 180.02 P
0 F
-0.16 ( is the current time, and) 154.56 180.02 P
7 F
-0.38 (param) 269.91 180.02 P
0 F
-0.16 ( is the parameter that w) 305.91 180.02 P
-0.16 (as gi) 417.3 180.02 P
-0.16 (v) 439.17 180.02 P
-0.16 (en in the) 444.99 180.02 P
(call to either) 108 166.02 T
4 F
(tl_RelativeReq\050\051) 170.99 166.02 T
0 F
( or) 286.19 166.02 T
4 F
(tl_AbsoluteReq\050\051) 302.18 166.02 T
0 F
(.) 417.38 166.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 26
%%Page: "27" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Cancelling Timer Events) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (27) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.59 (The older interf) 126 678.02 P
1.59 (ace functions are still a) 204.37 678.02 P
1.59 (v) 321.13 678.02 P
1.59 (ailable for backw) 326.83 678.02 P
1.59 (ards compatibility) 413.19 678.02 P
1.59 (.) 501 678.02 P
(F) 126 664.02 T
(or relati) 132.49 664.02 T
(v) 169.85 664.02 T
(e requests, use) 175.67 664.02 T
7 10 Q
(int) 144 645.35 T
(tl_AddRelativeEvent \050func, param, delay, incr\051) 144 633.35 T
(void \050*func\051 \050\051, *param;) 144 621.35 T
(int delay, incr;) 144 609.35 T
0 12 Q
(F) 126 584.02 T
(or absolute requests, use) 132.49 584.02 T
7 10 Q
(int) 144 565.35 T
(tl_AddAbsoluteEvent \050func, param, when, incr\051) 144 553.35 T
(void \050*func\051 \050\051, *param;) 144 541.35 T
(UItime *when;) 144 529.35 T
(int incr;) 144 517.35 T
0 12 Q
(The handler will be called as before:) 126 492.02 T
7 10 Q
(\050*func\051 \050t, param\051) 144 473.35 T
(UItime *t;) 144 461.35 T
(void *param;) 144 449.35 T
2 12 Q
(2.7.2) 90.31 418.02 T
(Events f) 126 418.02 T
(or Changing Times) 172.44 418.02 T
0 F
(Applications may specify a function to be called on each time change.) 126 400.02 T
7 10 Q
(void) 144 381.35 T
(tl_ChangeHandler \050func\051) 144 369.35 T
(void \050*func\051 \050\051;) 144 357.35 T
0 12 Q
(The function) 126 332.02 T
7 F
(func) 190.66 332.02 T
0 F
( is called for each time change as follo) 219.46 332.02 T
(ws:) 403.78 332.02 T
7 10 Q
(\050*func\051 \050zt\051) 144 313.35 T
(ZebTime *zt;) 144 301.35 T
0 12 Q
2.88 (T) 126 276.02 P
2.88 (o cancel the time change handler) 132.37 276.02 P
2.88 (, call) 303.9 276.02 P
4 F
6.91 (tl_ChangeHandler\050\051) 335.98 276.02 P
0 F
2.88 ( with a) 465.58 276.02 P
4 F
(NULL) 126 262.02 T
0 F
( ar) 154.8 262.02 T
(gument.) 166.91 262.02 T
72 219.02 558 221.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 219.02 558 221.02 R
7 X
0 0 0 1 0 0 0 K
V
72 220.02 117 220.02 2 L
0.5 H
2 Z
0 X
N
126 220.02 558 220.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(2.8) 100.32 225.02 T
(Cancelling Timer Events) 126 225.02 T
0 F
(T) 126 201.02 T
(o cancel a speci\336c timer e) 132.37 201.02 T
(v) 256.37 201.02 T
(ent, use) 262.19 201.02 T
4 F
(tl_Cancel\050\051) 301.85 201.02 T
0 F
( as follo) 381.05 201.02 T
(ws:) 419.41 201.02 T
7 10 Q
(void) 144 182.35 T
(tl_Cancel \050slot\051) 144 170.35 T
(int slot;) 144 158.35 T
0 12 Q
5.8 (Where) 126 133.02 P
7 F
13.91 (slot) 166.78 133.02 P
0 F
5.8 ( is the slot number returned by) 195.58 133.02 P
4 F
13.91 (tl_RelativeReq\050\051) 385.8 133.02 P
0 F
5.8 (,) 501 133.02 P
4 F
107.53 (tl_AbsoluteReq\050\051) 126 119.02 P
0 F
44.8 (,) 241.2 119.02 P
4 F
107.53 (tl_AddRelativeEvent\050\051) 292 119.02 P
0 F
44.8 (, or) 443.2 119.02 P
4 F
0.98 (tl_AddAbsoluteEvent\050\051) 126 105.02 P
0 F
0.41 (. The e) 277.2 105.02 P
0.41 (v) 310.7 105.02 P
0.41 (ent associated with) 316.52 105.02 P
7 F
0.98 (slot) 412.07 105.02 P
0 F
0.41 ( is cancelled,) 440.87 105.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 27
%%Page: "28" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Matter) 108 736.18 T
(s of Timing) 134.87 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(28) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.83 (and no further noti\336cations for that e) 108 678.02 P
0.83 (v) 289.32 678.02 P
0.83 (ent will be sent by the timer) 295.14 678.02 P
0.83 (. Ho) 433.45 678.02 P
0.83 (we) 454.64 678.02 P
0.83 (v) 468.34 678.02 P
0.83 (er) 474.16 678.02 P
0.83 (,) 483 678.02 P
1.65 (noti\336cations of e) 108 664.02 P
1.65 (v) 191.67 664.02 P
1.65 (ents which occurred before the cancellation might still be) 197.49 664.02 P
1.26 (present in the message queue if messages are not being handled e) 108 650.02 P
1.26 (xpediently) 435.34 650.02 P
(enough.) 108 636.02 T
(T) 108 610.02 T
(o cancel all outstanding timer e) 114.37 610.02 T
(v) 264.38 610.02 T
(ents, use:) 270.2 610.02 T
7 10 Q
(void) 126 591.35 T
(tl_AllCancel \050\051;) 126 579.35 T
0 12 Q
-0.18 (The timer will deli) 108 554.02 P
-0.18 (v) 196.83 554.02 P
-0.18 (er no more e) 202.65 554.02 P
-0.18 (v) 262.12 554.02 P
-0.18 (ents to the application after recei) 267.94 554.02 P
-0.18 (ving the can-) 423.71 554.02 P
(cellation.) 108 540.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 28
%%Page: "29" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (29) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 3 \245) 126 677 S
0 24 Q
-0.48 (Geograph) 252 677 S
-0.48 (y) 342.67 677 S
0 12 Q
2.16 (Zebra operates not only in time b) 126 424 P
2.16 (ut also in geographical space. Hence the) 298.06 424 P
-0.26 (library includes some rudimentary types and functions for dealing with geogra-) 126 410 P
(ph) 126 396 T
(y and geographical information.) 137.94 396 T
72 353 558 355 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 353 558 355 R
7 X
0 0 0 1 0 0 0 K
V
72 354 117 354 2 L
0.5 H
2 Z
0 X
N
126 354 558 354 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(3.1) 100.32 359 T
(Locations) 126 359 T
0 F
0.87 (Geographic locations are represented internally by the) 126 335 P
4 F
2.08 (Location) 395.01 335 P
0 F
0.87 ( data type,) 452.61 335 P
(de\336ned in the library header \336le) 126 321 T
4 F
(defs.h) 282.64 321 T
0 F
(:) 325.84 321 T
4 9 Q
(typedef struct s_Location {) 144 298 T
(float) 172.8 287 T
(l_lat;) 230.4 287 T
(float) 172.8 276 T
(l_lon;) 230.4 276 T
(float) 172.8 265 T
(l_alt;) 230.4 265 T
(} Location;) 144 254 T
0 12 Q
0.56 (Longitudes are proper longitudes\321ne) 126 229 P
0.56 (g) 309.8 229 P
0.56 (ati) 315.74 229 P
0.56 (v) 327.44 229 P
0.56 (e for the western hemisphere. Lon-) 333.26 229 P
0.81 (gitudes should f) 126 215 P
0.81 (all into the range [-180.0, 180.0]. Latitudes are positv) 204.16 215 P
0.81 (e in the) 467.06 215 P
0.66 (northern hemisphere and ne) 126 201 P
0.66 (g) 261.42 201 P
0.66 (ati) 267.36 201 P
0.66 (v) 279.06 201 P
0.66 (e in the southern hemisphere, f) 284.88 201 P
0.66 (alling into the) 436.02 201 P
(range [-90.0, 90.0].) 126 187 T
72 144 558 146 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 144 558 146 R
7 X
0 0 0 1 0 0 0 K
V
72 145 117 145 2 L
0.5 H
2 Z
0 X
N
126 145 558 145 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(3.2) 100.32 150 T
(Regular Grids) 126 150 T
0 F
0.28 (The) 126 126 P
4 F
0.66 (RGrid) 147.94 126 P
0 F
0.28 ( structure describes re) 183.94 126 P
0.28 (gular grids of one, tw) 289.55 126 P
0.28 (o, or three dimensions.) 393.52 126 P
0.62 (The number of dimensions being used in the grid must be noted in a separate) 126 112 P
(v) 126 98 T
(ariable. The) 131.7 98 T
4 F
(RGrid) 192.01 98 T
0 F
( type is de\336ned in) 228.01 98 T
4 F
(defs.h) 316.34 98 T
0 F
(as follo) 366.74 98 T
(ws:) 402.11 98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 29
%%Page: "30" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Geograph) 108 736.18 T
(y) 150.33 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(30) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(typedef struct s_RGrid {) 126 680.02 T
(float) 154.8 669.02 T
(rg_Xspacing;) 183.6 669.02 T
(float) 154.8 658.02 T
(rg_Yspacing;) 183.6 658.02 T
(float) 154.8 647.02 T
(rg_Zspacing;) 183.6 647.02 T
(int) 154.8 636.02 T
(rg_nX, rg_nY, rg_nZ;) 183.6 636.02 T
(} RGrid;) 126 625.02 T
0 12 Q
-0.07 (Re) 108 600.02 P
-0.07 (gular grids are usually tied to geographical space and kilometer coordinates.) 121.15 600.02 P
0.7 (An associated) 108 586.02 P
4 F
1.68 (Location) 179.38 586.02 P
0 F
0.7 ( structure may pro) 236.98 586.02 P
0.7 (vide latitude and longitude coor-) 326.55 586.02 P
1.6 (dinates of the origin of the grid on the globe. The) 108 572.02 P
6 F
1.6 (y) 364.88 572.02 P
0 F
1.6 (dimension is northerly) 374.8 572.02 P
4.22 (\050zero compass de) 108 558.02 P
4.22 (grees\051 while the) 199.57 558.02 P
6 F
4.22 (x) 291.89 558.02 P
0 F
4.22 (dimension is easterly \05090 compass) 304.45 558.02 P
4.78 (de) 108 544.02 P
4.78 (grees\051, and) 119.15 544.02 P
6 F
4.78 (z) 184.35 544.02 P
0 F
4.78 ( is the v) 189.02 544.02 P
4.78 (ertical axis. When not otherwise ob) 240.85 544.02 P
4.78 (vious, the) 434.55 544.02 P
4 F
-0.62 (rg_Xspacing) 108 530.02 P
0 F
-0.26 (,) 187.2 530.02 P
4 F
-0.62 (rg_Yspacing) 192.94 530.02 P
0 F
-0.26 (, and) 272.14 530.02 P
4 F
-0.62 (rg_Zspacing) 297.95 530.02 P
0 F
-0.26 ( structure members are) 377.15 530.02 P
0.67 (in units of kilometers. Note that this means that the latitude/longitude coordi-) 108 516.02 P
0.16 (nates of a grid must be projected onto a kilometer grid, restricting the accurate) 108 502.02 P
0.41 (use of the grid to the re) 108 488.02 P
0.41 (gion around the origin used to project the data. At dis-) 221.59 488.02 P
2.69 (tances f) 108 474.02 P
2.69 (ar from the origin of projection the grid becomes inaccurate. The) 147.55 474.02 P
4 F
3.74 (rg_nX) 108 460.02 P
0 F
1.56 (,) 144 460.02 P
4 F
3.74 (rg_nY) 151.56 460.02 P
0 F
1.56 (, and) 186.01 460.02 P
4 F
3.74 (rg_nZ) 215.46 460.02 P
0 F
1.56 ( members contain the number of grid elements) 251.46 460.02 P
0.71 (along the easterly) 108 446.02 P
0.71 (, northerly) 193.28 446.02 P
0.71 (, and v) 243.2 446.02 P
0.71 (ertical dimensions, respecti) 276.77 446.02 P
0.71 (v) 408.86 446.02 P
0.71 (ely) 414.68 446.02 P
0.71 (, of a three-) 428.57 446.02 P
(dimensional, right-handed orthogonal grid.) 108 432.02 T
54 389.02 540 391.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 389.02 540 391.02 R
7 X
0 0 0 1 0 0 0 K
V
54 390.02 99 390.02 2 L
0.5 H
2 Z
0 X
N
108 390.02 540 390.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(3.3) 82.32 395.02 T
(Scales and Offsets) 108 395.02 T
0 F
(The) 108 371.02 T
4 F
(ScaleInfo) 129.66 371.02 T
0 F
( structure can be used to store scaling information.) 194.46 371.02 T
4 9 Q
(typedef struct s_ScaleInfo {) 126 348.02 T
(float) 154.8 337.02 T
(s_Scale;) 183.6 337.02 T
(float) 154.8 326.02 T
(s_Offset;) 183.6 326.02 T
(} ScaleInfo;) 126 315.02 T
0 12 Q
0.48 (Scale information is usually used to con) 108 290.02 P
0.48 (v) 302.36 290.02 P
0.48 (ert between byte and \337oat data, such) 308.18 290.02 P
0.71 (as when con) 108 276.02 P
0.71 (v) 168.25 276.02 P
0.71 (erting a re) 174.07 276.02 P
0.71 (gular grid of \337oating point v) 223.96 276.02 P
0.71 (alues into a raster image.) 363.53 276.02 P
0.87 (The) 108 262.02 P
4 F
2.09 (s_Scale) 130.53 262.02 P
0 F
0.87 ( member holds the ratio of the \337oating point data range to the) 180.93 262.02 P
0.25 (byte data range. Usually the \337oating point data is bounded by some maximum) 108 248.02 P
0.22 (and minimum, and the range of the byte v) 108 234.02 P
0.22 (alues is usually the full eight bits, or) 310.45 234.02 P
-0.24 (255. The) 108 220.02 P
4 F
-0.58 (s_Offset) 153.17 220.02 P
0 F
-0.24 ( member holds the of) 210.77 220.02 P
-0.24 (fset, i.e., the dif) 311.49 220.02 P
-0.24 (ference from zero, of) 385.45 220.02 P
-0.15 (the \337oating point range. F) 108 206.02 P
-0.15 (or e) 231.54 206.02 P
-0.15 (xample, the follo) 249.53 206.02 P
-0.15 (wing code sets the scale and of) 330.59 206.02 P
-0.15 (f-) 478.01 206.02 P
0.21 (set for con) 108 192.02 P
0.21 (v) 158.6 192.02 P
0.21 (erting a range of \337oating point data with maximum) 164.42 192.02 P
4 F
0.51 (max) 414.64 192.02 P
0 F
0.21 ( and mini-) 436.24 192.02 P
(mum) 108 178.02 T
4 F
(min) 135.67 178.02 T
0 F
( into eight-bit data.) 157.27 178.02 T
4 9 Q
(ScaleInfo Scale;) 126 155.02 T
(unsigned char bytes[ARRAY_SIZE];) 126 144.02 T
(float floats[ARRAY_SIZE];) 126 133.02 T
(float max, min;) 126 122.02 T
(int i;) 126 111.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 30
%%Page: "31" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Altitudes) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (31) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(/* ... */) 144 680.02 T
(Scale.s_Scale = \050max - min\051 / 255.0;) 144 658.02 T
(Scale.s_Offset = min;) 144 647.02 T
0 12 Q
(The array of \337oat data could then be con) 126 622.02 T
(v) 320.14 622.02 T
(erted to bytes as follo) 325.96 622.02 T
(ws.) 428.98 622.02 T
4 9 Q
(for \050i = 0; i < ARRAY_SIZE; ++i\051) 144 599.02 T
(bytes[i] = \050floats[i] - Scale.s_Offset\051 / Scale.s_Scale;) 172.8 588.02 T
0 12 Q
0.26 (The byte data could be con) 126 563.02 P
0.26 (v) 256.44 563.02 P
0.26 (erted back to \337oating point v) 262.26 563.02 P
0.26 (alues with this calcu-) 401.58 563.02 P
(lation:) 126 549.02 T
4 9 Q
(for \050i = 0; i < ARRAY_SIZE; ++i\051) 144 526.02 T
(floats[i] = \050\050float\051bytes[i]\051 * Scale.s_Scale + Scale.s_Offset;) 172.8 515.02 T
72 473.02 558 475.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 473.02 558 475.02 R
7 X
0 0 0 1 0 0 0 K
V
72 474.02 117 474.02 2 L
0.5 H
2 Z
0 X
N
126 474.02 558 474.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(3.4) 100.32 479.02 T
(Altitudes) 126 479.02 T
0 F
0.67 (The altitude of a location, when v) 126 455.02 P
0.67 (alid or rele) 291.37 455.02 P
0.67 (v) 344.4 455.02 P
0.67 (ant, def) 350.1 455.02 P
0.67 (aults to units of kilome-) 386.64 455.02 P
1.64 (ters abo) 126 441.02 P
1.64 (v) 165.11 441.02 P
1.64 (e mean sea le) 170.93 441.02 P
1.64 (v) 239.85 441.02 P
1.64 (el \050\322km abo) 245.67 441.02 P
1.64 (v) 305.42 441.02 P
1.64 (e MSL\323\051. When the altitude units of a) 311.23 441.02 P
1.61 (location are important, the) 126 427.02 P
4 F
3.87 (Location) 262.09 427.02 P
0 F
1.61 ( structure is often associated with an) 319.69 427.02 P
4 F
(AltUnitType) 126 413.02 T
0 F
(, also de\336ned in the library header \336le) 205.2 413.02 T
4 F
(defs.h) 390.17 413.02 T
0 F
(.) 433.37 413.02 T
4 9 Q
(typedef enum) 144 395.02 T
({) 144 384.02 T
(AU_kmMSL,) 172.8 373.02 T
(/* km MSL */) 230.4 373.02 T
(AU_mMSL,) 172.8 362.02 T
(/* m MSL */) 230.4 362.02 T
(AU_kmAGL,) 172.8 351.02 T
(/* km AGL */) 230.4 351.02 T
(AU_mAGL,) 172.8 340.02 T
(/* m AGL */) 230.4 340.02 T
(AU_mb,) 172.8 329.02 T
(/* mb \050pressure altitude\051 */) 230.4 329.02 T
(} AltUnitType;) 144 318.02 T
0 12 Q
0.72 (An altitude unit is kno) 126 293.02 P
0.72 (wn by a short reference name and a longer) 235.91 293.02 P
0.72 (, descripti) 445.11 293.02 P
0.72 (v) 492.85 293.02 P
0.72 (e) 498.67 293.02 P
2.16 (name. The altitude units interf) 126 279.02 P
2.16 (ace contains tw) 279.5 279.02 P
2.16 (o functions for retrie) 357.68 279.02 P
2.16 (ving the) 462.84 279.02 P
2.21 (short and long names from an enumerated v) 126 265.02 P
2.21 (alue:) 352.12 265.02 P
4 F
5.3 (au_UnitsName\050\051) 380.66 265.02 P
0 F
2.21 ( and) 481.46 265.02 P
4 F
(au_LongUnitsName\050\051) 126 251.02 T
0 F
(.) 255.6 251.02 T
7 10 Q
(const char *) 144 232.35 T
(au_UnitsName \050atype\051) 144 220.35 T
(AltUnitType) 144 208.35 T
(atype;) 216 208.35 T
(const char *) 144 184.35 T
(au_LongUnitsName \050atype\051) 144 172.35 T
(AltUnitType) 144 160.35 T
(atype;) 216 160.35 T
0 12 Q
1.57 (Each function tak) 126 135.02 P
1.57 (es an) 213.66 135.02 P
4 F
3.76 (AltUnitType) 244.11 135.02 P
0 F
1.57 (,) 323.31 135.02 P
7 F
3.76 (atype) 330.88 135.02 P
0 F
1.57 (, as the only parameter and) 366.88 135.02 P
1.95 (returns a pointer to the corresponding short or long name of the type. The) 126 121.02 P
0.18 (string returned by each function points to memory internal to the interf) 126 107.02 P
0.18 (ace and) 467.51 107.02 P
(should not be modi\336ed or freed.) 126 93.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 31
%%Page: "32" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Geograph) 108 736.18 T
(y) 150.33 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(32) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.2 (The altitude units interf) 108 678.02 P
0.2 (ace also associates a print format, in) 221.48 678.02 P
4 F
0.49 (printf\050\051) 399.53 678.02 P
0 F
0.2 ( style,) 457.13 678.02 P
-0.08 (for \337oating point v) 108 664.02 P
-0.08 (alues of each type of altitude units. This frees an application) 197.81 664.02 P
-0.28 (from kno) 108 650.02 P
-0.28 (wing that it is useless to print an altitude in units of \322m MSL\323 to se) 151.74 650.02 P
-0.28 (v) 468.85 650.02 P
-0.28 (en) 474.67 650.02 P
-0.14 (decimal places. The function) 108 636.02 P
4 F
-0.35 (au_PrintFormat\050\051) 249.06 636.02 P
0 F
-0.14 ( returns the format string.) 364.26 636.02 P
7 10 Q
(const char *) 126 617.35 T
(au_PrintFormat \050atype\051) 126 605.35 T
(AltUnitType) 126 593.35 T
(atype;) 198 593.35 T
0 12 Q
1.58 (Just lik) 108 568.02 P
1.58 (e) 143.8 568.02 P
4 F
3.79 (au_UnitsName\050\051) 153.71 568.02 P
0 F
1.58 ( and) 254.51 568.02 P
4 F
3.79 (au_UnitsLongName\050\051) 280.99 568.02 P
0 F
1.58 (,) 410.6 568.02 P
7 F
3.79 (atype) 418.17 568.02 P
0 F
1.58 ( is the) 454.17 568.02 P
-0.22 (enumerated altitude type, and the returned string points to the print format. The) 108 554.02 P
(format string should not be freed or modi\336ed.) 108 540.02 T
0.12 (T) 108 514.02 P
0.12 (w) 114.37 514.02 P
0.12 (o con) 122.92 514.02 P
0.12 (v) 148.88 514.02 P
0.12 (enience routines e) 154.7 514.02 P
0.12 (xist for printing an altitude v) 241.4 514.02 P
0.12 (alue gi) 379.35 514.02 P
0.12 (v) 411.5 514.02 P
0.12 (en the units of) 417.32 514.02 P
0.12 (the v) 108 500.02 P
0.12 (alue. The \336rst,) 131.49 500.02 P
4 F
0.3 (au_AltLabel\050\051) 204.18 500.02 P
0 F
0.12 (, prints a string using the altitude unit\325) 297.79 500.02 P
0.12 (s) 481.33 500.02 P
(short name. The second,) 108 486.02 T
4 F
(au_AltLongLabel\050\051) 227.98 486.02 T
0 F
(, uses the long name.) 350.38 486.02 T
7 10 Q
(const char *) 126 467.35 T
(au_AltLabel \050alt, atype\051) 126 455.35 T
(double) 126 443.35 T
(alt;) 198 443.35 T
(AltUnitType) 126 431.35 T
(atype;) 198 431.35 T
(const char *) 126 407.35 T
(au_LongAltLabel \050alt, atype\051) 126 395.35 T
(double) 126 383.35 T
(alt;) 198 383.35 T
(AltUnitType) 126 371.35 T
(atype;) 198 371.35 T
0 12 Q
0.7 (These functions return a nicely formatted,) 108 346.02 P
4 F
1.68 (NULL) 316.48 346.02 P
0 F
0.7 (-terminated string containing) 345.28 346.02 P
2.13 (the gi) 108 332.02 P
2.13 (v) 136.83 332.02 P
2.13 (en altitude and the units, in either the short form or the long form,) 142.65 332.02 P
2.62 (respecti) 108 318.02 P
2.62 (v) 145.02 318.02 P
2.62 (ely) 150.84 318.02 P
2.62 (. The returned string will be v) 164.72 318.02 P
2.62 (alid until the ne) 323.13 318.02 P
2.62 (xt call to either) 405.81 318.02 P
4 F
3.2 (au_AltLabel\050\051) 108 304.02 P
0 F
1.33 ( or) 201.6 304.02 P
4 F
3.2 (au_LongAltLabel\050\051) 220.26 304.02 P
0 F
1.33 (, and should not be modi\336ed) 342.66 304.02 P
(or freed.) 108 290.02 T
1.29 (The last function in the altitude interf) 108 264.02 P
1.29 (ace con) 294.95 264.02 P
1.29 (v) 332.08 264.02 P
1.29 (erts a string to an enumerated) 337.9 264.02 P
1.1 (altitude unit type. In addition to the long and short names, each altitude unit) 108 250.02 P
2.01 (type has zero or more alias names by which the units may be kno) 108 236.02 P
2.01 (wn. F) 446.83 236.02 P
2.01 (or) 476 236.02 P
-0.21 (e) 108 222.02 P
-0.21 (xample, \322km MSL\323 has aliases of \322km > MSL\323, \322km\323, and \322kilometers\323. Mil-) 113.15 222.02 P
0.18 (libar units ha) 108 208.02 P
0.18 (v) 170.78 208.02 P
0.18 (e alternate names of \322mbar\323, \322hP) 176.6 208.02 P
0.18 (a\323, and \322millibar\323. T) 335.93 208.02 P
0.18 (able) 434.48 208.02 P
0.18 (1 lists) 457.48 208.02 P
0.78 (all of the recognized unit types. The function) 108 194.02 P
4 F
1.88 (au_ConvertName\050\051) 333.23 194.02 P
0 F
0.78 ( tries to) 448.43 194.02 P
1.53 (\336nd the long name, short name, or alias of one of the unit types in a gi) 108 180.02 P
1.53 (v) 468.85 180.02 P
1.53 (en) 474.67 180.02 P
(string.) 108 166.02 T
7 10 Q
(bool) 126 147.35 T
(au_ConvertName \050name, atype\051) 126 135.35 T
(char) 126 123.35 T
(*name;) 198 123.35 T
(AltUnitType) 126 111.35 T
(*atype;) 198 111.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 32
%%Page: "33" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Con) 126 736.18 T
(ver) 143.14 736.18 T
(ting Between Coor) 156.82 736.18 T
(dinate Systems) 236.15 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (33) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.77 (If) 126 678.02 P
4 F
1.86 (au_ConvertName\050\051) 137.77 678.02 P
0 F
0.77 ( succeeds in recognizing the name of a unit type in) 252.97 678.02 P
0.88 (the string) 126 664.02 P
7 F
2.11 (name) 175.76 664.02 P
0 F
0.88 (, it returns) 204.56 664.02 P
4 F
2.11 (TRUE) 259.19 664.02 P
0 F
0.88 ( and stores the unit type in *) 287.99 664.02 P
7 F
2.11 (atype) 429.8 664.02 P
0 F
0.88 (. Other-) 465.8 664.02 P
(wise the function returns) 126 650.02 T
4 F
(FALSE) 247.98 650.02 T
0 F
(.) 283.98 650.02 T
(The follo) 126 624.02 T
(wing table contains a summary of the kno) 170.03 624.02 T
(wn altitude units.) 370.7 624.02 T
72 455.02 558 457.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 455.02 558 457.02 R
7 X
0 0 0 1 0 0 0 K
V
72 456.02 117 456.02 2 L
0.5 H
2 Z
0 X
N
126 456.02 558 456.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(3.5) 100.32 461.02 T
(Con) 126 461.02 T
(ver) 148.85 461.02 T
(ting Between Coor) 167.1 461.02 T
(dinate Systems) 272.87 461.02 T
0 F
0.07 (A set of routines e) 126 437.02 P
0.07 (xists for the con) 214.1 437.02 P
0.07 (v) 290.83 437.02 P
0.07 (ersion of points between the latitude-longi-) 296.65 437.02 P
-0.1 (tude system and an X-Y system in kilometers. These routines need some w) 126 423.02 P
-0.1 (ork,) 485 423.02 P
(b) 126 409.02 T
(ut the) 131.76 409.02 T
(y w) 158.58 409.02 T
(ork reasonably well for con) 176.12 409.02 T
(v) 307.61 409.02 T
(ersions in) 313.43 409.02 T
(v) 359.28 409.02 T
(olving a small spatial area.) 365.04 409.02 T
0.43 (Before con) 126 383.02 P
0.43 (v) 178.93 383.02 P
0.43 (ersions may tak) 184.75 383.02 P
0.43 (e place, the origin for the Cartesian space must be) 260.82 383.02 P
(speci\336ed with) 126 369.02 T
4 F
(cvt_Origin\050\051) 196 369.02 T
0 F
(:) 282.4 369.02 T
7 10 Q
(void) 144 350.35 T
(cvt_Origin \050lat, lon\051) 144 338.35 T
(float lat, lon;) 144 326.35 T
0 12 Q
0.73 (Where) 126 301.02 P
7 F
1.76 (lat) 161.71 301.02 P
0 F
0.73 ( and) 183.31 301.02 P
7 F
1.76 (lon) 208.1 301.02 P
0 F
0.73 ( are the latitude and longitude of the origin point. North) 229.7 301.02 P
0.73 (latitudes are positi) 126 287.02 P
0.73 (v) 215.16 287.02 P
0.73 (e, while south latitudes are ne) 220.98 287.02 P
0.73 (g) 367.11 287.02 P
0.73 (ati) 373.05 287.02 P
0.73 (v) 384.75 287.02 P
0.73 (e. Lik) 390.57 287.02 P
0.73 (e) 419.18 287.02 P
0.73 (wise, east longi-) 424.21 287.02 P
(tudes are positi) 126 273.02 T
(v) 198.36 273.02 T
(e while west longitudes are ne) 204.18 273.02 T
(g) 348.97 273.02 T
(ati) 354.91 273.02 T
(v) 366.61 273.02 T
(e.) 372.43 273.02 T
(Thenceforth, points may be con) 126 247.02 T
(v) 277.82 247.02 T
(erted into Cartesian space as follo) 283.64 247.02 T
(ws:) 445.64 247.02 T
7 10 Q
(void) 144 228.35 T
(cvt_ToXY \050lat, lon, x, y\051) 144 216.35 T
(float lat, lon, *x, *y;) 144 204.35 T
0 12 Q
-0.3 (Where) 126 179.02 P
7 F
-0.71 (lat) 160.68 179.02 P
0 F
-0.3 ( and) 182.28 179.02 P
7 F
-0.71 (lon) 205.02 179.02 P
0 F
-0.3 ( are the latitude and longitude of the point to be con) 226.62 179.02 P
-0.3 (v) 471.19 179.02 P
-0.3 (erted.) 477.01 179.02 P
2.22 (On return, the equi) 126 165.02 P
2.22 (v) 223.02 165.02 P
2.22 (alent cartesian locations, relati) 228.72 165.02 P
2.22 (v) 381.06 165.02 P
2.22 (e to the origin, will be) 386.88 165.02 P
(stored in *) 126 151.02 T
7 F
(x) 176.66 151.02 T
0 F
( and *) 183.86 151.02 T
7 F
(y) 213.19 151.02 T
0 F
(.) 219.61 151.02 T
1 F
(T) 72 608.02 T
(ABLE 1.) 78.92 608.02 T
3 9 Q
(Altitude units) 144 608.02 T
2 8 Q
(Shor) 150 584.68 T
(t name) 168.38 584.68 T
(Long name) 213 584.68 T
(Format) 303 584.68 T
(Aliases) 357 584.68 T
0 9 Q
(km MSL) 150 570.02 T
(km abo) 213 570.02 T
(v) 239.61 570.02 T
(e MSL) 243.98 570.02 T
(%.2f) 303 570.02 T
(\322km > MSL\323, \322km\323, \322kilometers\323) 357 570.02 T
(m MSL) 150 555.02 T
(meters abo) 213 555.02 T
(v) 252.1 555.02 T
(e Mean) 256.47 555.02 T
(Seal Le) 213 544.02 T
(v) 240.02 544.02 T
(el) 244.38 544.02 T
(%.0f) 303 555.02 T
(\322m > MSL\323, \322m\323, \322meters\323) 357 555.02 T
(km A) 150 529.02 T
(GL) 169.89 529.02 T
(km A) 213 529.02 T
(GL) 232.89 529.02 T
(%.2f) 303 529.02 T
(\322km > A) 357 529.02 T
(GL\323) 388.21 529.02 T
(m A) 150 514.02 T
(GL) 165.39 514.02 T
(meters A) 213 514.02 T
(GL) 245.38 514.02 T
(%.0f) 303 514.02 T
(\322m > A) 357 514.02 T
(GL\323) 383.71 514.02 T
(mb) 150 499.02 T
(millibars) 213 499.02 T
(%.0f) 303 499.02 T
(\322mbar\323, \322hP) 357 499.02 T
(a\323, \322millibar\323) 401.35 499.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 33
%%Page: "34" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Geograph) 108 736.18 T
(y) 150.33 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(34) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(T) 108 678.02 T
(o con) 114.37 678.02 T
(v) 140.22 678.02 T
(ert in the opposite direction, use) 146.04 678.02 T
4 F
(cvt_ToLatLon\050\051) 303.02 678.02 T
0 F
(:) 403.82 678.02 T
7 10 Q
(void) 126 659.35 T
(cvt_ToLatLon \050x, y, lat, lon\051) 126 647.35 T
(float x, y, *lat, *lon;) 126 635.35 T
0 12 Q
(Where) 108 610.02 T
7 F
(x) 142.98 610.02 T
0 F
( and) 150.18 610.02 T
7 F
(y) 173.51 610.02 T
0 F
( are the coordinates of the point in cartesian space.) 180.71 610.02 T
(Lastly) 108 584.02 T
(, it is possible to retrie) 137.22 584.02 T
(v) 243.59 584.02 T
(e the current origin.) 249.41 584.02 T
7 10 Q
(int) 126 565.35 T
(cvt_GetOrigin \050lat, lon\051) 126 553.35 T
(float) 126 541.35 T
(*lat, *lon;) 162 541.35 T
0 12 Q
2.26 (If an origin has not been set, then the function returns zero. Otherwise, it) 108 516.02 P
2.68 (returns non-zero,) 108 502.02 P
7 F
6.43 (*lat) 198.33 502.02 P
0 F
2.68 ( contains the origin latitude in de) 227.13 502.02 P
2.68 (grees North, and) 401 502.02 P
7 F
(*lon) 108 488.02 T
0 F
( contains the longitude in de) 136.8 488.02 T
(grees East.) 272.28 488.02 T
2.57 (The) 108 462.02 P
4 F
6.17 (cvt_ShowOrigin\050\051) 132.23 462.02 P
0 F
2.57 ( function simply logs the current origin to the) 247.43 462.02 P
(e) 108 448.02 T
(v) 113.03 448.02 T
(ent logger) 118.85 448.02 T
(.) 166.51 448.02 T
7 10 Q
(void) 126 429.35 T
(cvt_ShowOrigin \050\051) 126 417.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 34
%%Page: "35" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (35) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 4 \245) 126 677 S
0 24 Q
-0.48 (The Plot Description) 252 677 S
-0.48 (Library) 252 647 S
0 12 Q
-0.03 (This chapter describes the library for maintaining plot descriptions. All manip-) 126 424 P
1.25 (ulation of the plot description data structure should be performed with these) 126 410 P
(routines.) 126 396 T
72 353 558 355 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 353 558 355 R
7 X
0 0 0 1 0 0 0 K
V
72 354 117 354 2 L
0.5 H
2 Z
0 X
N
126 354 558 354 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(4.1) 100.32 359 T
(Preliminaries) 126 359 T
0 F
0.4 (T) 126 335 P
0.4 (o use the plot description library) 132.37 335 P
0.4 (, you must ha) 289.26 335 P
0.4 (v) 354.9 335 P
0.4 (e the follo) 360.72 335 P
0.4 (wing include direc-) 409.88 335 P
(ti) 126 321 T
(v) 132.37 321 T
(es in your source \336le.) 138.19 321 T
4 9 Q
(# include <ui.h>) 144 298 T
(# include <pd.h>) 144 287 T
0 12 Q
0.14 (T) 126 262 P
0.14 (w) 132.37 262 P
0.14 (o data types are de\336ned in this header \336le; one type is opaque and the other) 140.92 262 P
-0.07 (is not. The) 126 248 P
4 F
-0.17 (raw_plot_description) 179.79 248 P
0 F
-0.07 ( data type describes a plot description) 323.79 248 P
1.3 (in e) 126 234 P
1.3 (xternal format, suitable for transfer between processes or storage in disk) 144.78 234 P
(\336les. The de\336nition of a) 126 220 T
4 F
(raw_plot_description) 244 220 T
0 F
( follo) 388 220 T
(ws.) 413.36 220 T
4 9 Q
(typedef struct rawpd {) 144 197 T
(int rp_len;) 172.8 186 T
(/* Length of the PD data */) 259.2 186 T
(char *rp_data;) 172.8 175 T
(/* The PD information */) 259.2 175 T
(} raw_plot_description;) 144 164 T
0 12 Q
1.47 (The) 126 139 P
4 F
3.52 (rp_data) 149.13 139 P
0 F
1.47 ( \336eld points to a) 199.53 139 P
4 F
3.52 (NULL) 287.2 139 P
0 F
1.47 (-terminated character array containing) 316 139 P
1.59 (the plot description in te) 126 125 P
1.59 (xt form; the) 248.84 125 P
4 F
3.81 (rp_len) 313.27 125 P
0 F
1.59 ( \336eld holds the length of that) 356.47 125 P
4.02 (array) 126 111 P
4.02 (, e) 149.87 111 P
4.02 (xcluding the terminator) 165.04 111 P
4.02 (. In other w) 285.07 111 P
4.02 (ords,) 352.33 111 P
4 F
9.65 (rp_len) 383.02 111 P
0 F
4.02 ( al) 426.22 111 P
4.02 (w) 441.78 111 P
4.02 (ays equals) 450.32 111 P
4 F
(strlen\050rp_data\051) 126 97 T
0 F
(.) 234 97 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 35
%%Page: "36" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Plot Description Librar) 108 736.18 T
(y) 223.61 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(36) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 673.02 540 686.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
153 680.02 540 680.02 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 680.02 144 680.02 2 L
0 Z
N
0 0 612 792 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE  1) 54 667.02 T
3 9 Q
(A plot descr) 189 667.02 T
(iption in r) 236.65 667.02 T
(a) 273.08 667.02 T
(w f) 277.9 667.02 T
(or) 289.13 667.02 T
(m) 297.36 667.02 T
4 F
(GLOBAL) 126 647.02 T
(pd-name:) 154.8 636.02 T
(mesonet) 241.2 636.02 T
(plot-type:) 154.8 625.02 T
(CAP) 241.2 625.02 T
(plot-mode:) 154.8 614.02 T
(real-time) 241.2 614.02 T
(frame-rate:) 154.8 603.02 T
(10) 241.2 603.02 T
(button-map:) 154.8 592.02 T
(std-strip-chart) 241.2 592.02 T
(origin:) 154.8 581.02 T
(-100 -200 100) 241.2 581.02 T
(trigger:) 154.8 570.02 T
(5m) 241.2 570.02 T
(mesonet) 126 559.02 T
(platform:) 154.8 548.02 T
(mesonet) 241.2 548.02 T
(field:) 154.8 537.02 T
(winds) 241.2 537.02 T
(representation:) 154.8 526.02 T
(vector) 241.2 526.02 T
(color-code-field:) 154.8 515.02 T
(equiv-potential-temp) 246.6 515.02 T
(color-table:) 154.8 504.02 T
(10-shades) 241.2 504.02 T
(arrow-scale:) 154.8 493.02 T
(10) 241.2 493.02 T
0 12 Q
1.76 (The plot description library generates ra) 108 468.02 P
1.76 (w plot descriptions using a speci\336c) 308.89 468.02 P
(format.) 108 454.02 T
7 11 Q
(\245) 117 434.02 T
0 12 Q
(Each component be) 131.4 434.02 T
(gins with the name of the component on a line by) 225.86 434.02 T
(itself, with no leading white space.) 131.4 420.02 T
7 11 Q
(\245) 117 403.02 T
0 12 Q
(Each parameter within that component follo) 131.4 403.02 T
(ws the name of the compo-) 342.73 403.02 T
(nent, one per line. Each parameter line be) 131.4 389.02 T
(gins with one tab, follo) 330.83 389.02 T
(wed by) 441.53 389.02 T
(the name of the parameter) 131.4 375.02 T
(, a colon, another tab, and \336nally the v) 256.21 375.02 T
(alue of) 440.22 375.02 T
(that parameter) 131.4 361.02 T
(. Each parameter line contains e) 199.72 361.02 T
(xactly one parameter and) 352.82 361.02 T
(v) 131.4 347.02 T
(alue pair) 137.1 347.02 T
(. If only whitespace \050spaces, tabs, and ne) 178.09 347.02 T
(wlines\051 follo) 373.74 347.02 T
(ws the) 434.44 347.02 T
(colon, then the parameter has an empty v) 131.4 333.02 T
(alue.) 328.39 333.02 T
(An e) 108 307.02 T
(xample of this format appears in Figure) 130.81 307.02 T
(1.) 323.78 307.02 T
1.57 (Ho) 108 281.02 P
1.57 (we) 122.36 281.02 P
1.57 (v) 136.06 281.02 P
1.57 (er) 141.88 281.02 P
1.57 (, the plot description routines actually accept a much looser syntax) 150.72 281.02 P
0.93 (when parsing ra) 108 267.02 P
0.93 (w plot descriptions. A component be) 186.32 267.02 P
0.93 (gins with a single w) 367.42 267.02 P
0.93 (ord,) 467 267.02 P
1.11 (the component name, an) 108 253.02 P
1.11 (ywhere on a line. Each parameter line follo) 228.47 253.02 P
1.11 (wing the) 443.22 253.02 P
0.75 (component name will belong to that component, up until the ne) 108 239.02 P
0.75 (xt component) 419.59 239.02 P
-0.28 (line or the end of the \336le or string. A parameter line contains a parameter name,) 108 225.02 P
3.58 (colon, and the parameter v) 108 211.02 P
3.58 (alue, in that order and possibly separated by) 249.65 211.02 P
0.43 (whitespace. Blank lines and comments are permitted an) 108 197.02 P
0.43 (ywhere, where a com-) 378.1 197.02 P
0.47 (ment be) 108 183.02 P
0.47 (gins with an e) 146.62 183.02 P
0.47 (xclamation point \050\324!\325\051 and ends with the follo) 214.86 183.02 P
0.47 (wing ne) 434.84 183.02 P
0.47 (w-) 473.34 183.02 P
1.11 (line. P) 108 169.02 P
1.11 (arameter v) 139.6 169.02 P
1.11 (alues be) 191.39 169.02 P
1.11 (gin with the \336rst non-whitespace character after the) 231.3 169.02 P
1.06 (colon and end with the last non-whitespace character before a comment or a) 108 155.02 P
0.37 (ne) 108 141.02 P
0.37 (wline. This syntax is easy to create with a te) 119.03 141.02 P
0.37 (xt editor) 334.18 141.02 P
0.37 (, \337e) 374.41 141.02 P
0.37 (xible, and portable.) 392.6 141.02 P
0.16 (More information about plot description syntax can be found in) 108 127.02 P
6 F
0.16 (The Advanced) 417.53 127.02 P
(User\325) 108 113.02 T
(s Manual) 134.84 113.02 T
0 F
(.) 179.84 113.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 36
%%Page: "37" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Loading and Con) 126 736.18 T
(ver) 199.14 736.18 T
(ting Plot Descriptions) 212.83 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (37) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.94 (About the only thing that the plot description library can do with ra) 126 678.02 P
1.94 (w plot) 471.73 678.02 P
0.88 (descriptions is create them, and con) 126 664.02 P
0.88 (v) 301.24 664.02 P
0.88 (ert them into internal form. The internal) 307.06 664.02 P
2.39 (representation is simply called a) 126 650.02 P
4 F
5.73 (plot_description) 295.58 650.02 P
0 F
2.39 (, and its format is) 410.78 650.02 P
(opaque to routines outside of the PD library) 126 636.02 T
(.) 335.53 636.02 T
1.16 (Error messages, in general, are logged with) 126 610.02 P
4 F
2.78 (msg_ELog\050\051) 345.05 610.02 P
0 F
1.16 (, since the user is) 417.05 610.02 P
-0.14 (unlik) 126 596.02 P
-0.14 (ely to see messages sent to the standard output. If a process has connected) 150.55 596.02 P
7.32 (to the Zebra message handler) 126 582.02 P
7.32 (, the messages will be sent to the) 295.43 582.02 P
4 F
-0.21 (EventLogger) 126 568.02 P
0 F
-0.09 (. Otherwise error messages appear on the terminal. \050See Chap-) 204.54 568.02 P
(ter) 126 554.02 T
(1 for information about the message handler) 144.66 554.02 T
(.\051) 356.63 554.02 T
72 511.02 558 513.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 511.02 558 513.02 R
7 X
0 0 0 1 0 0 0 K
V
72 512.02 117 512.02 2 L
0.5 H
2 Z
0 X
N
126 512.02 558 512.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(4.2) 100.32 517.02 T
(Loading and Con) 126 517.02 T
(ver) 223.52 517.02 T
(ting Plot Descriptions) 241.78 517.02 T
0 F
-0.25 (T) 126 493.02 P
-0.25 (o con) 132.37 493.02 P
-0.25 (v) 157.97 493.02 P
-0.25 (ert a ra) 163.79 493.02 P
-0.25 (w plot description to internal form, use) 196.43 493.02 P
4 F
-0.6 (pd_Load\050\051) 384.67 493.02 P
0 F
-0.25 ( as follo) 449.47 493.02 P
-0.25 (ws:) 487.33 493.02 P
7 10 Q
(plot_description) 144 474.35 T
(pd_Load \050raw\051) 144 462.35 T
(raw_plot_description *raw;) 144 450.35 T
0 12 Q
-0.19 (If the gi) 126 425.02 P
-0.19 (v) 163.31 425.02 P
-0.19 (en ra) 169.13 425.02 P
-0.19 (w plot description can be successfully con) 192.42 425.02 P
-0.19 (v) 393.43 425.02 P
-0.19 (erted to internal form,) 399.26 425.02 P
0.31 (the return v) 126 411.02 P
0.31 (alue will be the plot description in that form. Otherwise, the return) 181.64 411.02 P
0.55 (v) 126 397.02 P
0.55 (alue will be) 131.7 397.02 P
4 F
1.33 (NULL) 192.35 397.02 P
0 F
0.55 (, and a message identifying the of) 221.15 397.02 P
0.55 (fending line will be sent) 385.8 397.02 P
(to the e) 126 383.02 T
(v) 161.03 383.02 T
(ent logger) 166.85 383.02 T
(.) 214.51 383.02 T
(Plot descriptions can also be read directly from a \336le with) 126 357.02 T
4 F
(pd_Read\050\051) 406.3 357.02 T
0 F
(:) 471.1 357.02 T
7 10 Q
(plot_description) 144 338.35 T
(pd_Read \050file\051) 144 326.35 T
(char *file;) 144 314.35 T
0 12 Q
0.37 (This function also returns a plot description if successful, otherwise the return) 126 289.02 P
(v) 126 275.02 T
(alue is) 131.7 275.02 T
4 F
(NULL) 165.7 275.02 T
0 F
(.) 194.5 275.02 T
(T) 126 249.02 T
(o con) 132.37 249.02 T
(v) 158.22 249.02 T
(ert an internal plot description to ra) 164.04 249.02 T
(w form, use) 333.17 249.02 T
4 F
(pd_Unload\050\051) 393.16 249.02 T
0 F
(:) 472.36 249.02 T
7 10 Q
(raw_plot_description *) 144 230.35 T
(pd_Unload \050pd\051) 144 218.35 T
(plot_description pd;) 144 206.35 T
0 12 Q
2.09 (The return v) 126 181.02 P
2.09 (alue will be a ra) 189.19 181.02 P
2.09 (w plot description corresponding to the gi) 273.99 181.02 P
2.09 (v) 486.85 181.02 P
2.09 (en) 492.67 181.02 P
0.64 (internal plot description) 126 167.02 P
4 F
1.53 (pd) 245.57 167.02 P
0 F
0.64 (. Do not free the returned pointer; instead, use the) 259.97 167.02 P
4 F
(pd_RPDRelease\050\051) 126 153.02 T
0 F
( function described belo) 234 153.02 T
(w) 349.34 153.02 T
(.) 357.23 153.02 T
(T) 126 127.02 T
(o delete a plot description, use one of the follo) 132.37 127.02 T
(wing.) 354.71 127.02 T
7 10 Q
(pd_Release \050pd\051) 144 108.35 T
(plot_description pd;) 144 96.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 37
%%Page: "38" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Plot Description Librar) 108 736.18 T
(y) 223.61 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(38) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(or) 108 678.02 T
7 10 Q
(pd_RPDRelease \050rpd\051) 126 659.35 T
(raw_plot_description *rpd;) 126 647.35 T
0 12 Q
0.6 (The) 108 622.02 P
4 F
1.43 (pd_Release\050\051) 130.26 622.02 P
0 F
0.6 ( function will delete a plot description in internal form,) 216.66 622.02 P
-0.25 (while) 108 608.02 P
4 F
-0.59 (pd_RPDRelease\050\051) 137.42 608.02 P
0 F
-0.25 ( may be used to delete ra) 245.42 608.02 P
-0.25 (w plot descriptions which) 363.07 608.02 P
(were obtained from) 108 594.02 T
4 F
(pd_Unload\050\051) 204.97 594.02 T
0 F
(.) 284.17 594.02 T
54 551.02 540 553.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 551.02 540 553.02 R
7 X
0 0 0 1 0 0 0 K
V
54 552.02 99 552.02 2 L
0.5 H
2 Z
0 X
N
108 552.02 540 552.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(4.3) 82.32 557.02 T
(Operations on PD Components) 108 557.02 T
0 F
0.02 (A fe) 108 533.02 P
0.02 (w routines ha) 128.71 533.02 P
0.02 (v) 193.18 533.02 P
0.02 (e been pro) 199 533.02 P
0.02 (vided for operating on the indi) 248.84 533.02 P
0.02 (vidual components) 394.98 533.02 P
0.5 (of an internal plot description. Their primary purpose is to f) 108 519.02 P
0.5 (acilitate the cop) 399.15 519.02 P
0.5 (y-) 476 519.02 P
(ing of PD components from one plot description to another) 108 505.02 T
(.) 390.98 505.02 T
11.02 (T) 108 479.02 P
11.02 (o e) 114.37 479.02 P
11.02 (xtract a single component from a plot description, use) 139.54 479.02 P
4 F
(pd_ReadComponent\050\051) 108 465.02 T
0 F
( as follo) 237.6 465.02 T
(ws:) 275.96 465.02 T
7 10 Q
(plot_description) 126 446.35 T
(pd_ReadComponent \050pd, component\051) 126 434.35 T
(plot_description pd;) 126 422.35 T
(char *component;) 126 410.35 T
0 12 Q
0.24 (Where) 108 385.02 P
7 F
0.57 (pd) 143.22 385.02 P
0 F
0.24 ( is the internal plot description to be referenced and) 157.62 385.02 P
7 F
0.57 (component) 409.96 385.02 P
0 F
0.24 ( is) 474.76 385.02 P
0.88 (the name of the component to be e) 108 371.02 P
0.88 (xtracted. If the component e) 279.61 371.02 P
0.88 (xists, then the) 417.91 371.02 P
1.11 (return v) 108 357.02 P
1.11 (alue will be a ne) 146.46 357.02 P
1.11 (w plot description, in internal form, containing only) 229.25 357.02 P
0.33 (the requested component. Otherwise) 108 343.02 P
4 F
0.79 (pd_ReadComponent\050\051) 287.62 343.02 P
0 F
0.33 ( returns) 417.22 343.02 P
4 F
0.79 (NULL) 457.2 343.02 P
0 F
(and sends a complaint to the e) 108 329.02 T
(v) 252.35 329.02 T
(ent logger) 258.17 329.02 T
(.) 305.83 329.02 T
(The ne) 108 303.02 T
(xt function adds a component to a plot description:) 140.81 303.02 T
7 10 Q
(void) 126 284.35 T
(pd_AddComponent \050dest, src, position\051) 126 272.35 T
(plot_description dest, src;) 126 260.35 T
(int position;) 126 248.35 T
0 12 Q
-0.16 (The v) 108 223.02 P
-0.16 (ery \336rst component of the) 135.32 223.02 P
7 F
-0.38 (src) 261.52 223.02 P
0 F
-0.16 ( plot description is added to the) 283.12 223.02 P
7 F
-0.38 (dest) 435.68 223.02 P
0 F
-0.16 ( plot) 464.48 223.02 P
0.8 (description, destro) 108 209.02 P
0.8 (ying an) 197.34 209.02 P
0.8 (y e) 233.63 209.02 P
0.8 (xisting component in) 248.58 209.02 P
7 F
1.93 (dest) 355.33 209.02 P
0 F
0.8 ( with the same name) 384.13 209.02 P
2.57 (as the component being added. The) 108 195.02 P
7 F
6.17 (position) 296.39 195.02 P
0 F
2.57 ( parameter determines the) 353.99 195.02 P
0.91 (position of the ne) 108 181.02 P
0.91 (w component. If it is positi) 194.09 181.02 P
0.91 (v) 327.66 181.02 P
0.91 (e, then it indicates the absolute) 333.48 181.02 P
-0.28 (position of the ne) 108 167.02 P
-0.28 (w component relati) 190.53 167.02 P
-0.28 (v) 282.33 167.02 P
-0.28 (e to the \336rst component of) 288.15 167.02 P
7 F
-0.67 (dest) 415.81 167.02 P
0 F
-0.28 ( \050usually) 444.61 167.02 P
-0.22 (the) 108 153.02 P
6 F
-0.22 (global) 125.44 153.02 P
0 F
-0.22 ( component\051. F) 156.12 153.02 P
-0.22 (or e) 228.49 153.02 P
-0.22 (xample, a position of 1 inserts the ne) 246.42 153.02 P
-0.22 (w component) 421.23 153.02 P
0.58 (directly follo) 108 139.02 P
0.58 (wing the global component. A zero or ne) 170.61 139.02 P
0.58 (g) 371.13 139.02 P
0.58 (ati) 377.07 139.02 P
0.58 (v) 388.77 139.02 P
0.58 (e position adds the) 394.59 139.02 P
1.23 (ne) 108 125.02 P
1.23 (w component relati) 119.03 125.02 P
1.23 (v) 213.85 125.02 P
1.23 (e to the last component in) 219.66 125.02 P
7 F
2.96 (dest) 353.72 125.02 P
0 F
1.23 (, so that 0 places the) 382.52 125.02 P
(component at the end, -1 inserts it just before the last component, and so on.) 108 111.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 38
%%Page: "39" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Operations on PD Components) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (39) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(Components can also be shuf) 126 678.02 T
(\337ed around within a plot description:) 266.35 678.02 T
7 10 Q
(void) 144 659.35 T
(pd_MoveComponent \050pd, comp, newpos\051) 144 647.35 T
(plot_description pd;) 144 635.35 T
(char *comp;) 144 623.35 T
(int newpos;) 144 611.35 T
0 12 Q
0.09 (The) 126 586.02 P
7 F
0.2 (pd) 147.74 586.02 P
0 F
0.09 ( parameter is the plot description, and) 162.15 586.02 P
7 F
0.2 (comp) 346.71 586.02 P
0 F
0.09 ( is the name of the compo-) 375.51 586.02 P
0.43 (nent to be mo) 126 572.02 P
0.43 (v) 192.78 572.02 P
0.43 (ed. The) 198.6 572.02 P
7 F
1.04 (newpos) 238.45 572.02 P
0 F
0.43 ( parameter determines the ne) 281.65 572.02 P
0.43 (w position of the) 421.7 572.02 P
-0.27 (component using e) 126 558.02 P
-0.27 (xactly the same con) 215.94 558.02 P
-0.27 (v) 309.63 558.02 P
-0.27 (entions as the) 315.45 558.02 P
7 F
-0.65 (position) 382.97 558.02 P
0 F
-0.27 ( parameter of) 440.57 558.02 P
4 F
(pd_AddComponent\050\051) 126 544.02 T
0 F
3.1 (T) 126 518.02 P
3.1 (o mer) 132.37 518.02 P
3.1 (ge one or more components into an e) 162.91 518.02 P
3.1 (xisting plot description, use) 362.04 518.02 P
4 F
(pd_Merge\050\051) 126 504.02 T
0 F
(.) 198 504.02 T
7 10 Q
(pd_Merge \050dest, source\051) 144 485.35 T
(plot_description dest, source;) 144 473.35 T
0 12 Q
3.03 (Where) 126 448.02 P
7 F
7.28 (dest) 164.01 448.02 P
0 F
3.03 ( is the plot description to recei) 192.81 448.02 P
3.03 (v) 356.04 448.02 P
3.03 (e the ne) 361.86 448.02 P
3.03 (w components, and) 404.94 448.02 P
7 F
1.81 (source) 126 434.02 P
0 F
0.75 ( is the source of these components. Note that this operation destro) 169.2 434.02 P
0.75 (ys) 493.33 434.02 P
1.95 (the source PD! If an) 126 420.02 P
1.95 (y component of) 230.26 420.02 P
7 F
4.68 (source) 314.44 420.02 P
0 F
1.95 ( already e) 357.64 420.02 P
1.95 (xists in) 408 420.02 P
7 F
4.68 (dest) 449.25 420.02 P
0 F
1.95 (, that) 478.05 420.02 P
(component will be deleted from) 126 406.02 T
7 F
(dest) 282.31 406.02 T
0 F
( before the mer) 311.11 406.02 T
(ge.) 383.87 406.02 T
0.15 (A second mer) 126 380.02 P
0.15 (ge function allo) 192.72 380.02 P
0.15 (ws the parameters from a speci\336c source compo-) 268.04 380.02 P
(nent to be mer) 126 366.02 T
(ged into a speci\336c component of a tar) 194.77 366.02 T
(get plot description.) 374.86 366.02 T
7 10 Q
(void) 144 347.35 T
(pd_MergeComp \050dest, destname, src, srcname\051) 144 335.35 T
(plot_description dest;) 144 323.35 T
(char *destname;) 144 311.35 T
(plot_description src;) 144 299.35 T
(char *srcname;) 144 287.35 T
0 12 Q
0.28 (All of the parameters in the) 126 262.02 P
7 F
0.67 (srcname) 262.33 262.02 P
0 F
0.28 ( component of the) 312.73 262.02 P
7 F
0.67 (src) 403.84 262.02 P
0 F
0.28 ( plot description) 425.44 262.02 P
2.86 (are copied into the) 126 248.02 P
7 F
6.87 (destname) 229.43 248.02 P
0 F
2.86 ( component of the) 287.03 248.02 P
7 F
6.87 (dest) 388.47 248.02 P
0 F
2.86 ( plot description.) 417.27 248.02 P
2.12 (P) 126 234.02 P
2.12 (arameters in the source component o) 132.49 234.02 P
2.12 (v) 319.2 234.02 P
2.12 (erride lik) 325.02 234.02 P
2.12 (e-named parameters in the) 370.68 234.02 P
(destination component.) 126 220.02 T
9.61 (T) 126 194.02 P
9.61 (o e) 132.37 194.02 P
9.61 (xplicitly delete a component from a plot description, use) 156.13 194.02 P
4 F
(pd_RemoveComp\050\051) 126 180.02 T
0 F
(:) 234 180.02 T
7 10 Q
(int pd_RemoveComp \050pd, component\051) 144 161.35 T
(plot_description pd;) 144 149.35 T
(char *component;) 144 137.35 T
0 12 Q
0.06 (Where) 126 112.02 P
7 F
0.15 (pd) 161.04 112.02 P
0 F
0.06 ( is the plot description to be modi\336ed, and) 175.44 112.02 P
7 F
0.15 (component) 381.35 112.02 P
0 F
0.06 ( is the name) 446.15 112.02 P
0.6 (of the component to be deleted. The return v) 126 98.02 P
0.6 (alue is nonzero if and only if the) 344.14 98.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 39
%%Page: "40" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Plot Description Librar) 108 736.18 T
(y) 223.61 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(40) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
11.55 (gi) 108 678.02 P
11.55 (v) 117.04 678.02 P
11.55 (en component actually e) 122.86 678.02 P
11.55 (xisted in) 274.31 678.02 P
7 F
27.73 (pd) 341.42 678.02 P
0 F
11.55 ( before the call to) 355.82 678.02 P
4 F
(pd_RemoveComp\050\051) 108 664.02 T
0 F
(.) 216 664.02 T
5.42 (T) 108 638.02 P
5.42 (o test whether a component e) 114.37 638.02 P
5.42 (xists in a gi) 281.61 638.02 P
5.42 (v) 352.59 638.02 P
5.42 (en plot description, use) 358.41 638.02 P
4 F
(pd_CompExists\050\051) 108 624.02 T
0 F
(.) 216 624.02 T
7 10 Q
(bool) 126 605.35 T
(pd_CompExists \050pd, comp\051) 126 593.35 T
(plot_description pd;) 126 581.35 T
(char *comp;) 126 569.35 T
0 12 Q
0.11 (This routine returns non-zero if and only if a component named) 108 544.02 P
7 F
0.25 (comp) 417.45 544.02 P
0 F
0.11 ( appears) 446.25 544.02 P
(in the plot description) 108 530.02 T
7 F
(pd) 216 530.02 T
0 F
(.) 230.4 530.02 T
54 487.02 540 489.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 487.02 540 489.02 R
7 X
0 0 0 1 0 0 0 K
V
54 488.02 99 488.02 2 L
0.5 H
2 Z
0 X
N
108 488.02 540 488.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(4.4) 82.32 493.02 T
(Accessing Inf) 108 493.02 T
(ormation Within Plot Descriptions) 185.78 493.02 T
0 F
1.02 (In the end, plot descriptions are maintained for the information the) 108 469.02 P
1.02 (y contain.) 437.65 469.02 P
(Se) 108 455.02 T
(v) 119.7 455.02 T
(eral routines pro) 125.52 455.02 T
(vide access to this information.) 203.99 455.02 T
1.52 (Often it is desirable simply to obtain a list of the components within a plot) 108 429.02 P
(description. T) 108 415.02 T
(o get this list, call) 173.7 415.02 T
4 F
(pd_CompList\050\051) 261.71 415.02 T
0 F
(:) 355.31 415.02 T
7 10 Q
(char **) 126 396.35 T
(pd_CompList \050pd\051) 126 384.35 T
(plot_description pd;) 126 372.35 T
0 12 Q
-0.07 (Where) 108 347.02 P
7 F
-0.18 (pd) 142.91 347.02 P
0 F
-0.07 ( is the plot description of interest. The return v) 157.31 347.02 P
-0.07 (alue will be a null-ter-) 379.65 347.02 P
0.13 (minated list of component names, in the original order) 108 333.02 P
0.13 (. This list should be nei-) 369.35 333.02 P
(ther modi\336ed nor freed.) 108 319.02 T
6.42 (T) 108 293.02 P
6.42 (o obtain the v) 114.37 293.02 P
6.42 (alue of a parameter within a plot description, call) 199 293.02 P
4 F
(pd_Retrieve\050\051) 108 279.02 T
0 F
(:) 201.6 279.02 T
7 10 Q
(bool) 126 260.35 T
(pd_Retrieve \050pd, component, param, dest, type\051) 126 248.35 T
(plot_description pd;) 126 236.35 T
(char *component, *param, *dest;) 126 224.35 T
(int type;) 126 212.35 T
0 12 Q
1.32 (Here,) 108 187.02 P
7 F
3.17 (pd) 138.64 187.02 P
0 F
1.32 ( is the plot description of interest,) 153.04 187.02 P
7 F
3.17 (component) 326.27 187.02 P
0 F
1.32 ( is the name of the) 391.08 187.02 P
0.1 (component to e) 108 173.02 P
0.1 (xamine,) 182.02 173.02 P
7 F
0.25 (param) 223.46 173.02 P
0 F
0.1 ( is the name of the parameter to retrie) 259.45 173.02 P
0.1 (v) 439.95 173.02 P
0.1 (e,) 445.77 173.02 P
7 F
0.25 (dest) 457.2 173.02 P
0 F
-0.3 (is a pointer to the place where the v) 108 159.02 P
-0.3 (alue of the parameter is to be put, and) 275.93 159.02 P
7 F
-0.72 (type) 457.2 159.02 P
0 F
0.48 (is the e) 108 145.02 P
0.48 (xpected data type of the parameter) 142.78 145.02 P
0.48 (. T) 310.14 145.02 P
0.48 (ype is one of the usual user inter-) 322.99 145.02 P
1.28 (f) 108 131.02 P
1.28 (ace symbol types,) 111.88 131.02 P
4 F
3.07 (SYMT_STRING) 204.37 131.02 P
0 F
1.28 (, for e) 283.57 131.02 P
1.28 (xample. If the gi) 314.27 131.02 P
1.28 (v) 397.14 131.02 P
1.28 (en) 402.95 131.02 P
4 F
3.07 (param) 418.56 131.02 P
0 F
1.28 ( e) 454.56 131.02 P
1.28 (xists) 463.99 131.02 P
0.75 (within the component, it will be con) 108 117.02 P
0.75 (v) 285.66 117.02 P
0.75 (erted to the gi) 291.48 117.02 P
0.75 (v) 359.74 117.02 P
0.75 (en type, stored in) 365.56 117.02 P
7 F
1.79 (dest) 454.2 117.02 P
0 F
0.75 (,) 483 117.02 P
0.63 (and the return v) 108 103.02 P
0.63 (alue will be) 185.23 103.02 P
4 F
1.51 (TRUE) 246.11 103.02 P
0 F
0.63 (. If the parameter does not e) 274.91 103.02 P
0.63 (xist, or can not) 412.79 103.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 40
%%Page: "41" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Accessing Inf) 126 736.18 T
(ormation Within Plot Descriptions) 184.34 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (41) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.79 (be con) 126 678.02 P
0.79 (v) 157.97 678.02 P
0.79 (erted, the return v) 163.79 678.02 P
0.79 (alue will be) 251.17 678.02 P
4 F
1.9 (FALSE) 312.54 678.02 P
0 F
0.79 (. Con) 348.54 678.02 P
0.79 (v) 374.86 678.02 P
0.79 (ersion errors are reported) 380.68 678.02 P
(to the e) 126 664.02 T
(v) 161.03 664.02 T
(ent logger) 166.85 664.02 T
(.) 214.51 664.02 T
6.18 (T) 126 638.02 P
6.18 (o change the v) 132.37 638.02 P
6.18 (alue of a parameter within a plot description, use) 220.26 638.02 P
4 F
(pd_Store\050\051) 126 624.02 T
0 F
(:) 198 624.02 T
7 10 Q
(void) 144 605.35 T
(pd_Store \050pd, component, param, value, type\051) 144 593.35 T
(plot_description pd;) 144 581.35 T
(char *comp, *param, *value;) 144 569.35 T
(int type;) 144 557.35 T
0 12 Q
0.83 (Where) 126 532.02 P
7 F
2 (pd) 161.81 532.02 P
0 F
0.83 ( is the plot description to be changed,) 176.21 532.02 P
7 F
2 (component) 365.21 532.02 P
0 F
0.83 ( is the name of) 430.01 532.02 P
0.72 (the component to be changed,) 126 518.02 P
7 F
1.73 (param) 276.24 518.02 P
0 F
0.72 ( is the name of the parameter to be set,) 312.24 518.02 P
7 F
0.59 (value) 126 504.02 P
0 F
0.25 ( points to the ne) 162 504.02 P
0.25 (w v) 239.35 504.02 P
0.25 (alue of the parameter) 256.96 504.02 P
0.25 (, and) 358.84 504.02 P
7 F
0.59 (type) 385.66 504.02 P
0 F
0.25 ( is the data type of) 414.46 504.02 P
(that v) 126 490.02 T
(alue. The v) 152.7 490.02 T
(alue will be con) 206.05 490.02 T
(v) 281.89 490.02 T
(erted to string type, and stored in) 287.71 490.02 T
7 F
(pd) 449.03 490.02 T
0 F
(.) 463.43 490.02 T
(P) 126 464.02 T
(arameters can also be remo) 132.49 464.02 T
(v) 262.93 464.02 T
(ed from a component with this function:) 268.75 464.02 T
7 10 Q
(void) 144 445.35 T
(pd_RemoveParam \050pd, comp, param\051) 144 433.35 T
(plot_description pd;) 144 421.35 T
(char *comp, *param;) 144 409.35 T
0 12 Q
0.87 (Upon return, the parameter named) 126 384.02 P
7 F
2.09 (param) 298.3 384.02 P
0 F
0.87 ( will no longer e) 334.3 384.02 P
0.87 (xist in component) 416.26 384.02 P
7 F
-0.44 (comp) 126 370.02 P
0 F
-0.19 ( of the plot description) 154.8 370.02 P
7 F
-0.44 (pd) 265.54 370.02 P
0 F
-0.19 (. It is not an error to remo) 279.94 370.02 P
-0.19 (v) 401.77 370.02 P
-0.19 (e a parameter which) 407.59 370.02 P
(does not e) 126 356.02 T
(xist; in that case the function simply has no ef) 174.48 356.02 T
(fect.) 394.5 356.02 T
5.12 (The) 126 330.02 P
4 F
12.29 (pd_TraverseParameters\050\051) 152.78 330.02 P
0 F
5.12 ( function allo) 318.38 330.02 P
5.12 (ws an application to) 392.32 330.02 P
(sequentially access each parameter in a plot description component.) 126 316.02 T
7 10 Q
(void) 144 297.35 T
(pd_TraverseParameters \050pd, compname, func, arg\051) 144 285.35 T
(plot_description pd;) 144 273.35 T
(char *compname;) 144 261.35 T
(int \050*func\051\050\051;) 144 249.35 T
(void *arg;) 144 237.35 T
0 12 Q
-0.11 (This routine is v) 126 212.02 P
-0.11 (ery similar to the) 203.84 212.02 P
4 F
-0.26 (usy_traverse\050\051) 288.07 212.02 P
0 F
-0.11 ( routine in the RDSS UI) 388.87 212.02 P
1.04 (library) 126 198.02 P
1.04 (. F) 157.21 198.02 P
1.04 (or each parameter in the) 170.75 198.02 P
7 F
2.5 (compname) 294.91 198.02 P
0 F
1.04 ( component of plot description) 352.51 198.02 P
7 F
2.87 (pd) 126 184.02 P
0 F
1.2 (,) 140.4 184.02 P
4 F
2.87 (pd_TraverseParameters\050\051) 147.6 184.02 P
0 F
1.2 ( calls the gi) 313.2 184.02 P
1.2 (v) 371.48 184.02 P
1.2 (en function) 377.3 184.02 P
7 F
2.87 (func) 437.01 184.02 P
0 F
1.2 ( assum-) 465.81 184.02 P
(ing this prototype:) 126 170.02 T
7 10 Q
(int) 144 151.35 T
(traverse_parameter \050name, value, arg\051) 144 139.35 T
(char *name;) 144 127.35 T
(char *value;) 144 115.35 T
(void *arg;) 144 103.35 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 41
%%Page: "42" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Plot Description Librar) 108 736.18 T
(y) 223.61 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(42) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.28 (The parameter name is in) 108 678.02 P
7 F
0.69 (name) 234.39 678.02 P
0 F
0.28 (,) 263.19 678.02 P
7 F
0.69 (value) 269.48 678.02 P
0 F
0.28 ( points to the v) 305.48 678.02 P
0.28 (alue of that parameter) 377.66 678.02 P
0.28 (,) 483 678.02 P
2.86 (and) 108 664.02 P
7 F
6.85 (arg) 131.18 664.02 P
0 F
2.86 ( is the parameter passed to the) 152.78 664.02 P
4 F
6.85 (pd_TraverseParameters\050\051) 320.4 664.02 P
0 F
(function.) 108 650.02 T
54 607.02 540 609.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 607.02 540 609.02 R
7 X
0 0 0 1 0 0 0 K
V
54 608.02 99 608.02 2 L
0.5 H
2 Z
0 X
N
108 608.02 540 608.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(4.5) 82.32 613.02 T
(Cop) 108 613.02 T
(ying Plot Descriptions) 131.15 613.02 T
0 F
0.91 (Sometimes it is desirable to mak) 108 589.02 P
0.91 (e a cop) 268.78 589.02 P
0.91 (y of an internal plot description\321for) 304.46 589.02 P
5.11 (e) 108 575.02 P
5.11 (xample, in order to preserv) 113.15 575.02 P
5.11 (e a PD that is about to be passed into) 263.04 575.02 P
4 F
(pd_Merge\050\051) 108 561.02 T
0 F
(. T) 180 561.02 T
(o do this, call) 192.37 561.02 T
4 F
(pd_CopyPD\050\051) 260.04 561.02 T
0 F
(:) 339.24 561.02 T
7 10 Q
(plot_description) 126 542.35 T
(pd_CopyPD \050pd\051) 126 530.35 T
(plot_description pd;) 126 518.35 T
0 12 Q
(The return v) 108 493.02 T
(alue will be a plot description which is an e) 167.02 493.02 T
(xact cop) 375.14 493.02 T
(y of) 415.34 493.02 T
7 F
(pd) 437.34 493.02 T
0 F
(.) 451.74 493.02 T
54 450.02 540 452.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 450.02 540 452.02 R
7 X
0 0 0 1 0 0 0 K
V
54 451.02 99 451.02 2 L
0.5 H
2 Z
0 X
N
108 451.02 540 451.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(4.6) 82.32 456.02 T
(A) 108 456.02 T
(uxiliar) 116.3 456.02 T
(y Plot Description T) 151.78 456.02 T
(ab) 263.51 456.02 T
(le) 277.39 456.02 T
0 F
2.37 (A small library of additional routines has been b) 108 432.02 P
2.37 (uilt on the lo) 358.65 432.02 P
2.37 (w-le) 426.45 432.02 P
2.37 (v) 447.48 432.02 P
2.37 (el plot) 453.3 432.02 P
1.2 (description library to simplify and inte) 108 418.02 P
1.2 (grate the use of multiple plot descrip-) 298.82 418.02 P
-0.09 (tions simultaneously) 108 404.02 P
-0.09 (. Currently) 206.14 404.02 P
-0.09 (, the auxiliary library pro) 257.27 404.02 P
-0.09 (vides a means for stor-) 377.05 404.02 P
-0.03 (ing plot descriptions as named entities within an internal table, retrie) 108 390.02 P
-0.03 (ving those) 436.36 390.02 P
1.97 (plot descriptions by name, and searching for parameters among stored plot) 108 376.02 P
(descriptions.) 108 362.02 T
1.26 (T) 108 336.02 P
1.26 (o store a plot description as a named entity) 114.37 336.02 P
1.26 (, use) 329.02 336.02 P
4 F
3.04 (pda_StorePD\050\051) 356.55 336.02 P
0 F
1.26 ( as fol-) 450.15 336.02 P
(lo) 108 322.02 T
(ws.) 117.04 322.02 T
7 10 Q
(void) 126 303.35 T
(pda_StorePD \050pd, name\051) 126 291.35 T
(plot_description pd;) 126 279.35 T
(char *name;) 126 267.35 T
0 12 Q
0.87 (The gi) 108 242.02 P
0.87 (v) 139.57 242.02 P
0.87 (en) 145.39 242.02 P
7 F
2.09 (pd) 160.59 242.02 P
0 F
0.87 ( will be stored as) 174.99 242.02 P
7 F
2.09 (name) 263.67 242.02 P
0 F
0.87 (. If another plot description already has) 292.47 242.02 P
0.94 (the gi) 108 228.02 P
0.94 (v) 135.65 228.02 P
0.94 (en name, that plot description will be destro) 141.46 228.02 P
0.94 (yed before the ne) 358.61 228.02 P
0.94 (w one is) 444.11 228.02 P
(stored.) 108 214.02 T
(T) 108 188.02 T
(o retrie) 114.37 188.02 T
(v) 148.39 188.02 T
(e a plot description by name, use) 154.21 188.02 T
4 F
(pda_GetPD\050\051) 314.86 188.02 T
0 F
(:) 394.06 188.02 T
7 10 Q
(plot_description) 126 169.35 T
(pda_GetPD \050name\051) 126 157.35 T
(char *name;) 126 145.35 T
0 12 Q
0.1 (Where) 108 120.02 P
7 F
0.24 (name) 143.08 120.02 P
0 F
0.1 ( is the name of the desired plot description. If the gi) 171.88 120.02 P
0.1 (v) 420.66 120.02 P
0.1 (en name has) 426.48 120.02 P
-0.29 (been de\336ned, the corresponding plot description will be returned; otherwise the) 108 106.02 P
(return v) 108 92.02 T
(alue is) 145.36 92.02 T
4 F
(NULL) 179.35 92.02 T
0 F
(.) 208.15 92.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 42
%%Page: "43" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(A) 126 736.18 T
(uxiliar) 132.23 736.18 T
(y Plot Description T) 158.83 736.18 T
(ab) 242.63 736.18 T
(le) 253.04 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (43) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.61 (T) 126 678.02 P
0.61 (o search the v) 132.37 678.02 P
0.61 (alue of a plot description parameter) 200.22 678.02 P
0.61 (, use the) 373.1 678.02 P
4 F
1.47 (pda_Search\050\051) 417.6 678.02 P
0 F
(function:) 126 664.02 T
7 10 Q
(bool) 144 645.35 T
(pda_Search \050pd, component, param, qual, dest, type\051) 144 633.35 T
(plot_description pd;) 144 621.35 T
(char *component, *param, *qual, *dest;) 144 609.35 T
(int type;) 144 597.35 T
0 12 Q
4.91 (The parameters all ha) 126 572.02 P
4.91 (v) 244.13 572.02 P
4.91 (e the same meaning as for) 249.95 572.02 P
4 F
11.79 (pd_Retrieve\050\051) 407.4 572.02 P
0 F
4.91 (,) 501 572.02 P
(described abo) 126 558.02 T
(v) 192.13 558.02 T
(e.) 197.95 558.02 T
0.17 (The additional parameter) 126 532.02 P
7 F
0.4 (qual) 250.14 532.02 P
0 F
0.17 ( is an optional quali\336er) 278.94 532.02 P
0.17 (. The) 389.61 532.02 P
4 F
0.4 (pda_Search\050\051) 417.6 532.02 P
0 F
-0.04 (function will al) 126 518.02 P
-0.04 (w) 199.14 518.02 P
-0.04 (ays look for) 207.69 518.02 P
7 F
-0.08 (param) 267.9 518.02 P
0 F
-0.04 ( in the gi) 303.9 518.02 P
-0.04 (v) 345.83 518.02 P
-0.04 (en) 351.65 518.02 P
7 F
-0.08 (pd) 365.95 518.02 P
0 F
-0.04 ( and) 380.35 518.02 P
7 F
-0.08 (component) 403.61 518.02 P
0 F
-0.04 ( \336rst. If) 468.41 518.02 P
-0.05 (it is not found there, the name of the parameter will be appended to) 126 504.02 P
7 F
-0.12 (qual) 450.91 504.02 P
0 F
-0.05 ( with) 479.71 504.02 P
1.09 (a h) 126 490.02 P
1.09 (yphen, yielding \322qual-param.) 141.36 490.02 P
1.09 (\323 Then the) 283.34 490.02 P
4 F
2.62 (GLOBAL) 340.27 490.02 P
0 F
1.09 ( component of the gi) 383.46 490.02 P
1.09 (v) 486.85 490.02 P
1.09 (en) 492.67 490.02 P
1.87 (plot description will be searched for the quali\336ed name. If that search also) 126 476.02 P
-0.22 (f) 126 462.02 P
-0.22 (ails,) 129.88 462.02 P
4 F
-0.52 (pda_Search\050\051) 152.33 462.02 P
0 F
-0.22 ( will look for the quali\336ed parameter in the) 238.73 462.02 P
4 F
-0.52 (defaults) 446.4 462.02 P
0 F
(component of the plot description named) 126 448.02 T
4 F
(defaults) 325.98 448.02 T
0 F
(, if it e) 383.58 448.02 T
(xists.) 414.73 448.02 T
1.28 (If the parameter is found in an) 126 422.02 P
1.28 (y of these steps, the v) 278.8 422.02 P
1.28 (alue is con) 388.22 422.02 P
1.28 (v) 441.63 422.02 P
1.28 (erted to the) 447.45 422.02 P
3.15 (gi) 126 408.02 P
3.15 (v) 135.04 408.02 P
3.15 (en type and the return v) 140.86 408.02 P
3.15 (alue is) 269.97 408.02 P
4 F
7.57 (TRUE) 310.28 408.02 P
0 F
3.15 (. Otherwise the function returns) 339.08 408.02 P
4 F
(FALSE) 126 394.02 T
0 F
(.) 162 394.02 T
0.5 (The) 126 368.02 P
7 F
1.2 (qual) 148.16 368.02 P
0 F
0.5 ( parameter may be passed in as) 176.96 368.02 P
4 F
1.2 (NULL) 332.75 368.02 P
0 F
0.5 (, in which case the parameter) 361.55 368.02 P
(name will be used unchanged for all steps of the search.) 126 354.02 T
2.11 (The long-term plan is to use a user) 126 328.02 P
2.11 (-supplied search v) 306.81 328.02 P
2.11 (ariable to control the) 398.03 328.02 P
0.08 (parameter search process. F) 126 314.02 P
0.08 (or the short term, the search path will remain hard-) 259.34 314.02 P
(wired as documented abo) 126 300.02 T
(v) 248.12 300.02 T
(e.) 253.94 300.02 T
0.63 (The auxiliary plot description routines k) 126 274.02 P
0.63 (eep a table of the stored plot descrip-) 321.99 274.02 P
0.62 (tions in memory) 126 260.02 P
0.62 (, allo) 205.13 260.02 P
0.62 (wing the plot descriptions to be recalled by name when-) 229.46 260.02 P
-0.17 (e) 126 246.02 P
-0.17 (v) 131.03 246.02 P
-0.17 (er needed. All of the memory tak) 136.85 246.02 P
-0.17 (en by the table and the plot descriptions can) 294.69 246.02 P
(be released with this function call:) 126 232.02 T
7 10 Q
(void) 144 213.35 T
(pda_ReleaseAll \050\051) 144 201.35 T
0 12 Q
0.86 (Memory-conscious applications can use this routine to release memory when) 126 176.02 P
0.34 (the) 126 162.02 P
0.34 (y no longer need an) 140.48 162.02 P
0.34 (y plot descriptions. This function can also be helpful in) 236.3 162.02 P
-0.12 (tracking do) 126 148.02 P
-0.12 (wn dangling references with dynamic memory check) 179.91 148.02 P
-0.12 (ers. It will free) 433.7 148.02 P
0.25 (all of the plot descriptions kno) 126 134.02 P
0.25 (wn by the auxiliary table, so that an) 273.25 134.02 P
0.25 (y remaining) 446.1 134.02 P
-0.19 (plot descriptions must be referenced by the application else the) 126 120.02 P
-0.19 (y indicate mem-) 426.39 120.02 P
0.82 (ory leaks. A common mistak) 126 106.02 P
0.82 (e is for) 267.5 106.02 P
0.82 (getting to release temporary plot descrip-) 302.25 106.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 43
%%Page: "44" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Plot Description Librar) 108 736.18 T
(y) 223.61 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(44) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
8.72 (tions, or for) 108 678.02 P
8.72 (getting to release ra) 181.54 678.02 P
8.72 (w plot descriptions returned by) 301.82 678.02 P
4 F
(pd_Unload\050\051) 108 664.02 T
0 F
(.) 187.2 664.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 44
%%Page: "45" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (45) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 5 \245) 126 677 S
0 24 Q
-0.48 (The Graphics W) 252 677 S
-0.48 (idget) 402.94 677 S
72 418 558 420 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 418 558 420 R
7 X
0 0 0 1 0 0 0 K
V
72 419 117 419 2 L
0.5 H
2 Z
0 X
N
126 419 558 419 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(5.1) 100.32 424 T
(Description) 126 424 T
0 F
-0.03 (A graphics widget is a widget that can ha) 126 400 P
-0.03 (v) 323.49 400 P
-0.03 (e se) 329.32 400 P
-0.03 (v) 347.31 400 P
-0.03 (eral pixmaps associated with it.) 353.13 400 P
1.45 (These additional pixmaps are used to store e) 126 386 P
1.45 (xtra frames of data in memory) 348.91 386 P
1.45 (,) 501 386 P
0.01 (along with the one frame which is being displayed. The pixmaps are created in) 126 372 P
0.42 (shared memory if possible so that the data can be accessed directly) 126 358 P
0.42 (, i. e. with-) 450.75 358 P
(out using Xlib routines.) 126 344 T
(Modules wishing to use a graphics widget should include the follo) 126 318 T
(wing line:) 444.35 318 T
4 9 Q
(# include <GraphicsW.h>) 144 295 T
72 253 558 255 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 253 558 255 R
7 X
0 0 0 1 0 0 0 K
V
72 254 117 254 2 L
0.5 H
2 Z
0 X
N
126 254 558 254 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(5.2) 100.32 259 T
(Using a Graphics Widg) 126 259 T
(et) 257.48 259 T
0 F
-0.16 (A graphics widget is created, destro) 126 235 P
-0.16 (yed and otherwise manipulated the same as) 297.02 235 P
0 (an) 126 221 P
0 (y other widget, by using X T) 137.15 221 P
0 (oolkit routines. T) 274.53 221 P
0 (o use the X T) 356.58 221 P
0 (oolkit the follo) 420.29 221 P
0 (w-) 491.34 221 P
(ing lines should be included at the head of the \336le:) 126 207 T
4 9 Q
(# include <X11/X.h>) 144 184 T
(# include <X11/Intrinsic.h>) 144 173 T
2 12 Q
(5.2.1) 90.31 142 T
(Creating a Graphics Widg) 126 142 T
(et) 272.82 142 T
0 F
-0.05 (The process of creating a graphics widget consists of initializing the X T) 126 124 P
-0.05 (oolkit,) 472.99 124 P
-0.25 (creating a popup shell to hold the graphics widget, creating the graphics widget) 126 110 P
(itself, and displaying the graphics widget on the screen.) 126 96 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 45
%%Page: "46" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Graphics Widg) 108 736.18 T
(et) 190.11 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(46) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.26 (A module that wishes to create a graphics widget should ha) 108 678.02 P
0.26 (v) 395.67 678.02 P
0.26 (e these additional) 401.49 678.02 P
(lines at the head of the \336le:) 108 664.02 T
4 9 Q
(# include <X11/Shell.h>) 126 641.02 T
(# include <X11/StringDefs.h>) 126 630.02 T
0 12 Q
0.85 (A graphics widget can be created by making the follo) 108 605.02 P
0.85 (wing calls to X T) 372.24 605.02 P
0.85 (oolkit) 457.99 605.02 P
(routines:) 108 591.02 T
1 F
(1.) 111.6 571.02 T
0 F
(Initialize the X T) 126 571.02 T
(oolkit:) 207.36 571.02 T
4 9 Q
(Widget) 126 548.02 T
(XtAppInitialize \050appl_context, appl_class, options,) 126 537.02 T
(num_options, fallback_resources, argc, argv\051) 183.6 526.02 T
(XtAppContext *appl_context;) 126 515.02 T
(String appl_class;) 126 504.02 T
(XrmOptionDescRec options;) 126 493.02 T
(int num_options;) 126 482.02 T
(String *fallback_resources;) 126 471.02 T
(int *argc;) 126 460.02 T
(String argv;) 126 449.02 T
1 12 Q
(2.) 111.6 422.02 T
0 F
(Create a popup shell which holds the graphics widget:) 126 422.02 T
4 9 Q
(Widget) 126 399.02 T
(XtCreatePopupShell\050name, widget_class, parent,) 126 388.02 T
(args, num_args\051) 183.6 377.02 T
(String name;) 126 366.02 T
(WidgetClass widget_class;) 126 355.02 T
(Widget parent;) 126 344.02 T
(ArgList args;) 126 333.02 T
(int num_args;) 126 322.02 T
1 12 Q
(3.) 111.6 295.02 T
0 F
(Create the graphics widget:) 126 295.02 T
4 9 Q
(Widget) 126 272.02 T
(XtCreateManagedWidget \050name, widget_class, parent, args, num_args\051) 126 261.02 T
(String name;) 126 250.02 T
(WidgetClass widget_class;) 126 239.02 T
(Widget parent;) 126 228.02 T
(ArgList args;) 126 217.02 T
(int num_args;) 126 206.02 T
1 12 Q
(4.) 111.6 179.02 T
0 F
(Realize the graphics widget:) 126 179.02 T
4 9 Q
(void) 126 156.02 T
(XtRealizeWidget \050w\051) 126 145.02 T
(Widget w;) 126 134.02 T
0 12 Q
0.28 (\050The graphics widget will automatically be realized if its parent has been real-) 108 109.02 P
(ized.\051) 108 95.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 46
%%Page: "47" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Con) 126 736.18 T
(venience Routines) 143.14 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (47) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(F) 126 678.02 T
(or e) 132.49 678.02 T
(xample:) 150.64 678.02 T
4 9 Q
(Widget Top, GrShell, Graphics;) 172.8 655.02 T
(XtAppContext Actx;) 172.8 644.02 T
(Top = XtAppInitialize \050&Actx, "top", NULL, 0, &argc,) 172.8 633.02 T
(&argv, NULL, NULL, 0\051;) 230.4 622.02 T
(GrShell = \050XtCreatePopupShell \050"grshell",) 172.8 611.02 T
(topLevelShellWidgetClass, Top, NULL, 0\051;) 230.4 600.02 T
(Graphics = XtCreateManagedWidget \050"graphics",) 172.8 589.02 T
(graphicsWidgetClass, GrShell, NULL, 0\051:) 230.4 578.02 T
(XtRealizeWidget \050Graphics\051;) 172.8 567.02 T
2 12 Q
(5.2.2) 90.31 536.02 T
(Setting Resources For a Graphics Widg) 126 536.02 T
(et) 352.18 536.02 T
4 F
1.13 (XtSetArg\050\051) 126 518.02 P
0 F
0.47 ( and) 198 518.02 P
4 F
1.13 (XtSetValues\050\051) 222.27 518.02 P
0 F
0.47 ( are X T) 315.87 518.02 P
0.47 (oolkit routines that are used to) 355.98 518.02 P
1.21 (set the v) 126 504.02 P
1.21 (alue of a particular resource which is associated with a widget. The) 168.11 504.02 P
(follo) 126 490.02 T
(wing table lists the resources used by a graphics widget.) 148.37 490.02 T
0.52 (The follo) 126 464.02 P
0.52 (wing section of code w) 170.55 464.02 P
0.52 (ould set the number of pixmaps in a graphics) 283.84 464.02 P
(widget to tw) 126 450.02 T
(o:) 185.88 450.02 T
4 9 Q
(Arg args[1];) 172.8 427.02 T
(int FrameCount = 2;) 172.8 416.02 T
(XtSetArg \050args[0], XtNframeCount, FrameCount\051;) 172.8 405.02 T
(XtSetValues \050Graphics, args, 1\051;) 172.8 394.02 T
0 12 Q
(Where) 126 369.02 T
4 F
(Graphics) 160.98 369.02 T
0 F
( is a graphics widget.) 218.58 369.02 T
2 F
(5.2.3) 90.31 337.02 T
(Destr) 126 337.02 T
(o) 156.43 337.02 T
(ying a Graphics Widg) 163.52 337.02 T
(et) 286.34 337.02 T
0 F
10.53 (Finally) 126 319.02 P
10.53 (, a graphics widget can be destro) 159.23 319.02 P
10.53 (yed with a call to) 379.23 319.02 P
4 F
(XtDestroyWidget\050\051) 126 305.02 T
0 F
(. F) 248.4 305.02 T
(or e) 260.89 305.02 T
(xample:) 279.04 305.02 T
4 9 Q
(XtDestroyWidget \050Graphics\051;) 172.8 282.02 T
0 12 Q
(Where) 126 257.02 T
4 F
(Graphics) 160.98 257.02 T
0 F
( is a graphics widget.) 218.58 257.02 T
2.18 (When a graphics widget is destro) 126 231.02 P
2.18 (yed the shared memory se) 296.44 231.02 P
2.18 (gments for the) 430.31 231.02 P
(shared memory pixmaps are detached.) 126 217.02 T
72 174.02 558 176.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 174.02 558 176.02 R
7 X
0 0 0 1 0 0 0 K
V
72 175.02 117 175.02 2 L
0.5 H
2 Z
0 X
N
126 175.02 558 175.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(5.3) 100.32 180.02 T
(Con) 126 180.02 T
(venience Routines) 148.85 180.02 T
0 F
1.38 (Se) 126 156.02 P
1.38 (v) 137.7 156.02 P
1.38 (eral con) 143.52 156.02 P
1.38 (v) 182.74 156.02 P
1.38 (enience routines ha) 188.56 156.02 P
1.38 (v) 283.72 156.02 P
1.38 (e been pro) 289.54 156.02 P
1.38 (vided so that information can be) 342.11 156.02 P
-0.18 (accessed and operations can be performed on a graphics widget without ha) 126 142.02 P
-0.18 (ving) 482.66 142.02 P
(to kno) 126 128.02 T
(w the internal representation of the widget. These routines follo) 156.04 128.02 T
(w) 461.02 128.02 T
(.) 468.9 128.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "47" 47
%%Page: "48" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Graphics Widg) 108 736.18 T
(et) 190.11 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(48) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(5.3.1) 72.31 678.02 T
(Inf) 108 678.02 T
(ormational Routines) 122.42 678.02 T
0 F
0.04 (These routines return information about the graphics widget such as its dimen-) 108 660.02 P
(sions or its graphics conte) 108 646.02 T
(xt.) 232.48 646.02 T
4 F
(GWWidth\050\051) 108 620.02 T
0 F
( returns the width in pix) 172.8 620.02 T
(els of a graphics widget\325) 287.62 620.02 T
(s pixmaps.) 404.93 620.02 T
7 10 Q
(int) 126 601.35 T
(GWWidth \050w\051) 126 589.35 T
(GraphicsWidget w;) 126 577.35 T
4 12 Q
(GWHeight\050\051) 108 552.02 T
0 F
( returns the height in pix) 180 552.02 T
(els of a graphics widget\325) 297.48 552.02 T
(s pixmaps.) 414.79 552.02 T
7 10 Q
(int) 126 533.35 T
(GWHeight \050w\051) 126 521.35 T
(GraphicsWidget w;) 126 509.35 T
4 12 Q
(GWDepth\050\051) 108 484.02 T
0 F
( returns the depth in bits of a graphics widget\325) 172.8 484.02 T
(s pixmaps.) 393.11 484.02 T
7 10 Q
(int) 126 465.35 T
(GWDepth \050w\051) 126 453.35 T
(GraphicsWidget w;) 126 441.35 T
4 12 Q
2.27 (GWGetGC\050\051) 108 416.02 P
0 F
0.94 ( returns the graphics conte) 172.8 416.02 P
0.94 (xt currently being used by a graphics) 303.03 416.02 P
(widget.) 108 402.02 T
7 10 Q
(GC) 126 383.35 T
(GWGetGC \050w\051) 126 371.35 T
(GraphicsWidget w;) 126 359.35 T
2 12 Q
(5.3.2) 72.31 328.02 T
(Pixmap Operations) 108 328.02 T
0 F
0.94 (These routines either perform an operation on a particular pixmap associated) 108 310.02 P
0.33 (with a graphics widget, or the) 108 296.02 P
0.33 (y return a pixmap so that it can be accessed out-) 252.1 296.02 P
(side of the graphics widget.) 108 282.02 T
4 F
-0.23 (GWFrame\050\051) 108 256.02 P
0 F
-0.1 ( returns the) 172.8 256.02 P
4 F
-0.23 (Pixmap) 229.5 256.02 P
0 F
-0.1 ( of the frame which is currently a) 272.7 256.02 P
-0.1 (v) 431.41 256.02 P
-0.1 (ailable for) 437.11 256.02 P
(dra) 108 242.02 T
(wing.) 123.14 242.02 T
7 10 Q
(Pixmap) 126 223.35 T
(GWFrame \050w\051) 126 211.35 T
(GraphicsWidget w;) 126 199.35 T
0 12 Q
0.32 (This routine can be used to return the) 108 174.02 P
4 F
0.76 (Drawable) 292.51 174.02 P
0 F
0.32 ( to be passed to certain Xlib) 350.11 174.02 P
(routines such as) 108 160.02 T
4 F
(XDrawPoint\050\051) 187.66 160.02 T
0 F
(.) 274.06 160.02 T
4 9 Q
(XDrawPoint \050display, drawable, gc, x, y\051) 126 137.02 T
(Display *display;) 126 126.02 T
(Drawable drawable;) 126 115.02 T
(GC gc;) 126 104.02 T
(int x, y;) 126 93.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "48" 48
%%Page: "49" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Con) 126 736.18 T
(venience Routines) 143.14 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (49) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(F) 126 678.02 T
(or e) 132.49 678.02 T
(xample:) 150.64 678.02 T
4 9 Q
(XDrawPoint \050XtDisplay \050Graphics\051, GWFrame \050Graphics\051,) 172.8 655.02 T
(GWGetGC \050Graphics\051, 100, 100\051;) 230.4 644.02 T
0 12 Q
(Where) 126 619.02 T
4 F
(Graphics) 160.98 619.02 T
0 F
( is a graphics widget.) 218.58 619.02 T
4 F
(GWGetFrame\050\051) 126 593.02 T
0 F
( returns the) 212.4 593.02 T
4 F
(Pixmap) 269.39 593.02 T
0 F
( associated with the graphics widget) 312.59 593.02 T
7 F
(w) 489.23 593.02 T
0 F
(.) 495.65 593.02 T
7 10 Q
(Pixmap) 144 574.35 T
(GWGetFrame \050w, i\051) 144 562.35 T
(GraphicsWidget w;) 144 550.35 T
(int i;) 144 538.35 T
4 12 Q
4.01 (GWClearFrame\050\051) 126 513.02 P
0 F
1.67 ( clears the) 226.8 513.02 P
1.67 ( pixmap by \336lling it with the background) 295.29 513.02 P
(color) 126 499.02 T
(. If) 150 499.02 T
6 F
(i) 166.99 499.02 T
0 F
( is equal to) 170.33 499.02 T
4 F
(ClearAll) 225.66 499.02 T
0 F
( then all pixmaps are cleared.) 283.26 499.02 T
7 10 Q
(void) 144 480.35 T
(GWClearFrame \050w, i\051) 144 468.35 T
(GraphicsWidget w;) 144 456.35 T
(int i;) 144 444.35 T
4 12 Q
1.47 (GWDrawInFrame\050\051) 126 419.02 P
0 F
0.61 ( sets the current frame a) 234 419.02 P
0.61 (v) 351.78 419.02 P
0.61 (ailable for dra) 357.48 419.02 P
0.61 (wing to the pix-) 425.83 419.02 P
(map.) 126 405.02 T
7 10 Q
(void) 144 386.35 T
(GWDrawInFrame \050w, i\051) 144 374.35 T
(GraphicsWidget w;) 144 362.35 T
(int i;) 144 350.35 T
4 12 Q
(GWDisplayFrame\050\051) 126 325.02 T
0 F
( sets the pixmap to be the currently displayed frame.) 241.2 325.02 T
7 10 Q
(void) 144 306.35 T
(GWDisplayFrame \050w, i\051) 144 294.35 T
(GraphicsWidget w;) 144 282.35 T
(int i;) 144 270.35 T
0 12 Q
-0.03 (The follo) 126 245.02 P
-0.03 (wing e) 170 245.02 P
-0.03 (xample sho) 202.12 245.02 P
-0.03 (ws ho) 256.79 245.02 P
-0.03 (w one frame can be dra) 284.8 245.02 P
-0.03 (wn and displayed, and) 396.77 245.02 P
(then ho) 126 231.02 T
(w a ne) 161.36 231.02 T
(w frame can be selected for dra) 192.38 231.02 T
(wing:) 342.8 231.02 T
4 9 Q
(int DrawFrame = 0;) 172.8 208.02 T
(/*) 144 197.02 T
( * Pixmap 0 is set to be the current draw frame, is cleared) 144 186.02 T
( * and drawn into.) 144 175.02 T
( */) 144 164.02 T
(GWDrawInFrame \050Graphics, DrawFrame\051;) 172.8 153.02 T
(GWClearFrame \050Graphics, DrawFrame\051;) 172.8 142.02 T
(XDrawPoint \050XtDisplay \050Graphics\051, GWFrame \050Graphics\051,) 172.8 131.02 T
(GWGetGC \050Graphics\051, 100, 100\051;) 201.6 120.02 T
(/*) 144 109.02 T
( * Pixmap 0 is displayed.) 144 98.02 T
283.46 508.77 295.29 524.74 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 9 Q
0 X
0 0 0 1 0 0 0 K
(i) 284.46 513.02 T
6 7 Q
(t) 287.31 518.15 T
(h) 289.79 518.15 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "49" 49
%%Page: "50" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Graphics Widg) 108 736.18 T
(et) 190.11 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(50) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
( */) 126 680.02 T
(GWDisplayFrame \050Graphics, DrawFrame++\051;) 154.8 669.02 T
(/*) 126 658.02 T
( * The next pixmap is set to be the current draw frame, is cleared) 126 647.02 T
( * and drawn into.) 126 636.02 T
( */) 126 625.02 T
(DrawFrame %= FrameCount;) 154.8 614.02 T
(GWDrawInFrame \050Graphics, DrawFrame\051;) 154.8 603.02 T
(GWClearFrame \050Graphics, DrawFrame\051;) 154.8 592.02 T
(XDrawPoint \050XtDisplay \050Graphics\051, GWFrame \050Graphics\051,) 154.8 581.02 T
(GWGetGC \050Graphics\051, 101, 101\051;) 183.6 570.02 T
0 12 Q
0.92 (Where) 108 545.02 P
4 F
2.21 (Graphics) 143.9 545.02 P
0 F
0.92 ( is a graphics widget and) 201.5 545.02 P
4 F
2.21 (FrameCount) 329 545.02 P
0 F
0.92 ( is the number of) 401 545.02 P
(pixmaps associated with that graphics widget.) 108 531.02 T
2 F
(5.3.3) 72.31 499.02 T
(Shared Memor) 108 499.02 T
(y Routines) 191.47 499.02 T
0 F
0.38 (The follo) 108 481.02 P
0.38 (wing routines are pro) 152.41 481.02 P
0.38 (vided for dealing with pixmaps in shared mem-) 255.69 481.02 P
(ory) 108 467.02 T
(.) 123.22 467.02 T
4 F
0.82 (GWShmPossible\050\051) 108 441.02 P
0 F
0.34 ( returns) 216 441.02 P
4 F
0.82 (TRUE) 256.01 441.02 P
0 F
0.34 ( if the X serv) 284.81 441.02 P
0.34 (er supports the shared mem-) 348.65 441.02 P
(ory e) 108 427.02 T
(xtension \050) 132.14 427.02 T
4 F
(XShm) 179.81 427.02 T
0 F
(\051 and the serv) 208.61 427.02 T
(er and client are running on the same host.) 273.41 427.02 T
7 10 Q
(int) 126 408.35 T
(GWShmPossible \050w\051) 126 396.35 T
(GraphicsWidget w;) 126 384.35 T
0 12 Q
0.68 (Ho) 108 359.02 P
0.68 (we) 122.36 359.02 P
0.68 (v) 136.06 359.02 P
0.68 (er) 141.88 359.02 P
0.68 (, e) 150.72 359.02 P
0.68 (v) 162.43 359.02 P
0.68 (en if shared memory is reported as possible, shared memory pix-) 168.25 359.02 P
0.44 (maps may still not succeed. F) 108 345.02 P
0.44 (or e) 251.99 345.02 P
0.44 (xample, some UNIX k) 270.57 345.02 P
0.44 (ernels are not capable) 380.4 345.02 P
-0.27 (of System V shared memory) 108 331.02 P
-0.27 (, and so an) 243.47 331.02 P
-0.27 (y attempts to create shared memory se) 293.82 331.02 P
-0.27 (g-) 476 331.02 P
0.58 (ments will f) 108 317.02 P
0.58 (ail miserably) 166.38 317.02 P
0.58 (. If a shared memory pixmap cannot be created, then) 228.51 317.02 P
0.7 (the graphics widget resorts to ordinary pixmaps. T) 108 303.02 P
0.7 (o determine whether a pix-) 353.9 303.02 P
(map w) 108 289.02 T
(as successfully created as shared, call) 140.21 289.02 T
4 F
(GWFrameShared\050\051) 323.15 289.02 T
0 F
(.) 431.15 289.02 T
7 10 Q
(int) 126 270.35 T
(GWFrameShared\050w, p\051) 126 258.35 T
(GraphicsWidget w;) 126 246.35 T
(int p;) 126 234.35 T
0 12 Q
0.59 (This function returns) 108 209.02 P
4 F
1.42 (TRUE) 213.43 209.02 P
0 F
0.59 ( only if the speci\336ed pixmap,) 242.23 209.02 P
7 F
1.42 (p) 388.78 209.02 P
0 F
0.59 (, is a shared mem-) 395.98 209.02 P
-0.1 (ory pixmap. An) 108 195.02 P
-0.1 (y shared memory functions which operate on a speci\336c pixmap) 183.28 195.02 P
2.39 (should not be called without \336rst making sure that the pixmap is actually) 108 181.02 P
(shared. F) 108 167.02 T
(or e) 151.81 167.02 T
(xample, gi) 169.96 167.02 T
(v) 220.32 167.02 T
(en a graphics widget) 226.14 167.02 T
4 F
(Graphics) 328.12 167.02 T
0 F
( and pixmap) 385.72 167.02 T
4 F
(i) 448.04 167.02 T
0 F
(:) 455.24 167.02 T
4 9 Q
(if \050GWFrameShared \050Graphics, i\051\051) 154.8 144.02 T
(GWZapShmPixmap\050Graphics, i\051;) 183.6 133.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "50" 50
%%Page: "51" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Con) 126 736.18 T
(venience Routines) 143.14 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (51) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 12 Q
-0.35 (GWGetBPL\050\051) 126 678.02 P
0 F
-0.15 ( returns the number of bytes per line associated with shared pix-) 198 678.02 P
(map) 126 664.02 T
7 F
(i) 149.66 664.02 T
0 F
( of graphics widget) 156.86 664.02 T
7 F
(w) 252.18 664.02 T
0 F
(.) 258.6 664.02 T
7 10 Q
(int) 144 645.35 T
(GWGetBPL \050w, i\051) 144 633.35 T
(GraphicsWidget w;) 144 621.35 T
(int i;) 144 609.35 T
4 12 Q
3.05 (GWGetFrameAddr\050\051) 126 584.02 P
0 F
1.27 ( returns the memory address associated with the pix-) 241.2 584.02 P
0.99 (map. This address can be used to access the data in the pixmap directly) 126 570.02 P
0.99 (, i.e.,) 479.35 570.02 P
(without using Xlib routines.) 126 556.02 T
7 10 Q
(char *) 144 537.35 T
(GWGetFrameAddr \050w, i\051) 144 525.35 T
(GraphicsWidget w;) 144 513.35 T
(int i;) 144 501.35 T
0 12 Q
0.79 (F) 126 476.02 P
0.79 (or e) 132.49 476.02 P
0.79 (xample the contents of pixmap 0 of graphics widget) 151.43 476.02 P
4 F
1.9 (Graphics) 410.84 476.02 P
0 F
0.79 ( can be) 468.44 476.02 P
(sa) 126 462.02 T
(v) 135.76 462.02 T
(ed in a \336le:) 141.58 462.02 T
4 9 Q
(int fp;) 172.8 439.02 T
(if \050GWShmPossible \050Graphics\051 && GWFrameShared \050Graphics, 0\051\051) 172.8 428.02 T
(fp = open \050"PixmapFile", O_WRONLY\051;) 201.6 417.02 T
(write \050fp, GWGetFrameAddr \050Graphics, 0\051,) 201.6 406.02 T
(GWGetBPL \050Graphics, 0\051 * GWHeight \050Graphics\051\051;) 230.4 395.02 T
4 12 Q
0.16 (GWZapShmPixmap\050\051) 126 370.02 P
0 F
0.07 ( remo) 241.2 370.02 P
0.07 (v) 268.75 370.02 P
0.07 (es the shared memory pixmap by detaching and) 274.57 370.02 P
(freeing the shared memory se) 126 356.02 T
(gment.) 267.78 356.02 T
7 10 Q
(void) 144 337.35 T
(GWZapShmPixmap \050w, i\051) 144 325.35 T
(GraphicsWidget w;) 144 313.35 T
(int i;) 144 301.35 T
0 12 Q
0.81 (If a process is e) 126 276.02 P
0.81 (xiting, it should release all of its shared memory se) 203.72 276.02 P
0.81 (gments as) 455.52 276.02 P
(follo) 126 262.02 T
(ws:) 148.37 262.02 T
4 9 Q
(int i;) 172.8 239.02 T
(if \050GWShmPossible \050Graphics\051\051) 172.8 228.02 T
(for \050i = 0; i < FrameCount; i++\051) 201.6 217.02 T
({) 201.6 206.02 T
(if \050GWFrameShared \050Graphics, i\051) 230.4 195.02 T
(GWZapShmPixmap \050Graphics, i\051;) 259.2 184.02 T
(}) 201.6 173.02 T
0 12 Q
1.93 (This releases an) 126 148.02 P
1.93 (y system resources tied up by the shared memory pixmaps) 206.33 148.02 P
-0.24 (which w) 126 134.02 P
-0.24 (ould otherwise not be released when the process e) 166.63 134.02 P
-0.24 (xits.) 404.45 134.02 P
4 F
-0.58 (Graphics) 427.55 134.02 P
0 F
-0.24 ( is a) 485.15 134.02 P
0.47 (graphics widget and) 126 120.02 P
4 F
1.13 (FrameCount) 227.06 120.02 P
0 F
0.47 ( is the number of pixmaps associated with) 299.06 120.02 P
(that graphics widget.) 126 106.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "51" 51
%%Page: "52" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(The Graphics Widg) 108 736.18 T
(et) 190.11 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(52) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "52" 52
%%Page: "53" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (53) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 6 \245) 126 677 S
0 24 Q
-0.48 (Sound) 252 677 S
0 12 Q
1.71 (The Sound module is a rarely used b) 126 424 P
1.71 (ut nonetheless e) 313.36 424 P
1.71 (xisting and potentially) 393.24 424 P
0.03 (useful part of the Zebra system. The Sound module is a separate process, simi-) 126 410 P
-0.09 (lar to the T) 126 396 P
-0.09 (imer module, which services requests to send audio \336les to the local) 178.32 396 P
-0.2 (audio de) 126 382 P
-0.2 (vice. This chapter describes the library interf) 166.5 382 P
-0.2 (ace to the sound function-) 380.14 382 P
0.07 (ality) 126 368 P
0.07 (. At the moment this chapter is v) 146.56 368 P
0.07 (ery short, due to the f) 303.52 368 P
0.07 (act that there is only) 406.4 368 P
(one function in the interf) 126 354 T
(ace.) 245.2 354 T
72 311 558 313 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 311 558 313 R
7 X
0 0 0 1 0 0 0 K
V
72 312 117 312 2 L
0.5 H
2 Z
0 X
N
126 312 558 312 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(6.1) 100.32 317 T
(Pla) 126 317 T
(ying A) 143.77 317 T
(udio Files) 180.08 317 T
0 F
2.44 (Clients can use the) 126 293 P
4 F
5.85 (DoSound\050\051) 229.07 293 P
0 F
2.44 ( function to request that an audio \336le be) 293.87 293 P
(played on the local audio de) 126 279 T
(vice.) 260.68 279 T
7 10 Q
(void) 144 260.33 T
(DoSound \050sound\051) 144 248.33 T
(char *sound;) 144 236.33 T
0 12 Q
0.03 (The single parameter) 126 211 P
7 F
0.07 (sound) 230.39 211 P
0 F
0.03 ( points to the name of the audio \336le which should) 266.39 211 P
0.45 (be played by the Sound process. This function \336rst checks whether the de) 126 197 P
0.45 (vice) 484.01 197 P
4 F
6.54 (/dev/audio) 126 183 P
0 F
2.73 ( is accessible. If it is accessible, it sends a message to the) 198 183 P
0.71 (\324Sound\325 process \050protocol) 126 169 P
4 F
1.7 (MT_SOUND) 255.76 169 P
0 F
0.71 (\051 to play the speci\336ed sound \336le. If the) 313.36 169 P
(de) 126 155 T
(vice is not accessible then no message is sent.) 137.03 155 T
0.5 (If the Sound process is not running or sound has been disabled, then the mes-) 126 129 P
1.43 (sage will be dropped and the call to) 126 115 P
4 F
3.44 (DoSound\050\051) 310.78 115 P
0 F
1.43 ( will ha) 375.58 115 P
1.43 (v) 414.21 115 P
1.43 (e no ef) 420.03 115 P
1.43 (fect. Note) 455.25 115 P
2.32 (there is no return v) 126 101 P
2.32 (alue indicating the success of f) 225.63 101 P
2.32 (ailure of the call. Also,) 384.74 101 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "53" 53
%%Page: "54" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Sound) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(54) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 12 Q
-0.47 (DoSound\050\051) 108 678.02 P
0 F
-0.2 ( returns immediately upon sending the message and does not w) 172.8 678.02 P
-0.2 (ait) 474 678.02 P
(for the Sound process to actually write the sound \336le to the audio de) 108 664.02 T
(vice.) 434.66 664.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "54" 54
%%Page: "55" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (55) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 7 \245) 126 677 S
0 24 Q
-0.48 (Direct Image T) 252 677 S
-0.48 (ransfer) 391.06 677 S
72 418 558 420 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 418 558 420 R
7 X
0 0 0 1 0 0 0 K
V
72 419 117 419 2 L
0.5 H
2 Z
0 X
N
126 419 558 419 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(7.1) 100.32 424 T
(Description) 126 424 T
0 F
1.12 (The image transfer module e) 126 400 P
1.12 (xists to f) 268.26 400 P
1.12 (acilitate the quick transfer of radar) 311.71 400 P
1.12 (-ori-) 482.68 400 P
1.28 (ented, raster image data between processes on the same host through shared) 126 386 P
2.13 (memory) 126 372 P
2.13 (. A producer process creates image data in a shared se) 165.22 372 P
2.13 (gment, then) 445.21 372 P
1.11 (transfers the se) 126 358 P
1.11 (gment to a consumer process when it is ready) 200.02 358 P
1.11 (. Consumers do) 426.77 358 P
(their thing, and return the se) 126 344 T
(gment back to the producer when done.) 261.13 344 T
0.63 (The primary \050if not sole\051 use of this module is to get image frames out of the) 126 318 P
(radar ingest module.) 126 304 T
1.5 (Modules using the direct image transfer utility should include the follo) 126 278 P
1.5 (wing) 480 278 P
(line:) 126 264 T
4 9 Q
(# include <ImageXfr.h>) 144 241 T
0 12 Q
-0.21 (An image transfer se) 126 216 P
-0.21 (gment is made up of one or more image sets. An image set) 224.84 216 P
0.36 (is a group of frames which are transferred as a unit. The use of more than one) 126 202 P
(frame allo) 126 188 T
(ws the producer and consumer processes to w) 174.68 188 T
(ork in parallel.) 394.18 188 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "55" 55
%%Page: "56" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Direct Ima) 108 736.18 T
(g) 151.43 736.18 T
(e T) 157.01 736.18 T
(ransf) 169.3 736.18 T
(er) 191.21 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(56) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 672.02 540 674.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 672.02 540 674.02 R
7 X
0 0 0 1 0 0 0 K
V
54 673.02 99 673.02 2 L
0.5 H
2 Z
0 X
N
108 673.02 540 673.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(7.2) 82.32 678.02 T
(Attac) 108 678.02 T
(hing to Imag) 137.88 678.02 T
(e T) 209.34 678.02 T
(ransf) 225.72 678.02 T
(er Segments) 254.94 678.02 T
0 F
-0.29 (Before an) 108 654.02 P
-0.29 (y w) 154.51 654.02 P
-0.29 (ork can be done, the image transfer se) 171.77 654.02 P
-0.29 (gment must be created. This) 351.51 654.02 P
0.39 (task usually f) 108 640.02 P
0.39 (alls on the producer process, which calls) 172.66 640.02 P
4 F
0.94 (IX_Create\050\051) 372.69 640.02 P
0 F
0.39 ( as fol-) 451.89 640.02 P
(lo) 108 626.02 T
(ws:) 117.04 626.02 T
7 10 Q
(ix_desc *) 126 607.35 T
(IX_Create \050key, xres, yres, nframe, nset, fields\051) 126 595.35 T
(int key, xres, yres, nframe, nset;) 126 583.35 T
(char *fields[nframe];) 126 571.35 T
0 12 Q
-0.3 (Where) 108 546.02 P
7 F
-0.72 (key) 142.68 546.02 P
0 F
-0.3 ( is the k) 164.28 546.02 P
-0.3 (e) 200.93 546.02 P
-0.3 (y to be used to identify the shared memory se) 206.08 546.02 P
-0.3 (gment,) 421.5 546.02 P
7 F
-0.72 (xres) 457.2 546.02 P
0 F
1.03 (and) 108 532.02 P
7 F
2.47 (yres) 129.36 532.02 P
0 F
1.03 ( are the resolution of the image frames,) 158.16 532.02 P
7 F
2.47 (nframe) 357.36 532.02 P
0 F
1.03 ( is the number of) 400.55 532.02 P
0.25 (frames in each set,) 108 518.02 P
7 F
0.61 (nset) 201.32 518.02 P
0 F
0.25 ( is the number of sets to create, and) 230.12 518.02 P
7 F
0.61 (fields) 405.03 518.02 P
0 F
0.25 ( is a list) 448.23 518.02 P
(of \336eld names to associate with the frames.) 108 504.02 T
2.28 (On successful conclusion, the return v) 108 478.02 P
2.28 (alue is a pointer to the opaque type) 302.4 478.02 P
4 F
0.29 (ix_desc) 108 464.02 P
0 F
0.12 (, which is used in subsequent image transfer calls. Should the create) 158.4 464.02 P
(f) 108 450.02 T
(ail,) 111.88 450.02 T
4 F
(NULL) 129.88 450.02 T
0 F
( is returned.) 158.68 450.02 T
0.14 (T) 108 424.02 P
0.14 (o attach to an e) 114.37 424.02 P
0.14 (xisting se) 187.38 424.02 P
0.14 (gment \050usually as the consumer\051,) 233.01 424.02 P
4 F
0.32 (IX_HookIn\050\051) 395.66 424.02 P
0 F
0.14 ( is) 474.86 424.02 P
(used:) 108 410.02 T
7 10 Q
(ix_desc *) 126 391.35 T
(IX_HookIn \050key, name, xres, yres, nfield, fields\051) 126 379.35 T
(int key, *xres, *yres, *nfield;) 126 367.35 T
(char *name, **fields;) 126 355.35 T
0 12 Q
0.23 (Where) 108 330.02 P
7 F
0.55 (key) 143.21 330.02 P
0 F
0.23 ( is the k) 164.81 330.02 P
0.23 (e) 203.05 330.02 P
0.23 (y to be used to \336nd the shared memory se) 208.2 330.02 P
0.23 (gment,) 409.73 330.02 P
7 F
0.55 (name) 445.96 330.02 P
0 F
0.23 ( is) 474.77 330.02 P
0.9 (the name of the current process \050as passed to) 108 316.02 P
4 F
2.16 (msg_connect\050\051) 333.72 316.02 P
0 F
0.9 (\051. On a suc-) 427.32 316.02 P
0.15 (cessful attach, the return v) 108 302.02 P
0.15 (alue is an) 234.6 302.02 P
4 F
0.36 (ix_desc) 283.38 302.02 P
0 F
0.15 ( pointer which is used in subse-) 333.78 302.02 P
2.8 (quent calls,) 108 288.02 P
7 F
6.72 (xres) 171.26 288.02 P
0 F
2.8 ( and) 200.06 288.02 P
7 F
6.72 (yres) 228.98 288.02 P
0 F
2.8 ( contain the resolution of the image frames,) 257.78 288.02 P
7 F
0.3 (nfield) 108 274.02 P
0 F
0.13 ( is the number of these frames, and) 151.2 274.02 P
7 F
0.3 (fields) 323.18 274.02 P
0 F
0.13 ( is assigned to the names) 366.38 274.02 P
(of the \336elds for each frame. If the attach f) 108 260.02 T
(ails,) 307.81 260.02 T
4 F
(NULL) 330.48 260.02 T
0 F
( is returned.) 359.28 260.02 T
54 217.02 540 219.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 217.02 540 219.02 R
7 X
0 0 0 1 0 0 0 K
V
54 218.02 99 218.02 2 L
0.5 H
2 Z
0 X
N
108 218.02 540 218.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(7.3) 82.32 223.02 T
(Detac) 108 223.02 T
(hing Fr) 140.56 223.02 T
(om Ima) 180.98 223.02 T
(g) 222.88 223.02 T
(e Segments) 230.33 223.02 T
0 F
0.34 (When done with an image transfer se) 108 199.02 P
0.34 (gment,) 288.46 199.02 P
4 F
0.81 (IX_Detach\050\051) 324.8 199.02 P
0 F
0.34 ( should be called) 404 199.02 P
(as follo) 108 185.02 T
(ws:) 143.36 185.02 T
7 10 Q
(void) 126 166.35 T
(IX_Detach \050desc\051) 126 154.35 T
(ix_desc *desc;) 126 142.35 T
0 12 Q
1.23 (where) 108 117.02 P
7 F
2.95 (desc) 141.54 117.02 P
0 F
1.23 ( is an image set descriptor obtained from one of the abo) 170.35 117.02 P
1.23 (v) 450.63 117.02 P
1.23 (e rou-) 456.45 117.02 P
(tines.) 108 103.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "56" 56
%%Page: "57" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Pr) 126 736.18 T
(oducer Interface) 135.32 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (57) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.47 (If the process which creates the image transfer se) 126 678.02 P
0.47 (gment f) 365.47 678.02 P
0.47 (ails to detach from it) 402.81 678.02 P
-0.16 (before e) 126 664.02 P
-0.16 (xiting, the se) 164.63 664.02 P
-0.16 (gment will continue to e) 225.79 664.02 P
-0.16 (xist and tak) 341.63 664.02 P
-0.16 (e up system resources.) 396.51 664.02 P
72 621.02 558 623.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 621.02 558 623.02 R
7 X
0 0 0 1 0 0 0 K
V
72 622.02 117 622.02 2 L
0.5 H
2 Z
0 X
N
126 622.02 558 622.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(7.4) 100.32 627.02 T
(Pr) 126 627.02 T
(oducer Interface) 138.43 627.02 T
0 F
1.18 (Before a producer process be) 126 603.02 P
1.18 (gins on an image, it must obtain a frame set in) 270.5 603.02 P
1.23 (which to write. This is accomplished with) 126 589.02 P
4 F
2.96 (IX_GetWriteFrame\050\051) 338.61 589.02 P
0 F
1.23 ( as fol-) 468.21 589.02 P
(lo) 126 575.02 T
(ws:) 135.04 575.02 T
7 10 Q
(int) 144 556.35 T
(IX_GetWriteFrame \050desc, frames, verbose\051) 144 544.35 T
(ix_desc *desc;) 144 532.35 T
(char **frames;) 144 520.35 T
(int verbose;) 144 508.35 T
0 12 Q
0.47 (Where) 126 483.02 P
7 F
1.13 (desc) 161.45 483.02 P
0 F
0.47 ( is an image transfer se) 190.25 483.02 P
0.47 (gment descriptor pointer) 302.73 483.02 P
0.47 (. If a frame set is) 421 483.02 P
3.31 (a) 126 469.02 P
3.31 (v) 131.09 469.02 P
3.31 (ailable for writing, the return v) 136.79 469.02 P
3.31 (alue is a non-ne) 301.02 469.02 P
3.31 (g) 386.43 469.02 P
3.31 (ati) 392.37 469.02 P
3.31 (v) 404.07 469.02 P
3.31 (e set number) 409.89 469.02 P
3.31 (, and) 477.36 469.02 P
7 F
0.83 (frames) 126 455.02 P
0 F
0.34 ( is set to point to the actual image frames. Otherwise the return v) 169.2 455.02 P
0.34 (alue) 484.01 455.02 P
0.27 (is ne) 126 441.02 P
0.27 (g) 148.43 441.02 P
0.27 (ati) 154.37 441.02 P
0.27 (v) 166.07 441.02 P
0.27 (e. If) 171.89 441.02 P
7 F
0.66 (verbose) 194.75 441.02 P
0 F
0.27 ( is nonzero, an) 245.15 441.02 P
0.27 (y f) 315.78 441.02 P
0.27 (ailures to \336nd an a) 328.93 441.02 P
0.27 (v) 418.44 441.02 P
0.27 (ailable frame set) 424.14 441.02 P
0.57 (will be logged as problems to) 126 427.02 P
4 F
1.37 (msg_ELog\050\051) 274.08 427.02 P
0 F
0.57 (. Realtime producers will proba-) 346.08 427.02 P
1.81 (bly w) 126 413.02 P
1.81 (ant to w) 154.69 413.02 P
1.81 (arn about delays in the a) 196.84 413.02 P
1.81 (v) 322.61 413.02 P
1.81 (ailability of writable image sets, in) 328.31 413.02 P
1.61 (which case) 126 399.02 P
7 F
3.87 (verbose) 185.2 399.02 P
0 F
1.61 ( should be nonzero. F) 235.6 399.02 P
1.61 (or less time-critical applications) 345.52 399.02 P
0.94 (which are prepared to w) 126 385.02 P
0.94 (ait for the consumer) 245.61 385.02 P
0.94 (, the w) 344.27 385.02 P
0.94 (arnings will be an anno) 378.37 385.02 P
0.94 (y-) 494 385.02 P
(ance.) 126 371.02 T
0.48 (After a successful return, the gi) 126 345.02 P
0.48 (v) 278.7 345.02 P
0.48 (en set is o) 284.52 345.02 P
0.48 (wned by the producer process until) 333.32 345.02 P
7.52 (e) 126 331.02 P
7.52 (xplicitly transferred to the consumer) 131.15 331.02 P
7.52 (. T) 335.19 331.02 P
7.52 (o ef) 355.08 331.02 P
7.52 (fect this transfer) 380.62 331.02 P
7.52 (, call) 473.15 331.02 P
4 F
(IX_SendFrame\050\051) 126 317.02 T
0 F
(.) 226.8 317.02 T
7 10 Q
(void) 144 298.35 T
(IX_SendFrame \050desc, set, when, rg, loc, scale, xmin, ymin,) 144 286.35 T
(xmax, ymax, attr\051) 252 274.35 T
(ix_desc *desc;) 144 262.35 T
(int set, xmin, ymin, xmax, ymax;) 144 250.35 T
(RGrid *rg;) 144 238.35 T
(Location *loc;) 144 226.35 T
(ScaleInfo *scale;) 144 214.35 T
(char *attr;) 144 202.35 T
0 12 Q
2.82 (Where) 126 177.02 P
7 F
6.76 (desc) 163.8 177.02 P
0 F
2.82 ( is the image transfer descriptor) 192.6 177.02 P
2.82 (,) 357.84 177.02 P
7 F
6.76 (set) 366.66 177.02 P
0 F
2.82 ( is the set number \050as) 388.26 177.02 P
1.16 (obtained from) 126 163.02 P
4 F
2.79 (IX_GetWriteFrame\050\051) 198.98 163.02 P
0 F
1.16 (\051,) 328.58 163.02 P
7 F
2.79 (when) 339.73 163.02 P
0 F
1.16 ( is the time associated with) 368.54 163.02 P
0.66 (this image,) 126 149.02 P
7 F
1.59 (rg) 183 149.02 P
0 F
0.66 ( is an) 197.4 149.02 P
4 F
1.59 (RGrid) 227.72 149.02 P
0 F
0.66 ( \050Section) 263.72 149.02 P
0.66 (3.2 on page) 310.38 149.02 P
0.66 (29\051 structure describing the) 370.37 149.02 P
1.04 (image resolution,) 126 135.02 P
7 F
2.51 (loc) 214.42 135.02 P
0 F
1.04 ( describes the location \050Section) 236.02 135.02 P
1.04 (3.1\051 of the grid origin,) 393.17 135.02 P
-0.08 (and) 126 121.02 P
7 F
-0.19 (scale) 146.25 121.02 P
0 F
-0.08 ( \050Section) 182.25 121.02 P
-0.08 (3.3\051 gi) 228.16 121.02 P
-0.08 (v) 259.11 121.02 P
-0.08 (es the scaling information for the interpretation of) 264.93 121.02 P
0.43 (data points. As for the rest of the parameters,) 126 107.02 P
7 F
1.02 (xmin) 348.77 107.02 P
0 F
0.43 (,) 377.57 107.02 P
7 F
1.02 (ymin) 384 107.02 P
0 F
0.43 (,) 412.8 107.02 P
7 F
1.02 (xmax) 419.22 107.02 P
0 F
0.43 (, and) 448.02 107.02 P
7 F
1.02 (ymax) 475.2 107.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "57" 57
%%Page: "58" 58
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Direct Ima) 108 736.18 T
(g) 151.43 736.18 T
(e T) 157.01 736.18 T
(ransf) 169.3 736.18 T
(er) 191.21 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(58) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
2.66 (gi) 108 678.02 P
2.66 (v) 117.04 678.02 P
2.66 (e a bounding box outside which no good data e) 122.86 678.02 P
2.66 (xists, and) 372.9 678.02 P
7 F
6.38 (attr) 426.55 678.02 P
0 F
2.66 ( is an) 455.35 678.02 P
(attrib) 108 664.02 T
(ute string to be attached to the image.) 133.09 664.02 T
0 (After a call to) 108 638.02 P
4 F
0 (IX_SendFrame\050\051) 177.32 638.02 P
0 F
0 (, the gi) 278.12 638.02 P
0 (v) 310.82 638.02 P
0 (en image set is no longer o) 316.64 638.02 P
0 (wned by) 445.01 638.02 P
(the producer) 108 624.02 T
(, and should not be modi\336ed.) 167.83 624.02 T
-0.28 (A producer can learn the identity of its consumer with) 108 598.02 P
4 F
-0.68 (IX_GetConsumer\050\051) 367.8 598.02 P
0 F
-0.28 (.) 483 598.02 P
7 10 Q
(char *) 126 579.35 T
(IX_GetConsumer \050desc\051) 126 567.35 T
(ix_desc *desc;) 126 555.35 T
0 12 Q
1.88 (As abo) 108 530.02 P
1.88 (v) 143.36 530.02 P
1.88 (e,) 149.18 530.02 P
7 F
4.52 (desc) 162.39 530.02 P
0 F
1.88 ( is the image transfer descriptor) 191.19 530.02 P
1.88 (. The returned v) 351.58 530.02 P
1.88 (alue is the) 433.57 530.02 P
0.64 (name of the consumer as it w) 108 516.02 P
0.64 (as passed to) 252.35 516.02 P
4 F
1.53 (IX_HookIn\050\051) 314.59 516.02 P
0 F
0.64 (. If no consumer is) 393.79 516.02 P
-0.2 (currently attached, the return v) 108 502.02 P
-0.2 (alue will be an empty string. Note that the return) 254.51 502.02 P
0.9 (v) 108 488.02 P
0.9 (alue will not be) 113.7 488.02 P
4 F
2.17 (NULL) 194.65 488.02 P
0 F
0.9 (, b) 223.45 488.02 P
0.9 (ut rather a string whose \336rst character is the) 236.11 488.02 P
4 F
2.17 (NULL) 457.2 488.02 P
0 F
(byte.) 108 474.02 T
54 431.02 540 433.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 431.02 540 433.02 R
7 X
0 0 0 1 0 0 0 K
V
54 432.02 99 432.02 2 L
0.5 H
2 Z
0 X
N
108 432.02 540 432.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(7.5) 82.32 437.02 T
(Consumer Interface) 108 437.02 T
0 F
1.48 (Consumer processes are noti\336ed when an image set becomes a) 108 413.02 P
1.48 (v) 422.02 413.02 P
1.48 (ailable by a) 427.72 413.02 P
-0.07 (message using the) 108 399.02 P
4 F
-0.17 (MT_IMAGEXFR) 198.12 399.02 P
0 F
-0.07 ( protocol. The body of the message is a sin-) 277.32 399.02 P
1.13 (gle inte) 108 385.02 P
1.13 (ger v) 144.61 385.02 P
1.13 (alue, containing the number of the image set which has become) 169.77 385.02 P
(a) 108 371.02 T
(v) 113.09 371.02 T
(ailable.) 118.79 371.02 T
1.28 (After noti\336cation, the consumer process may obtain the image data with the) 108 345.02 P
(function) 108 331.02 T
4 F
(IX_GetReadFrame\050\051) 151 331.02 T
0 F
(.) 273.4 331.02 T
7 10 Q
(int) 126 312.35 T
(IX_GetReadFrame \050desc, set, frames, when, rg, loc, scale,) 126 300.35 T
(xmin, ymin, xmax, ymax, attr\051;) 234 288.35 T
(ix_desc *desc;) 126 276.35 T
(int set, *xmin, *ymin, *xmax, *ymax;) 126 264.35 T
(char **frames, **attr;) 126 252.35 T
(time *when;) 126 240.35 T
(RGrid *rg;) 126 228.35 T
(Location *loc;) 126 216.35 T
(ScaleInfo *scale;) 126 204.35 T
0 12 Q
1.5 (Where) 108 179.02 P
7 F
3.6 (desc) 144.48 179.02 P
0 F
1.5 ( is the image transfer descriptor) 173.28 179.02 P
1.5 (, and) 331.93 179.02 P
7 F
3.6 (set) 361.25 179.02 P
0 F
1.5 ( is the number of an) 382.85 179.02 P
0.38 (image set which has been made a) 108 165.02 P
0.38 (v) 269.97 165.02 P
0.38 (ailable. On return, if) 275.67 165.02 P
7 F
0.9 (set) 377.82 165.02 P
0 F
0.38 ( is truly a) 399.42 165.02 P
0.38 (v) 445.31 165.02 P
0.38 (ailable,) 451.01 165.02 P
0.31 (the return v) 108 151.02 P
0.31 (alue is) 163.65 151.02 P
4 F
0.75 (TRUE) 198.27 151.02 P
0 F
0.31 (,) 227.07 151.02 P
7 F
0.75 (frames) 233.38 151.02 P
0 F
0.31 ( is set to the address of each frame, and the) 276.58 151.02 P
2.73 (rest of the parameters ha) 108 137.02 P
2.73 (v) 236.66 137.02 P
2.73 (e the same meaning as in) 242.48 137.02 P
4 F
6.56 (IX_SendFrame\050\051) 382.2 137.02 P
0 F
2.73 (,) 483 137.02 P
(abo) 108 123.02 T
(v) 125.15 123.02 T
(e.) 130.97 123.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "58" 58
%%Page: "59" 59
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Miscellaneous Calls) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (59) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0.69 (When the consumer process is \336nished with a frame set, it should return it to) 126 678.02 P
(the producer with) 126 664.02 T
4 F
(IX_ReleaseFrame\050\051) 213.65 664.02 T
0 F
(.) 336.05 664.02 T
7 10 Q
(void) 144 645.35 T
(IX_ReleaseFrame \050desc, set\051) 144 633.35 T
(ix_desc *desc;) 144 621.35 T
(int set;) 144 609.35 T
0 12 Q
1.5 (Where) 126 584.02 P
7 F
3.6 (desc) 162.48 584.02 P
0 F
1.5 ( is the image transfer descriptor) 191.28 584.02 P
1.5 (, and) 349.93 584.02 P
7 F
3.6 (set) 379.25 584.02 P
0 F
1.5 ( is the number of an) 400.85 584.02 P
2.65 (image set o) 126 570.02 P
2.65 (wned by the consumer) 185.67 570.02 P
2.65 (. After this call, the gi) 301.28 570.02 P
2.65 (v) 419.23 570.02 P
2.65 (en image set is) 425.05 570.02 P
1.49 (released to the producer process, and should not be referenced ag) 126 556.02 P
1.49 (ain by the) 453.7 556.02 P
(consumer) 126 542.02 T
(.) 172 542.02 T
72 499.02 558 501.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 499.02 558 501.02 R
7 X
0 0 0 1 0 0 0 K
V
72 500.02 117 500.02 2 L
0.5 H
2 Z
0 X
N
126 500.02 558 500.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(7.6) 100.32 505.02 T
(Miscellaneous Calls) 126 505.02 T
4 F
0.67 (IX_Initialize\050\051) 126 481.02 P
0 F
0.28 ( may be called to initialize all frames in an image trans-) 234 481.02 P
(fer se) 126 467.02 T
(gment to a gi) 152.14 467.02 T
(v) 214.84 467.02 T
(en v) 220.66 467.02 T
(alue.) 240.68 467.02 T
7 10 Q
(void) 144 448.35 T
(IX_Initialize \050desc, value\051) 144 436.35 T
(ix_desc *desc;) 144 424.35 T
(char value;) 144 412.35 T
0 12 Q
0.6 (This routine should only be called when it is certain that it is desirable to ini-) 126 387.02 P
(tialize all frame sets.) 126 373.02 T
0.34 (A suitably pri) 126 347.02 P
0.34 (vile) 192.38 347.02 P
0.34 (ged process may lock the image transfer se) 210.21 347.02 P
0.34 (gment into ph) 418.7 347.02 P
0.34 (ysi-) 486 347.02 P
(cal memory with) 126 333.02 T
4 F
(IX_LockMemory\050\051) 210.32 333.02 T
0 F
(.) 318.32 333.02 T
7 10 Q
(void) 144 314.35 T
(IX_LockMemory \050desc\051) 144 302.35 T
(ix_desc *desc;) 144 290.35 T
0 12 Q
-0.09 (If the process is running as root, the image transfer se) 126 265.02 P
-0.09 (gment will be lock) 381.83 265.02 P
-0.09 (ed into) 471.09 265.02 P
1.29 (memory from then on, thus greatly impro) 126 251.02 P
1.29 (ving performance. When an image) 332.55 251.02 P
1.32 (transfer se) 126 237.02 P
1.32 (gment is thus lock) 176.78 237.02 P
1.32 (ed, it becomes e) 268.29 237.02 P
1.32 (v) 349.27 237.02 P
1.32 (en more important to delete it) 355.08 237.02 P
2.38 (when it is no longer needed, since a lar) 126 223.02 P
2.38 (ge amount of ph) 331.82 223.02 P
2.38 (ysical memory is) 417.23 223.02 P
(una) 126 209.02 T
(v) 143.09 209.02 T
(ailable for an) 148.79 209.02 T
(y other use until this is done.) 211.92 209.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "59" 59
%%Page: "60" 60
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Direct Ima) 108 736.18 T
(g) 151.43 736.18 T
(e T) 157.01 736.18 T
(ransf) 169.3 736.18 T
(er) 191.21 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(60) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "60" 60
%%Page: "61" 61
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 445.03 558 445.03 2 L
2 Z
N
72 74.02 558 74.02 2 L
0.25 H
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (61) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
1.2 (\245 CHAPTER 8 \245) 126 677 S
0 24 Q
-0.48 (General Utilities) 252 677 S
0 12 Q
0.35 (This chapter houses general routines that just could not \336nd a home an) 126 424 P
0.35 (ywhere) 468.68 424 P
0.84 (else. Most ha) 126 410 P
0.84 (v) 191.1 410 P
0.84 (e general utility) 196.92 410 P
0.84 (, and just about an) 273.15 410 P
0.84 (y zebra application may \336nd) 363.99 410 P
(itself needing one or more of them.) 126 396 T
72 353 558 355 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 353 558 355 R
7 X
0 0 0 1 0 0 0 K
V
72 354 117 354 2 L
0.5 H
2 Z
0 X
N
126 354 558 354 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(8.1) 100.32 359 T
(Con\336guration V) 126 359 T
(ariab) 215.28 359 T
(les) 243.84 359 T
0 F
1.91 (The library interf) 126 335 P
1.91 (ace encapsulates access to some important directory paths) 212.35 335 P
1.16 (and run-time v) 126 321 P
1.16 (ariables through se) 198.68 321 P
1.16 (v) 291.36 321 P
1.16 (eral con) 297.17 321 P
1.16 (v) 336.17 321 P
1.16 (enient functions. This allo) 341.99 321 P
1.16 (ws cli-) 470.51 321 P
-0.28 (ents access to the information as needed without kno) 126 307 P
-0.28 (wing ho) 376.74 307 P
-0.28 (w or from where it) 415.15 307 P
0.29 (is deri) 126 293 P
0.29 (v) 155.65 293 P
0.29 (ed. The compile-time def) 161.47 293 P
0.29 (aults and the checks for the run-time en) 283.52 293 P
0.29 (viron-) 474.67 293 P
(ment are all implemented within the library interf) 126 279 T
(ace.) 363.52 279 T
2 F
(8.1.1) 90.31 247 T
(Director) 126 247 T
(y P) 172.13 247 T
(aths) 189.78 247 T
0 F
0.56 (At the moment, \336v) 126 229 P
0.56 (e directory paths can be retrie) 218.17 229 P
0.56 (v) 362.94 229 P
0.56 (ed through the library inter-) 368.76 229 P
0.84 (f) 126 215 P
0.84 (ace: the base directory) 129.88 215 P
0.84 (, the binary directory) 239.24 215 P
0.84 (, the library directory) 341.62 215 P
0.84 (, the project) 445.33 215 P
0.14 (directory) 126 201 P
0.14 (, and the data directory) 168.54 201 P
0.14 (.) 278.63 201 P
0 9.6 Q
0.11 (1) 281.63 205.8 P
0 12 Q
0.14 ( The base directory is the top directory of the) 286.43 201 P
-0.01 (installation, such as) 126 187 P
4 F
-0.02 (/zebra) 223.31 187 P
0 F
-0.01 (. It def) 266.51 187 P
-0.01 (aults to the v) 298.03 187 P
-0.01 (alue of the compile-time sym-) 359.38 187 P
0.8 (bol) 126 173 P
4 F
1.93 (BaseDir) 145.14 173 P
0 F
0.8 (, b) 195.06 173 P
0.8 (ut it can be o) 207.62 173 P
0.8 (v) 272.65 173 P
0.8 (erridden by the run-time en) 278.47 173 P
0.8 (vironment v) 412.51 173 P
0.8 (ariable) 471.35 173 P
4 F
1.22 (ZEB_TOPDIR) 126 159 P
0 F
0.51 (. The binary and library directories are the directories in which) 198 159 P
0.67 (the binary and library \336les were installed, respecti) 126 145 P
0.67 (v) 370.32 145 P
0.67 (ely) 376.14 145 P
0.67 (. If no base directory is) 390.02 145 P
72 110.98 558 140.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 118.98 270 118.98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
-0.22 (1.  The directory paths and their corresponding compile-time and run-time settings are also e) 126 104.98 P
-0.22 (xplained in the) 456.51 104.98 P
6 F
-0.22 (Zebr) 511.6 104.98 P
-0.22 (a instal-) 528.46 104.98 P
(lation manual) 126 94.98 T
0 F
(.) 176.26 94.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "61" 61
%%Page: "62" 62
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(General Utilities) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(62) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
1.85 (speci\336ed in) 108 678.02 P
4 F
4.44 (ZEB_TOPDIR) 169.7 678.02 P
0 F
1.85 (, the binary and library directories def) 241.7 678.02 P
1.85 (ault to the) 434.3 678.02 P
0.69 (compile-time symbols) 108 664.02 P
4 F
1.66 (BinDir) 219.38 664.02 P
0 F
0.69 ( and) 262.58 664.02 P
4 F
1.66 (LibDir) 287.29 664.02 P
0 F
0.69 (. Ho) 329.83 664.02 P
0.69 (we) 350.89 664.02 P
0.69 (v) 364.58 664.02 P
0.69 (er) 370.4 664.02 P
0.69 (, if a base directory is) 379.24 664.02 P
3.26 (e) 108 650.02 P
3.26 (xplicitly gi) 113.15 650.02 P
3.26 (v) 168.46 650.02 P
3.26 (en in) 174.27 650.02 P
4 F
7.83 (ZEB_TOPDIR) 207.46 650.02 P
0 F
3.26 (, then the binary and library directories) 279.46 650.02 P
-0.07 (become the) 108 636.02 P
4 F
-0.16 (bin) 165.85 636.02 P
0 F
-0.07 ( and) 187.45 636.02 P
4 F
-0.16 (lib) 210.65 636.02 P
0 F
-0.07 ( subdirectories of the base directory) 232.25 636.02 P
-0.07 (.) 402.76 636.02 P
0 9.6 Q
-0.05 (1) 405.76 640.82 P
0 12 Q
-0.07 ( The data direc-) 410.56 636.02 P
1.49 (tory comes from the) 108 622.02 P
4 F
3.58 (DATA_DIR) 213.95 622.02 P
0 F
1.49 ( en) 271.55 622.02 P
1.49 (vironment v) 286.88 622.02 P
1.49 (ariable when present, else it) 346.41 622.02 P
(def) 108 608.02 T
(aults to the compile-time v) 123.2 608.02 T
(alue of the) 251.57 608.02 T
4 F
(DataDir) 305.22 608.02 T
0 F
( symbol from) 355.62 608.02 T
4 F
(config.h) 423.29 608.02 T
0 F
(.) 480.89 608.02 T
5.37 (The project directory is a little more complicated. The v) 108 582.02 P
5.37 (alue of the) 424.61 582.02 P
4 F
2.22 (ZEB_PROJECT) 108 568.02 P
0 F
0.93 ( en) 187.2 568.02 P
0.93 (vironment v) 201.97 568.02 P
0.93 (ariable tak) 260.93 568.02 P
0.93 (es precedence, b) 312.05 568.02 P
0.93 (ut the v) 392.62 568.02 P
0.93 (alue can be) 430.17 568.02 P
0.17 (either an absolute or relati) 108 554.02 P
0.17 (v) 233.68 554.02 P
0.17 (e path name. If the v) 239.5 554.02 P
0.17 (alue is an absolute path \050i.e., it) 338.68 554.02 P
0.38 (be) 108 540.02 P
0.38 (gins with a slash: \324/\325\051 then the v) 119.15 540.02 P
0.38 (alue is copied e) 273.2 540.02 P
0.38 (xactly into the project direc-) 348.49 540.02 P
0.93 (tory path. Otherwise, the v) 108 526.02 P
0.93 (alue is assumed to be the name of a project direc-) 239.41 526.02 P
0.51 (tory) 108 512.02 P
0.51 (, either under the) 126.55 512.02 P
4 F
1.22 (project) 212.89 512.02 P
0 F
0.51 ( subdirectory of the base directory) 263.29 512.02 P
0.51 (, or directly) 429.33 512.02 P
0.34 (under the base directory) 108 498.02 P
0.34 (. If) 223.88 498.02 P
4 F
0.82 (ZEB_PROJECT) 241.56 498.02 P
0 F
0.34 ( is not present in the en) 320.76 498.02 P
0.34 (vironment,) 433.67 498.02 P
0.47 (and it could not be used to \336nd an accessible directory) 108 484.02 P
0.47 (, then the project direc-) 372.5 484.02 P
(tory re) 108 470.02 T
(v) 139.36 470.02 T
(erts to \324.) 145.18 470.02 T
(\325, the process\325) 184 470.02 T
(s current w) 250.98 470.02 T
(orking directory) 304.18 470.02 T
(.) 381.05 470.02 T
0.05 (The library interf) 108 444.02 P
0.05 (ace contains a separate function call for accessing each direc-) 190.63 444.02 P
(tory path.) 108 430.02 T
7 10 Q
(char *) 126 411.35 T
(GetBaseDir \050\051) 126 399.35 T
(char *) 126 375.35 T
(GetLibDir \050\051) 126 363.35 T
(char *) 126 339.35 T
(GetBinDir \050\051) 126 327.35 T
(char *) 126 303.35 T
(GetProjDir \050\051) 126 291.35 T
(char *) 126 267.35 T
(GetDataDir \050\051) 126 255.35 T
0 12 Q
0.12 (Each function returns a pointer to a string. The string is permanently v) 108 230.02 P
0.12 (alid, b) 446.78 230.02 P
0.12 (ut) 476.66 230.02 P
(it should not be changed.) 108 216.02 T
2 F
(8.1.2) 72.31 184.02 T
(UI Con\336guration V) 108 184.02 T
(ariab) 212.62 184.02 T
(les) 241.18 184.02 T
0 F
-0.17 (The directory paths and other v) 108 166.02 P
-0.17 (ariables can also be accessed as UI v) 257.12 166.02 P
-0.17 (ariables for) 431.86 166.02 P
4.19 (programs which use the RDSS UI package. A program must \336rst call) 108 152.02 P
54 110.98 540 140.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 118.98 252 118.98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
-0.13 (1.  This is wh) 108 104.98 P
-0.13 (y bin and lib should ha) 156.19 104.98 P
-0.13 (v) 237.62 104.98 P
-0.13 (e the same parent directory in a Zebra installation, in case the location of the instal-) 241.99 104.98 P
(lation e) 108 94.98 T
(v) 134.52 94.98 T
(er needs to be e) 138.89 94.98 T
(xplicitly o) 194.73 94.98 T
(v) 231.35 94.98 T
(erridden by the run-time en) 235.72 94.98 T
(vironment v) 333.84 94.98 T
(ariables.) 377.36 94.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "62" 62
%%Page: "63" 63
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(File Sear) 126 736.18 T
(c) 163.34 736.18 T
(hing) 168.26 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (63) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 12 Q
22 (ui_init\050\051) 126 678.02 P
0 F
9.17 ( to initialize the UI library) 190.8 678.02 P
9.17 (, and then it can call) 361.51 678.02 P
4 F
(SetupConfigVariables\050\051) 126 664.02 T
0 F
( to assign the v) 284.4 664.02 T
(ariables.) 356.1 664.02 T
7 10 Q
(void) 144 645.35 T
(SetupConfigVariables \050\051) 144 633.35 T
0 12 Q
2.57 (This function \336rst mak) 126 608.02 P
2.57 (es sure the directory paths ha) 243.26 608.02 P
2.57 (v) 395.49 608.02 P
2.57 (e been initialized as) 401.31 608.02 P
1.78 (described abo) 126 594.02 P
1.78 (v) 193.91 594.02 P
1.78 (e. Then it assigns v) 199.73 594.02 P
1.78 (alues to the follo) 298.86 594.02 P
1.78 (wing symbols in the UI) 384.22 594.02 P
(v) 126 580.02 T
(ariable table \324ui$v) 131.7 580.02 T
(ariable_table\325.) 218.71 580.02 T
4 F
(c$basedir) 144 554.02 T
0 F
(Base directory) 252 554.02 T
(.) 320.87 554.02 T
4 F
(c$libdir) 144 534.02 T
0 F
(Library directory) 252 534.02 T
(.) 333.53 534.02 T
4 F
(c$bindir) 144 514.02 T
0 F
(Binary drectory) 252 514.02 T
(.) 326.87 514.02 T
4 F
(c$projdir) 144 494.02 T
0 F
(Project directory) 252 494.02 T
(.) 331.54 494.02 T
4 F
(c$datadir) 144 474.02 T
0 F
(Data directory) 252 474.02 T
(.) 320.2 474.02 T
4 F
(c$rdssdir) 144 454.02 T
0 F
(RDSS directory) 252 454.02 T
(, from the) 327.55 454.02 T
4 F
(RDSSDir) 377.54 454.02 T
0 F
( symbol in) 427.94 454.02 T
4 F
(config.h) 252 440.02 T
0 F
( during compilation.) 309.6 440.02 T
4 F
(c$msgname) 144 420.02 T
0 F
(Message handler name for this process.) 252 420.02 T
(By con) 126 394.02 T
(v) 159.85 394.02 T
(ention, all of the con\336guration v) 165.67 394.02 T
(ariables use the pre\336x \324c$\325.) 320.03 394.02 T
72 351.02 558 353.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 351.02 558 353.02 R
7 X
0 0 0 1 0 0 0 K
V
72 352.02 117 352.02 2 L
0.5 H
2 Z
0 X
N
126 352.02 558 352.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(8.2) 100.32 357.02 T
(File Sear) 126 357.02 T
(c) 175.79 357.02 T
(hing) 182.34 357.02 T
0 F
-0.27 (The) 126 333.02 P
4 F
-0.65 (FindFile\050\051) 147.39 333.02 P
0 F
-0.27 ( function simpli\336es searching for \336les among a list of direc-) 219.39 333.02 P
(tory paths.) 126 319.02 T
7 10 Q
(int) 144 300.35 T
(FindFile \050file, spath, dest\051) 144 288.35 T
(char *file, *spath, *dest;) 144 276.35 T
0 12 Q
0.58 (The) 126 251.02 P
7 F
1.38 (file) 148.24 251.02 P
0 F
0.58 ( parameter contains the \336le name to be found, while) 177.04 251.02 P
7 F
1.38 (spath) 435.08 251.02 P
0 F
0.58 ( points) 471.08 251.02 P
1.53 (to the search path. The search path consists of a comma-separated string of) 126 237.02 P
-0.16 (directory paths in which to look for the \336le. All of the characters between com-) 126 223.02 P
-0.01 (mas are tak) 126 209.02 P
-0.01 (en as a directory path, so usually the search path should not contain) 180.51 209.02 P
(an) 126 195.02 T
(y spaces. An) 137.15 195.02 T
(yone wishing to \336x this should feel welcome to do so.) 197.95 195.02 T
-0.2 (The search starts by trying access the \336le name as gi) 126 169.02 P
-0.2 (v) 375 169.02 P
-0.2 (en. If that f) 380.82 169.02 P
-0.2 (ails, the search) 433.42 169.02 P
0.17 (continues by trying to access the \336le in each successi) 126 155.02 P
0.17 (v) 381.54 155.02 P
0.17 (e directory of the search) 387.36 155.02 P
-0.15 (path. As soon as the \336le is found, the function returns non-zero with the path to) 126 141.02 P
1.61 (the \336le contained in) 126 127.02 P
7 F
3.86 (dest) 230.43 127.02 P
0 F
1.61 (. If the \336le cannot be found, the function returns) 259.23 127.02 P
0.93 (zero. The contents of) 126 113.02 P
7 F
2.23 (dest) 234.02 113.02 P
0 F
0.93 ( will be destro) 262.82 113.02 P
0.93 (yed whether or not the search suc-) 333.81 113.02 P
(ceeds.) 126 99.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "63" 63
%%Page: "64" 64
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(General Utilities) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(64) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 672.02 540 674.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 672.02 540 674.02 R
7 X
0 0 0 1 0 0 0 K
V
54 673.02 99 673.02 2 L
0.5 H
2 Z
0 X
N
108 673.02 540 673.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(8.3) 82.32 678.02 T
(List P) 108 678.02 T
(ar) 140.32 678.02 T
(sing) 151.48 678.02 T
0 F
0.55 (It is often con) 108 654.02 P
0.55 (v) 175.48 654.02 P
0.55 (enient for a user to be able to specify things as a comma sepa-) 181.3 654.02 P
0.45 (rated list of items. W) 108 640.02 P
0.45 (ith) 210.32 640.02 P
4 F
1.09 (CommaParse\050\051) 226.45 640.02 P
0 F
0.45 (, it is also con) 312.85 640.02 P
0.45 (v) 380.52 640.02 P
0.45 (enient for a program) 386.34 640.02 P
(to deal with these lists.) 108 626.02 T
7 10 Q
(int) 126 607.35 T
(CommaParse \050string, substrings\051) 126 595.35 T
(char *string, **substrings;) 126 583.35 T
0 12 Q
1.61 (Where) 108 558.02 P
7 F
3.86 (string) 144.59 558.02 P
0 F
1.61 ( is a list to be parsed. After parsing, the return v) 187.79 558.02 P
1.61 (alue is the) 434.13 558.02 P
0.95 (number of items in the list, and) 108 544.02 P
7 F
2.29 (substrings) 267.34 544.02 P
0 F
0.95 ( is a series of pointers, one to) 339.34 544.02 P
(each item. Leading white space will ha) 108 530.02 T
(v) 294.72 530.02 T
(e been remo) 300.54 530.02 T
(v) 359 530.02 T
(ed from each item.) 364.82 530.02 T
1.44 (This routine destructi) 108 504.02 P
1.44 (v) 213.24 504.02 P
1.44 (ely modi\336es) 219.06 504.02 P
7 F
3.46 (string) 283.94 504.02 P
0 F
1.44 ( by replacing commas with null) 327.14 504.02 P
(characters.) 108 490.02 T
54 447.02 540 449.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 447.02 540 449.02 R
7 X
0 0 0 1 0 0 0 K
V
54 448.02 99 448.02 2 L
0.5 H
2 Z
0 X
N
108 448.02 540 448.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(8.4) 82.32 453.02 T
(Regular Expressions) 108 453.02 T
0 F
0.38 (Rather than require lots of system-dependent code when using re) 108 429.02 P
0.38 (gular e) 422.83 429.02 P
0.38 (xpres-) 456.01 429.02 P
2.69 (sions in Zebra, the library interf) 108 415.02 P
2.69 (ace includes a simple system-independent) 273.95 415.02 P
0.4 (interf) 108 401.02 P
0.4 (ace. The interf) 133.87 401.02 P
0.4 (ace follo) 204.19 401.02 P
0.4 (ws the BSD style, so it should be f) 245.95 401.02 P
0.4 (amiliar to an) 414.72 401.02 P
0.4 (y-) 476 401.02 P
(one f) 108 387.02 T
(amiliar with the BSD) 132.2 387.02 T
4 F
(re_comp\050\051) 237.54 387.02 T
0 F
( and) 302.34 387.02 T
4 F
(re_exec\050\051) 325.67 387.02 T
0 F
( routines.) 390.47 387.02 T
7 10 Q
(char *) 126 368.35 T
(zl_re_comp \050re\051) 126 356.35 T
(const char *re;) 126 344.35 T
0 12 Q
2.67 (The) 108 319.02 P
7 F
6.41 (re) 132.33 319.02 P
0 F
2.67 ( parameter is the re) 146.73 319.02 P
2.67 (gular e) 249.2 319.02 P
2.67 (xpression to be compiled. The function) 284.67 319.02 P
(returns) 108 305.02 T
4 F
(NULL) 144.32 305.02 T
0 F
( if successful, otherwise it returns a pointer to an error message.) 173.12 305.02 T
7 10 Q
(int) 126 286.35 T
(zl_re_exec \050s\051) 126 274.35 T
(const char *s;) 126 262.35 T
0 12 Q
1.64 (The) 108 237.02 P
4 F
3.94 (zl_re_exec\050\051) 131.3 237.02 P
0 F
1.64 ( function matches the string) 217.7 237.02 P
7 F
3.94 (s) 362.24 237.02 P
0 F
1.64 ( with the most recently) 369.44 237.02 P
0.21 (compiled re) 108 223.02 P
0.21 (gular e) 165.01 223.02 P
0.21 (xpression. It returns 1 for a match, 0 for no match, and -1 if) 198.03 223.02 P
(the re) 108 209.02 T
(gular e) 134.81 209.02 T
(xpression is in) 167.62 209.02 T
(v) 236.47 209.02 T
(alid.) 242.17 209.02 T
54 166.02 540 168.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 166.02 540 168.02 R
7 X
0 0 0 1 0 0 0 K
V
54 167.02 99 167.02 2 L
0.5 H
2 Z
0 X
N
108 167.02 540 167.02 2 L
N
0 0 612 792 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(8.5) 82.32 172.02 T
(Run Length Encoding) 108 172.02 T
0 F
0.15 (A pair of routines e) 108 148.02 P
0.15 (xists to perform run length encoding and decoding of char-) 201.72 148.02 P
0.84 (acter data. Depending on the nature of the data, substantial amounts of space) 108 134.02 P
(can be sa) 108 120.02 T
(v) 151.74 120.02 T
(ed by using run length encoding.) 157.56 120.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "64" 64
%%Page: "65" 65
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Run Length Encoding) 126 736.18 T
72 726.98 558 726.98 2 L
0.25 H
N
72 74.02 558 74.02 2 L
2 Z
N
2 8 Q
(The Zebra Librar) 126 60.29 T
(y Interface Man) 189.21 60.29 T
(ual) 247.37 60.29 T
2 10 Q
-2.78 (65) 546.88 60.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(8.5.1) 90.31 678.02 T
(Routines) 126 678.02 T
0 F
(T) 126 660.02 T
(o encode an image into run length form, use) 132.37 660.02 T
4 F
(RL_Encode\050\051) 347 660.02 T
0 F
( as follo) 426.2 660.02 T
(ws:) 464.57 660.02 T
7 10 Q
(void) 144 641.35 T
(RL_Encode \050source, dest, nsource, ndest, sused, dused\051) 144 629.35 T
(unsigned char *source, *dest;) 144 617.35 T
(int nsource, ndest, *sused, *dused;) 144 605.35 T
0 12 Q
0.12 (Where) 126 580.02 P
7 F
0.3 (source) 161.1 580.02 P
0 F
0.12 ( is the array of data to be encoded,) 204.3 580.02 P
7 F
0.3 (dest) 373.38 580.02 P
0 F
0.12 ( is the destination for) 402.17 580.02 P
0.61 (the encoded data,) 126 566.02 P
7 F
1.47 (nsource) 214.48 566.02 P
0 F
0.61 ( is the length of source, and) 264.88 566.02 P
7 F
1.47 (ndest) 404.49 566.02 P
0 F
0.61 ( is the length) 440.49 566.02 P
-0.01 (of dest. Encoding is performed until the source array is e) 126 552.02 P
-0.01 (xhausted, or the desti-) 398.04 552.02 P
1.05 (nation array is \336lled. On return,) 126 538.02 P
7 F
2.52 (sused) 286.95 538.02 P
0 F
1.05 ( is set to the number of source bytes) 322.95 538.02 P
(encoded, and) 126 524.02 T
7 F
(dused) 192.31 524.02 T
0 F
( is set to the length of the data placed in dest.) 228.31 524.02 T
(T) 126 498.02 T
(o con) 132.37 498.02 T
(v) 158.22 498.02 T
(ert encoded data back to its original form, use) 164.04 498.02 T
4 F
(RL_Decode\050\051) 386.66 498.02 T
0 F
(.) 465.86 498.02 T
7 10 Q
(void) 144 479.35 T
(RL_Decode \050dest, source, len\051) 144 467.35 T
(unsigned char *dest, *src;) 144 455.35 T
(int len;) 144 443.35 T
0 12 Q
1.03 (Where) 126 418.02 P
7 F
2.48 (dest) 162.01 418.02 P
0 F
1.03 ( is the destination of the decoded data,) 190.81 418.02 P
7 F
2.48 (source) 386.05 418.02 P
0 F
1.03 ( is the encoded) 429.25 418.02 P
(data to be decoded, and) 126 404.02 T
7 F
(len) 241.97 404.02 T
0 F
( is the length of source.) 263.57 404.02 T
2 F
(8.5.2) 90.31 372.02 T
(Encoded Data Format) 126 372.02 T
0 F
0.13 (The encoded format is quite simple. An encoded data array is brok) 126 354.02 P
0.13 (en up into a) 447.27 354.02 P
0.03 (series of runs, consisting of either a set of bytes which all ha) 126 340.02 P
0.03 (v) 415.74 340.02 P
0.03 (e the same v) 421.57 340.02 P
0.03 (alue,) 481.01 340.02 P
0.44 (or a set of literal data. Each run be) 126 326.02 P
0.44 (gins with a single byte, which indicates the) 294.28 326.02 P
(type of run, and the length of the run.) 126 312.02 T
0.59 (If the high order bit of this byte is set, the run consists of a series of identical) 126 286.02 P
0.8 (bytes. The lo) 126 272.02 P
0.8 (w-order se) 189.63 272.02 P
0.8 (v) 241.11 272.02 P
0.8 (en bits gi) 246.93 272.02 P
0.8 (v) 292.24 272.02 P
0.8 (e the length of this run\321with the con) 298.06 272.02 P
0.8 (v) 482.86 272.02 P
0.8 (en-) 488.68 272.02 P
0.37 (tion that a length of zero really means 128. The actual byte that mak) 126 258.02 P
0.37 (es up this) 457.93 258.02 P
(run follo) 126 244.02 T
(ws immediately after the length byte.) 167.36 244.02 T
-0.3 (If the high order bit is not set, then a run of literal data follo) 126 218.02 P
-0.3 (ws. The v) 407.84 218.02 P
-0.3 (alue of the) 453.94 218.02 P
0.54 (length byte is the length of the run, ag) 126 204.02 P
0.54 (ain with the con) 312.57 204.02 P
0.54 (v) 390.7 204.02 P
0.54 (ention that a length of) 396.52 204.02 P
(zero means 128. A series of that man) 126 190.02 T
(y bytes immediately follo) 303.78 190.02 T
(ws.) 426.48 190.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "65" 65
%%Page: "66" 66
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.02 540 750.02 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(General Utilities) 108 736.18 T
54 726.98 540 726.98 2 L
0.25 H
N
54 74.02 540 74.02 2 L
2 Z
N
2 10 Q
(66) 54 60.29 T
2 8 Q
(The Zebra Librar) 108 60.29 T
(y Interface Man) 171.21 60.29 T
(ual) 229.37 60.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "66" 66
%%Page: "67" 67
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(A) 72 681.98 T
0 F
(altitude units) 72 672.98 T
(31) 123.25 672.98 T
4 12 Q
(AltUnitType) 72 662.98 T
0 9 Q
( type) 151.2 662.98 T
(31) 173.45 662.98 T
4 12 Q
(au_AltLabel) 72 652.98 T
0 9 Q
( function) 151.2 652.98 T
(32) 187.95 652.98 T
4 12 Q
(au_AltLongLabel) 72 642.98 T
0 9 Q
( function) 180 642.98 T
(32) 216.75 642.98 T
4 12 Q
(au_ConvertName) 72 632.98 T
0 9 Q
( function) 172.8 632.98 T
(32) 209.55 632.98 T
4 12 Q
(au_LongUnitsName) 72 622.98 T
0 9 Q
( function) 187.2 622.98 T
(31) 223.95 622.98 T
4 12 Q
(au_PrintFormat) 72 612.98 T
0 9 Q
( function) 172.8 612.98 T
(32) 209.55 612.98 T
4 12 Q
(au_UnitsName) 72 602.98 T
0 9 Q
( function) 158.4 602.98 T
(31) 195.15 602.98 T
(audio de) 72 592.98 T
(vice) 102.52 592.98 T
(53) 122.01 592.98 T
(audio \336les, playing) 72 582.98 T
(53) 145.25 582.98 T
2 F
(B) 72 563.98 T
0 F
(base directory) 72 554.98 T
(61) 127.23 554.98 T
4 12 Q
(BaseDir) 72 544.98 T
0 9 Q
( compile-time symbol) 122.4 544.98 T
(61) 205.9 544.98 T
(binary directory) 72 534.98 T
(61) 134.24 534.98 T
4 12 Q
(BinDir) 72 524.98 T
0 9 Q
( compile-time symbol) 115.2 524.98 T
(62) 198.7 524.98 T
(broadcasting) 72 514.98 T
(10) 122.49 514.98 T
(broadcasts, recei) 72 504.98 T
(ving) 131.75 504.98 T
(11) 152.25 504.98 T
(broadcasts, sending) 72 494.98 T
(11) 146.99 494.98 T
2 F
(C) 72 475.98 T
4 12 Q
(c$basedir) 72 466.98 T
0 9 Q
( UI v) 136.8 466.98 T
(ariable) 155.07 466.98 T
(63) 184.06 466.98 T
4 12 Q
(c$bindir) 72 456.98 T
0 9 Q
( UI v) 129.6 456.98 T
(ariable) 147.87 456.98 T
(63) 176.86 456.98 T
4 12 Q
(c$datadir) 72 446.98 T
0 9 Q
( UI v) 136.8 446.98 T
(ariable) 155.07 446.98 T
(63) 184.06 446.98 T
4 12 Q
(c$libdir) 72 436.98 T
0 9 Q
( UI v) 129.6 436.98 T
(ariable) 147.87 436.98 T
(63) 176.86 436.98 T
4 12 Q
(c$msgname) 72 426.98 T
0 9 Q
( UI v) 136.8 426.98 T
(ariable) 155.07 426.98 T
(63) 184.06 426.98 T
4 12 Q
(c$projdir) 72 416.98 T
0 9 Q
( UI v) 136.8 416.98 T
(ariable) 155.07 416.98 T
(63) 184.06 416.98 T
4 12 Q
(c$rdssdir) 72 406.98 T
0 9 Q
( UI v) 136.8 406.98 T
(ariable) 155.07 406.98 T
(63) 184.06 406.98 T
(cancelling timer e) 72 396.98 T
(v) 136.26 396.98 T
(ents) 140.62 396.98 T
(27) 159.62 396.98 T
(Cartesian origin) 72 386.98 T
(33) 134.24 386.98 T
4 12 Q
(ClearAll) 72 376.98 T
0 9 Q
( graphics widget symbol) 129.6 376.98 T
(49) 222.35 376.98 T
(client e) 72 366.98 T
(v) 98.02 366.98 T
(ents) 102.38 366.98 T
(16) 121.38 366.98 T
(Client Ev) 72 356.98 T
(ents group) 106.12 356.98 T
(16) 148.37 356.98 T
4 12 Q
(CommaParse) 72 346.98 T
0 9 Q
( function) 144 346.98 T
(64) 180.75 346.98 T
(con\336guration v) 72 336.98 T
(ariables) 126.52 336.98 T
(61) 159.01 336.98 T
(accessible through UI) 81 326.98 T
(62) 163.98 326.98 T
(connection number) 72 316.98 T
(11) 145.74 316.98 T
(coordinates) 72 306.98 T
(33) 117.99 306.98 T
4 12 Q
(cp_Exec) 72 296.98 T
0 9 Q
( function) 122.4 296.98 T
(17) 159.15 296.98 T
4 12 Q
(cp_SetupCmdProto) 72 286.98 T
0 9 Q
( function) 187.2 286.98 T
(17) 223.95 286.98 T
4 12 Q
(cvt_GetOrigin) 72 276.98 T
0 9 Q
( function) 165.6 276.98 T
(34) 202.35 276.98 T
4 12 Q
(cvt_Origin) 72 266.98 T
0 9 Q
( function) 144 266.98 T
(33) 180.75 266.98 T
4 12 Q
(cvt_ShowOrigin) 72 256.98 T
0 9 Q
( function) 172.8 256.98 T
(34) 209.55 256.98 T
4 12 Q
(cvt_ToLatLon) 72 246.98 T
0 9 Q
( function) 158.4 246.98 T
(34) 195.15 246.98 T
4 12 Q
(cvt_ToXY) 72 236.98 T
0 9 Q
( function) 129.6 236.98 T
(33) 166.35 236.98 T
2 F
(D) 72 217.98 T
0 F
(data directory) 72 208.98 T
(62) 126.23 208.98 T
4 12 Q
(DATA_DIR) 72 198.98 T
0 9 Q
( run-time en) 129.6 198.98 T
(vironment) 173.23 198.98 T
(62) 214.73 198.98 T
4 12 Q
(DataDir) 72 188.98 T
0 9 Q
( compile-time symbol) 122.4 188.98 T
(62) 205.9 188.98 T
(def) 72 178.98 T
(ault altitude units) 83.4 178.98 T
(31) 150.41 178.98 T
(def) 72 168.98 T
(aults plot description) 83.4 168.98 T
(43) 163.4 168.98 T
(direct image transfer) 72 158.98 T
(55) 150.98 158.98 T
(directory paths) 72 148.98 T
(61) 130.24 148.98 T
4 12 Q
(DoSound) 72 138.98 T
0 9 Q
( function) 122.4 138.98 T
(53) 159.15 138.98 T
4 12 Q
(Drawable) 72 128.98 T
0 9 Q
( type) 129.6 128.98 T
(48) 151.85 128.98 T
2 F
(E) 72 109.98 T
0 F
(ect) 72 100.98 T
(55) 86.99 100.98 T
4 12 Q
(EF_DEBUG) 324 681.98 T
0 9 Q
( e) 381.6 681.98 T
(v) 387.62 681.98 T
(ent mask) 391.99 681.98 T
(12) 428.73 681.98 T
4 12 Q
(EF_EMERGENCY) 324 671.98 T
0 9 Q
( e) 410.4 671.98 T
(v) 416.42 671.98 T
(ent mask) 420.79 671.98 T
(12) 457.53 671.98 T
4 12 Q
(EF_INFO) 324 661.98 T
0 9 Q
( e) 374.4 661.98 T
(v) 380.42 661.98 T
(ent mask) 384.79 661.98 T
(12) 421.53 661.98 T
4 12 Q
(EF_PROBLEM) 324 651.98 T
0 9 Q
( e) 396 651.98 T
(v) 402.02 651.98 T
(ent mask) 406.39 651.98 T
(12) 443.13 651.98 T
(e) 324 641.98 T
(v) 327.77 641.98 T
(ent logging) 332.14 641.98 T
(11) 377.39 641.98 T
(e) 324 631.98 T
(v) 327.77 631.98 T
(ent masks) 332.14 631.98 T
(11) 372.38 631.98 T
4 12 Q
(everybody) 324 621.98 T
0 9 Q
( message group) 388.8 621.98 T
(7) 449.29 621.98 T
2 F
(F) 324 602.98 T
4 12 Q
(FindFile) 324 593.98 T
0 9 Q
( function) 381.6 593.98 T
(63) 418.35 593.98 T
2 F
(G) 324 574.98 T
4 12 Q
(GetBaseDir) 324 565.98 T
0 9 Q
( function) 396 565.98 T
(62) 432.75 565.98 T
4 12 Q
(GetBinDir) 324 555.98 T
0 9 Q
( function) 388.8 555.98 T
(62) 425.55 555.98 T
4 12 Q
(GetDataDir) 324 545.98 T
0 9 Q
( function) 396 545.98 T
(62) 432.75 545.98 T
4 12 Q
(GetLibDir) 324 535.98 T
0 9 Q
( function) 388.8 535.98 T
(62) 425.55 535.98 T
4 12 Q
(GetProjDir) 324 525.98 T
0 9 Q
( function) 396 525.98 T
(62) 432.75 525.98 T
(GMT) 324 515.98 T
(, Greenwich Mean T) 343.33 515.98 T
(ime) 417.49 515.98 T
(19) 435.49 515.98 T
(graphics widget) 324 505.98 T
(creating) 333 495.98 T
(45) 366.49 495.98 T
(destro) 333 485.98 T
(ying) 354.91 485.98 T
(47) 375.41 485.98 T
(dra) 333 475.98 T
(wing in frame) 344.36 475.98 T
(49) 399.35 475.98 T
(releasing shared pixmaps) 333 465.98 T
(51) 428.48 465.98 T
(resources) 333 455.98 T
(47) 371.48 455.98 T
(sharing pixmaps) 333 445.98 T
(50) 396.75 445.98 T
4 12 Q
(XDrawPoint) 333 435.98 T
0 9 Q
( e) 405 435.98 T
(xample) 411.11 435.98 T
(48) 442.11 435.98 T
4 12 Q
(GraphicsW.h) 324 425.98 T
0 9 Q
( header \336le) 403.2 425.98 T
(45) 447.69 425.98 T
(groups) 324 415.98 T
(joining remote groups) 333 405.98 T
(9) 417 405.98 T
(groups, joining) 324 395.98 T
(message manager) 333 385.98 T
(joining groups) 342 375.98 T
(9) 398.75 375.98 T
4 12 Q
(GWClearFrame) 324 365.98 T
0 9 Q
( function) 410.4 365.98 T
(49) 447.15 365.98 T
4 12 Q
(GWDepth) 324 355.98 T
0 9 Q
( function) 374.4 355.98 T
(48) 411.15 355.98 T
4 12 Q
(GWDisplayFrame) 324 345.98 T
0 9 Q
( function) 424.8 345.98 T
(49) 461.55 345.98 T
4 12 Q
(GWDrawInFrame) 324 335.98 T
0 9 Q
( function) 417.6 335.98 T
(49) 454.35 335.98 T
4 12 Q
(GWFrameShared) 324 325.98 T
0 9 Q
( function) 417.6 325.98 T
(50) 454.35 325.98 T
4 12 Q
(GWGetBPL) 324 315.98 T
0 9 Q
( function) 381.6 315.98 T
(51) 418.35 315.98 T
4 12 Q
(GWGetFrame) 324 305.98 T
0 9 Q
( function) 396 305.98 T
(49) 432.75 305.98 T
4 12 Q
(GWGetFrameAddr) 324 295.98 T
0 9 Q
( function) 424.8 295.98 T
(51) 461.55 295.98 T
4 12 Q
(GWGetGC) 324 285.98 T
0 9 Q
( function) 374.4 285.98 T
(48) 411.15 285.98 T
4 12 Q
(GWHeight) 324 275.98 T
0 9 Q
( function) 381.6 275.98 T
(48) 418.35 275.98 T
4 12 Q
(GWShmPossible) 324 265.98 T
0 9 Q
( function) 417.6 265.98 T
(50) 454.35 265.98 T
4 12 Q
(GWWidth) 324 255.98 T
0 9 Q
( function) 374.4 255.98 T
(48) 411.15 255.98 T
4 12 Q
(GWZapShmPixmap) 324 245.98 T
0 9 Q
( function) 424.8 245.98 T
(51) 461.55 245.98 T
2 F
(I) 324 226.98 T
0 F
(image se) 324 217.98 T
(gments) 355.61 217.98 T
(creating) 333 207.98 T
(56) 366.49 207.98 T
(detaching) 333 197.98 T
(56) 372.49 197.98 T
(image transfer) 324 187.98 T
(55) 380.23 187.98 T
(consumer) 333 177.98 T
(58) 372.49 177.98 T
(lock) 333 167.98 T
(ed in ph) 348.41 167.98 T
(ysical memory) 377.36 167.98 T
(59) 435.11 167.98 T
(producer) 333 157.98 T
(57) 369.49 157.98 T
4 12 Q
(ImageXfr.h) 324 147.98 T
0 9 Q
( header \336le) 396 147.98 T
(55) 440.49 147.98 T
(INCFRA) 324 137.98 T
(C) 356.64 137.98 T
(26) 367.15 137.98 T
4 12 Q
(InterpDTime) 324 127.98 T
0 9 Q
( time function) 403.2 127.98 T
(24) 458.2 127.98 T
(interprocess communication) 324 117.98 T
(multiple sessions on one host) 333 107.98 T
(7) 443.01 107.98 T
(process groups) 333 97.98 T
(7) 391.24 97.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "67" 67
%%Page: "68" 68
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(process names) 63 681.98 T
(7) 119.74 681.98 T
(See also message manager) 63 671.98 T
(IPC, see interprocess communication) 54 661.98 T
4 12 Q
(IX_Create) 54 651.98 T
0 9 Q
( function) 118.8 651.98 T
(56) 155.55 651.98 T
4 12 Q
(ix_desc) 54 641.98 T
0 9 Q
( type) 104.4 641.98 T
(56) 126.65 641.98 T
4 12 Q
(IX_Detach) 54 631.98 T
0 9 Q
( function) 118.8 631.98 T
(56) 155.55 631.98 T
4 12 Q
(IX_GetReadFrame) 54 621.98 T
0 9 Q
( function) 162 621.98 T
(58) 198.75 621.98 T
4 12 Q
(IX_GetWriteFrame) 54 611.98 T
0 9 Q
( function) 169.2 611.98 T
(57) 205.95 611.98 T
(IX_GetWriteFrame, prototype) 54 601.98 T
(57) 167.98 601.98 T
4 12 Q
(IX_HookIn) 54 591.98 T
0 9 Q
( function) 118.8 591.98 T
(56) 155.55 591.98 T
4 12 Q
(IX_Initialize) 54 581.98 T
0 9 Q
( function) 147.6 581.98 T
(59) 184.35 581.98 T
4 12 Q
(IX_LockMemory) 54 571.98 T
0 9 Q
( function) 147.6 571.98 T
(59) 184.35 571.98 T
4 12 Q
(IX_ReleaseFrame) 54 561.98 T
0 9 Q
( function) 162 561.98 T
(59) 198.75 561.98 T
(IX_ReleaseFrame, prototype) 54 551.98 T
(59) 162.48 551.98 T
4 12 Q
(IX_SendFrame) 54 541.98 T
0 9 Q
( function) 140.4 541.98 T
(57) 177.15 541.98 T
2 F
(L) 54 522.98 T
4 12 Q
(LibDir) 54 513.98 T
0 9 Q
( compile-time symbol) 97.2 513.98 T
(62) 180.7 513.98 T
(library directory) 54 503.98 T
(61) 117.23 503.98 T
4 12 Q
(Location) 54 493.98 T
0 9 Q
( type) 111.6 493.98 T
(29) 133.85 493.98 T
(used in image transfer) 63 483.98 T
(57) 147.23 483.98 T
(logging e) 54 473.98 T
(v) 87.53 473.98 T
(ent messages) 91.89 473.98 T
(11) 143.63 473.98 T
2 F
(M) 54 454.98 T
0 F
(message manager) 54 445.98 T
(a) 63 435.98 T
(w) 66.86 435.98 T
(aiting messages) 73.27 435.98 T
(7) 134.51 435.98 T
(broadcasting) 63 425.98 T
(10) 113.49 425.98 T
(client e) 63 415.98 T
(v) 89.02 415.98 T
(ents) 93.38 415.98 T
(16) 112.38 415.98 T
(connecting) 63 405.98 T
(7) 106.99 405.98 T
(message handler function) 63 395.98 T
(8) 159.48 395.98 T
(polling \336le descriptors) 63 385.98 T
(13) 148.5 385.98 T
(process groups) 63 375.98 T
(7) 121.24 375.98 T
(protocol handlers) 63 365.98 T
(9) 130.24 365.98 T
(remote groups) 63 355.98 T
(9) 119.24 355.98 T
(remote host names) 63 345.98 T
(7) 134.99 345.98 T
(See also interprocess communication) 63 335.98 T
(sending messages) 63 325.98 T
(8) 131.74 325.98 T
(UNIX sock) 63 315.98 T
(et name) 104.15 315.98 T
(7) 136.89 315.98 T
4 12 Q
(message) 54 305.98 T
0 9 Q
( structure) 104.4 305.98 T
(8) 142.64 305.98 T
(message types) 54 295.98 T
(15) 110.24 295.98 T
4 12 Q
(MF_BROADCAST) 54 285.98 T
0 9 Q
( \337ag) 140.4 285.98 T
(8) 160.65 285.98 T
4 12 Q
(MH_CE_CONNECT) 54 275.98 T
0 9 Q
( message type) 147.6 275.98 T
(16) 202.59 275.98 T
4 12 Q
(MH_CE_DISCONNECT) 54 265.98 T
0 9 Q
( message type) 169.2 265.98 T
(16) 224.19 265.98 T
4 12 Q
(MH_CE_JOIN) 54 255.98 T
0 9 Q
( message type) 126 255.98 T
(16) 180.99 255.98 T
4 12 Q
(MH_CLIENT) 54 245.98 T
0 9 Q
( message type) 118.8 245.98 T
(16) 173.79 245.98 T
4 12 Q
(MH_DIE) 54 235.98 T
0 9 Q
( message type) 97.2 235.98 T
(15) 152.19 235.98 T
4 12 Q
(MH_GREETING) 54 225.98 T
0 9 Q
( message type) 133.2 225.98 T
(15) 188.19 225.98 T
4 12 Q
(MH_IDENTIFY) 54 215.98 T
0 9 Q
( message type) 133.2 215.98 T
(15) 188.19 215.98 T
4 12 Q
(MH_JOIN) 54 205.98 T
0 9 Q
( message type) 104.4 205.98 T
(15) 159.39 205.98 T
(MH_SHUTDO) 54 195.98 T
(WN) 109.18 195.98 T
(16) 128.67 195.98 T
4 12 Q
(MH_SHUTDOWN) 54 185.98 T
0 9 Q
( message type) 133.2 185.98 T
(14) 188.19 185.98 T
(mh_template) 54 175.98 T
(14) 105.5 175.98 T
4 12 Q
(MH_VERSION) 54 165.98 T
0 9 Q
( symbol) 126 165.98 T
(15) 159.26 165.98 T
4 12 Q
(msg_add_fd) 54 155.98 T
0 9 Q
( function) 126 155.98 T
(12) 162.75 155.98 T
4 12 Q
(msg_AddProtoHandler) 54 145.98 T
0 9 Q
( function) 190.8 145.98 T
(9) 227.55 145.98 T
4 12 Q
(msg_await) 54 135.98 T
0 9 Q
( function) 118.8 135.98 T
(7, 12) 155.55 135.98 T
4 12 Q
(msg_BCSetup) 54 125.98 T
0 9 Q
( function) 133.2 125.98 T
(11) 169.95 125.98 T
4 12 Q
(msg_connect) 54 115.98 T
0 9 Q
( function) 133.2 115.98 T
(7) 169.95 115.98 T
4 12 Q
(MSG_CONSUMED) 54 105.98 T
0 9 Q
( search handler return v) 140.4 105.98 T
(alue) 225.14 105.98 T
(10) 244.64 105.98 T
4 12 Q
(msg_delete_fd) 54 95.98 T
0 9 Q
( function) 147.6 95.98 T
(12) 184.35 95.98 T
4 12 Q
(msg_DispatchQueued) 306 681.98 T
0 9 Q
( function) 435.6 681.98 T
(13) 472.35 681.98 T
4 12 Q
(MSG_DONE) 306 671.98 T
0 9 Q
( search handler return v) 363.6 671.98 T
(alue) 448.34 671.98 T
(10) 467.84 671.98 T
4 12 Q
(msg_ELog) 306 661.98 T
0 9 Q
( function) 363.6 661.98 T
(11, 16) 400.35 661.98 T
4 12 Q
(MSG_ENQUEUE) 306 651.98 T
0 9 Q
( search handler return v) 385.2 651.98 T
(alue) 469.94 651.98 T
(10) 489.44 651.98 T
4 12 Q
(msg_get_fd) 306 641.98 T
0 9 Q
( function) 378 641.98 T
(13) 414.75 641.98 T
4 12 Q
(msg_join) 306 631.98 T
0 9 Q
( function) 363.6 631.98 T
(9) 400.35 631.98 T
4 12 Q
(msg_poll) 306 621.98 T
0 9 Q
( function) 363.6 621.98 T
(13) 400.35 621.98 T
4 12 Q
(msg_quit) 306 611.98 T
0 9 Q
( function) 363.6 611.98 T
(9) 400.35 611.98 T
4 12 Q
(msg_Search) 306 601.98 T
0 9 Q
( function) 378 601.98 T
(10) 414.75 601.98 T
4 12 Q
(msg_send) 306 591.98 T
0 9 Q
( function) 363.6 591.98 T
(8) 400.35 591.98 T
4 12 Q
(MSG_TIMEOUT) 306 581.98 T
0 9 Q
(return v) 315 571.98 T
(alue from) 343.02 571.98 T
4 12 Q
(msg_poll) 380.01 571.98 T
0 9 Q
( function) 437.61 571.98 T
(13) 474.35 571.98 T
4 12 Q
(MT_ACINGEST) 306 561.98 T
0 9 Q
( protocol) 385.2 561.98 T
(6) 421.95 561.98 T
4 12 Q
(MT_COMMAND) 306 551.98 T
0 9 Q
( message protocol) 378 551.98 T
(ho) 315 541.98 T
(w to use it) 323.77 541.98 T
(17) 365.53 541.98 T
4 12 Q
(MT_COMMAND) 306 531.98 T
0 9 Q
( protocol) 378 531.98 T
(6) 414.75 531.98 T
4 12 Q
(MT_DATASTORE) 306 521.98 T
0 9 Q
( protocol) 392.4 521.98 T
(6) 429.15 521.98 T
(MT_DISPLA) 306 511.98 T
(YMGR) 354.55 511.98 T
(6) 386.05 511.98 T
4 12 Q
(MT_ELOG) 306 501.98 T
0 9 Q
( protocol) 356.4 501.98 T
(6) 393.15 501.98 T
4 12 Q
(MT_FINISH) 306 491.98 T
0 9 Q
( protocol) 370.8 491.98 T
(6) 407.55 491.98 T
4 12 Q
(MT_IMAGEXFR) 306 481.98 T
0 9 Q
( protocol) 385.2 481.98 T
(6, 58) 421.95 481.98 T
4 12 Q
(MT_LOG) 306 471.98 T
0 9 Q
( protocol) 349.2 471.98 T
(6) 385.95 471.98 T
4 12 Q
(MT_MESSAGE) 306 461.98 T
0 9 Q
( protocol) 378 461.98 T
(6) 414.75 461.98 T
4 12 Q
(MT_MTAP) 306 451.98 T
0 9 Q
( protocol) 356.4 451.98 T
(6) 393.15 451.98 T
4 12 Q
(MT_NETXFR) 306 441.98 T
0 9 Q
( protocol) 370.8 441.98 T
(6) 407.55 441.98 T
4 12 Q
(MT_PBOUNDS) 306 431.98 T
0 9 Q
( protocol) 378 431.98 T
(6) 414.75 431.98 T
4 12 Q
(MT_PDMON) 306 421.98 T
0 9 Q
( protocol) 363.6 421.98 T
(6) 400.35 421.98 T
4 12 Q
(MT_QUERY) 306 411.98 T
0 9 Q
( protocol) 363.6 411.98 T
(6) 400.35 411.98 T
4 12 Q
(MT_SLDATA) 306 401.98 T
0 9 Q
( protocol) 370.8 401.98 T
(6) 407.55 401.98 T
4 12 Q
(MT_SOUND) 306 391.98 T
0 9 Q
( protocol) 363.6 391.98 T
(6, 53) 400.35 391.98 T
4 12 Q
(MT_TIMER) 306 381.98 T
0 9 Q
( protocol) 363.6 381.98 T
(6) 400.35 381.98 T
2 F
(P) 306 362.98 T
4 12 Q
(pd_CompList) 306 353.98 T
0 9 Q
( function) 385.2 353.98 T
(40) 421.95 353.98 T
4 12 Q
(pd_CopyPD) 306 343.98 T
0 9 Q
( function) 370.8 343.98 T
(42) 407.55 343.98 T
4 12 Q
(pd_Load) 306 333.98 T
0 9 Q
( function) 356.4 333.98 T
(37) 393.15 333.98 T
4 12 Q
(pd_Merge) 306 323.98 T
0 9 Q
( function) 363.6 323.98 T
(39) 400.35 323.98 T
4 12 Q
(pd_ReadComponent) 306 313.98 T
0 9 Q
( function) 421.2 313.98 T
(38) 457.95 313.98 T
4 12 Q
(pd_Release) 306 303.98 T
0 9 Q
( function) 378 303.98 T
(37) 414.75 303.98 T
4 12 Q
(pd_RemoveComp) 306 293.98 T
0 9 Q
( function) 399.6 293.98 T
(39) 436.35 293.98 T
(pd_Retrie) 306 283.98 T
(v) 341.27 283.98 T
(e) 345.64 283.98 T
(40) 354.13 283.98 T
4 12 Q
(pd_Retrieve) 306 273.98 T
0 9 Q
( function) 385.2 273.98 T
(40) 421.95 273.98 T
4 12 Q
(pd_RPDRelease) 306 263.98 T
0 9 Q
( function) 399.6 263.98 T
(38) 436.35 263.98 T
4 12 Q
(pd_Store) 306 253.98 T
0 9 Q
( function) 363.6 253.98 T
(41) 400.35 253.98 T
4 12 Q
(pd_Unload) 306 243.98 T
0 9 Q
( function) 370.8 243.98 T
(37) 407.55 243.98 T
4 12 Q
(pda_GetPD) 306 233.98 T
0 9 Q
( function) 370.8 233.98 T
(42) 407.55 233.98 T
(pda_Search) 306 223.98 T
(43) 352.48 223.98 T
4 12 Q
(pda_StorePD) 306 213.98 T
0 9 Q
( function) 385.2 213.98 T
(42) 421.95 213.98 T
4 12 Q
(Pixmap) 306 203.98 T
0 9 Q
( type) 349.2 203.98 T
(48) 371.45 203.98 T
(plot description) 306 193.98 T
(component operations) 315 183.98 T
(38) 399.24 183.98 T
(def) 315 173.98 T
(aults) 326.4 173.98 T
(43) 347.9 173.98 T
(header \336les) 315 163.98 T
(35) 360.74 163.98 T
4 12 Q
(plot_description) 315 153.98 T
0 9 Q
( type) 430.2 153.98 T
(37) 452.45 153.98 T
4 12 Q
(raw_plot_description) 315 143.98 T
0 9 Q
( type) 459 143.98 T
(35) 481.25 143.98 T
(storing) 315 133.98 T
(42) 344.5 133.98 T
(plot descriptions, searching) 306 123.98 T
(43) 409.24 123.98 T
4 12 Q
(plot_description) 306 113.98 T
0 9 Q
( type) 421.2 113.98 T
(37) 443.45 113.98 T
(polling multiple \336le descriptors) 306 103.98 T
(13) 423.76 103.98 T
(process groups) 306 93.98 T
(7) 364.24 93.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "68" 68
%%Page: "69" 69
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(quitting) 81 681.98 T
(9) 113.51 681.98 T
(project directory) 72 671.98 T
(62) 136.23 671.98 T
(protocols, searching for) 72 661.98 T
(9) 161.73 661.98 T
2 F
(R) 72 642.98 T
4 12 Q
(raw_plot_description) 72 633.98 T
0 9 Q
( type) 216 633.98 T
(35) 238.25 633.98 T
4 12 Q
(re_comp) 72 623.98 T
0 9 Q
(, compatible library function) 122.4 623.98 T
(64) 229.89 623.98 T
4 12 Q
(re_exec) 72 613.98 T
0 9 Q
(, compatible library function) 122.4 613.98 T
(64) 229.89 613.98 T
(re) 72 603.98 T
(gular e) 78.86 603.98 T
(xpressions) 103.46 603.98 T
(64) 145.96 603.98 T
(remote message hosts) 72 593.98 T
(7) 154.99 593.98 T
(requesting timer e) 72 583.98 T
(v) 136.76 583.98 T
(ents) 141.13 583.98 T
(25) 160.13 583.98 T
4 12 Q
(RGrid) 72 573.98 T
0 9 Q
( type) 108 573.98 T
(29) 130.25 573.98 T
(used in image transfer) 81 563.98 T
(57) 165.23 563.98 T
4 12 Q
(RL_Decode) 72 553.98 T
0 9 Q
( function) 136.8 553.98 T
(65) 173.55 553.98 T
4 12 Q
(RL_Encode) 72 543.98 T
0 9 Q
( function) 136.8 543.98 T
(65) 173.55 543.98 T
(run length encoding) 72 533.98 T
(64) 148.49 533.98 T
(format) 81 523.98 T
(65) 109.49 523.98 T
2 F
(S) 72 504.98 T
4 12 Q
(ScaleInfo) 72 495.98 T
0 9 Q
( type) 136.8 495.98 T
(30) 159.05 495.98 T
(e) 81 485.98 T
(xample) 84.86 485.98 T
(30) 115.86 485.98 T
(used in image transfer) 81 475.98 T
(57) 165.23 475.98 T
4 12 Q
(select) 72 465.98 T
0 9 Q
( function) 115.2 465.98 T
(13) 151.95 465.98 T
(sending messages) 72 455.98 T
(8) 140.74 455.98 T
4 12 Q
(SetupConfigVariables) 72 445.98 T
0 9 Q
( function) 216 445.98 T
(63) 252.75 445.98 T
(shared memory pixmaps) 72 435.98 T
(50) 164.99 435.98 T
(shared pixmaps) 72 425.98 T
(releasing) 81 415.98 T
(51) 117.99 415.98 T
(Sound process) 72 405.98 T
(53) 128.74 405.98 T
2 F
(T) 72 386.98 T
4 12 Q
(TC_DecodeTime) 72 377.98 T
0 9 Q
( time function) 165.6 377.98 T
(22) 220.6 377.98 T
4 12 Q
(TC_EncodeTime) 72 367.98 T
0 9 Q
( time function) 165.6 367.98 T
(21, 22) 220.6 367.98 T
4 12 Q
(TC_Eq) 72 357.98 T
0 9 Q
( time macro) 108 357.98 T
(24) 155.49 357.98 T
4 12 Q
(TC_FccToSys) 72 347.98 T
0 9 Q
( time function) 151.2 347.98 T
(21) 206.2 347.98 T
4 12 Q
(TC_Less) 72 337.98 T
0 9 Q
( time macro) 122.4 337.98 T
(24) 169.89 337.98 T
4 12 Q
(TC_LessEq) 72 327.98 T
0 9 Q
( time macro) 136.8 327.98 T
(24) 184.29 327.98 T
4 12 Q
(TC_SysToFcc) 72 317.98 T
0 9 Q
( time function) 151.2 317.98 T
(21) 206.2 317.98 T
4 12 Q
(TC_SysToZt) 72 307.98 T
0 9 Q
( time function) 144 307.98 T
(21) 199 307.98 T
4 12 Q
(TC_ZtAssemble) 72 297.98 T
0 9 Q
( time function) 165.6 297.98 T
(23) 220.6 297.98 T
4 12 Q
(TC_ZtSplit) 72 287.98 T
0 9 Q
( time function) 144 287.98 T
(23) 199 287.98 T
4 12 Q
(TC_ZtToSys) 72 277.98 T
0 9 Q
( time function) 144 277.98 T
(20) 199 277.98 T
(time) 72 267.98 T
(con) 81 257.98 T
(v) 93.64 257.98 T
(erting between types) 98 257.98 T
(20) 176.99 257.98 T
(the) 81 247.98 T
4 12 Q
(ZebTime) 94.25 247.98 T
0 9 Q
( type) 144.65 247.98 T
(19) 166.9 247.98 T
(uni) 81 237.98 T
(v) 92.28 237.98 T
(ersal time \050UTC\051) 96.64 237.98 T
(19) 162.63 237.98 T
4 12 Q
(time) 72 227.98 T
0 9 Q
(replacing with) 81 217.98 T
4 12 Q
(UItime) 134.99 217.98 T
0 9 Q
( type) 178.19 217.98 T
(20) 200.44 217.98 T
(time, getting it from the timer) 72 207.98 T
(25) 183.5 207.98 T
4 12 Q
(time) 72 197.98 T
0 9 Q
(, RDSS date type) 100.8 197.98 T
(20) 167.3 197.98 T
(timer e) 72 187.98 T
(v) 97.02 187.98 T
(ents) 101.39 187.98 T
(cancelling) 81 177.98 T
(27) 122.49 177.98 T
(requesting) 81 167.98 T
(25) 122.99 167.98 T
(timer) 72 157.98 T
(, backw) 90.64 157.98 T
(ards compatibility) 118.54 157.98 T
(27) 188.29 157.98 T
(timer) 72 147.98 T
(.h) 90.5 147.98 T
(25) 101.75 147.98 T
4 12 Q
(tl_AbsoluteReq) 72 137.98 T
0 9 Q
( time function) 172.8 137.98 T
(26) 227.8 137.98 T
4 12 Q
(tl_AddAbsoluteEvent) 72 127.98 T
0 9 Q
( obsolete time function) 208.8 127.98 T
(27) 296.05 127.98 T
4 12 Q
(tl_AddRelativeEvent) 72 117.98 T
0 9 Q
( obsolete time function) 208.8 117.98 T
(27) 296.05 117.98 T
4 12 Q
(tl_AllCancel) 72 107.98 T
0 9 Q
( time function) 158.4 107.98 T
(28) 213.4 107.98 T
4 12 Q
(tl_Cancel) 72 97.98 T
0 9 Q
( time function) 136.8 97.98 T
(27) 191.8 97.98 T
4 12 Q
(tl_ChangeHandler) 324 681.98 T
0 9 Q
( time function) 439.2 681.98 T
(27) 494.2 681.98 T
(cancelling change notices) 333 671.98 T
(27) 429.98 671.98 T
4 12 Q
(tl_GetTime) 324 661.98 T
0 9 Q
( time function) 396 661.98 T
(25) 451 661.98 T
4 12 Q
(tl_RelativeReq) 324 651.98 T
0 9 Q
( time function) 424.8 651.98 T
(26) 479.8 651.98 T
4 12 Q
(tl_Time) 324 641.98 T
0 9 Q
( time function) 374.4 641.98 T
(25) 429.4 641.98 T
2 F
(U) 324 622.98 T
0 F
(UDP) 324 613.98 T
(, see User Datagram Protocol) 341 613.98 T
(UI con\336guration v) 324 603.98 T
(ariables) 390.27 603.98 T
(62) 422.76 603.98 T
4 12 Q
(UItime) 324 593.98 T
0 9 Q
(, RDSS) 367.2 593.98 T
4 12 Q
(date) 396.46 593.98 T
0 9 Q
(type) 432.46 593.98 T
(20) 452.46 593.98 T
(User Datagram Protocol) 324 583.98 T
(use in message broadcasting) 333 573.98 T
(11) 439.73 573.98 T
2 F
(X) 324 554.98 T
0 F
(X Shared Memory e) 324 545.98 T
(xtension \050XShm\051) 397.1 545.98 T
(50) 463.35 545.98 T
4 12 Q
(XtDestroyWidget) 324 535.98 T
0 9 Q
( function) 432 535.98 T
(47) 468.75 535.98 T
4 12 Q
(XtSetArg) 324 525.98 T
0 9 Q
(, with graphics widget) 381.6 525.98 T
(47) 466.09 525.98 T
4 12 Q
(XtSetValues) 324 515.98 T
0 9 Q
(, with graphics widget) 403.2 515.98 T
(47) 487.69 515.98 T
2 F
(Z) 324 496.98 T
4 12 Q
(ZEB_PROJECT) 324 487.98 T
0 9 Q
( run-time en) 403.2 487.98 T
(vironment) 446.83 487.98 T
(62) 488.33 487.98 T
4 12 Q
(ZEB_SOCKET) 324 477.98 T
0 9 Q
( en) 396 477.98 T
(vironment v) 406.39 477.98 T
(ariable) 449.91 477.98 T
(7) 478.9 477.98 T
4 12 Q
(ZEB_TOPDIR) 324 467.98 T
0 9 Q
( run-time en) 396 467.98 T
(vironment) 439.63 467.98 T
(61) 481.13 467.98 T
(ZebT) 324 457.98 T
(ime) 343.18 457.98 T
(19) 361.18 457.98 T
4 12 Q
(ZebTime) 324 447.98 T
0 9 Q
( uni) 374.4 447.98 T
(v) 387.93 447.98 T
(ersal time type) 392.29 447.98 T
(19) 449.78 447.98 T
4 12 Q
(zl_re_comp) 324 437.98 T
0 9 Q
( function) 396 437.98 T
(64) 432.75 437.98 T
4 12 Q
(zl_re_exec) 324 427.98 T
0 9 Q
( function) 396 427.98 T
(64) 432.75 427.98 T
4 12 Q
(zquery) 324 417.98 T
0 9 Q
( program) 367.2 417.98 T
(6) 404.44 417.98 T
4 12 Q
(zt_MicroSec ZebTime) 324 407.98 T
0 9 Q
( member) 460.8 407.98 T
(19) 497.04 407.98 T
4 12 Q
(zt_Sec ZebTime) 324 397.98 T
0 9 Q
( member) 424.8 397.98 T
(19) 461.04 397.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "69" 69
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 69
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Helvetica-Bold
%%+ Helvetica
%%+ Courier
%%+ Courier-Oblique
%%+ Times-Italic
%%+ Courier-Bold
%%EOF
