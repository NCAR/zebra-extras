! $Id: ds.config,v 1.5 2000-06-06 22:57:31 granger Exp $
!

read "project.config"

! ---------------------------------------------------------------------

message "Data directory: #" DataDir

! Allow periodic rescans to update the daemon and detect any new or moved
! files.
!
procedure Update
	rescan all
endprocedure

set dirconstflag "true"
if (Realtime)
	set dirconstflag "false"
	set cmd "Update"
	set cmd quote(cmd)
	every 600 #cmd
	message "Rescanning every 10 minutes." 
endif

! Define our main data source with the top-level directory of DataDir.
! If not realtime, then assume the cache file is already correct.
!
source main
	directory 	#DataDir
	FileConst 	false
	DirConst	#dirconstflag
	DelayDataDirs	true
	RememberAll	false
endsource

! ================================================================
! Realtime cleaning procedures, only activated if "DataCleaning" enabled
! and we are operating with a specific site platform to which ingestors
! are ingesting data.

procedure DoTruncate fraction real
	truncate 30*fraction*DAY concat(Site,"rass915")
	truncate 30*fraction*DAY concat(Site,"prof915h")
	truncate 30*fraction*DAY concat(Site,"prof915l")
	truncate 30*fraction*DAY concat(Site,"class")
	truncate 30*fraction*DAY concat(Site,"surface_met")
	truncate 30*fraction*DAY concat(Site,"prof915mom")
endprocedure

procedure CleanupScan
	local free FreeSpace(DataDir)
	local fraction 1.0
	while ( free < 40000 and fraction > 0.1 )
	    DoTruncate fraction
	    local free FreeSpace(DataDir)
	    local fraction (fraction/1.2)
	endwhile
endprocedure

! "cleanup" is called automatically by the datastore daemon after
! intialization.  If DataCleaning is not enabled, it will do nothing.
! Otherwise, it will register CleanupScan to be performed every 2 hours.
!
procedure cleanup
	if (DataCleaning and (Site <> undef))
		message "Enabling data cleanup every 2 hours."
		every 2*HOUR "CleanupScan"
	endif
endprocedure

! ----------------------------------------------------------------

set requirepath "./ds"
require "project"
require "class"
require "iss"

! ================================================================
! Now we can actually instantiate the platform sites we need for
! each project.  First instantiate the project parent platform, then
! add instances of each ISS site underneath it.

! It is quite conceivable that all of this could be done from script
! modules, with each project running its own 'zrun ds_daemon "subplat
! PROJECT ISS <site-names"' command and any other configurations needed
! for the daemon... Which way to go?  A real scripting language is 
! a more suitable place for this stuff than UI code.

instance Project #Projects

set read "read "
foreach proj #Projects

	! Get the project's sites
	set pdir concat3("projects/",proj,"/")
	! For now use "config" as filename, rather than including
	! project name.
	set pconfig concat3(pdir,"","config")

	! The project config sets the SiteList variable.
	set SiteList ""
	#read #pconfig
	message "Project #: #" proj SiteList

	! This is the command which actually instantiates the platforms
	! for each site in the project.
	if (SiteList <> "")
		set cmd concat3("subplats ",proj," ISS ")
		#cmd #SiteList
	endif

endfor

!
! The null placeholder platform.
!
platform null
	organization	scalar
	filetype	zebra
endplatform
