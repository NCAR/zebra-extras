/**********************************************************************
 * TDRP params for mdv2netCDF
 **********************************************************************/

//======================================================================
//
// Program name: mdv2netCDF.
//
// mdv2netCDF converts MDV files to netCDF, using the COARDS convention.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// Instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

Instance = "bamex_IR";

//======================================================================
//
// MODE OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
// In REALTIME mode, the program waits for a new input file. In ARCHIVE 
//   mode, it moves through the data between the start and end times set 
//   on the command line. In FILELIST mode, it moves through the list of 
//   file names specified on the command line. Paths (in FILELIST mode, at 
//   least) MUST contain a day-directory below the data file -- 
//   ./data_file.mdv will not work as a file path.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//     FILELIST
//

mode = REALTIME;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// InMdvURL ////////////////////////////////
//
// Input URL.
// Set to the URL for the input MDV files.
// Type: string
//

InMdvURL = "mdvp:://anlab2.rap.ucar.edu::bamex/mdv/sat/IR";

///////////// RealtimeMaxAge //////////////////////////
//
// Maximum age for file to be considered valid.
// In realtime mode only.
// Type: int
//

RealtimeMaxAge = 3600;

///////////// Once ////////////////////////////////////
//
// Set to TRUE to run once and exit.
// Set to TRUE in Realtime only.
// Type: boolean
//

Once = FALSE;

//======================================================================
//
// DATA CONVERSION.
//
//======================================================================
 
///////////// DoAllFields /////////////////////////////
//
// Set to TRUE to convert all fields.
// If FALSE then only fields in FieldNames are converted.
// Type: boolean
//

DoAllFields = TRUE;

///////////// FieldNames //////////////////////////////
//
// Names of fields to be output in netCDF file.
// Only used if DoAllFields is FALSE.
// Type: string
// 1D array - variable length.
//

FieldNames = { "Pressure", "Temperature" };

///////////// AddNumToFieldName ///////////////////////
//
// Option to add the field number to the end of the field name for 
//   output.
// If TRUE, the field number will be added to all field names, except 
//   for the first field.
// Type: boolean
//

AddNumToFieldName = FALSE;

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// OutDir //////////////////////////////////
//
// Output netCDF directory.
// Set to the name of the output netCDF directory.
// Type: string
//

OutDir = "/scr/js1/bamex/goes_4km";

///////////// OutFileExt //////////////////////////////
//
// Output file extension.
// Type: string
//

OutFileExt = "nc";

///////////// OutputPathFromTime //////////////////////
//
// Compute output path from time.
// If TRUE, path is OutDir/yyyymmdd/hhmmss.nc. If FALSE, the file path 
//   is OutDir/yyyymmdd_hhmmss.NetCDF_FileName.
// Type: boolean
//

OutputPathFromTime = FALSE;

///////////// NetCDF_FileName /////////////////////////
//
// Base NetCDF filename, with or without .nc extension.
// Output NetCDF files will have the date/time pre-pended.
// Type: string
//

NetCDF_FileName = "IR";

///////////// WriteLdataInfo //////////////////////////
//
// Write _latest_data_info file in OutDir.
// Type: boolean
//

WriteLdataInfo = FALSE;

///////////// CompressAfterWrite //////////////////////
//
// Option to try gzip -f on the netcdf file after it
// is written. If this is invoked, the program sleeps
// for a second prior to trying to zip the file.
// Type: boolean
//

CompressAfterWrite = FALSE;

///////////// applyVleveLimits ////////////////////////
//
// Option to apply vlevel limits.
// If true, set the minVlevel and maxVlevel below.
// Type: boolean
//

applyVleveLimits = FALSE;

///////////// minVlevel ///////////////////////////////
//
// Minimum Vlevel.
// Applies only if applyVleveLimits is true.
// Type: double
//

minVlevel = 0;

///////////// maxVlevel ///////////////////////////////
//
// Maximum Vlevel.
// Applies only if applyVleveLimits is true.
// Type: double
//

maxVlevel = 0;

///////////// composite ///////////////////////////////
//
// Option to perform compositing.
// If true, a maximum value vertical composite is performed.
// Type: boolean
//

composite = FALSE;

///////////// remap_xy ////////////////////////////////
//
// Option to remap grid in x,y.
// If true, set the remap parameters below.
// Type: boolean
//

remap_xy = TRUE;

///////////// remap_projection ////////////////////////
//
// Projection for remapping in x,y.
//
// Type: enum
// Options:
//     PROJ_LATLON
//     PROJ_LAMBERT_CONF
//     PROJ_FLAT
//

remap_projection = PROJ_LATLON;

///////////// remap_grid //////////////////////////////
//
// Grid parameters for remapping in x,y.
// These params apply to all projection types.
//
// Type: struct
//   typedef struct {
//      int nx;
//      int ny;
//      double minx;
//      double miny;
//      double dx;
//      double dy;
//   }
//
//

remap_grid = { 526, 426, -103.0, 32.0, 0.04, 0.04 };

///////////// remap_rotation //////////////////////////
//
// Remapped grid rotation.
// This applies only to PROJ_FLAT projections.
// Type: double
//

remap_rotation = 0;

///////////// remap_origin_lat ////////////////////////
//
// Remapped grid origin latitude.
// This applies only to PROJ_FLAT and PROJ_LAMBERT_CONF projections.
// Type: double
//

remap_origin_lat = 32.0;

///////////// remap_origin_lon ////////////////////////
//
// Remapped grid origin longitude.
// This applies only to PROJ_FLAT and PROJ_LAMBERT_CONF projections.
// Type: double
//

remap_origin_lon = -102.0;

///////////// remap_lat1 //////////////////////////////
//
// Remapped grid reference latitude 1.
// This applies only to PROJ_LAMBERT_CONF projections.
// Type: double
//

remap_lat1 = 0;

///////////// remap_lat2 //////////////////////////////
//
// Remapped grid reference latitude 2.
// This applies only to PROJ_LAMBERT_CONF projections.
// Type: double
//

remap_lat2 = 0;

