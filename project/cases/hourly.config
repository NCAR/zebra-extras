# -*-python-*-
#
# Rasterizer parameters for the hourly rainfall accumulations.
#
# Please just ignore the following, and believe me that it has to be here.
#
import sys
sys.path.append ('.')
sys.path.append ('/usr/lib/python1.4')
sys.path.append ('/usr/lib/python1.4/tkinter')
sys.path.append ('/usr/lib/python1.4/sharedmodules')
from spolutils import *

#
# Set a name for this process to use to connect to the message manager
#
MessageName = "Hourly"

#
# For the time being, "SetField" is used to add a field to be rasterized.
#
# The parameters are:
#	- The DORADE name of the field (what the source data has)
#	- The Zebra name to use for the finished product
#	- A string describing the recorded units for this field
#	- The minimum good data value
#	- The maximum good data value
#
# The data limits are used in the scaling of the data to an eight-bit
# quantity, and should be chosen with care.
#
SetField ('DAC', 'dac', 'mm', 0, 100)
SetField ('ZAC', 'zac', 'mm', 0, 100)
SetField ('HAC', 'hac', 'mm', 0, 100)
SetField ('KAC', 'kac', 'mm', 0, 100)
#
# If thresholding of the data is desired, specify as:
#	Threshold (field, value, type)
# where:
#	FIELD	is the (DORADE) name of field to use for thresholding
#	VALUE	is the key value to use
#	TYPE	tells which data are to be preserved.  Use Thr_Greater
#		to preserve data greater than the threshold value, or
#		Thr_Less to preserve data below that value.
#
# Threshold ('NCP', 0.3, Thr_Greater)

#
# Image resolution.  Default is 1024 square.
#
XRes = 1024
YRes = 1024

#
# How many image sets to use.  Multiple image sets allow the preparation
# and consumption of images to be done in parallel.  When threaded output
# is being used, this value should be at least two, or the threading won't
# happen.  When not threading, one image set is just fine (they are big).
#
ImageSets = 1

#
# Radar location parameters.  These are the location in physical space.
#
RadarLatitude = 37.675
RadarLongitude = -97.5525
RadarAltitude = 0.440	# Kilometers!

#
# You can also specify the location of the radar within the image; the
# default is XRes/2 and YRes/2 (i.e. in the middle of the image).
#
RadarX = XRes/2
RadarY = YRes/2

#
# Rasterization control parameters.
#
Project = 1		# Project PPI's downward to ground
AzimuthFill = .8	# Default width of a beam (on each side)
MinSweep = 15		# Minimum number of beams in a good sweep

#
# Fileinput.  There are three possibilities currently:
#	ProcessFile (file)	Crank an individual file.  Can be given
#				more than once.
#	ProcessDirectory (dir)	Crank all sweep files in this directory
#	WatchDirectory (dir)	Crank all files, then lurk and wait for
#				more to show up
#
# The directory options can only be specified once.  In addition, with
# WatchDirectory, the variable DeleteFiles is queried; if non-zero, files
# will be removed after being rasterized.  Default is to not remove.
#
WatchDirectory ('/zebu/dt/sweepfiles/hourly')
#DeleteFiles = 1
#
# Output parameters
#
# OutputMode is one of the following:
#
#	OM_DataStore	Direct output via zebra data store, multithreaded
#	OM_DSNoThread	Direct output, nonthreaded (useful for debugging)
#	OM_ImageXfr	Output to a consumer, via ImageXfr (not yet impl.)
#
# Only OM_DSNoThread is actually implemented at this time.  The rest is
# vaporware.
#
OutputMode = OM_DSNoThread
Platform = 'precip.hourly'	# The name of the platform to store to
