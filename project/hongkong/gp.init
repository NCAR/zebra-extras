!
! The LANTEX graphics process initialization file.
!

!
! Set some search paths.  'iconpath' includes "./icons" by default,
! so we don't need to set it here.  Likewise 'mappath' includes
! "./maps".  So here we just need to make sure our local modules
! directory is in the require path.
!
set requirepath concat("./modules,",requirepath)

!
! All of the global and generic menus and procedures are in the 
! global module
!
require global

!
! A bunch of stuff for dealing with time series platforms and fields.
!
define widget tseries-middle intmenu 'TSeries Platforms/Fields'
	title 'Time Series Options'
	line
	submenu 'Select Fields' 'tseries-fields'
	line
	submenu 'Select Platforms' 'tseries-plat'
endmenu

define widget tseries-plat intmenu 'TSeries Platforms'
	title 'Select Platforms'
	line
	submenu 'Surface' 'tseries-surface'
endmenu

define widget tseries-surface intmenu 'TSeries Surface'
	title 'Select Surface Station'
	line
	entry 'AWS/LT1' 'toggle_plat aws/LT1' \
        (substring(pd_param(icon_component,"platform","string"),"aws/LT1"))
	entry 'AWS/LT2' 'toggle_plat aws/LT2' \
        (substring(pd_param(icon_component,"platform","string"),"aws/LT2"))
	entry 'AWS/LT3' 'toggle_plat aws/LT3' \
        (substring(pd_param(icon_component,"platform","string"),"aws/LT3"))
	entry 'AWS/LT4' 'toggle_plat aws/LT4' \
        (substring(pd_param(icon_component,"platform","string"),"aws/LT4"))
	entry 'AWS/LT5' 'toggle_plat aws/LT5' \
        (substring(pd_param(icon_component,"platform","string"),"aws/LT5"))
	entry 'AWS/LT6' 'toggle_plat aws/LT6' \
        (substring(pd_param(icon_component,"platform","string"),"aws/LT6"))
	entry 'AWS/LT7' 'toggle_plat aws/LT7' \
        (substring(pd_param(icon_component,"platform","string"),"aws/LT7"))
	entry 'AWS/UST' 'toggle_plat aws/UST' \
        (substring(pd_param(icon_component,"platform","string"),"aws/UST"))
	entry 'AWS/RO' 'toggle_plat aws/RO' \
        (substring(pd_param(icon_component,"platform","string"),"aws/RO"))
	entry 'AWS/SHA' 'toggle_plat aws/SHA' \
        (substring(pd_param(icon_component,"platform","string"),"aws/SHA"))
	entry 'AWS/HIT' 'toggle_plat aws/HIT' \
        (substring(pd_param(icon_component,"platform","string"),"aws/HIT"))
	entry 'AWS/HMZ' 'toggle_plat aws/HMZ' \
        (substring(pd_param(icon_component,"platform","string"),"aws/HMZ"))
	entry 'AWS/LFS' 'toggle_plat aws/LFS' \
        (substring(pd_param(icon_component,"platform","string"),"aws/LFS"))
	entry 'AWS/TKL' 'toggle_plat aws/TKL' \
        (substring(pd_param(icon_component,"platform","string"),"aws/TKL"))
	entry 'AWS/CPH' 'toggle_plat aws/CPH' \
        (substring(pd_param(icon_component,"platform","string"),"aws/CPH"))
	entry 'AWS/TUN' 'toggle_plat aws/TUN' \
        (substring(pd_param(icon_component,"platform","string"),"aws/TUN"))
	entry 'AWS/TMS' 'toggle_plat aws/TMS' \
        (substring(pd_param(icon_component,"platform","string"),"aws/TMS"))
	entry 'AWS/TC' 'toggle_plat aws/TC' \
        (substring(pd_param(icon_component,"platform","string"),"aws/TC"))
	entry 'AWS/SF' 'toggle_plat aws/SF' \
        (substring(pd_param(icon_component,"platform","string"),"aws/SF"))
	entry 'AWS/CSW' 'toggle_plat aws/CSW' \
        (substring(pd_param(icon_component,"platform","string"),"aws/CSW"))
	entry 'AWS/HKS' 'toggle_plat aws/HKS' \
        (substring(pd_param(icon_component,"platform","string"),"aws/HKS"))
	entry 'AWS/UW1' 'toggle_plat aws/UW1' \
        (substring(pd_param(icon_component,"platform","string"),"aws/UW1"))
	entry 'AWS/GI' 'toggle_plat aws/GI' \
        (substring(pd_param(icon_component,"platform","string"),"aws/GI"))
	entry 'AWS/TPO' 'toggle_plat aws/TPO' \
        (substring(pd_param(icon_component,"platform","string"),"aws/TPO"))
	entry 'AWS/JKB' 'toggle_plat aws/JKB' \
        (substring(pd_param(icon_component,"platform","string"),"aws/JKB"))
	entry 'AWS/CCH' 'toggle_plat aws/CCH' \
        (substring(pd_param(icon_component,"platform","string"),"aws/CCH"))
	entry 'AWS/CEN' 'toggle_plat aws/CEN' \
        (substring(pd_param(icon_component,"platform","string"),"aws/CEN"))
	entry 'AWS/KP' 'toggle_plat aws/KP' \
        (substring(pd_param(icon_component,"platform","string"),"aws/KP"))
	entry 'AWS/SHL' 'toggle_plat aws/SHL' \
        (substring(pd_param(icon_component,"platform","string"),"aws/SHL"))
	entry 'AWS/PLC' 'toggle_plat aws/PLC' \
        (substring(pd_param(icon_component,"platform","string"),"aws/PLC"))
	entry 'AWS/KAT' 'toggle_plat aws/KAT' \
        (substring(pd_param(icon_component,"platform","string"),"aws/KAT"))
	entry 'AWS/EPC' 'toggle_plat aws/EPC' \
        (substring(pd_param(icon_component,"platform","string"),"aws/EPC"))
	entry 'AWS/SLW' 'toggle_plat aws/SLW' \
        (substring(pd_param(icon_component,"platform","string"),"aws/SLW"))
	entry 'AWS/SKG' 'toggle_plat aws/SKG' \
        (substring(pd_param(icon_component,"platform","string"),"aws/SKG"))
	entry 'AWS/WCN' 'toggle_plat aws/WCN' \
        (substring(pd_param(icon_component,"platform","string"),"aws/WCN"))
	entry 'AWS/TAP' 'toggle_plat aws/TAP' \
        (substring(pd_param(icon_component,"platform","string"),"aws/TAP"))
endmenu

define widget tseries-fields intmenu 'TSeries Fields'
	title 'Select Fields'
	line
	submenu 'Surface Fields' tseries-surface-fields
endmenu

define widget tseries-surface-fields intmenu 'TSeries Fields'
	title 'Select Fields'
	line
	entry 'Station pressure' 'toggle_field pres' \
	   (substring(pd_param(icon_component, "field", "string"),"pres"))
	entry 'Station max pressure' 'toggle_field pres_max' \
	   (substring(pd_param(icon_component, "field", "string"),"pres_max"))
	entry 'Station min pressure' 'toggle_field pres_min' \
	   (substring(pd_param(icon_component, "field", "string"),"pres_min"))
	entry 'MSL Pressure' 'toggle_field cpres0' \
	   (substring(pd_param(icon_component, "field", "string"),"cpres0"))
	entry 'Temperature' 'toggle_field tdry' \
	   (substring(pd_param(icon_component, "field", "string"),"tdry"))
	entry 'Wet bulb temp' 'toggle_field twet' \
	   (substring(pd_param(icon_component, "field", "string"),"twet"))
	entry 'Relative Humidity' 'toggle_field rh' \
	   (substring(pd_param(icon_component, "field", "string"),"rh"))
	entry 'Dew point' 'toggle_field dp' \
	   (substring(pd_param(icon_component, "field", "string"),"dp"))
	entry 'Mixing ratio' 'toggle_field mr' \
	   (substring(pd_param(icon_component, "field", "string"),"mr"))
	entry 'Potential temp' 'toggle_field pt' \
	   (substring(pd_param(icon_component, "field", "string"),"pt"))
	entry 'Equiv. pot. temp' 'toggle_field ept' \
	   (substring(pd_param(icon_component, "field", "string"),"ept"))
	entry 'Wind speed' 'toggle_field wspd' \
	   (substring(pd_param(icon_component, "field", "string"),"wspd"))
	entry 'Wind speed max' 'toggle_field wspd_max' \
	   (substring(pd_param(icon_component, "field", "string"),"wspd_max"))
	entry 'Wind speed min' 'toggle_field wspd_min' \
	   (substring(pd_param(icon_component, "field", "string"),"wspd_min"))
	entry 'Wind speed sdev' 'toggle_field wspd_sdev' \
	   (substring(pd_param(icon_component, "field", "string"),"wspd_sdev"))
	entry 'Wind dirn' 'toggle_field wdir' \
	   (substring(pd_param(icon_component, "field", "string"),"wdir"))
	entry 'Wind dirn sdev' 'toggle_field wdir_sdev' \
	   (substring(pd_param(icon_component, "field", "string"),"wdir_sdev"))
	entry '1 min rainfall' 'toggle_field raina01' \
	   (substring(pd_param(icon_component, "field", "string"),"raina01"))
	entry 'Solar radiation' 'toggle_field solrad' \
	   (substring(pd_param(icon_component, "field", "string"),"solrad"))
	entry 'Visibility' 'toggle_field vis' \
	   (substring(pd_param(icon_component, "field", "string"),"vis"))
endmenu

!
! Toggle the presence of a given platform.
!
procedure toggle_plat platform string
	local oldplat (pd_param (icon_component, "platform", "string"))
!
! See if it's already there.  If so, we remove.
!
	if (substring (oldplat, platform))
		local newplat substr_remove(oldplat, platform)

! Otherwise we just add it.  If there is a maximum number of platforms,
! though, we have to enforce it.
!
	else
	    local newplat (concat(oldplat, concat (",",platform)))
	    local max pd_param(icon_component,"max-platform","string")
	    if (max <> "(Undefined)")
	    	local imax pd_param(icon_component,"max-platform","integer")
		if (n_occur (newplat, ",") >= imax)
			dm "beep"
			return
		endif
	    endif
	endif
!
! Store the thing.
!
	param #icon_component platform #newplat
endprocedure


!
! Toggle the presence of a given field.
!
procedure toggle_field field string
	local oldfld (pd_param (icon_component, "field", "string"))
!
! See if it's already there.  If so, we remove.
!
	if (substring (oldfld, field))
		local newfld substr_remove(oldfld, field)
!
! Otherwise we just add it.  If there is a maximum number of fields,
! though, we have to enforce it.
!
	else
	    local newfld (concat(oldfld, concat (",",field)))
	    local max pd_param(icon_component,"max-field","string")
	    if (max <> "(Undefined)")
	    	local imax pd_param(icon_component,"max-field","integer")
		if (n_occur (newfld, ",") >= imax)
			dm "beep"
			return
		endif
	    endif
	endif
!
! Store the thing.
!
	param #icon_component field #newfld
endprocedure

