
!
! Used enough places to ensure we've got it now
!
require simple-color
require data-avail

!
! Left button menu for the global component.
!
define widget global-left intmenu 'Global left menu'
	title 'Global Options'
	line
	submenu 'Change Plot Scale' 'ScaleMenu'
	submenu 'Adjust Global Limits' 'adjust_global_limits'
	submenu 'Data Times Platforms' 'data-platforms'
	entry 'Enlarge Window' 'dm "zoom #dm$button_window"'
	entry 'Overlay Times' 'popup overlay'
	entry 'Movie Controller' 'popup movie'
	entry 'Position Readout' 'popup position'
	entry 'Show Bounds in other Window' 'show-bounds'
	submenu 'Movies' movie-control
endmenu

!
! Movie control menu.
!
define widget movie-control intmenu 'movie control'
	title 'Movie Control'
	line
	entry 'Popup Movie Controller' 'popup movie'
	entry 'Run Movie' 'movie run'
	entry 'Stop Movie' 'movie stop'
endmenu

!
! The Global Adjust Limits submenu
!
define widget adjust_global_limits intmenu "Adjust Global Limits"
	entry 'X Limits' 'i_adjust_global x-limit-proc'
	entry 'Y Limits' 'i_adjust_global y-limit-proc'
endmenu

!
! Send our boundaries to another window to be drawn, relies on the
! display manager to choose that other window.  Assume the name of our
! plot description is the name of the window.
!
procedure show-bounds
	local this_window c$msgname
	local dmcmd quote(concat("putc1 p_wbounds platform ",this_window))
	dm #dmcmd
endprocedure

!
! Adjust the limits on the global component.
!
procedure i_adjust_global procparam string
	local proc pd_paramsearch(icon_component,procparam,"global","string")
	if (proc <> "(Undefined)")
		#proc 
	else
		dm "beep"
	endif
endprocedure

!
! The x min max adjuster.
!
procedure adj_x_minmax 
	local xmin pd_paramsearch("global", "x-min", "", "string")
	local xmax pd_paramsearch("global", "x-max", "", "string")
	activate doublefloat "global" "x-min" "X Min: " #xmin \
		"x-max" "X Max: " #xmax
endprocedure

!
! The y min max adjuster.
!
procedure adj_y_minmax 
	local ymin pd_paramsearch("global", "y-min", "", "string")
	local ymax pd_paramsearch("global", "y-max", "", "string")
	activate doublefloat "global" "y-min" "Y Min: " #ymin \
		"y-max" "Y Max: " #ymax
endprocedure

!
! Scales.
!
define widget ScaleMenu intmenu 'scales'
	title 'Scales'
	line
	entry 'Lantau Island' 'DoZoom -15 15 -15 15'
	entry 'Hong Kong Territory' 'DoZoom -30 60 -45 45'
	entry 'Synoptic Scale' 'DoZoom -1600 1600 -1600 1600'
	entry 'The Big Picture' 'DoZoom -3500 1500 -1500 3000'
endmenu

!
! A standard CAP left menu for most platforms, with the addition
! of the menu-platform adjustments
!
define widget lx-cap-left-menu intmenu "leftmenu"
	title 'Overlay Operations'
	line
	entry 'Adjust Limits' 'i_adjust limit-proc'
	entry 'Spatial Offsets' 'require offsets; popup offsets'
	submenu 'Data Platforms' 'data-platforms'
	line
	entry 'Raise to top' 'move #icon_component 0'
	entry 'Move to bottom' 'move #icon_component 1'
	entry 'Disable/reenable' 'ToggleBoolean "disable"' \
		(PDParam(icon_component,"disable") = "true")
	entry 'Remove' 'i_remove_component'
endmenu

!
! Station plots use this but don't define it or require it
!
procedure do_side_annot_show show string
	parameter #icon_component sa-show #show
endprocedure

procedure do_side_annot_size size string
	parameter #icon_component sa-scale #size
endprocedure

!
! Change the endpoints for an associated (presumably cross-section) window.
! We force ourselves to update (by issuing a parameter command but not actually
! changing anything) so that we'll be current if we're displaying the bounds
! of the cross-section window.
!
! This is here and not in xsect module because every window will need it for
! the buttonmap, even if no cross-sections are on the screen
!
procedure ChangeXSect
	drawline sendendpoints

	local ptype PDParam('global', 'plot-type')
	parameter global plot-type #ptype
endprocedure

