#! /bin/sh
#
# Regenerate all of the cache files.

iopdir="/scr/data/iops"

replace_cachefiles()
{
    iops=`find $iopdir -name 'iop_*' -type d -prune`
    for d in $iops ; do
        # Remove the current file first, just in case a running
	# datastore daemon still has it open.
	(set -x ; rm -f $d/$2 ; cp -f $d/$1 $d/$2 )
    done
}


cat <<EOF

There are two sets of Zebra cache files: the 'current working set'
which Zebra uses when its running, and the 'backup set'.  This script
can regenerate the backup set from scratch, update the backup set, or
replace the current working set with the backup set.  Use the latter
option if the backup set is known to be good, and the current set of
cache files is suspected to be corrupt.  This is much faster than
regenerating the current cache files from scratch.

The backup set can be generated and updated while zebra is running on
zebu.  Do not replace the current set unless zebra is stopped.

The current set never needs to be replaced unless it is suspected of
being corrupt.  The current set is always the most up-to-date, because
the zebra datastore keeps updates it while it is running.  When the
current set is replaced by the backup set, zebra will spend extra time
at startup rescanning and updating the new cache files.

If no backup cache files have been generated yet, then the current
cache files will be removed, and they will be regenerated (slowly) the
next time zebra is started.

EOF
echo "Do you want to replace the current cache files with the backups? (y/n)"
read ans
if [ "$ans" == y ]; then
    echo "Are you sure? (y/n)"
    read ans
    if [ "$ans" == y ]; then
	echo "Attempting to replace cache files..."
	replace_cachefiles rescan.cache Zebra.cache
	echo "Done."
	echo "The next time zebra is started it will need to rescan to"
	echo "update the new cache files."
	echo "Press enter."
    else
	echo "Aborted.  Press enter."
    fi
    read ans
    exit 0
fi

cat <<EOF

You can now choose to create new backup cache files from scratch or
update the existing ones.  Zebra can remain running while the backup
cache files are being regenerated.  Once the backup cache files have
been updated, you can run this script again and choose to replace the
current cache files with the backups.

The rescan can take up to an hour to complete.

EOF
echo "Continue (y/n)?"
read ans
if [ "$ans" != 'y' ]; then
    echo "Exiting.  Press enter."
    read ans
    exit 1
fi
cat <<EOF

The backup rescan can be run from scratch, or it can start with the
existing backup cache files and simply update them.  There is no need
to run from scratch unless you know the backup cache files are bad.
Note this step only erases the backup set of cache files and not the
set Zebra is currently using.  If in doubt, choose not to erase the
existing backups.

EOF
echo "Erase the backup cache files and start from scratch? (y/n)" 
read ans
if [ "$ans" == y ]; then
    echo "Searching for cache files to remove..."
    \ls /scr/data/iops/iop*/rescan.cache | while read f ; do
	echo "Removing $f"
	rm -f $f
    done
    echo "Rebuilding cache files..."
else
    echo "Updating cache files..."
fi
export ZEBRA_SOCKET=/tmp/rescan.socket
zstop
rm -f $ZEBRA_SOCKET
cd /net/ops/zebra
message
timer &
EventLogger -n -e &
rm -f rescan.sources rescan.config
./scaniops rescan.cache 10 > rescan.sources
sed -e 's/ds\.sources/rescan.sources/' < ds.config > rescan.config
echo "Starting datastore daemon..."
export DATA_DIR=/scr/data/spol
dsDaemon rescan.config &
sleep 10
dsrescan -all
echo "Please wait..."
sleep 10
# This waits for the daemon to respond again.
if dsrescan -t 3600 null ; then
    echo "Rescan finished."
else
    echo "Problem with the rescan.  It may need to be repeated."
    echo "Press enter."
fi
echo "Stopping zebra session."
zstop
echo "Done.  Press enter."
read ans
exit 0
