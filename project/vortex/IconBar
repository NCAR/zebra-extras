!
! All the definitions required to make the iconbar work.
!
!
! The right way to do this....
!
set ui$bitmap_directory concat(c$libdir, "/icons")



!
! This is the iconbar menu itself.....
!
define widget iconbar menubar " "
	!
	! All this stuff tells the system to put it, unadorned by headers and
	! title bars, where we want it.  DM does "override" by itself now,
	! since this iconbar appears in the display config, so we don't
	! bother with it here.
	!
	noheader
	! size 230 80
	location 100 100
	! vertical
	! override
	!
	! Now we can define the menus themselves.
	!
	menu help bitmap iconbar-help
		title 'Zeb Help Access'
		line
		entry 'Introduction' 'help intro'
		entry 'On-line Topics' 'help index'
!		entry 'Guide to Documentation' 'help documentation'
		entry 'Starting zeb' 'help start'
		entry 'Shutting Down' 'help shut-down'
		entry 'Keys and mouse buttons' 'help keys'
		entry 'The icon bar' 'help iconbar'
		entry 'Editing display configurations' 'help editing-configs'
		line
		entry 'Horizontal plots' 'help horizontal-plots'
		entry 'Skew-t plots' 'help skewt'
		entry 'XYGraph plots' 'help xy-graphs'
		entry 'Cross section plots' 'help cross-section'
	endmenu
	menu tools bitmap tools-big
		title 'Tools'
		line
		entry 'Time Widget'	'popup time'
		entry 'Print Display Widget' 'popup hardcopy'
		line
		entry 'Add Display Window' 'popup newwindow'
		entry 'Delete Display Window' 'popup zorchwindow'
		entry 'Save Display Window' 'popup saveconfig'
		line
		entry 'Data Store display widget' 'shell "dsdwidget &"'
		entry 'Data Store management widget' 'shell "dsmanage &"'
		line
		entry 'Shut down Zeb system' 'shutdown'
	endmenu
	menu configs bitmap configs
		title 'Display configurations'
		line
		entry 'Wide-screen satellite' 'display wide' \
			(dm$config = 'wide')
		entry 'Time series' 'display tseries' \
			(dm$config = 'tseries')
!		entry 'Sounding skew-t plots' 'display skewt' \
!		        (dm$config = 'skewt')
!		entry 'Satellite + sounding + wind profile' \
!			'display ssp' (dm$config = 'ssp')
!		entry 'Model cross-sections' 'display model_xsect' \
!			(dm$config = 'model_xsect')
!		entry 'Sounding cross-sections' 'display snd_xsect' \
!			(dm$config = 'snd_xsect')
		entry 'Empty screen' 'display empty' (dm$config = 'empty')
	endmenu
	menu satellite bitmap satellite
		title 'Satellite Data'
		line
 		entry 'GOES IR' 'putc2 c_goes field ir color-table gray16'
		entry 'GOES Visible' \
			'putc2 c_goes field vis color-table gray16'
	endmenu
	menu aircraft bitmap aircraft
		title 'Aircraft'
		line
		entry 'N43RF belly radar composite' \
			'PutCompX c_ddop platform n43rf_lf'
		line
		entry 'N43RF track' 'PutScalar n43rf alt'
		entry 'Electra (N308D) track' 'PutScalar n308d alt'
	endmenu
	menu radar bitmap radar
		title 'Surface-based Radar'
		line
		entry 'WSI Nowrad composite' \
			'PutCompX c_nowrad platform nowrad'
		entry 'NEXRAD level 3 composite' 'putc0 p_composite'
		entry 'KFDR' 'putc2 p_polar platform kfdr field dz'
	endmenu
	menu surface bitmap surface
	     	title 'Surface observations'
		line
		entry 'NWS station plot' \
			'putc2 p_station platform nws_sfc quad1 temp'
	endmenu
	menu model bitmap 3dgrid
		title 'Model Data'
		line
		entry 'Eta winds' \
			'ModelWindsAdd eta orange 1'
		entry 'Eta contours' \
			'ModelAdd eta t orange'
	endmenu
	menu 'overlays' bitmap overlays
		title 'Static Overlays'
		line
		entry 'Cities' \
	'putc1 p_loc platform norman,kellerville,allison,friona,dimmitt'
		entry 'State Boundaries' \
			'putc2 p_map platform states icon state_map'
		entry 'County Boundaries' \
			'putc2 p_map platform counties icon county_map'
		entry 'Radar locations' 'putc0 p_radar_locs'
		submenu 'VORs By State' 'VORS-by-state'
		entry 'X-Y Grid (km)' \
			'putc3 p_kmgrid x-spacing 50 y-spacing 50 color cyan'
		entry 'Lat/Lon Grid' \
			'putc3 p_llgrid x-spacing 60 y-spacing 60 color cyan'
		entry 'One-hour flight rings' 'put_component c_rings'
	endmenu
enddef


!
! VORs by state
!
define widget VORS-by-state intmenu 'VORlocs'
	title 'VOR Locations'
	line
	entry 'Oklahoma' \
		'putc2 c_vor icon vor_OK platform CIM,NOR,GAG,WWR,LTS,PNC,OKC,ADM,TUL,MLC'
	entry 'Texas' \
		'putc2 c_vor icon vor_TX platform CVM,MAF,LBB,PVW,AMA,SJT,CDS,ABI,JCT,HDO,SPS,SEP,AUS,FTW,DAL,ACT,CRP,VCT,GGG,GLS,ELP'
	entry 'Kansas' \
		'putc2 c_vor icon vor_KS platform GLD,GCK,DDC,HLC,GBD,CNK,ICT,MHK,EMP,TOP,CNU'
	line
	entry 'Colorado/New Mexico' \
		'putc2 c_vor icon vor_CO_NM platform GJT,DRO,CAG,ASE,DEN,COS,GUP,LRU,ABQ,LVS,ROW'
	 entry 'Nebraska/Iowa' \
		'putc2 c_vor icon vor_NE_IA platform SNY,AIA,LBF,MCK,VTN,GRI,OFK,LNK,BIE,OMA,CYS,CDR,SUX,FOD,DSM,MCW,ALO,OTM,CID,DBQ,BRL'
	entry 'Missouri/Illinois' \
		'putc2 c_vor icon vor_MO_IL platform MCI,JLN,UMN,IRK,COU,STL,MLI,PIA,SPI,RFD,MMO,SLO'
	entry 'Arkansas/Louisiana' \
		'putc2 c_vor icon vor_AR_LA platform FSM,FYV,TXK,HOT,ELD,LIT,PBF,SHV,LCH,ESF,MLU'
endmenu


!
! Add basic model data: ModelAdd <platform> <field> <color>
!
procedure ModelAdd plat string field string color string
        parameter p_model p_model platform #plat
        parameter p_model p_model icon #plat
	parameter p_model p_model field #field
        parameter p_model p_model color #color
        parameter p_model p_model altitude-control true
        sendout p_model 'pick'
	if (plat = 'ecmwf' or plat = 'ecmwf_sfc')
	  	parameter #target_win p_model require ecmwf
	endif
endprocedure

!
! Add model winds data: ModelWindsAdd <platform> <icon> <color> <degrade>
!
procedure ModelWindsAdd plat string color string degrade string
        local iconname concat(plat,"_winds")
        parameter p_model_winds p_model_winds platform #plat
        parameter p_model_winds p_model_winds icon #iconname
        parameter p_model_winds p_model_winds color #color
        parameter p_model_winds p_model_winds degrade #degrade
        parameter p_model_winds p_model_winds u-field u_wind
	parameter p_model_winds p_model_winds v-field v_wind
        parameter p_model_winds p_model_winds altitude-control true
        sendout p_model_winds 'pick'
	if (plat = 'ecmwf' or plat = 'ecmwf_sfc')
	  	parameter #target_win p_model require ecmwf
	endif
endprocedure

!
! Add surface-only model data: SfcModelAdd <platform> <field> <color>
! (This is like ModelAdd above, except we turn off altitude-control)
!
procedure SfcModelAdd plat string field string color string
        parameter p_model p_model platform #plat
        parameter p_model p_model icon #plat
        parameter p_model p_model color #color
        parameter p_model p_model field #field
        parameter p_model p_model altitude-control false
        sendout p_model 'pick'
	if (plat = 'ecmwf' or plat = 'ecmwf_sfc')
	  	parameter #target_win p_model require ecmwf
	endif
endprocedure

!
! Add surface winds model data: SfcModelWindsAdd <platform> <color> <degrade>
! (This is like ModelWindsAdd above, except we turn off altitude-control)
!
procedure SfcModelWindsAdd plat string color string degrade string
        local iconname concat(plat,"_winds")
        parameter p_model_winds p_model_winds platform #plat
        parameter p_model_winds p_model_winds icon #iconname
        parameter p_model_winds p_model_winds color #color
        parameter p_model_winds p_model_winds degrade #degrade
        parameter p_model_winds p_model_winds u-field u_wind_10m
	parameter p_model_winds p_model_winds v-field v_wind_10m
        parameter p_model_winds p_model_winds altitude-control false
        sendout p_model_winds 'pick'
	if (plat = 'ecmwf' or plat = 'ecmwf_sfc')
	  	parameter #target_win p_model require ecmwf
	endif
endprocedure


procedure RadarAdd plat string
	set target_win "none"
	pickwin target_win
	if (target_win = "none")	! They picked root or something
		beep
		return
	endif
	parameter c_ship_radar c_ship_radar platform #plat
	parameter #target_win global radar-space true
	sendout c_ship_radar #target_win
endprocedure

!
! Location variables for long stuff.  DO NOT PUT SPACES IN THESE STRINGS or
! unpleasant things will happen to you.
!
set SndLocs1 'chuuk,darwin,gove,guam,'
set SndLocs2 'hongkong,hakuho_maru,korror,'
set SndLocs3 'moana_wave,kwajalein,majuro,'
set SndLocs4 'misima,pohnpei,santacruz,singapore,yap,natsu,dc8a,dc8b,p3a,p3b'
set SndLocs concat4(SndLocs1,SndLocs2,SndLocs3,SndLocs4)

!
! Add an iss location overlay if one isn't already there.
!
procedure SendLocs type string
	if (type = 'sounding')
		parameter p_active_loc p_active_loc location-time observation
		putc3 p_active_loc platform #SndLocs icon sounding-small \
			time-label true
	elseif (type = 'profiler')
		putc2 p_active_loc platform #ProfLocs icon prof-sm
	elseif (type = 'rass')
		putc2 p_active_loc platform #RASSlocs icon rass-sm
	elseif (type = 'station')
	        putc2 p_station platform #isssurf icon iss-iss-small
	endif
	parameter p_active_loc p_active_loc location-time point
!
! Now we have to drop in an ISS overlay too, if one doesn't already 
! exist.
!
	if (target_win = 'none')
		return
	endif
	parameter #target_win global plot-hold true
	local comps pd_complist(target_win)
	foreach comp #comps
	!
	! Key on the iss-loc icon, which is kludgy but easy.
	!
		if (PDParam(target_win,comp,'icon') = 'iss-loc')
			parameter #target_win global plot-hold false
			return
		endif
	endfor
	sendout tc_iss_loc #target_win
	parameter #target_win global plot-hold false
endprocedure


!
! The simple case: add a component to a window with no changes.
!
procedure put_component name string
!
! Get the target window.
!
	set target_win "none"
	pickwin target_win
	if (target_win = "none")	! They picked root or something
		beep
		return
	endif
!
! If this component is already present in the window, remove it.  Otherwise
! put it in.
!
	if (pd_defined (target_win, name, "platform"))
		message 'Already there'
		remove #target_win #name
	else
		add #name #name #target_win
	endif
endprocedure



!
! Add a component to a window, changing the field name.
!
procedure PutCompField comp string field string
!
! Get the target window.
!
	set target_win "none"
	pickwin target_win
	if (target_win = "none")	! They picked root or something
		beep
		return
	endif
	sound chord
!
! Send the stuff over.
!
	parameter #comp #comp "field" #field
	add #comp #comp #target_win
endprocedure


!
! Add a component to a window, changing the field name.  This version puts
! the component at the bottom of the stack.
!
procedure PutBCompField comp string field string radarspace string
!
! Get the target window.
!
	set target_win "none"
	pickwin target_win
	if (target_win = "none")	! They picked root or something
		beep
		return
	endif
	sound chord
!
! If the component is already in the window, just change the field.
!
	if (pd_defined (target_win, comp, "platform"))
		parameter #target_win #comp "field" #field
!
! Otherwise change the field *in DM* to avoid making the GP draw twice,
! then send it over.
!
	else
		parameter #comp #comp "field" #field
		add #comp #comp #target_win 1
	!
	!  Take care of the radar-space parameter.
	!
		parameter #target_win "global" "radar-space" #radarspace
	endif
endprocedure


!
! Remove a component from a window.
!
procedure ZapComp comp string
!
! Get the target window.
!
	set target_win "none"
	pickwin target_win
	if (target_win = "none")	! They picked root or something
		beep
		return
	endif
!
! If this component truly exists in the window, get rid of it.
!
	if (pd_defined (target_win, comp, "platform"))
		remove #target_win #comp
	endif
endprocedure



!
! Put in window bounds.
!
procedure put_wbounds comp string
!
! Get the window we want to see.
!
	set wbounds_win "none"
	pickwin wbounds_win
	if (wbounds_win = "none")
		beep
		return
	endif
!
! And now the place where it goes.
!
	set target_win "none"
	pickwin target_win
	if (target_win = "none")
		beep
		return
	endif
!
! Fix up the component and ship it over.
!
	parameter #comp #comp platform #wbounds_win
	add #comp #comp #target_win
endprocedure

!
! Add a component to a window, changing an arbitrary parameter.
!
procedure PutCompX comp string param string value string
!
! Get the target window.
!
	set target_win "none"
	pickwin target_win
	if (target_win = "none")	! They picked root or something
		beep
		return
	endif
	sound chord

	parameter #comp #comp #param #value
	add #comp #comp #target_win
endprocedure
